# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Chronicle.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 0.00% complete, ETA 01:09:36
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 728 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 632, 728, 824, 824, 824, 824, 824, 824 ms/op
# Warmup Iteration   2: n = 2, mean = 575 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 564, 575, 585, 585, 585, 585, 585, 585 ms/op
# Warmup Iteration   3: n = 2, mean = 551 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 547, 551, 555, 555, 555, 555, 555, 555 ms/op
Iteration   1: n = 2, mean = 552 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 551, 552, 554, 554, 554, 554, 554, 554 ms/op
Iteration   2: n = 2, mean = 542 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 536, 542, 548, 548, 548, 548, 548, 548 ms/op
Iteration   3: 
Bytes	before-close	116785152	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	116785152	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 2, mean = 553 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 551, 553, 555, 555, 555, 555, 555, 555 ms/op

# Run progress: 0.14% complete, ETA 01:55:54
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 774 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 721, 774, 826, 826, 826, 826, 826, 826 ms/op
# Warmup Iteration   2: n = 2, mean = 639 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 588, 639, 690, 690, 690, 690, 690, 690 ms/op
# Warmup Iteration   3: n = 2, mean = 617 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 564, 617, 670, 670, 670, 670, 670, 670 ms/op
Iteration   1: n = 2, mean = 582 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 547, 582, 618, 618, 618, 618, 618, 618 ms/op
Iteration   2: n = 2, mean = 567 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 559, 567, 575, 575, 575, 575, 575, 575 ms/op
Iteration   3: 
Bytes	before-close	116785152	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	116785152	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 2, mean = 646 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 603, 646, 690, 690, 690, 690, 690, 690 ms/op

# Run progress: 0.29% complete, ETA 01:58:35
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 741 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 617, 741, 865, 865, 865, 865, 865, 865 ms/op
# Warmup Iteration   2: n = 2, mean = 690 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 644, 690, 736, 736, 736, 736, 736, 736 ms/op
# Warmup Iteration   3: n = 2, mean = 612 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 609, 612, 614, 614, 614, 614, 614, 614 ms/op
Iteration   1: n = 2, mean = 674 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 616, 674, 733, 733, 733, 733, 733, 733 ms/op
Iteration   2: n = 2, mean = 606 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 597, 606, 616, 616, 616, 616, 616, 616 ms/op
Iteration   3: 
Bytes	before-close	116785152	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	116785152	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 2, mean = 802 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 727, 802, 878, 878, 878, 878, 878, 878 ms/op


Result "readKey":
  N = 18
  mean =    613.912 ±(99.9%) 83.947 ms/op

  Histogram, ms/op:
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 3 
    [550.000, 575.000) = 6 
    [575.000, 600.000) = 1 
    [600.000, 625.000) = 4 
    [625.000, 650.000) = 0 
    [650.000, 675.000) = 0 
    [675.000, 700.000) = 1 
    [700.000, 725.000) = 0 
    [725.000, 750.000) = 2 
    [750.000, 775.000) = 0 
    [775.000, 800.000) = 0 
    [800.000, 825.000) = 0 
    [825.000, 850.000) = 0 
    [850.000, 875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    536.347 ms/op
     p(50.0000) =    585.630 ms/op
     p(90.0000) =    747.425 ms/op
     p(95.0000) =    877.658 ms/op
     p(99.0000) =    877.658 ms/op
     p(99.9000) =    877.658 ms/op
     p(99.9900) =    877.658 ms/op
     p(99.9990) =    877.658 ms/op
     p(99.9999) =    877.658 ms/op
    p(100.0000) =    877.658 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Chronicle.readKey
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 0.43% complete, ETA 02:01:43
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 693 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 588, 693, 798, 798, 798, 798, 798, 798 ms/op
# Warmup Iteration   2: n = 2, mean = 604 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 602, 604, 606, 606, 606, 606, 606, 606 ms/op
# Warmup Iteration   3: n = 2, mean = 660 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 603, 660, 716, 716, 716, 716, 716, 716 ms/op
Iteration   1: n = 2, mean = 657 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 574, 657, 740, 740, 740, 740, 740, 740 ms/op
Iteration   2: n = 2, mean = 655 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 601, 655, 710, 710, 710, 710, 710, 710 ms/op
Iteration   3: 
Bytes	before-close	116801536	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	116801536	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 2, mean = 580 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 577, 580, 583, 583, 583, 583, 583, 583 ms/op

# Run progress: 0.57% complete, ETA 02:02:19
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 789 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 696, 789, 882, 882, 882, 882, 882, 882 ms/op
# Warmup Iteration   2: n = 2, mean = 759 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 756, 759, 762, 762, 762, 762, 762, 762 ms/op
# Warmup Iteration   3: n = 2, mean = 712 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 641, 712, 783, 783, 783, 783, 783, 783 ms/op
Iteration   1: n = 2, mean = 685 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 608, 685, 761, 761, 761, 761, 761, 761 ms/op
Iteration   2: n = 2, mean = 700 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 682, 700, 718, 718, 718, 718, 718, 718 ms/op
Iteration   3: 
Bytes	before-close	116785152	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	116785152	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 2, mean = 575 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 560, 575, 590, 590, 590, 590, 590, 590 ms/op

# Run progress: 0.72% complete, ETA 02:04:13
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 674 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 569, 674, 779, 779, 779, 779, 779, 779 ms/op
# Warmup Iteration   2: n = 2, mean = 533 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 533, 533, 534, 534, 534, 534, 534, 534 ms/op
# Warmup Iteration   3: n = 2, mean = 675 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 667, 675, 683, 683, 683, 683, 683, 683 ms/op
Iteration   1: n = 2, mean = 683 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 599, 683, 768, 768, 768, 768, 768, 768 ms/op
Iteration   2: n = 2, mean = 535 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 526, 535, 543, 543, 543, 543, 543, 543 ms/op
Iteration   3: 
Bytes	before-close	116785152	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	116785152	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 2, mean = 641 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 587, 641, 694, 694, 694, 694, 694, 694 ms/op


Result "readKey":
  N = 18
  mean =    634.505 ±(99.9%) 73.808 ms/op

  Histogram, ms/op:
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 2 
    [550.000, 575.000) = 2 
    [575.000, 600.000) = 5 
    [600.000, 625.000) = 2 
    [625.000, 650.000) = 0 
    [650.000, 675.000) = 0 
    [675.000, 700.000) = 2 
    [700.000, 725.000) = 2 
    [725.000, 750.000) = 1 
    [750.000, 775.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    526.385 ms/op
     p(50.0000) =    599.785 ms/op
     p(90.0000) =    761.895 ms/op
     p(95.0000) =    767.558 ms/op
     p(99.0000) =    767.558 ms/op
     p(99.9000) =    767.558 ms/op
     p(99.9900) =    767.558 ms/op
     p(99.9990) =    767.558 ms/op
     p(99.9999) =    767.558 ms/op
    p(100.0000) =    767.558 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Chronicle.readKey
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 0.86% complete, ETA 02:03:36
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177 ms/op
# Warmup Iteration   2: n = 2, mean = 822 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 808, 822, 835, 835, 835, 835, 835, 835 ms/op
# Warmup Iteration   3: n = 2, mean = 898 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 818, 898, 977, 977, 977, 977, 977, 977 ms/op
Iteration   1: n = 2, mean = 857 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 802, 857, 912, 912, 912, 912, 912, 912 ms/op
Iteration   2: n = 2, mean = 847 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 795, 847, 899, 899, 899, 899, 899, 899 ms/op
Iteration   3: 
Bytes	before-close	128774144	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	128774144	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 2, mean = 857 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 769, 857, 945, 945, 945, 945, 945, 945 ms/op

# Run progress: 1.01% complete, ETA 02:06:34
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1061 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061 ms/op
# Warmup Iteration   2: n = 2, mean = 881 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 819, 881, 943, 943, 943, 943, 943, 943 ms/op
# Warmup Iteration   3: n = 2, mean = 880 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 777, 880, 984, 984, 984, 984, 984, 984 ms/op
Iteration   1: n = 1, mean = 1017 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017 ms/op
Iteration   2: n = 2, mean = 936 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 934, 936, 937, 937, 937, 937, 937, 937 ms/op
Iteration   3: 
Bytes	before-close	128774144	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	128774144	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 2, mean = 858 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 849, 858, 866, 866, 866, 866, 866, 866 ms/op

# Run progress: 1.15% complete, ETA 02:08:38
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126 ms/op
# Warmup Iteration   2: n = 2, mean = 723 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 720, 723, 726, 726, 726, 726, 726, 726 ms/op
# Warmup Iteration   3: n = 2, mean = 870 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 800, 870, 941, 941, 941, 941, 941, 941 ms/op
Iteration   1: n = 2, mean = 732 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 719, 732, 744, 744, 744, 744, 744, 744 ms/op
Iteration   2: n = 2, mean = 773 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 759, 773, 787, 787, 787, 787, 787, 787 ms/op
Iteration   3: 
Bytes	before-close	128774144	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	128774144	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 2, mean = 717 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 716, 717, 717, 717, 717, 717, 717, 717 ms/op


Result "readKey":
  N = 17
  mean =    833.495 ±(99.9%) 91.540 ms/op

  Histogram, ms/op:
    [ 700.000,  725.000) = 3 
    [ 725.000,  750.000) = 1 
    [ 750.000,  775.000) = 2 
    [ 775.000,  800.000) = 2 
    [ 800.000,  825.000) = 1 
    [ 825.000,  850.000) = 1 
    [ 850.000,  875.000) = 1 
    [ 875.000,  900.000) = 1 
    [ 900.000,  925.000) = 1 
    [ 925.000,  950.000) = 3 
    [ 950.000,  975.000) = 0 
    [ 975.000, 1000.000) = 0 
    [1000.000, 1025.000) = 1 
    [1025.000, 1050.000) = 0 
    [1050.000, 1075.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    716.177 ms/op
     p(50.0000) =    802.161 ms/op
     p(90.0000) =    959.237 ms/op
     p(95.0000) =   1017.119 ms/op
     p(99.0000) =   1017.119 ms/op
     p(99.9000) =   1017.119 ms/op
     p(99.9900) =   1017.119 ms/op
     p(99.9990) =   1017.119 ms/op
     p(99.9999) =   1017.119 ms/op
    p(100.0000) =   1017.119 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Chronicle.readKey
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 1.29% complete, ETA 02:09:18
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 972 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 903, 972, 1040, 1040, 1040, 1040, 1040, 1040 ms/op
# Warmup Iteration   2: n = 2, mean = 860 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 775, 860, 945, 945, 945, 945, 945, 945 ms/op
# Warmup Iteration   3: n = 2, mean = 762 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 756, 762, 768, 768, 768, 768, 768, 768 ms/op
Iteration   1: n = 1, mean = 1032 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032 ms/op
Iteration   2: n = 1, mean = 1105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105 ms/op
Iteration   3: 
Bytes	before-close	128786432	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	128786432	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 1060 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060 ms/op

# Run progress: 1.44% complete, ETA 02:09:50
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101 ms/op
# Warmup Iteration   2: n = 2, mean = 892 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 821, 892, 963, 963, 963, 963, 963, 963 ms/op
# Warmup Iteration   3: n = 1, mean = 1017 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017 ms/op
Iteration   1: n = 1, mean = 1020 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020 ms/op
Iteration   2: n = 1, mean = 1105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105 ms/op
Iteration   3: 
Bytes	before-close	128811008	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	128811008	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 2, mean = 846 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 840, 846, 852, 852, 852, 852, 852, 852 ms/op

# Run progress: 1.58% complete, ETA 02:09:32
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105 ms/op
# Warmup Iteration   2: n = 2, mean = 841 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 830, 841, 852, 852, 852, 852, 852, 852 ms/op
# Warmup Iteration   3: n = 2, mean = 936 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 900, 936, 973, 973, 973, 973, 973, 973 ms/op
Iteration   1: n = 2, mean = 936 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 927, 936, 945, 945, 945, 945, 945, 945 ms/op
Iteration   2: n = 2, mean = 847 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 825, 847, 868, 868, 868, 868, 868, 868 ms/op
Iteration   3: 
Bytes	before-close	128782336	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	128782336	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 2, mean = 837 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 753, 837, 921, 921, 921, 921, 921, 921 ms/op


Result "readKey":
  N = 13
  mean =    942.589 ±(99.9%) 136.266 ms/op

  Histogram, ms/op:
    [ 700.000,  750.000) = 0 
    [ 750.000,  800.000) = 1 
    [ 800.000,  850.000) = 2 
    [ 850.000,  900.000) = 2 
    [ 900.000,  950.000) = 3 
    [ 950.000, 1000.000) = 0 
    [1000.000, 1050.000) = 2 
    [1050.000, 1100.000) = 1 
    [1100.000, 1150.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    752.878 ms/op
     p(50.0000) =    926.941 ms/op
     p(90.0000) =   1105.199 ms/op
     p(95.0000) =   1105.199 ms/op
     p(99.0000) =   1105.199 ms/op
     p(99.9000) =   1105.199 ms/op
     p(99.9900) =   1105.199 ms/op
     p(99.9990) =   1105.199 ms/op
     p(99.9999) =   1105.199 ms/op
    p(100.0000) =   1105.199 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Chronicle.write
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 1.72% complete, ETA 02:10:50
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135 ms/op
# Warmup Iteration   2: n = 2, mean = 671 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 657, 671, 684, 684, 684, 684, 684, 684 ms/op
# Warmup Iteration   3: n = 2, mean = 664 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 651, 664, 677, 677, 677, 677, 677, 677 ms/op
Iteration   1: n = 2, mean = 830 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 789, 830, 872, 872, 872, 872, 872, 872 ms/op
Iteration   2: n = 2, mean = 826 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 816, 826, 836, 836, 836, 836, 836, 836 ms/op
Iteration   3: n = 2, mean = 875 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 829, 875, 920, 920, 920, 920, 920, 920 ms/op

# Run progress: 1.87% complete, ETA 02:09:43
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1036 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036 ms/op
# Warmup Iteration   2: n = 2, mean = 850 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 846, 850, 855, 855, 855, 855, 855, 855 ms/op
# Warmup Iteration   3: n = 2, mean = 751 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 713, 751, 790, 790, 790, 790, 790, 790 ms/op
Iteration   1: n = 2, mean = 828 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 720, 828, 936, 936, 936, 936, 936, 936 ms/op
Iteration   2: n = 2, mean = 726 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 714, 726, 738, 738, 738, 738, 738, 738 ms/op
Iteration   3: n = 2, mean = 965 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 953, 965, 977, 977, 977, 977, 977, 977 ms/op

# Run progress: 2.01% complete, ETA 02:08:58
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1353 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353 ms/op
# Warmup Iteration   2: n = 2, mean = 977 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 908, 977, 1046, 1046, 1046, 1046, 1046, 1046 ms/op
# Warmup Iteration   3: n = 2, mean = 768 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 758, 768, 777, 777, 777, 777, 777, 777 ms/op
Iteration   1: n = 2, mean = 741 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 735, 741, 747, 747, 747, 747, 747, 747 ms/op
Iteration   2: n = 2, mean = 736 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 731, 736, 741, 741, 741, 741, 741, 741 ms/op
Iteration   3: n = 2, mean = 1003 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 972, 1003, 1034, 1034, 1034, 1034, 1034, 1034 ms/op


Result "write":
  N = 18
  mean =    836.705 ±(99.9%) 98.397 ms/op

  Histogram, ms/op:
    [ 700.000,  725.000) = 2 
    [ 725.000,  750.000) = 5 
    [ 750.000,  775.000) = 0 
    [ 775.000,  800.000) = 1 
    [ 800.000,  825.000) = 1 
    [ 825.000,  850.000) = 2 
    [ 850.000,  875.000) = 1 
    [ 875.000,  900.000) = 0 
    [ 900.000,  925.000) = 1 
    [ 925.000,  950.000) = 1 
    [ 950.000,  975.000) = 2 
    [ 975.000, 1000.000) = 1 
    [1000.000, 1025.000) = 0 
    [1025.000, 1050.000) = 1 
    [1050.000, 1075.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    714.080 ms/op
     p(50.0000) =    822.608 ms/op
     p(90.0000) =    982.935 ms/op
     p(95.0000) =   1033.896 ms/op
     p(99.0000) =   1033.896 ms/op
     p(99.9000) =   1033.896 ms/op
     p(99.9900) =   1033.896 ms/op
     p(99.9990) =   1033.896 ms/op
     p(99.9999) =   1033.896 ms/op
    p(100.0000) =   1033.896 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Chronicle.write
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 2.16% complete, ETA 02:08:50
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1260 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260 ms/op
# Warmup Iteration   2: n = 1, mean = 907 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 907, 907, 907, 907, 907, 907, 907, 907 ms/op
# Warmup Iteration   3: n = 2, mean = 887 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 842, 887, 931, 931, 931, 931, 931, 931 ms/op
Iteration   1: n = 2, mean = 697 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 682, 697, 712, 712, 712, 712, 712, 712 ms/op
Iteration   2: n = 2, mean = 751 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 684, 751, 819, 819, 819, 819, 819, 819 ms/op
Iteration   3: n = 2, mean = 908 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 889, 908, 926, 926, 926, 926, 926, 926 ms/op

# Run progress: 2.30% complete, ETA 02:08:17
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103 ms/op
# Warmup Iteration   2: n = 2, mean = 811 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 784, 811, 838, 838, 838, 838, 838, 838 ms/op
# Warmup Iteration   3: n = 1, mean = 1052 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052 ms/op
Iteration   1: n = 1, mean = 904 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 904, 904, 904, 904, 904, 904, 904, 904 ms/op
Iteration   2: n = 1, mean = 962 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 962, 962, 962, 962, 962, 962, 962, 962 ms/op
Iteration   3: n = 2, mean = 989 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 897, 989, 1082, 1082, 1082, 1082, 1082, 1082 ms/op

# Run progress: 2.44% complete, ETA 02:06:58
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1283 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283 ms/op
# Warmup Iteration   2: n = 1, mean = 993 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 993, 993, 993, 993, 993, 993, 993, 993 ms/op
# Warmup Iteration   3: n = 1, mean = 1006 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006 ms/op
Iteration   1: n = 1, mean = 1035 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035 ms/op
Iteration   2: n = 2, mean = 940 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 814, 940, 1066, 1066, 1066, 1066, 1066, 1066 ms/op
Iteration   3: n = 1, mean = 1053 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053 ms/op


Result "write":
  N = 14
  mean =    894.510 ±(99.9%) 156.581 ms/op

  Histogram, ms/op:
    [ 600.000,  650.000) = 0 
    [ 650.000,  700.000) = 2 
    [ 700.000,  750.000) = 1 
    [ 750.000,  800.000) = 0 
    [ 800.000,  850.000) = 2 
    [ 850.000,  900.000) = 2 
    [ 900.000,  950.000) = 2 
    [ 950.000, 1000.000) = 1 
    [1000.000, 1050.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    681.574 ms/op
     p(50.0000) =    900.202 ms/op
     p(90.0000) =   1074.266 ms/op
     p(95.0000) =   1082.130 ms/op
     p(99.0000) =   1082.130 ms/op
     p(99.9000) =   1082.130 ms/op
     p(99.9900) =   1082.130 ms/op
     p(99.9990) =   1082.130 ms/op
     p(99.9999) =   1082.130 ms/op
    p(100.0000) =   1082.130 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Chronicle.write
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 2.59% complete, ETA 02:05:22
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1596 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596 ms/op
# Warmup Iteration   2: n = 2, mean = 1074 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 976, 1074, 1172, 1172, 1172, 1172, 1172, 1172 ms/op
# Warmup Iteration   3: n = 1, mean = 1323 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323 ms/op
Iteration   1: n = 1, mean = 1126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126 ms/op
Iteration   2: n = 1, mean = 1290 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290 ms/op
Iteration   3: n = 1, mean = 1073 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073 ms/op

# Run progress: 2.73% complete, ETA 02:04:30
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1447 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447 ms/op
# Warmup Iteration   2: n = 2, mean = 1074 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 970, 1074, 1179, 1179, 1179, 1179, 1179, 1179 ms/op
# Warmup Iteration   3: n = 1, mean = 1088 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088 ms/op
Iteration   1: n = 1, mean = 1114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114 ms/op
Iteration   2: n = 1, mean = 1208 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208 ms/op
Iteration   3: n = 1, mean = 1006 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006 ms/op

# Run progress: 2.87% complete, ETA 02:03:27
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1499 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499 ms/op
# Warmup Iteration   2: n = 2, mean = 988 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 890, 988, 1086, 1086, 1086, 1086, 1086, 1086 ms/op
# Warmup Iteration   3: n = 1, mean = 1149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149 ms/op
Iteration   1: n = 1, mean = 1168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168 ms/op
Iteration   2: n = 1, mean = 1118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118 ms/op
Iteration   3: n = 2, mean = 1026 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 975, 1026, 1076, 1076, 1076, 1076, 1076, 1076 ms/op


Result "write":
  N = 10
  mean =   1115.265 ±(99.9%) 139.822 ms/op

  Histogram, ms/op:
    [ 900.000,  925.000) = 0 
    [ 925.000,  950.000) = 0 
    [ 950.000,  975.000) = 0 
    [ 975.000, 1000.000) = 1 
    [1000.000, 1025.000) = 1 
    [1025.000, 1050.000) = 0 
    [1050.000, 1075.000) = 1 
    [1075.000, 1100.000) = 1 
    [1100.000, 1125.000) = 2 
    [1125.000, 1150.000) = 1 
    [1150.000, 1175.000) = 1 
    [1175.000, 1200.000) = 0 
    [1200.000, 1225.000) = 1 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    975.176 ms/op
     p(50.0000) =   1115.685 ms/op
     p(90.0000) =   1281.570 ms/op
     p(95.0000) =   1289.748 ms/op
     p(99.0000) =   1289.748 ms/op
     p(99.9000) =   1289.748 ms/op
     p(99.9900) =   1289.748 ms/op
     p(99.9990) =   1289.748 ms/op
     p(99.9999) =   1289.748 ms/op
    p(100.0000) =   1289.748 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Chronicle.write
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 3.02% complete, ETA 02:02:59
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1571 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571 ms/op
# Warmup Iteration   2: n = 1, mean = 1095 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095 ms/op
# Warmup Iteration   3: n = 1, mean = 1124 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124 ms/op
Iteration   1: n = 1, mean = 1239 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239 ms/op
Iteration   2: n = 1, mean = 1088 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088 ms/op
Iteration   3: n = 1, mean = 1290 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290 ms/op

# Run progress: 3.16% complete, ETA 02:01:58
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1353 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353 ms/op
# Warmup Iteration   2: n = 1, mean = 1064 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064 ms/op
# Warmup Iteration   3: n = 1, mean = 1023 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023 ms/op
Iteration   1: n = 1, mean = 1208 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208 ms/op
Iteration   2: n = 1, mean = 1269 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269 ms/op
Iteration   3: n = 1, mean = 1200 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200 ms/op

# Run progress: 3.30% complete, ETA 02:00:53
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1560 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560 ms/op
# Warmup Iteration   2: n = 1, mean = 1066 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066 ms/op
# Warmup Iteration   3: n = 1, mean = 1351 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351 ms/op
Iteration   1: n = 1, mean = 973 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 973, 973, 973, 973, 973, 973, 973, 973 ms/op
Iteration   2: n = 1, mean = 1216 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216 ms/op
Iteration   3: n = 1, mean = 1200 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200 ms/op


Result "write":
  N = 9
  mean =   1186.988 ±(99.9%) 164.958 ms/op

  Histogram, ms/op:
    [ 900.000,  925.000) = 0 
    [ 925.000,  950.000) = 0 
    [ 950.000,  975.000) = 1 
    [ 975.000, 1000.000) = 0 
    [1000.000, 1025.000) = 0 
    [1025.000, 1050.000) = 0 
    [1050.000, 1075.000) = 0 
    [1075.000, 1100.000) = 1 
    [1100.000, 1125.000) = 0 
    [1125.000, 1150.000) = 0 
    [1150.000, 1175.000) = 0 
    [1175.000, 1200.000) = 2 
    [1200.000, 1225.000) = 2 
    [1225.000, 1250.000) = 1 
    [1250.000, 1275.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    973.079 ms/op
     p(50.0000) =   1207.960 ms/op
     p(90.0000) =   1289.748 ms/op
     p(95.0000) =   1289.748 ms/op
     p(99.0000) =   1289.748 ms/op
     p(99.9000) =   1289.748 ms/op
     p(99.9900) =   1289.748 ms/op
     p(99.9990) =   1289.748 ms/op
     p(99.9999) =   1289.748 ms/op
    p(100.0000) =   1289.748 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 3.45% complete, ETA 01:59:53
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1323 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323 ms/op
# Warmup Iteration   2: n = 1, mean = 1506 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506 ms/op
# Warmup Iteration   3: n = 1, mean = 1451 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451 ms/op
Iteration   1: n = 1, mean = 1409 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409 ms/op
Iteration   2: n = 1, mean = 1221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221 ms/op
Iteration   3: n = 1, mean = 1554 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554 ms/op

# Run progress: 3.59% complete, ETA 01:59:51
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1833 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1833, 1833, 1833, 1833, 1833, 1833, 1833, 1833 ms/op
# Warmup Iteration   2: n = 1, mean = 1564 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564 ms/op
# Warmup Iteration   3: n = 1, mean = 1550 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550 ms/op
Iteration   1: n = 1, mean = 1330 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330 ms/op
Iteration   2: n = 1, mean = 1460 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460 ms/op
Iteration   3: n = 1, mean = 1317 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317 ms/op

# Run progress: 3.74% complete, ETA 02:00:10
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1483 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483 ms/op
# Warmup Iteration   2: n = 1, mean = 1447 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447 ms/op
# Warmup Iteration   3: n = 1, mean = 1594 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594 ms/op
Iteration   1: n = 1, mean = 1420 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420 ms/op
Iteration   2: n = 1, mean = 1216 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216 ms/op
Iteration   3: n = 1, mean = 1487 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487 ms/op


Result "readCrc":
  N = 9
  mean =   1379.227 ±(99.9%) 196.318 ms/op

  Histogram, ms/op:
    [1200.000, 1225.000) = 2 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 0 
    [1275.000, 1300.000) = 0 
    [1300.000, 1325.000) = 1 
    [1325.000, 1350.000) = 1 
    [1350.000, 1375.000) = 0 
    [1375.000, 1400.000) = 0 
    [1400.000, 1425.000) = 2 
    [1425.000, 1450.000) = 0 
    [1450.000, 1475.000) = 1 
    [1475.000, 1500.000) = 1 
    [1500.000, 1525.000) = 0 
    [1525.000, 1550.000) = 0 
    [1550.000, 1575.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1216.348 ms/op
     p(50.0000) =   1409.286 ms/op
     p(90.0000) =   1553.990 ms/op
     p(95.0000) =   1553.990 ms/op
     p(99.0000) =   1553.990 ms/op
     p(99.9000) =   1553.990 ms/op
     p(99.9900) =   1553.990 ms/op
     p(99.9990) =   1553.990 ms/op
     p(99.9999) =   1553.990 ms/op
    p(100.0000) =   1553.990 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 3.88% complete, ETA 02:00:09
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1499 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499 ms/op
# Warmup Iteration   2: n = 1, mean = 1250 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250 ms/op
# Warmup Iteration   3: n = 1, mean = 1502 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502 ms/op
Iteration   1: n = 1, mean = 1514 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514 ms/op
Iteration   2: n = 1, mean = 1218 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218 ms/op
Iteration   3: n = 1, mean = 1548 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548 ms/op

# Run progress: 4.02% complete, ETA 02:00:11
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1619 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1619, 1619, 1619, 1619, 1619, 1619, 1619, 1619 ms/op
# Warmup Iteration   2: n = 1, mean = 1357 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357 ms/op
# Warmup Iteration   3: n = 1, mean = 1363 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363 ms/op
Iteration   1: n = 1, mean = 1294 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294 ms/op
Iteration   2: n = 1, mean = 1413 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413 ms/op
Iteration   3: n = 1, mean = 1225 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225 ms/op

# Run progress: 4.17% complete, ETA 02:00:16
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1472 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472 ms/op
# Warmup Iteration   2: n = 1, mean = 1229 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229 ms/op
# Warmup Iteration   3: n = 1, mean = 1223 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223 ms/op
Iteration   1: n = 1, mean = 1405 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405 ms/op
Iteration   2: n = 1, mean = 1229 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229 ms/op
Iteration   3: n = 1, mean = 1609 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609 ms/op


Result "readCrc":
  N = 9
  mean =   1383.887 ±(99.9%) 252.335 ms/op

  Histogram, ms/op:
    [1200.000, 1250.000) = 3 
    [1250.000, 1300.000) = 1 
    [1300.000, 1350.000) = 0 
    [1350.000, 1400.000) = 0 
    [1400.000, 1450.000) = 2 
    [1450.000, 1500.000) = 0 
    [1500.000, 1550.000) = 2 
    [1550.000, 1600.000) = 0 
    [1600.000, 1650.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1218.445 ms/op
     p(50.0000) =   1405.092 ms/op
     p(90.0000) =   1608.516 ms/op
     p(95.0000) =   1608.516 ms/op
     p(99.0000) =   1608.516 ms/op
     p(99.9000) =   1608.516 ms/op
     p(99.9900) =   1608.516 ms/op
     p(99.9990) =   1608.516 ms/op
     p(99.9999) =   1608.516 ms/op
    p(100.0000) =   1608.516 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 4.31% complete, ETA 02:00:06
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1535 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535 ms/op
# Warmup Iteration   2: n = 1, mean = 1378 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378 ms/op
# Warmup Iteration   3: n = 1, mean = 1342 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342 ms/op
Iteration   1: n = 1, mean = 1355 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355 ms/op
Iteration   2: n = 1, mean = 1145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145 ms/op
Iteration   3: n = 1, mean = 1309 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309 ms/op

# Run progress: 4.45% complete, ETA 01:59:39
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122 ms/op
# Warmup Iteration   2: n = 1, mean = 1082 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082 ms/op
# Warmup Iteration   3: n = 1, mean = 1070 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070 ms/op
Iteration   1: n = 1, mean = 1256 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256 ms/op
Iteration   2: n = 1, mean = 1076 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076 ms/op
Iteration   3: n = 1, mean = 1084 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084 ms/op

# Run progress: 4.60% complete, ETA 01:58:41
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1579 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1579, 1579, 1579, 1579, 1579, 1579, 1579, 1579 ms/op
# Warmup Iteration   2: n = 1, mean = 1262 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262 ms/op
# Warmup Iteration   3: n = 1, mean = 1227 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227 ms/op
Iteration   1: n = 1, mean = 1265 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265 ms/op
Iteration   2: n = 1, mean = 1114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114 ms/op
Iteration   3: n = 1, mean = 1103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103 ms/op


Result "readCrc":
  N = 9
  mean =   1189.551 ±(99.9%) 179.019 ms/op

  Histogram, ms/op:
    [1000.000, 1025.000) = 0 
    [1025.000, 1050.000) = 0 
    [1050.000, 1075.000) = 0 
    [1075.000, 1100.000) = 2 
    [1100.000, 1125.000) = 2 
    [1125.000, 1150.000) = 1 
    [1150.000, 1175.000) = 0 
    [1175.000, 1200.000) = 0 
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 2 
    [1275.000, 1300.000) = 0 
    [1300.000, 1325.000) = 1 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1075.839 ms/op
     p(50.0000) =   1145.045 ms/op
     p(90.0000) =   1354.760 ms/op
     p(95.0000) =   1354.760 ms/op
     p(99.0000) =   1354.760 ms/op
     p(99.9000) =   1354.760 ms/op
     p(99.9900) =   1354.760 ms/op
     p(99.9990) =   1354.760 ms/op
     p(99.9999) =   1354.760 ms/op
    p(100.0000) =   1354.760 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 4.74% complete, ETA 01:58:03
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1493 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493 ms/op
# Warmup Iteration   2: n = 1, mean = 1562 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562 ms/op
# Warmup Iteration   3: n = 1, mean = 1701 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701 ms/op
Iteration   1: n = 1, mean = 1527 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527 ms/op
Iteration   2: n = 1, mean = 1344 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344 ms/op
Iteration   3: n = 1, mean = 1676 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676 ms/op

# Run progress: 4.89% complete, ETA 01:58:35
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1535 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535 ms/op
# Warmup Iteration   2: n = 1, mean = 1711 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1711, 1711, 1711, 1711, 1711, 1711, 1711, 1711 ms/op
# Warmup Iteration   3: n = 1, mean = 1812 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812 ms/op
Iteration   1: n = 1, mean = 1426 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426 ms/op
Iteration   2: n = 1, mean = 1390 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390 ms/op
Iteration   3: n = 1, mean = 1707 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707 ms/op

# Run progress: 5.03% complete, ETA 01:59:06
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1713 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713 ms/op
# Warmup Iteration   2: n = 1, mean = 1552 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552 ms/op
# Warmup Iteration   3: n = 1, mean = 1671 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671 ms/op
Iteration   1: n = 1, mean = 1571 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571 ms/op
Iteration   2: n = 1, mean = 1564 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564 ms/op
Iteration   3: n = 1, mean = 1485 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485 ms/op


Result "readCrc":
  N = 9
  mean =   1521.134 ±(99.9%) 207.131 ms/op

  Histogram, ms/op:
    [1300.000, 1350.000) = 1 
    [1350.000, 1400.000) = 1 
    [1400.000, 1450.000) = 1 
    [1450.000, 1500.000) = 1 
    [1500.000, 1550.000) = 1 
    [1550.000, 1600.000) = 2 
    [1600.000, 1650.000) = 0 
    [1650.000, 1700.000) = 1 
    [1700.000, 1750.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1344.274 ms/op
     p(50.0000) =   1526.727 ms/op
     p(90.0000) =   1707.082 ms/op
     p(95.0000) =   1707.082 ms/op
     p(99.0000) =   1707.082 ms/op
     p(99.9000) =   1707.082 ms/op
     p(99.9900) =   1707.082 ms/op
     p(99.9990) =   1707.082 ms/op
     p(99.9999) =   1707.082 ms/op
    p(100.0000) =   1707.082 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 5.17% complete, ETA 01:59:30
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 2032 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2032, 2032, 2032, 2032, 2032, 2032, 2032, 2032 ms/op
# Warmup Iteration   2: n = 1, mean = 2168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2168, 2168, 2168, 2168, 2168, 2168, 2168, 2168 ms/op
# Warmup Iteration   3: n = 1, mean = 2508 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2508, 2508, 2508, 2508, 2508, 2508, 2508, 2508 ms/op
Iteration   1: n = 1, mean = 2085 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085 ms/op
Iteration   2: n = 1, mean = 2168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2168, 2168, 2168, 2168, 2168, 2168, 2168, 2168 ms/op
Iteration   3: 
Bytes	before-close	107036672	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	107036672	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 2416 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2416, 2416, 2416, 2416, 2416, 2416, 2416, 2416 ms/op

# Run progress: 5.32% complete, ETA 02:00:55
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 2227 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2227, 2227, 2227, 2227, 2227, 2227, 2227, 2227 ms/op
# Warmup Iteration   2: n = 1, mean = 2269 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2269, 2269, 2269, 2269, 2269, 2269, 2269, 2269 ms/op
# Warmup Iteration   3: n = 1, mean = 2013 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013 ms/op
Iteration   1: n = 1, mean = 2315 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2315, 2315, 2315, 2315, 2315, 2315, 2315, 2315 ms/op
Iteration   2: n = 1, mean = 2147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2147, 2147, 2147, 2147, 2147, 2147, 2147, 2147 ms/op
Iteration   3: 
Bytes	before-close	107036672	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	107036672	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 2437 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2437, 2437, 2437, 2437, 2437, 2437, 2437, 2437 ms/op

# Run progress: 5.46% complete, ETA 02:02:12
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 2231 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2231, 2231, 2231, 2231, 2231, 2231, 2231, 2231 ms/op
# Warmup Iteration   2: n = 1, mean = 2244 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2244, 2244, 2244, 2244, 2244, 2244, 2244, 2244 ms/op
# Warmup Iteration   3: n = 1, mean = 2156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156 ms/op
Iteration   1: n = 1, mean = 2206 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2206, 2206, 2206, 2206, 2206, 2206, 2206, 2206 ms/op
Iteration   2: n = 1, mean = 2194 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194 ms/op
Iteration   3: 
Bytes	before-close	107036672	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	107036672	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 2043 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043 ms/op


Result "readKey":
  N = 9
  mean =   2223.447 ±(99.9%) 232.391 ms/op

  Histogram, ms/op:
    [2000.000, 2050.000) = 1 
    [2050.000, 2100.000) = 1 
    [2100.000, 2150.000) = 1 
    [2150.000, 2200.000) = 2 
    [2200.000, 2250.000) = 1 
    [2250.000, 2300.000) = 0 
    [2300.000, 2350.000) = 1 
    [2350.000, 2400.000) = 0 
    [2400.000, 2450.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   2042.626 ms/op
     p(50.0000) =   2193.621 ms/op
     p(90.0000) =   2436.891 ms/op
     p(95.0000) =   2436.891 ms/op
     p(99.0000) =   2436.891 ms/op
     p(99.9000) =   2436.891 ms/op
     p(99.9900) =   2436.891 ms/op
     p(99.9990) =   2436.891 ms/op
     p(99.9999) =   2436.891 ms/op
    p(100.0000) =   2436.891 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readKey
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 5.60% complete, ETA 02:03:22
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 2445 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2445, 2445, 2445, 2445, 2445, 2445, 2445, 2445 ms/op
# Warmup Iteration   2: n = 1, mean = 2298 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2298, 2298, 2298, 2298, 2298, 2298, 2298, 2298 ms/op
# Warmup Iteration   3: n = 1, mean = 2328 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2328, 2328, 2328, 2328, 2328, 2328, 2328, 2328 ms/op
Iteration   1: n = 1, mean = 2370 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2370, 2370, 2370, 2370, 2370, 2370, 2370, 2370 ms/op
Iteration   2: n = 1, mean = 2563 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2563, 2563, 2563, 2563, 2563, 2563, 2563, 2563 ms/op
Iteration   3: 
Bytes	before-close	107036672	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	107036672	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 2642 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2642, 2642, 2642, 2642, 2642, 2642, 2642, 2642 ms/op

# Run progress: 5.75% complete, ETA 02:04:57
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 2710 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2710, 2710, 2710, 2710, 2710, 2710, 2710, 2710 ms/op
# Warmup Iteration   2: n = 1, mean = 2567 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2567, 2567, 2567, 2567, 2567, 2567, 2567, 2567 ms/op
# Warmup Iteration   3: n = 1, mean = 2324 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2324, 2324, 2324, 2324, 2324, 2324, 2324, 2324 ms/op
Iteration   1: n = 1, mean = 2403 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2403, 2403, 2403, 2403, 2403, 2403, 2403, 2403 ms/op
Iteration   2: n = 1, mean = 2433 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2433, 2433, 2433, 2433, 2433, 2433, 2433, 2433 ms/op
Iteration   3: 
Bytes	before-close	107036672	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	107036672	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 2705 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705 ms/op

# Run progress: 5.89% complete, ETA 02:06:36
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 2475 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2475, 2475, 2475, 2475, 2475, 2475, 2475, 2475 ms/op
# Warmup Iteration   2: n = 1, mean = 2340 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2340, 2340, 2340, 2340, 2340, 2340, 2340, 2340 ms/op
# Warmup Iteration   3: n = 1, mean = 2475 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2475, 2475, 2475, 2475, 2475, 2475, 2475, 2475 ms/op
Iteration   1: n = 1, mean = 2282 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2282, 2282, 2282, 2282, 2282, 2282, 2282, 2282 ms/op
Iteration   2: n = 1, mean = 2231 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2231, 2231, 2231, 2231, 2231, 2231, 2231, 2231 ms/op
Iteration   3: 
Bytes	before-close	107036672	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	107036672	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 2655 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2655, 2655, 2655, 2655, 2655, 2655, 2655, 2655 ms/op


Result "readKey":
  N = 9
  mean =   2476.037 ±(99.9%) 288.548 ms/op

  Histogram, ms/op:
    [2200.000, 2250.000) = 1 
    [2250.000, 2300.000) = 1 
    [2300.000, 2350.000) = 0 
    [2350.000, 2400.000) = 1 
    [2400.000, 2450.000) = 2 
    [2450.000, 2500.000) = 0 
    [2500.000, 2550.000) = 0 
    [2550.000, 2600.000) = 1 
    [2600.000, 2650.000) = 1 
    [2650.000, 2700.000) = 1 
    [2700.000, 2750.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2231.370 ms/op
     p(50.0000) =   2432.696 ms/op
     p(90.0000) =   2705.326 ms/op
     p(95.0000) =   2705.326 ms/op
     p(99.0000) =   2705.326 ms/op
     p(99.9000) =   2705.326 ms/op
     p(99.9900) =   2705.326 ms/op
     p(99.9990) =   2705.326 ms/op
     p(99.9999) =   2705.326 ms/op
    p(100.0000) =   2705.326 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readKey
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 6.03% complete, ETA 02:07:58
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1594 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1594, 1594, 1594, 1594, 1594, 1594, 1594, 1594 ms/op
# Warmup Iteration   2: n = 1, mean = 1518 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518 ms/op
# Warmup Iteration   3: n = 1, mean = 1556 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556 ms/op
Iteration   1: n = 1, mean = 1382 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382 ms/op
Iteration   2: n = 1, mean = 1239 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239 ms/op
Iteration   3: 
Bytes	before-close	119037952	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	119037952	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 1235 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235 ms/op

# Run progress: 6.18% complete, ETA 02:07:34
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1697 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697 ms/op
# Warmup Iteration   2: n = 1, mean = 1332 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332 ms/op
# Warmup Iteration   3: n = 1, mean = 1527 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527 ms/op
Iteration   1: n = 1, mean = 1361 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361 ms/op
Iteration   2: n = 1, mean = 1447 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447 ms/op
Iteration   3: 
Bytes	before-close	119037952	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	119037952	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 1592 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592 ms/op

# Run progress: 6.32% complete, ETA 02:07:17
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1256 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256 ms/op
# Warmup Iteration   2: n = 1, mean = 1271 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271 ms/op
# Warmup Iteration   3: n = 1, mean = 1214 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214 ms/op
Iteration   1: n = 1, mean = 1195 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195 ms/op
Iteration   2: n = 1, mean = 1397 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397 ms/op
Iteration   3: 
Bytes	before-close	119037952	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	119037952	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 1495 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495 ms/op


Result "readKey":
  N = 9
  mean =   1371.537 ±(99.9%) 220.244 ms/op

  Histogram, ms/op:
    [1100.000, 1150.000) = 0 
    [1150.000, 1200.000) = 1 
    [1200.000, 1250.000) = 2 
    [1250.000, 1300.000) = 0 
    [1300.000, 1350.000) = 0 
    [1350.000, 1400.000) = 3 
    [1400.000, 1450.000) = 1 
    [1450.000, 1500.000) = 1 
    [1500.000, 1550.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1195.377 ms/op
     p(50.0000) =   1382.023 ms/op
     p(90.0000) =   1591.738 ms/op
     p(95.0000) =   1591.738 ms/op
     p(99.0000) =   1591.738 ms/op
     p(99.9000) =   1591.738 ms/op
     p(99.9900) =   1591.738 ms/op
     p(99.9990) =   1591.738 ms/op
     p(99.9999) =   1591.738 ms/op
    p(100.0000) =   1591.738 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readKey
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 6.47% complete, ETA 02:06:43
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 3192 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3192, 3192, 3192, 3192, 3192, 3192, 3192, 3192 ms/op
# Warmup Iteration   2: n = 1, mean = 3494 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3494, 3494, 3494, 3494, 3494, 3494, 3494, 3494 ms/op
# Warmup Iteration   3: n = 1, mean = 3053 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053 ms/op
Iteration   1: n = 1, mean = 3305 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3305, 3305, 3305, 3305, 3305, 3305, 3305, 3305 ms/op
Iteration   2: n = 1, mean = 2869 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2869, 2869, 2869, 2869, 2869, 2869, 2869, 2869 ms/op
Iteration   3: 
Bytes	before-close	119037952	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	119037952	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 3716 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3716, 3716, 3716, 3716, 3716, 3716, 3716, 3716 ms/op

# Run progress: 6.61% complete, ETA 02:09:16
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 3624 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3624, 3624, 3624, 3624, 3624, 3624, 3624, 3624 ms/op
# Warmup Iteration   2: n = 1, mean = 3444 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3444, 3444, 3444, 3444, 3444, 3444, 3444, 3444 ms/op
# Warmup Iteration   3: n = 1, mean = 3028 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3028, 3028, 3028, 3028, 3028, 3028, 3028, 3028 ms/op
Iteration   1: n = 1, mean = 3045 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3045, 3045, 3045, 3045, 3045, 3045, 3045, 3045 ms/op
Iteration   2: n = 1, mean = 2928 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928 ms/op
Iteration   3: 
Bytes	before-close	119037952	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	119037952	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 3649 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3649, 3649, 3649, 3649, 3649, 3649, 3649, 3649 ms/op

# Run progress: 6.75% complete, ETA 02:11:47
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 3020 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3020, 3020, 3020, 3020, 3020, 3020, 3020, 3020 ms/op
# Warmup Iteration   2: n = 1, mean = 3280 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3280, 3280, 3280, 3280, 3280, 3280, 3280, 3280 ms/op
# Warmup Iteration   3: n = 1, mean = 2944 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2944, 2944, 2944, 2944, 2944, 2944, 2944, 2944 ms/op
Iteration   1: n = 1, mean = 2894 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2894, 2894, 2894, 2894, 2894, 2894, 2894, 2894 ms/op
Iteration   2: n = 1, mean = 2932 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2932, 2932, 2932, 2932, 2932, 2932, 2932, 2932 ms/op
Iteration   3: 
Bytes	before-close	119037952	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	119037952	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 3574 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3574, 3574, 3574, 3574, 3574, 3574, 3574, 3574 ms/op


Result "readKey":
  N = 9
  mean =   3212.371 ±(99.9%) 591.324 ms/op

  Histogram, ms/op:
    [2800.000, 2900.000) = 2 
    [2900.000, 3000.000) = 2 
    [3000.000, 3100.000) = 1 
    [3100.000, 3200.000) = 0 
    [3200.000, 3300.000) = 0 
    [3300.000, 3400.000) = 1 
    [3400.000, 3500.000) = 0 
    [3500.000, 3600.000) = 1 
    [3600.000, 3700.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2868.904 ms/op
     p(50.0000) =   3045.065 ms/op
     p(90.0000) =   3716.153 ms/op
     p(95.0000) =   3716.153 ms/op
     p(99.0000) =   3716.153 ms/op
     p(99.9000) =   3716.153 ms/op
     p(99.9900) =   3716.153 ms/op
     p(99.9990) =   3716.153 ms/op
     p(99.9999) =   3716.153 ms/op
    p(100.0000) =   3716.153 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readRev
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 6.90% complete, ETA 02:13:54
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 6401 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6401, 6401, 6401, 6401, 6401, 6401, 6401, 6401 ms/op
# Warmup Iteration   2: n = 1, mean = 6392 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6392, 6392, 6392, 6392, 6392, 6392, 6392, 6392 ms/op
# Warmup Iteration   3: n = 1, mean = 6392 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6392, 6392, 6392, 6392, 6392, 6392, 6392, 6392 ms/op
Iteration   1: n = 1, mean = 6468 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6468, 6468, 6468, 6468, 6468, 6468, 6468, 6468 ms/op
Iteration   2: n = 1, mean = 6132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6132, 6132, 6132, 6132, 6132, 6132, 6132, 6132 ms/op
Iteration   3: n = 1, mean = 6342 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6342, 6342, 6342, 6342, 6342, 6342, 6342, 6342 ms/op

# Run progress: 7.04% complete, ETA 02:19:59
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 6375 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6375, 6375, 6375, 6375, 6375, 6375, 6375, 6375 ms/op
# Warmup Iteration   2: n = 1, mean = 6392 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6392, 6392, 6392, 6392, 6392, 6392, 6392, 6392 ms/op
# Warmup Iteration   3: n = 1, mean = 6401 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6401, 6401, 6401, 6401, 6401, 6401, 6401, 6401 ms/op
Iteration   1: n = 1, mean = 6308 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6308, 6308, 6308, 6308, 6308, 6308, 6308, 6308 ms/op
Iteration   2: n = 1, mean = 6166 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6166, 6166, 6166, 6166, 6166, 6166, 6166, 6166 ms/op
Iteration   3: n = 1, mean = 6317 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6317, 6317, 6317, 6317, 6317, 6317, 6317, 6317 ms/op

# Run progress: 7.18% complete, ETA 02:25:40
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 6669 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6669, 6669, 6669, 6669, 6669, 6669, 6669, 6669 ms/op
# Warmup Iteration   2: n = 1, mean = 6602 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6602, 6602, 6602, 6602, 6602, 6602, 6602, 6602 ms/op
# Warmup Iteration   3: n = 1, mean = 6157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6157, 6157, 6157, 6157, 6157, 6157, 6157, 6157 ms/op
Iteration   1: n = 1, mean = 6283 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6283, 6283, 6283, 6283, 6283, 6283, 6283, 6283 ms/op
Iteration   2: n = 1, mean = 6266 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6266, 6266, 6266, 6266, 6266, 6266, 6266, 6266 ms/op
Iteration   3: n = 1, mean = 6107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6107, 6107, 6107, 6107, 6107, 6107, 6107, 6107 ms/op


Result "readRev":
  N = 9
  mean =   6265.358 ±(99.9%) 191.920 ms/op

  Histogram, ms/op:
    [6100.000, 6125.000) = 1 
    [6125.000, 6150.000) = 1 
    [6150.000, 6175.000) = 1 
    [6175.000, 6200.000) = 0 
    [6200.000, 6225.000) = 0 
    [6225.000, 6250.000) = 0 
    [6250.000, 6275.000) = 1 
    [6275.000, 6300.000) = 1 
    [6300.000, 6325.000) = 2 
    [6325.000, 6350.000) = 1 
    [6350.000, 6375.000) = 0 
    [6375.000, 6400.000) = 0 
    [6400.000, 6425.000) = 0 
    [6425.000, 6450.000) = 0 
    [6450.000, 6475.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   6106.907 ms/op
     p(50.0000) =   6283.067 ms/op
     p(90.0000) =   6467.617 ms/op
     p(95.0000) =   6467.617 ms/op
     p(99.0000) =   6467.617 ms/op
     p(99.9000) =   6467.617 ms/op
     p(99.9900) =   6467.617 ms/op
     p(99.9990) =   6467.617 ms/op
     p(99.9999) =   6467.617 ms/op
    p(100.0000) =   6467.617 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readRev
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 7.33% complete, ETA 02:31:12
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 6635 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6635, 6635, 6635, 6635, 6635, 6635, 6635, 6635 ms/op
# Warmup Iteration   2: n = 1, mean = 6627 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6627, 6627, 6627, 6627, 6627, 6627, 6627, 6627 ms/op
# Warmup Iteration   3: n = 1, mean = 6426 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6426, 6426, 6426, 6426, 6426, 6426, 6426, 6426 ms/op
Iteration   1: n = 1, mean = 6535 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6535, 6535, 6535, 6535, 6535, 6535, 6535, 6535 ms/op
Iteration   2: n = 1, mean = 6535 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6535, 6535, 6535, 6535, 6535, 6535, 6535, 6535 ms/op
Iteration   3: n = 1, mean = 6258 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6258, 6258, 6258, 6258, 6258, 6258, 6258, 6258 ms/op

# Run progress: 7.47% complete, ETA 02:36:42
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 6744 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6744, 6744, 6744, 6744, 6744, 6744, 6744, 6744 ms/op
# Warmup Iteration   2: n = 1, mean = 6426 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6426, 6426, 6426, 6426, 6426, 6426, 6426, 6426 ms/op
# Warmup Iteration   3: n = 1, mean = 6333 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6333, 6333, 6333, 6333, 6333, 6333, 6333, 6333 ms/op
Iteration   1: n = 1, mean = 6619 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6619, 6619, 6619, 6619, 6619, 6619, 6619, 6619 ms/op
Iteration   2: n = 1, mean = 6233 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6233, 6233, 6233, 6233, 6233, 6233, 6233, 6233 ms/op
Iteration   3: n = 1, mean = 6501 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6501, 6501, 6501, 6501, 6501, 6501, 6501, 6501 ms/op

# Run progress: 7.61% complete, ETA 02:41:58
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 6535 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6535, 6535, 6535, 6535, 6535, 6535, 6535, 6535 ms/op
# Warmup Iteration   2: n = 1, mean = 6493 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6493, 6493, 6493, 6493, 6493, 6493, 6493, 6493 ms/op
# Warmup Iteration   3: n = 1, mean = 6442 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6442, 6442, 6442, 6442, 6442, 6442, 6442, 6442 ms/op
Iteration   1: n = 1, mean = 6602 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6602, 6602, 6602, 6602, 6602, 6602, 6602, 6602 ms/op
Iteration   2: n = 1, mean = 6199 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6199, 6199, 6199, 6199, 6199, 6199, 6199, 6199 ms/op
Iteration   3: n = 1, mean = 6501 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6501, 6501, 6501, 6501, 6501, 6501, 6501, 6501 ms/op


Result "readRev":
  N = 9
  mean =   6442.451 ±(99.9%) 277.132 ms/op

  Histogram, ms/op:
    [6100.000, 6150.000) = 0 
    [6150.000, 6200.000) = 1 
    [6200.000, 6250.000) = 1 
    [6250.000, 6300.000) = 1 
    [6300.000, 6350.000) = 0 
    [6350.000, 6400.000) = 0 
    [6400.000, 6450.000) = 0 
    [6450.000, 6500.000) = 0 
    [6500.000, 6550.000) = 4 
    [6550.000, 6600.000) = 0 
    [6600.000, 6650.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   6199.181 ms/op
     p(50.0000) =   6501.171 ms/op
     p(90.0000) =   6618.612 ms/op
     p(95.0000) =   6618.612 ms/op
     p(99.0000) =   6618.612 ms/op
     p(99.9000) =   6618.612 ms/op
     p(99.9900) =   6618.612 ms/op
     p(99.9990) =   6618.612 ms/op
     p(99.9999) =   6618.612 ms/op
    p(100.0000) =   6618.612 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readRev
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 7.76% complete, ETA 02:46:58
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 6442 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6442, 6442, 6442, 6442, 6442, 6442, 6442, 6442 ms/op
# Warmup Iteration   2: n = 1, mean = 6224 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6224, 6224, 6224, 6224, 6224, 6224, 6224, 6224 ms/op
# Warmup Iteration   3: n = 1, mean = 6216 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6216, 6216, 6216, 6216, 6216, 6216, 6216, 6216 ms/op
Iteration   1: n = 1, mean = 5948 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5948, 5948, 5948, 5948, 5948, 5948, 5948, 5948 ms/op
Iteration   2: n = 1, mean = 6115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6115, 6115, 6115, 6115, 6115, 6115, 6115, 6115 ms/op
Iteration   3: n = 1, mean = 6073 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6073, 6073, 6073, 6073, 6073, 6073, 6073, 6073 ms/op

# Run progress: 7.90% complete, ETA 02:51:15
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 6585 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6585, 6585, 6585, 6585, 6585, 6585, 6585, 6585 ms/op
# Warmup Iteration   2: n = 1, mean = 6107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6107, 6107, 6107, 6107, 6107, 6107, 6107, 6107 ms/op
# Warmup Iteration   3: n = 1, mean = 6241 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6241, 6241, 6241, 6241, 6241, 6241, 6241, 6241 ms/op
Iteration   1: n = 1, mean = 6124 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6124, 6124, 6124, 6124, 6124, 6124, 6124, 6124 ms/op
Iteration   2: n = 1, mean = 6359 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6359, 6359, 6359, 6359, 6359, 6359, 6359, 6359 ms/op
Iteration   3: n = 1, mean = 6099 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6099, 6099, 6099, 6099, 6099, 6099, 6099, 6099 ms/op

# Run progress: 8.05% complete, ETA 02:55:27
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 6140 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6140, 6140, 6140, 6140, 6140, 6140, 6140, 6140 ms/op
# Warmup Iteration   2: n = 1, mean = 6275 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6275, 6275, 6275, 6275, 6275, 6275, 6275, 6275 ms/op
# Warmup Iteration   3: n = 1, mean = 6031 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6031, 6031, 6031, 6031, 6031, 6031, 6031, 6031 ms/op
Iteration   1: n = 1, mean = 6006 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6006, 6006, 6006, 6006, 6006, 6006, 6006, 6006 ms/op
Iteration   2: n = 1, mean = 5931 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5931, 5931, 5931, 5931, 5931, 5931, 5931, 5931 ms/op
Iteration   3: n = 1, mean = 5922 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5922, 5922, 5922, 5922, 5922, 5922, 5922, 5922 ms/op


Result "readRev":
  N = 9
  mean =   6064.032 ±(99.9%) 229.306 ms/op

  Histogram, ms/op:
    [5900.000, 5950.000) = 3 
    [5950.000, 6000.000) = 0 
    [6000.000, 6050.000) = 1 
    [6050.000, 6100.000) = 2 
    [6100.000, 6150.000) = 2 
    [6150.000, 6200.000) = 0 
    [6200.000, 6250.000) = 0 
    [6250.000, 6300.000) = 0 
    [6300.000, 6350.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   5922.357 ms/op
     p(50.0000) =   6073.352 ms/op
     p(90.0000) =   6358.565 ms/op
     p(95.0000) =   6358.565 ms/op
     p(99.0000) =   6358.565 ms/op
     p(99.9000) =   6358.565 ms/op
     p(99.9900) =   6358.565 ms/op
     p(99.9990) =   6358.565 ms/op
     p(99.9999) =   6358.565 ms/op
    p(100.0000) =   6358.565 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readRev
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 8.19% complete, ETA 02:59:14
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 6258 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6258, 6258, 6258, 6258, 6258, 6258, 6258, 6258 ms/op
# Warmup Iteration   2: n = 1, mean = 6442 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6442, 6442, 6442, 6442, 6442, 6442, 6442, 6442 ms/op
# Warmup Iteration   3: n = 1, mean = 6233 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6233, 6233, 6233, 6233, 6233, 6233, 6233, 6233 ms/op
Iteration   1: n = 1, mean = 6375 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6375, 6375, 6375, 6375, 6375, 6375, 6375, 6375 ms/op
Iteration   2: n = 1, mean = 6627 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6627, 6627, 6627, 6627, 6627, 6627, 6627, 6627 ms/op
Iteration   3: n = 1, mean = 6308 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6308, 6308, 6308, 6308, 6308, 6308, 6308, 6308 ms/op

# Run progress: 8.33% complete, ETA 03:03:31
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 6619 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6619, 6619, 6619, 6619, 6619, 6619, 6619, 6619 ms/op
# Warmup Iteration   2: n = 1, mean = 6585 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6585, 6585, 6585, 6585, 6585, 6585, 6585, 6585 ms/op
# Warmup Iteration   3: n = 1, mean = 6803 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6803, 6803, 6803, 6803, 6803, 6803, 6803, 6803 ms/op
Iteration   1: n = 1, mean = 6711 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6711, 6711, 6711, 6711, 6711, 6711, 6711, 6711 ms/op
Iteration   2: n = 1, mean = 6417 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6417, 6417, 6417, 6417, 6417, 6417, 6417, 6417 ms/op
Iteration   3: n = 1, mean = 6401 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6401, 6401, 6401, 6401, 6401, 6401, 6401, 6401 ms/op

# Run progress: 8.48% complete, ETA 03:07:49
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 6954 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6954, 6954, 6954, 6954, 6954, 6954, 6954, 6954 ms/op
# Warmup Iteration   2: n = 1, mean = 6401 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6401, 6401, 6401, 6401, 6401, 6401, 6401, 6401 ms/op
# Warmup Iteration   3: n = 1, mean = 6233 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6233, 6233, 6233, 6233, 6233, 6233, 6233, 6233 ms/op
Iteration   1: n = 1, mean = 6602 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6602, 6602, 6602, 6602, 6602, 6602, 6602, 6602 ms/op
Iteration   2: n = 1, mean = 6593 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6593, 6593, 6593, 6593, 6593, 6593, 6593, 6593 ms/op
Iteration   3: n = 1, mean = 6317 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6317, 6317, 6317, 6317, 6317, 6317, 6317, 6317 ms/op


Result "readRev":
  N = 9
  mean =   6483.462 ±(99.9%) 252.013 ms/op

  Histogram, ms/op:
    [6300.000, 6350.000) = 2 
    [6350.000, 6400.000) = 1 
    [6400.000, 6450.000) = 2 
    [6450.000, 6500.000) = 0 
    [6500.000, 6550.000) = 0 
    [6550.000, 6600.000) = 1 
    [6600.000, 6650.000) = 2 
    [6650.000, 6700.000) = 0 
    [6700.000, 6750.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   6308.233 ms/op
     p(50.0000) =   6417.285 ms/op
     p(90.0000) =   6710.886 ms/op
     p(95.0000) =   6710.886 ms/op
     p(99.0000) =   6710.886 ms/op
     p(99.9000) =   6710.886 ms/op
     p(99.9900) =   6710.886 ms/op
     p(99.9990) =   6710.886 ms/op
     p(99.9999) =   6710.886 ms/op
    p(100.0000) =   6710.886 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 8.62% complete, ETA 03:11:53
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1529 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529 ms/op
# Warmup Iteration   2: n = 1, mean = 1227 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227 ms/op
# Warmup Iteration   3: n = 1, mean = 1395 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395 ms/op
Iteration   1: n = 1, mean = 1170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170 ms/op
Iteration   2: n = 1, mean = 1200 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200 ms/op
Iteration   3: n = 1, mean = 1156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156 ms/op

# Run progress: 8.76% complete, ETA 03:10:13
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1529 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529 ms/op
# Warmup Iteration   2: n = 1, mean = 1497 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497 ms/op
# Warmup Iteration   3: n = 1, mean = 1585 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585 ms/op
Iteration   1: n = 1, mean = 1183 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183 ms/op
Iteration   2: n = 1, mean = 1177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177 ms/op
Iteration   3: n = 1, mean = 1497 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497 ms/op

# Run progress: 8.91% complete, ETA 03:08:47
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1365 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365 ms/op
# Warmup Iteration   2: n = 1, mean = 1487 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487 ms/op
# Warmup Iteration   3: n = 1, mean = 1523 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523 ms/op
Iteration   1: n = 1, mean = 1179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179 ms/op
Iteration   2: n = 1, mean = 1393 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393 ms/op
Iteration   3: n = 1, mean = 1497 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497 ms/op


Result "readSeq":
  N = 9
  mean =   1272.272 ±(99.9%) 245.737 ms/op

  Histogram, ms/op:
    [1100.000, 1125.000) = 0 
    [1125.000, 1150.000) = 0 
    [1150.000, 1175.000) = 2 
    [1175.000, 1200.000) = 4 
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 0 
    [1275.000, 1300.000) = 0 
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 0 
    [1375.000, 1400.000) = 1 
    [1400.000, 1425.000) = 0 
    [1425.000, 1450.000) = 0 
    [1450.000, 1475.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1155.531 ms/op
     p(50.0000) =   1182.794 ms/op
     p(90.0000) =   1497.367 ms/op
     p(95.0000) =   1497.367 ms/op
     p(99.0000) =   1497.367 ms/op
     p(99.9000) =   1497.367 ms/op
     p(99.9900) =   1497.367 ms/op
     p(99.9990) =   1497.367 ms/op
     p(99.9999) =   1497.367 ms/op
    p(100.0000) =   1497.367 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 9.05% complete, ETA 03:07:20
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1420 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420 ms/op
# Warmup Iteration   2: n = 1, mean = 1302 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302 ms/op
# Warmup Iteration   3: n = 1, mean = 1434 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434 ms/op
Iteration   1: n = 1, mean = 1340 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340 ms/op
Iteration   2: n = 1, mean = 1139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139 ms/op
Iteration   3: n = 1, mean = 1481 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481 ms/op

# Run progress: 9.20% complete, ETA 03:05:56
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1525 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525 ms/op
# Warmup Iteration   2: n = 1, mean = 1162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162 ms/op
# Warmup Iteration   3: n = 1, mean = 1340 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340 ms/op
Iteration   1: n = 1, mean = 1174 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174 ms/op
Iteration   2: n = 1, mean = 1160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160 ms/op
Iteration   3: n = 1, mean = 1158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158 ms/op

# Run progress: 9.34% complete, ETA 03:04:28
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1416 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416 ms/op
# Warmup Iteration   2: n = 1, mean = 1340 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340 ms/op
# Warmup Iteration   3: n = 1, mean = 1401 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401 ms/op
Iteration   1: n = 1, mean = 1353 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353 ms/op
Iteration   2: n = 1, mean = 1139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139 ms/op
Iteration   3: n = 1, mean = 1151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151 ms/op


Result "readSeq":
  N = 9
  mean =   1232.659 ±(99.9%) 210.895 ms/op

  Histogram, ms/op:
    [1100.000, 1125.000) = 0 
    [1125.000, 1150.000) = 2 
    [1150.000, 1175.000) = 4 
    [1175.000, 1200.000) = 0 
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 0 
    [1275.000, 1300.000) = 0 
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 1 
    [1350.000, 1375.000) = 1 
    [1375.000, 1400.000) = 0 
    [1400.000, 1425.000) = 0 
    [1425.000, 1450.000) = 0 
    [1450.000, 1475.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1138.754 ms/op
     p(50.0000) =   1159.725 ms/op
     p(90.0000) =   1480.589 ms/op
     p(95.0000) =   1480.589 ms/op
     p(99.0000) =   1480.589 ms/op
     p(99.9000) =   1480.589 ms/op
     p(99.9900) =   1480.589 ms/op
     p(99.9990) =   1480.589 ms/op
     p(99.9999) =   1480.589 ms/op
    p(100.0000) =   1480.589 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 9.48% complete, ETA 03:03:03
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1271 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271 ms/op
# Warmup Iteration   2: n = 1, mean = 1277 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277 ms/op
# Warmup Iteration   3: n = 1, mean = 1168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168 ms/op
Iteration   1: n = 1, mean = 1189 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189 ms/op
Iteration   2: n = 1, mean = 1076 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076 ms/op
Iteration   3: n = 1, mean = 1003 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003 ms/op

# Run progress: 9.63% complete, ETA 03:01:26
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1195 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195 ms/op
# Warmup Iteration   2: n = 1, mean = 1202 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202 ms/op
# Warmup Iteration   3: n = 1, mean = 1256 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256 ms/op
Iteration   1: n = 1, mean = 1271 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271 ms/op
Iteration   2: n = 1, mean = 1042 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042 ms/op
Iteration   3: n = 1, mean = 1139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139 ms/op

# Run progress: 9.77% complete, ETA 02:59:53
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1018 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018 ms/op
# Warmup Iteration   2: n = 2, mean = 1053 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 997, 1053, 1109, 1109, 1109, 1109, 1109, 1109 ms/op
# Warmup Iteration   3: n = 1, mean = 1235 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235 ms/op
Iteration   1: n = 1, mean = 1135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135 ms/op
Iteration   2: n = 2, mean = 1034 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 995, 1034, 1073, 1073, 1073, 1073, 1073, 1073 ms/op
Iteration   3: n = 1, mean = 1139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139 ms/op


Result "readSeq":
  N = 10
  mean =   1106.143 ±(99.9%) 129.403 ms/op

  Histogram, ms/op:
    [ 900.000,  925.000) = 0 
    [ 925.000,  950.000) = 0 
    [ 950.000,  975.000) = 0 
    [ 975.000, 1000.000) = 1 
    [1000.000, 1025.000) = 1 
    [1025.000, 1050.000) = 1 
    [1050.000, 1075.000) = 1 
    [1075.000, 1100.000) = 1 
    [1100.000, 1125.000) = 0 
    [1125.000, 1150.000) = 3 
    [1150.000, 1175.000) = 0 
    [1175.000, 1200.000) = 1 
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    995.099 ms/op
     p(50.0000) =   1105.199 ms/op
     p(90.0000) =   1262.695 ms/op
     p(95.0000) =   1270.874 ms/op
     p(99.0000) =   1270.874 ms/op
     p(99.9000) =   1270.874 ms/op
     p(99.9900) =   1270.874 ms/op
     p(99.9990) =   1270.874 ms/op
     p(99.9999) =   1270.874 ms/op
    p(100.0000) =   1270.874 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 9.91% complete, ETA 02:58:37
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1202 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202 ms/op
# Warmup Iteration   2: n = 1, mean = 1170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170 ms/op
# Warmup Iteration   3: n = 1, mean = 1416 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416 ms/op
Iteration   1: n = 1, mean = 1250 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250 ms/op
Iteration   2: n = 1, mean = 1162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162 ms/op
Iteration   3: n = 1, mean = 1250 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250 ms/op

# Run progress: 10.06% complete, ETA 02:57:23
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1202 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202 ms/op
# Warmup Iteration   2: n = 1, mean = 1346 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346 ms/op
# Warmup Iteration   3: n = 1, mean = 1342 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342 ms/op
Iteration   1: n = 1, mean = 1189 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189 ms/op
Iteration   2: n = 1, mean = 1363 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363 ms/op
Iteration   3: n = 1, mean = 1260 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260 ms/op

# Run progress: 10.20% complete, ETA 02:56:13
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1489 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489 ms/op
# Warmup Iteration   2: n = 1, mean = 1235 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235 ms/op
# Warmup Iteration   3: n = 1, mean = 1174 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174 ms/op
Iteration   1: n = 1, mean = 1191 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191 ms/op
Iteration   2: n = 1, mean = 1172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172 ms/op
Iteration   3: n = 1, mean = 1596 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596 ms/op


Result "readSeq":
  N = 9
  mean =   1270.408 ±(99.9%) 229.960 ms/op

  Histogram, ms/op:
    [1100.000, 1150.000) = 0 
    [1150.000, 1200.000) = 4 
    [1200.000, 1250.000) = 2 
    [1250.000, 1300.000) = 1 
    [1300.000, 1350.000) = 0 
    [1350.000, 1400.000) = 1 
    [1400.000, 1450.000) = 0 
    [1450.000, 1500.000) = 0 
    [1500.000, 1550.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1161.822 ms/op
     p(50.0000) =   1249.903 ms/op
     p(90.0000) =   1595.933 ms/op
     p(95.0000) =   1595.933 ms/op
     p(99.0000) =   1595.933 ms/op
     p(99.9000) =   1595.933 ms/op
     p(99.9900) =   1595.933 ms/op
     p(99.9990) =   1595.933 ms/op
     p(99.9999) =   1595.933 ms/op
    p(100.0000) =   1595.933 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 10.34% complete, ETA 02:55:05
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1275 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275 ms/op
# Warmup Iteration   2: n = 1, mean = 1170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170 ms/op
# Warmup Iteration   3: n = 1, mean = 1168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168 ms/op
Iteration   1: n = 1, mean = 1183 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183 ms/op
Iteration   2: n = 1, mean = 1189 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189 ms/op
Iteration   3: n = 1, mean = 1177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177 ms/op

# Run progress: 10.49% complete, ETA 02:53:48
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1636 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636 ms/op
# Warmup Iteration   2: n = 1, mean = 1424 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424 ms/op
# Warmup Iteration   3: n = 1, mean = 1395 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395 ms/op
Iteration   1: n = 1, mean = 1416 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416 ms/op
Iteration   2: n = 1, mean = 1170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170 ms/op
Iteration   3: n = 1, mean = 1504 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504 ms/op

# Run progress: 10.63% complete, ETA 02:52:42
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1451 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451 ms/op
# Warmup Iteration   2: n = 1, mean = 1235 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235 ms/op
# Warmup Iteration   3: n = 1, mean = 1493 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493 ms/op
Iteration   1: n = 1, mean = 1189 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189 ms/op
Iteration   2: n = 1, mean = 1453 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453 ms/op
Iteration   3: n = 1, mean = 1520 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520 ms/op


Result "readXxh64":
  N = 9
  mean =   1311.186 ±(99.9%) 263.196 ms/op

  Histogram, ms/op:
    [1100.000, 1150.000) = 0 
    [1150.000, 1200.000) = 5 
    [1200.000, 1250.000) = 0 
    [1250.000, 1300.000) = 0 
    [1300.000, 1350.000) = 0 
    [1350.000, 1400.000) = 0 
    [1400.000, 1450.000) = 1 
    [1450.000, 1500.000) = 1 
    [1500.000, 1550.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   1170.211 ms/op
     p(50.0000) =   1189.085 ms/op
     p(90.0000) =   1520.435 ms/op
     p(95.0000) =   1520.435 ms/op
     p(99.0000) =   1520.435 ms/op
     p(99.9000) =   1520.435 ms/op
     p(99.9900) =   1520.435 ms/op
     p(99.9990) =   1520.435 ms/op
     p(99.9999) =   1520.435 ms/op
    p(100.0000) =   1520.435 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 10.78% complete, ETA 02:51:37
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 2013 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013 ms/op
# Warmup Iteration   2: n = 1, mean = 1393 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393 ms/op
# Warmup Iteration   3: n = 1, mean = 1676 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676 ms/op
Iteration   1: n = 1, mean = 1455 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455 ms/op
Iteration   2: n = 1, mean = 1466 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466 ms/op
Iteration   3: n = 1, mean = 1252 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252 ms/op

# Run progress: 10.92% complete, ETA 02:50:48
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1495 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495 ms/op
# Warmup Iteration   2: n = 1, mean = 1359 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359 ms/op
# Warmup Iteration   3: n = 1, mean = 1476 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476 ms/op
Iteration   1: n = 1, mean = 1195 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195 ms/op
Iteration   2: n = 1, mean = 1193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193 ms/op
Iteration   3: n = 1, mean = 1355 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355 ms/op

# Run progress: 11.06% complete, ETA 02:49:46
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1592 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592 ms/op
# Warmup Iteration   2: n = 1, mean = 1382 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382 ms/op
# Warmup Iteration   3: n = 1, mean = 1537 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537 ms/op
Iteration   1: n = 1, mean = 1185 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185 ms/op
Iteration   2: n = 1, mean = 1172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172 ms/op
Iteration   3: n = 1, mean = 1239 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239 ms/op


Result "readXxh64":
  N = 9
  mean =   1279.263 ±(99.9%) 195.859 ms/op

  Histogram, ms/op:
    [1100.000, 1125.000) = 0 
    [1125.000, 1150.000) = 0 
    [1150.000, 1175.000) = 1 
    [1175.000, 1200.000) = 3 
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 1 
    [1250.000, 1275.000) = 1 
    [1275.000, 1300.000) = 0 
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 1 
    [1375.000, 1400.000) = 0 
    [1400.000, 1425.000) = 0 
    [1425.000, 1450.000) = 0 
    [1450.000, 1475.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   1172.308 ms/op
     p(50.0000) =   1239.417 ms/op
     p(90.0000) =   1465.909 ms/op
     p(95.0000) =   1465.909 ms/op
     p(99.0000) =   1465.909 ms/op
     p(99.9000) =   1465.909 ms/op
     p(99.9900) =   1465.909 ms/op
     p(99.9990) =   1465.909 ms/op
     p(99.9999) =   1465.909 ms/op
    p(100.0000) =   1465.909 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 11.21% complete, ETA 02:48:45
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1237 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237 ms/op
# Warmup Iteration   2: n = 1, mean = 1035 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035 ms/op
# Warmup Iteration   3: n = 1, mean = 1156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156 ms/op
Iteration   1: n = 1, mean = 1195 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195 ms/op
Iteration   2: n = 1, mean = 1313 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313 ms/op
Iteration   3: n = 1, mean = 1367 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367 ms/op

# Run progress: 11.35% complete, ETA 02:47:34
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151 ms/op
# Warmup Iteration   2: n = 1, mean = 1279 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279 ms/op
# Warmup Iteration   3: n = 1, mean = 1177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177 ms/op
Iteration   1: n = 1, mean = 1038 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038 ms/op
Iteration   2: n = 1, mean = 1195 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195 ms/op
Iteration   3: n = 1, mean = 1143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143 ms/op

# Run progress: 11.49% complete, ETA 02:46:21
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1420 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420 ms/op
# Warmup Iteration   2: n = 1, mean = 1340 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340 ms/op
# Warmup Iteration   3: n = 1, mean = 1309 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309 ms/op
Iteration   1: n = 1, mean = 1296 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296 ms/op
Iteration   2: n = 1, mean = 1283 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283 ms/op
Iteration   3: n = 1, mean = 1071 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071 ms/op


Result "readXxh64":
  N = 9
  mean =   1211.338 ±(99.9%) 189.767 ms/op

  Histogram, ms/op:
    [1000.000, 1025.000) = 0 
    [1025.000, 1050.000) = 1 
    [1050.000, 1075.000) = 1 
    [1075.000, 1100.000) = 0 
    [1100.000, 1125.000) = 0 
    [1125.000, 1150.000) = 1 
    [1150.000, 1175.000) = 0 
    [1175.000, 1200.000) = 2 
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 0 
    [1275.000, 1300.000) = 2 
    [1300.000, 1325.000) = 1 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1038.090 ms/op
     p(50.0000) =   1195.377 ms/op
     p(90.0000) =   1367.343 ms/op
     p(95.0000) =   1367.343 ms/op
     p(99.0000) =   1367.343 ms/op
     p(99.9000) =   1367.343 ms/op
     p(99.9900) =   1367.343 ms/op
     p(99.9990) =   1367.343 ms/op
     p(99.9999) =   1367.343 ms/op
    p(100.0000) =   1367.343 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 11.64% complete, ETA 02:45:15
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1233 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233 ms/op
# Warmup Iteration   2: n = 1, mean = 1390 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390 ms/op
# Warmup Iteration   3: n = 1, mean = 1611 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611 ms/op
Iteration   1: n = 1, mean = 1397 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397 ms/op
Iteration   2: n = 1, mean = 1369 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369 ms/op
Iteration   3: n = 1, mean = 1204 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204 ms/op

# Run progress: 11.78% complete, ETA 02:44:24
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1244 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244 ms/op
# Warmup Iteration   2: n = 1, mean = 1214 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214 ms/op
# Warmup Iteration   3: n = 1, mean = 1378 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378 ms/op
Iteration   1: n = 1, mean = 1374 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374 ms/op
Iteration   2: n = 1, mean = 1363 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363 ms/op
Iteration   3: n = 1, mean = 1204 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204 ms/op

# Run progress: 11.93% complete, ETA 02:43:31
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1439 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439 ms/op
# Warmup Iteration   2: n = 1, mean = 1246 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1246, 1246, 1246, 1246, 1246, 1246, 1246, 1246 ms/op
# Warmup Iteration   3: n = 1, mean = 1667 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667 ms/op
Iteration   1: n = 1, mean = 1267 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267 ms/op
Iteration   2: n = 1, mean = 1294 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294 ms/op
Iteration   3: n = 1, mean = 1537 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537 ms/op


Result "readXxh64":
  N = 9
  mean =   1334.255 ±(99.9%) 177.206 ms/op

  Histogram, ms/op:
    [1200.000, 1225.000) = 2 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 1 
    [1275.000, 1300.000) = 1 
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 3 
    [1375.000, 1400.000) = 1 
    [1400.000, 1425.000) = 0 
    [1425.000, 1450.000) = 0 
    [1450.000, 1475.000) = 0 
    [1475.000, 1500.000) = 0 
    [1500.000, 1525.000) = 0 
    [1525.000, 1550.000) = 1 
    [1550.000, 1575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1203.765 ms/op
     p(50.0000) =   1363.149 ms/op
     p(90.0000) =   1537.212 ms/op
     p(95.0000) =   1537.212 ms/op
     p(99.0000) =   1537.212 ms/op
     p(99.9000) =   1537.212 ms/op
     p(99.9900) =   1537.212 ms/op
     p(99.9990) =   1537.212 ms/op
     p(99.9999) =   1537.212 ms/op
    p(100.0000) =   1537.212 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.write
# Parameters: (batchSize = 1000000, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 12.07% complete, ETA 02:42:43
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 2357 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2357, 2357, 2357, 2357, 2357, 2357, 2357, 2357 ms/op
# Warmup Iteration   2: n = 1, mean = 2116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116 ms/op
# Warmup Iteration   3: n = 1, mean = 2108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108 ms/op
Iteration   1: n = 1, mean = 2043 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2043, 2043, 2043, 2043, 2043, 2043, 2043, 2043 ms/op
Iteration   2: n = 1, mean = 1848 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1848, 1848, 1848, 1848, 1848, 1848, 1848, 1848 ms/op
Iteration   3: n = 1, mean = 1831 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1831, 1831, 1831, 1831, 1831, 1831, 1831, 1831 ms/op

# Run progress: 12.21% complete, ETA 02:42:06
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 2227 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2227, 2227, 2227, 2227, 2227, 2227, 2227, 2227 ms/op
# Warmup Iteration   2: n = 1, mean = 2156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156 ms/op
# Warmup Iteration   3: n = 1, mean = 2017 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017 ms/op
Iteration   1: n = 1, mean = 1822 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822 ms/op
Iteration   2: n = 1, mean = 2108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108 ms/op
Iteration   3: n = 1, mean = 1946 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946 ms/op

# Run progress: 12.36% complete, ETA 02:41:29
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 2298 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2298, 2298, 2298, 2298, 2298, 2298, 2298, 2298 ms/op
# Warmup Iteration   2: n = 1, mean = 2361 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361 ms/op
# Warmup Iteration   3: n = 1, mean = 2095 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2095, 2095, 2095, 2095, 2095, 2095, 2095, 2095 ms/op
Iteration   1: n = 1, mean = 2206 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2206, 2206, 2206, 2206, 2206, 2206, 2206, 2206 ms/op
Iteration   2: n = 1, mean = 1944 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944 ms/op
Iteration   3: n = 1, mean = 1917 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1917, 1917, 1917, 1917, 1917, 1917, 1917, 1917 ms/op


Result "write":
  N = 9
  mean =   1962.701 ±(99.9%) 222.093 ms/op

  Histogram, ms/op:
    [1800.000, 1850.000) = 3 
    [1850.000, 1900.000) = 0 
    [1900.000, 1950.000) = 3 
    [1950.000, 2000.000) = 0 
    [2000.000, 2050.000) = 1 
    [2050.000, 2100.000) = 0 
    [2100.000, 2150.000) = 1 
    [2150.000, 2200.000) = 0 
    [2200.000, 2250.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1822.425 ms/op
     p(50.0000) =   1944.060 ms/op
     p(90.0000) =   2206.204 ms/op
     p(95.0000) =   2206.204 ms/op
     p(99.0000) =   2206.204 ms/op
     p(99.9000) =   2206.204 ms/op
     p(99.9900) =   2206.204 ms/op
     p(99.9990) =   2206.204 ms/op
     p(99.9999) =   2206.204 ms/op
    p(100.0000) =   2206.204 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.write
# Parameters: (batchSize = 1000000, intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 12.50% complete, ETA 02:40:56
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 2139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2139, 2139, 2139, 2139, 2139, 2139, 2139, 2139 ms/op
# Warmup Iteration   2: n = 1, mean = 1923 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923 ms/op
# Warmup Iteration   3: n = 1, mean = 2215 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215 ms/op
Iteration   1: n = 1, mean = 2074 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2074, 2074, 2074, 2074, 2074, 2074, 2074, 2074 ms/op
Iteration   2: n = 1, mean = 2051 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2051, 2051, 2051, 2051, 2051, 2051, 2051, 2051 ms/op
Iteration   3: n = 1, mean = 2091 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091 ms/op

# Run progress: 12.64% complete, ETA 02:40:24
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 2319 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2319, 2319, 2319, 2319, 2319, 2319, 2319, 2319 ms/op
# Warmup Iteration   2: n = 1, mean = 1927 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1927, 1927, 1927, 1927, 1927, 1927, 1927, 1927 ms/op
# Warmup Iteration   3: n = 1, mean = 2336 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2336, 2336, 2336, 2336, 2336, 2336, 2336, 2336 ms/op
Iteration   1: n = 1, mean = 2210 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210 ms/op
Iteration   2: n = 1, mean = 1915 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1915, 1915, 1915, 1915, 1915, 1915, 1915, 1915 ms/op
Iteration   3: n = 1, mean = 2340 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2340, 2340, 2340, 2340, 2340, 2340, 2340, 2340 ms/op

# Run progress: 12.79% complete, ETA 02:39:55
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 2760 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2760, 2760, 2760, 2760, 2760, 2760, 2760, 2760 ms/op
# Warmup Iteration   2: n = 1, mean = 2206 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2206, 2206, 2206, 2206, 2206, 2206, 2206, 2206 ms/op
# Warmup Iteration   3: n = 1, mean = 2087 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2087, 2087, 2087, 2087, 2087, 2087, 2087, 2087 ms/op
Iteration   1: n = 1, mean = 2294 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2294, 2294, 2294, 2294, 2294, 2294, 2294, 2294 ms/op
Iteration   2: n = 1, mean = 1911 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911 ms/op
Iteration   3: n = 1, mean = 1919 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1919, 1919, 1919, 1919, 1919, 1919, 1919, 1919 ms/op


Result "write":
  N = 9
  mean =   2089.462 ±(99.9%) 274.158 ms/op

  Histogram, ms/op:
    [1900.000, 1950.000) = 3 
    [1950.000, 2000.000) = 0 
    [2000.000, 2050.000) = 0 
    [2050.000, 2100.000) = 3 
    [2100.000, 2150.000) = 0 
    [2150.000, 2200.000) = 0 
    [2200.000, 2250.000) = 1 
    [2250.000, 2300.000) = 1 
    [2300.000, 2350.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1910.505 ms/op
     p(50.0000) =   2074.083 ms/op
     p(90.0000) =   2340.422 ms/op
     p(95.0000) =   2340.422 ms/op
     p(99.0000) =   2340.422 ms/op
     p(99.9000) =   2340.422 ms/op
     p(99.9900) =   2340.422 ms/op
     p(99.9990) =   2340.422 ms/op
     p(99.9999) =   2340.422 ms/op
    p(100.0000) =   2340.422 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.write
# Parameters: (batchSize = 1000000, intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 12.93% complete, ETA 02:39:29
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1504 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504 ms/op
# Warmup Iteration   2: n = 1, mean = 1380 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380 ms/op
# Warmup Iteration   3: n = 1, mean = 1120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120 ms/op
Iteration   1: n = 1, mean = 1109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109 ms/op
Iteration   2: n = 1, mean = 1365 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365 ms/op
Iteration   3: n = 1, mean = 1107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107 ms/op

# Run progress: 13.07% complete, ETA 02:38:23
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1359 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359 ms/op
# Warmup Iteration   2: n = 1, mean = 1604 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604 ms/op
# Warmup Iteration   3: n = 1, mean = 1187 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187 ms/op
Iteration   1: n = 1, mean = 1130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130 ms/op
Iteration   2: n = 1, mean = 1116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116 ms/op
Iteration   3: n = 1, mean = 1103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103 ms/op

# Run progress: 13.22% complete, ETA 02:37:17
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1357 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357 ms/op
# Warmup Iteration   2: n = 1, mean = 1114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114 ms/op
# Warmup Iteration   3: n = 1, mean = 1204 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204 ms/op
Iteration   1: n = 1, mean = 1372 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372 ms/op
Iteration   2: n = 1, mean = 1292 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292 ms/op
Iteration   3: n = 1, mean = 1103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103 ms/op


Result "write":
  N = 9
  mean =   1188.619 ±(99.9%) 198.424 ms/op

  Histogram, ms/op:
    [1100.000, 1125.000) = 5 
    [1125.000, 1150.000) = 1 
    [1150.000, 1175.000) = 0 
    [1175.000, 1200.000) = 0 
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 0 
    [1275.000, 1300.000) = 1 
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   1103.102 ms/op
     p(50.0000) =   1115.685 ms/op
     p(90.0000) =   1371.537 ms/op
     p(95.0000) =   1371.537 ms/op
     p(99.0000) =   1371.537 ms/op
     p(99.9000) =   1371.537 ms/op
     p(99.9900) =   1371.537 ms/op
     p(99.9990) =   1371.537 ms/op
     p(99.9999) =   1371.537 ms/op
    p(100.0000) =   1371.537 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.write
# Parameters: (batchSize = 1000000, intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 13.36% complete, ETA 02:36:12
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 2659 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2659, 2659, 2659, 2659, 2659, 2659, 2659, 2659 ms/op
# Warmup Iteration   2: n = 1, mean = 2718 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2718, 2718, 2718, 2718, 2718, 2718, 2718, 2718 ms/op
# Warmup Iteration   3: n = 1, mean = 2877 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877 ms/op
Iteration   1: n = 1, mean = 2286 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2286, 2286, 2286, 2286, 2286, 2286, 2286, 2286 ms/op
Iteration   2: n = 1, mean = 2512 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2512, 2512, 2512, 2512, 2512, 2512, 2512, 2512 ms/op
Iteration   3: n = 1, mean = 2290 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2290, 2290, 2290, 2290, 2290, 2290, 2290, 2290 ms/op

# Run progress: 13.51% complete, ETA 02:36:02
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 2605 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2605, 2605, 2605, 2605, 2605, 2605, 2605, 2605 ms/op
# Warmup Iteration   2: n = 1, mean = 2324 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2324, 2324, 2324, 2324, 2324, 2324, 2324, 2324 ms/op
# Warmup Iteration   3: n = 1, mean = 2458 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458 ms/op
Iteration   1: n = 1, mean = 2592 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592 ms/op
Iteration   2: n = 1, mean = 2290 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2290, 2290, 2290, 2290, 2290, 2290, 2290, 2290 ms/op
Iteration   3: n = 1, mean = 2282 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2282, 2282, 2282, 2282, 2282, 2282, 2282, 2282 ms/op

# Run progress: 13.65% complete, ETA 02:35:46
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 2617 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2617, 2617, 2617, 2617, 2617, 2617, 2617, 2617 ms/op
# Warmup Iteration   2: n = 1, mean = 2756 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2756, 2756, 2756, 2756, 2756, 2756, 2756, 2756 ms/op
# Warmup Iteration   3: n = 1, mean = 2735 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2735, 2735, 2735, 2735, 2735, 2735, 2735, 2735 ms/op
Iteration   1: n = 1, mean = 2705 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2705, 2705, 2705, 2705, 2705, 2705, 2705, 2705 ms/op
Iteration   2: n = 1, mean = 2579 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2579, 2579, 2579, 2579, 2579, 2579, 2579, 2579 ms/op
Iteration   3: n = 1, mean = 2915 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915 ms/op


Result "write":
  N = 9
  mean =   2494.679 ±(99.9%) 380.765 ms/op

  Histogram, ms/op:
    [2200.000, 2250.000) = 0 
    [2250.000, 2300.000) = 4 
    [2300.000, 2350.000) = 0 
    [2350.000, 2400.000) = 0 
    [2400.000, 2450.000) = 0 
    [2450.000, 2500.000) = 0 
    [2500.000, 2550.000) = 1 
    [2550.000, 2600.000) = 2 
    [2600.000, 2650.000) = 0 
    [2650.000, 2700.000) = 0 
    [2700.000, 2750.000) = 1 
    [2750.000, 2800.000) = 0 
    [2800.000, 2850.000) = 0 
    [2850.000, 2900.000) = 0 
    [2900.000, 2950.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2281.701 ms/op
     p(50.0000) =   2512.388 ms/op
     p(90.0000) =   2915.041 ms/op
     p(95.0000) =   2915.041 ms/op
     p(99.0000) =   2915.041 ms/op
     p(99.9000) =   2915.041 ms/op
     p(99.9900) =   2915.041 ms/op
     p(99.9990) =   2915.041 ms/op
     p(99.9999) =   2915.041 ms/op
    p(100.0000) =   2915.041 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 13.79% complete, ETA 02:35:42
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 138 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 139, 156, 156, 156, 156, 156, 156 ms/op
# Warmup Iteration   2: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 127, 129, 129, 129, 129, 129, 129 ms/op
# Warmup Iteration   3: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 128, 128, 128, 128, 128, 128, 128 ms/op
Iteration   1: n = 7, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 146, 239, 239, 239, 239, 239, 239 ms/op
Iteration   2: n = 8, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 131, 133, 133, 133, 133, 133, 133 ms/op
Iteration   3: n = 7, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 143, 215, 215, 215, 215, 215, 215 ms/op

# Run progress: 13.94% complete, ETA 02:34:36
# Fork: 2 of 3
# Warmup Iteration   1: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 148, 161, 161, 161, 161, 161, 161 ms/op
# Warmup Iteration   2: n = 6, mean = 174 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 150, 224, 224, 224, 224, 224, 224 ms/op
# Warmup Iteration   3: n = 7, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 149, 217, 217, 217, 217, 217, 217 ms/op
Iteration   1: n = 7, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 149, 222, 222, 222, 222, 222, 222 ms/op
Iteration   2: n = 8, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 132, 134, 134, 134, 134, 134, 134 ms/op
Iteration   3: n = 7, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 148, 215, 215, 215, 215, 215, 215 ms/op

# Run progress: 14.08% complete, ETA 02:33:31
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 142, 156, 156, 156, 156, 156, 156 ms/op
# Warmup Iteration   2: n = 7, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 145, 211, 211, 211, 211, 211, 211 ms/op
# Warmup Iteration   3: n = 6, mean = 174 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 170, 212, 212, 212, 212, 212, 212 ms/op
Iteration   1: n = 7, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 146, 217, 217, 217, 217, 217, 217 ms/op
Iteration   2: n = 7, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 145, 217, 217, 217, 217, 217, 217 ms/op
Iteration   3: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 129, 130, 130, 130, 130, 130, 130 ms/op


Result "readCrc":
  N = 66
  mean =    147.742 ±(99.9%) 11.075 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 29 
    [137.500, 150.000) = 29 
    [150.000, 162.500) = 1 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 0 
    [187.500, 200.000) = 0 
    [200.000, 212.500) = 1 
    [212.500, 225.000) = 5 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 1 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    129.237 ms/op
     p(50.0000) =    143.393 ms/op
     p(90.0000) =    210.633 ms/op
     p(95.0000) =    217.134 ms/op
     p(99.0000) =    239.075 ms/op
     p(99.9000) =    239.075 ms/op
     p(99.9900) =    239.075 ms/op
     p(99.9990) =    239.075 ms/op
     p(99.9999) =    239.075 ms/op
    p(100.0000) =    239.075 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 14.22% complete, ETA 02:32:27
# Fork: 1 of 3
# Warmup Iteration   1: n = 5, mean = 200 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 182, 185, 261, 261, 261, 261, 261, 261 ms/op
# Warmup Iteration   2: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 166, 168, 214, 214, 214, 214, 214, 214 ms/op
# Warmup Iteration   3: n = 6, mean = 192 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 165, 185, 248, 248, 248, 248, 248, 248 ms/op
Iteration   1: n = 6, mean = 192 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 173, 185, 240, 240, 240, 240, 240, 240 ms/op
Iteration   2: n = 6, mean = 192 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 168, 186, 246, 246, 246, 246, 246, 246 ms/op
Iteration   3: n = 6, mean = 186 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 164, 170, 274, 274, 274, 274, 274, 274 ms/op

# Run progress: 14.37% complete, ETA 02:31:31
# Fork: 2 of 3
# Warmup Iteration   1: n = 7, mean = 151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 149, 161, 161, 161, 161, 161, 161 ms/op
# Warmup Iteration   2: n = 6, mean = 191 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 181, 227, 227, 227, 227, 227, 227 ms/op
# Warmup Iteration   3: n = 5, mean = 205 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 185, 199, 229, 229, 229, 229, 229, 229 ms/op
Iteration   1: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 156, 169, 239, 239, 239, 239, 239, 239 ms/op
Iteration   2: n = 7, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 149, 153, 153, 153, 153, 153, 153 ms/op
Iteration   3: n = 6, mean = 192 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 166, 185, 248, 248, 248, 248, 248, 248 ms/op

# Run progress: 14.51% complete, ETA 02:30:34
# Fork: 3 of 3
# Warmup Iteration   1: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 118, 118, 129, 129, 129, 129, 129, 129 ms/op
# Warmup Iteration   2: n = 7, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 150, 201, 201, 201, 201, 201, 201 ms/op
# Warmup Iteration   3: n = 7, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 151, 211, 211, 211, 211, 211, 211 ms/op
Iteration   1: n = 7, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 151, 212, 212, 212, 212, 212, 212 ms/op
Iteration   2: n = 7, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 150, 210, 210, 210, 210, 210, 210 ms/op
Iteration   3: n = 9, mean = 124 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 117, 117, 133, 133, 133, 133, 133, 133 ms/op


Result "readCrc":
  N = 60
  mean =    167.241 ±(99.9%) 15.094 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 5 
    [125.000, 137.500) = 7 
    [137.500, 150.000) = 7 
    [150.000, 162.500) = 8 
    [162.500, 175.000) = 13 
    [175.000, 187.500) = 13 
    [187.500, 200.000) = 0 
    [200.000, 212.500) = 2 
    [212.500, 225.000) = 0 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 4 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 1 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    117.047 ms/op
     p(50.0000) =    168.165 ms/op
     p(90.0000) =    211.603 ms/op
     p(95.0000) =    245.354 ms/op
     p(99.0000) =    274.203 ms/op
     p(99.9000) =    274.203 ms/op
     p(99.9900) =    274.203 ms/op
     p(99.9990) =    274.203 ms/op
     p(99.9999) =    274.203 ms/op
    p(100.0000) =    274.203 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 14.66% complete, ETA 02:29:40
# Fork: 1 of 3
# Warmup Iteration   1: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 112, 116, 142, 142, 142, 142, 142, 142 ms/op
# Warmup Iteration   2: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 128, 191, 191, 191, 191, 191, 191 ms/op
# Warmup Iteration   3: n = 8, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 128, 184, 184, 184, 184, 184, 184 ms/op
Iteration   1: n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 114, 114, 120, 120, 120, 120, 120, 120 ms/op
Iteration   2: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 128, 193, 193, 193, 193, 193, 193 ms/op
Iteration   3: n = 8, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 112, 126, 194, 194, 194, 194, 194, 194 ms/op

# Run progress: 14.80% complete, ETA 02:28:42
# Fork: 2 of 3
# Warmup Iteration   1: n = 7, mean = 164 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 156, 158, 187, 187, 187, 187, 187, 187 ms/op
# Warmup Iteration   2: n = 7, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 156, 156, 159, 159, 159, 159, 159, 159 ms/op
# Warmup Iteration   3: n = 7, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 156, 156, 157, 157, 157, 157, 157, 157 ms/op
Iteration   1: n = 6, mean = 184 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 157, 175, 246, 246, 246, 246, 246, 246 ms/op
Iteration   2: n = 7, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 156, 156, 164, 164, 164, 164, 164, 164 ms/op
Iteration   3: n = 7, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 156, 156, 156, 156, 156, 156, 156, 156 ms/op

# Run progress: 14.94% complete, ETA 02:27:45
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 125, 213, 213, 213, 213, 213, 213 ms/op
# Warmup Iteration   2: n = 8, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 127, 155, 155, 155, 155, 155, 155 ms/op
# Warmup Iteration   3: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 113, 119, 119, 119, 119, 119, 119 ms/op
Iteration   1: n = 8, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 115, 125, 197, 197, 197, 197, 197, 197 ms/op
Iteration   2: n = 8, mean = 134 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 117, 125, 200, 200, 200, 200, 200, 200 ms/op
Iteration   3: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 111, 112, 118, 118, 118, 118, 118, 118 ms/op


Result "readCrc":
  N = 69
  mean =    138.874 ±(99.9%) 11.686 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 6 
    [112.500, 125.000) = 20 
    [125.000, 137.500) = 18 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 14 
    [162.500, 175.000) = 2 
    [175.000, 187.500) = 3 
    [187.500, 200.000) = 4 
    [200.000, 212.500) = 1 
    [212.500, 225.000) = 0 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 1 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    111.149 ms/op
     p(50.0000) =    125.829 ms/op
     p(90.0000) =    176.161 ms/op
     p(95.0000) =    195.559 ms/op
     p(99.0000) =    246.153 ms/op
     p(99.9000) =    246.153 ms/op
     p(99.9900) =    246.153 ms/op
     p(99.9990) =    246.153 ms/op
     p(99.9999) =    246.153 ms/op
    p(100.0000) =    246.153 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 15.09% complete, ETA 02:26:49
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 135, 147, 147, 147, 147, 147, 147 ms/op
# Warmup Iteration   2: n = 6, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 167, 195, 195, 195, 195, 195, 195 ms/op
# Warmup Iteration   3: n = 7, mean = 155 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 151, 152, 169, 169, 169, 169, 169, 169 ms/op
Iteration   1: n = 7, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 154, 222, 222, 222, 222, 222, 222 ms/op
Iteration   2: n = 8, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 135, 136, 136, 136, 136, 136, 136 ms/op
Iteration   3: n = 6, mean = 172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 153, 154, 258, 258, 258, 258, 258, 258 ms/op

# Run progress: 15.23% complete, ETA 02:26:00
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 179, 179, 192, 192, 192, 192, 192, 192 ms/op
# Warmup Iteration   2: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 179, 179, 180, 180, 180, 180, 180, 180 ms/op
# Warmup Iteration   3: n = 6, mean = 180 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 179, 179, 185, 185, 185, 185, 185, 185 ms/op
Iteration   1: n = 5, mean = 214 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 189, 202, 272, 272, 272, 272, 272, 272 ms/op
Iteration   2: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 179, 179, 183, 183, 183, 183, 183, 183 ms/op
Iteration   3: n = 5, mean = 226 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 197, 218, 280, 280, 280, 280, 280, 280 ms/op

# Run progress: 15.37% complete, ETA 02:25:12
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 137, 150, 150, 150, 150, 150, 150 ms/op
# Warmup Iteration   2: n = 6, mean = 184 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 172, 173, 225, 225, 225, 225, 225, 225 ms/op
# Warmup Iteration   3: n = 6, mean = 182 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 156, 165, 227, 227, 227, 227, 227, 227 ms/op
Iteration   1: n = 6, mean = 168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 155, 156, 230, 230, 230, 230, 230, 230 ms/op
Iteration   2: n = 8, mean = 137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 137, 138, 138, 138, 138, 138, 138 ms/op
Iteration   3: n = 8, mean = 137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 137, 137, 137, 137, 137, 137, 137 ms/op


Result "readCrc":
  N = 59
  mean =    164.702 ±(99.9%) 16.591 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 24 
    [137.500, 150.000) = 1 
    [150.000, 162.500) = 15 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 6 
    [187.500, 200.000) = 2 
    [200.000, 212.500) = 3 
    [212.500, 225.000) = 4 
    [225.000, 237.500) = 1 
    [237.500, 250.000) = 0 
    [250.000, 262.500) = 1 
    [262.500, 275.000) = 1 
    [275.000, 287.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    135.004 ms/op
     p(50.0000) =    153.879 ms/op
     p(90.0000) =    219.152 ms/op
     p(95.0000) =    257.688 ms/op
     p(99.0000) =    280.494 ms/op
     p(99.9000) =    280.494 ms/op
     p(99.9900) =    280.494 ms/op
     p(99.9990) =    280.494 ms/op
     p(99.9999) =    280.494 ms/op
    p(100.0000) =    280.494 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 15.52% complete, ETA 02:24:24
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	compacted	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 107, 147, 151, 151, 151, 151, 151 ms/op
# Warmup Iteration   2: n = 11, mean = 95 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 94, 96, 96, 96, 96, 96, 96 ms/op
# Warmup Iteration   3: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 107, 167, 167, 167, 167, 167, 167 ms/op
Iteration   1: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 106, 171, 171, 171, 171, 171, 171 ms/op
Iteration   2: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 93, 96, 96, 96, 96, 96, 96 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 106, 169, 169, 169, 169, 169, 169 ms/op

# Run progress: 15.66% complete, ETA 02:23:30
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	compacted	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 114, 148, 148, 148, 148, 148, 148 ms/op
# Warmup Iteration   2: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 102, 104, 104, 104, 104, 104, 104 ms/op
# Warmup Iteration   3: n = 8, mean = 125 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 112, 113, 166, 166, 166, 166, 166, 166 ms/op
Iteration   1: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 113, 168, 168, 168, 168, 168, 168 ms/op
Iteration   2: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 113, 170, 170, 170, 170, 170, 170 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 113, 165, 165, 165, 165, 165, 165 ms/op

# Run progress: 15.80% complete, ETA 02:22:36
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	compacted	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 115, 162, 162, 162, 162, 162, 162 ms/op
# Warmup Iteration   2: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 105, 109, 109, 109, 109, 109, 109 ms/op
# Warmup Iteration   3: n = 10, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 104, 160, 165, 165, 165, 165, 165 ms/op
Iteration   1: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 104, 108, 108, 108, 108, 108, 108 ms/op
Iteration   2: n = 11, mean = 95 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 94, 98, 98, 98, 98, 98, 98 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 8, mean = 125 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 117, 172, 172, 172, 172, 172, 172 ms/op


Result "readKey":
  N = 85
  mean =    109.746 ±(99.9%) 6.896 ms/op

  Histogram, ms/op:
    [ 90.000,  95.000) = 18 
    [ 95.000, 100.000) = 6 
    [100.000, 105.000) = 13 
    [105.000, 110.000) = 13 
    [110.000, 115.000) = 20 
    [115.000, 120.000) = 8 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 1 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 0 
    [150.000, 155.000) = 0 
    [155.000, 160.000) = 0 
    [160.000, 165.000) = 1 
    [165.000, 170.000) = 2 
    [170.000, 175.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =     92.799 ms/op
     p(50.0000) =    105.775 ms/op
     p(90.0000) =    118.148 ms/op
     p(95.0000) =    168.690 ms/op
     p(99.0000) =    171.704 ms/op
     p(99.9000) =    171.704 ms/op
     p(99.9900) =    171.704 ms/op
     p(99.9990) =    171.704 ms/op
     p(99.9999) =    171.704 ms/op
    p(100.0000) =    171.704 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readKey
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 15.95% complete, ETA 02:21:44
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	compacted	171589632	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 2, mean = 862 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 818, 862, 906, 906, 906, 906, 906, 906 ms/op
# Warmup Iteration   2: n = 2, mean = 844 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 778, 844, 909, 909, 909, 909, 909, 909 ms/op
# Warmup Iteration   3: n = 2, mean = 785 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 768, 785, 803, 803, 803, 803, 803, 803 ms/op
Iteration   1: n = 2, mean = 725 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 662, 725, 789, 789, 789, 789, 789, 789 ms/op
Iteration   2: n = 2, mean = 603 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 587, 603, 619, 619, 619, 619, 619, 619 ms/op
Iteration   3: 
Bytes	before-close	171601920	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	171601920	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 619 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 618, 619, 621, 621, 621, 621, 621, 621 ms/op

# Run progress: 16.09% complete, ETA 02:21:11
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	compacted	171933696	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 2, mean = 880 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 820, 880, 940, 940, 940, 940, 940, 940 ms/op
# Warmup Iteration   2: n = 2, mean = 653 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 613, 653, 693, 693, 693, 693, 693, 693 ms/op
# Warmup Iteration   3: n = 2, mean = 659 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 654, 659, 663, 663, 663, 663, 663, 663 ms/op
Iteration   1: n = 2, mean = 733 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 659, 733, 807, 807, 807, 807, 807, 807 ms/op
Iteration   2: n = 2, mean = 649 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 640, 649, 657, 657, 657, 657, 657, 657 ms/op
Iteration   3: 
Bytes	before-close	171945984	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	171945984	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 617 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 601, 617, 633, 633, 633, 633, 633, 633 ms/op

# Run progress: 16.24% complete, ETA 02:20:36
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	compacted	172048384	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 2, mean = 674 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 606, 674, 742, 742, 742, 742, 742, 742 ms/op
# Warmup Iteration   2: n = 2, mean = 596 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 596, 596, 596, 596, 596, 596, 596, 596 ms/op
# Warmup Iteration   3: n = 2, mean = 597 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 597, 597, 598, 598, 598, 598, 598, 598 ms/op
Iteration   1: n = 2, mean = 694 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 636, 694, 752, 752, 752, 752, 752, 752 ms/op
Iteration   2: n = 2, mean = 595 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 595, 595, 596, 596, 596, 596, 596, 596 ms/op
Iteration   3: 
Bytes	before-close	172060672	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	172060672	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 597 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 597, 597, 598, 598, 598, 598, 598, 598 ms/op


Result "readKey":
  N = 18
  mean =    648.020 ±(99.9%) 62.474 ms/op

  Histogram, ms/op:
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 0 
    [550.000, 575.000) = 0 
    [575.000, 600.000) = 5 
    [600.000, 625.000) = 4 
    [625.000, 650.000) = 3 
    [650.000, 675.000) = 3 
    [675.000, 700.000) = 0 
    [700.000, 725.000) = 0 
    [725.000, 750.000) = 0 
    [750.000, 775.000) = 1 
    [775.000, 800.000) = 1 
    [800.000, 825.000) = 1 
    [825.000, 850.000) = 0 
    [850.000, 875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    587.203 ms/op
     p(50.0000) =    627.048 ms/op
     p(90.0000) =    790.417 ms/op
     p(95.0000) =    807.404 ms/op
     p(99.0000) =    807.404 ms/op
     p(99.9000) =    807.404 ms/op
     p(99.9900) =    807.404 ms/op
     p(99.9990) =    807.404 ms/op
     p(99.9999) =    807.404 ms/op
    p(100.0000) =    807.404 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readKey
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 16.38% complete, ETA 02:19:56
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	compacted	128847872	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 3, mean = 394 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 318, 378, 485, 485, 485, 485, 485, 485 ms/op
# Warmup Iteration   2: n = 4, mean = 328 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 300, 329, 354, 354, 354, 354, 354, 354 ms/op
# Warmup Iteration   3: n = 3, mean = 377 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 326, 398, 408, 408, 408, 408, 408, 408 ms/op
Iteration   1: n = 3, mean = 350 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 337, 347, 368, 368, 368, 368, 368, 368 ms/op
Iteration   2: n = 4, mean = 323 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 301, 311, 368, 368, 368, 368, 368, 368 ms/op
Iteration   3: 
Bytes	before-close	128860160	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	128860160	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 3, mean = 355 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 300, 300, 466, 466, 466, 466, 466, 466 ms/op

# Run progress: 16.52% complete, ETA 02:19:13
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	compacted	128847872	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 3, mean = 362 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 337, 341, 409, 409, 409, 409, 409, 409 ms/op
# Warmup Iteration   2: n = 4, mean = 321 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 297, 320, 346, 346, 346, 346, 346, 346 ms/op
# Warmup Iteration   3: n = 3, mean = 361 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 333, 341, 407, 407, 407, 407, 407, 407 ms/op
Iteration   1: n = 3, mean = 387 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 357, 400, 405, 405, 405, 405, 405, 405 ms/op
Iteration   2: n = 4, mean = 347 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 297, 342, 409, 409, 409, 409, 409, 409 ms/op
Iteration   3: 
Bytes	before-close	128860160	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	128860160	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 4, mean = 314 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 292, 316, 333, 333, 333, 333, 333, 333 ms/op

# Run progress: 16.67% complete, ETA 02:18:31
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	compacted	128847872	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 3, mean = 397 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 318, 378, 493, 493, 493, 493, 493, 493 ms/op
# Warmup Iteration   2: n = 4, mean = 326 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 298, 328, 350, 350, 350, 350, 350, 350 ms/op
# Warmup Iteration   3: n = 4, mean = 300 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 298, 299, 305, 305, 305, 305, 305, 305 ms/op
Iteration   1: n = 3, mean = 408 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 383, 419, 422, 422, 422, 422, 422, 422 ms/op
Iteration   2: n = 3, mean = 366 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 335, 343, 419, 419, 419, 419, 419, 419 ms/op
Iteration   3: 
Bytes	before-close	128860160	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	128860160	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 3, mean = 435 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 347, 434, 525, 525, 525, 525, 525, 525 ms/op


Result "readKey":
  N = 30
  mean =    361.444 ±(99.9%) 38.191 ms/op

  Histogram, ms/op:
    [200.000, 225.000) = 0 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 0 
    [275.000, 300.000) = 3 
    [300.000, 325.000) = 6 
    [325.000, 350.000) = 7 
    [350.000, 375.000) = 4 
    [375.000, 400.000) = 1 
    [400.000, 425.000) = 6 
    [425.000, 450.000) = 1 
    [450.000, 475.000) = 1 
    [475.000, 500.000) = 0 
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 1 
    [550.000, 575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    291.504 ms/op
     p(50.0000) =    346.554 ms/op
     p(90.0000) =    432.433 ms/op
     p(95.0000) =    492.752 ms/op
     p(99.0000) =    525.337 ms/op
     p(99.9000) =    525.337 ms/op
     p(99.9900) =    525.337 ms/op
     p(99.9990) =    525.337 ms/op
     p(99.9999) =    525.337 ms/op
    p(100.0000) =    525.337 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readKey
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 16.81% complete, ETA 02:17:49
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	compacted	189231104	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 1, mean = 1174 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174 ms/op
# Warmup Iteration   2: n = 1, mean = 1122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122 ms/op
# Warmup Iteration   3: n = 1, mean = 1235 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235 ms/op
Iteration   1: n = 1, mean = 1229 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229 ms/op
Iteration   2: n = 2, mean = 1066 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 992, 1066, 1141, 1141, 1141, 1141, 1141, 1141 ms/op
Iteration   3: 
Bytes	before-close	189243392	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	189243392	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 952 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 950, 952, 953, 953, 953, 953, 953, 953 ms/op

# Run progress: 16.95% complete, ETA 02:17:19
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	compacted	189423616	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 1, mean = 1363 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363 ms/op
# Warmup Iteration   2: n = 1, mean = 1296 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296 ms/op
# Warmup Iteration   3: n = 1, mean = 1355 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355 ms/op
Iteration   1: n = 1, mean = 1369 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369 ms/op
Iteration   2: n = 1, mean = 1151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151 ms/op
Iteration   3: 
Bytes	before-close	189435904	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	189435904	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 1193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193 ms/op

# Run progress: 17.10% complete, ETA 02:16:46
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	compacted	189112320	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 1, mean = 1156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156 ms/op
# Warmup Iteration   2: n = 1, mean = 1118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118 ms/op
# Warmup Iteration   3: n = 2, mean = 932 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 932, 932, 932, 932, 932, 932, 932, 932 ms/op
Iteration   1: n = 1, mean = 1109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109 ms/op
Iteration   2: n = 2, mean = 935 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 932, 935, 937, 937, 937, 937, 937, 937 ms/op
Iteration   3: 
Bytes	before-close	189124608	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	189124608	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 930 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 927, 930, 933, 933, 933, 933, 933, 933 ms/op


Result "readKey":
  N = 13
  mean =   1062.933 ±(99.9%) 173.726 ms/op

  Histogram, ms/op:
    [ 900.000,  950.000) = 4 
    [ 950.000, 1000.000) = 3 
    [1000.000, 1050.000) = 0 
    [1050.000, 1100.000) = 0 
    [1100.000, 1150.000) = 2 
    [1150.000, 1200.000) = 2 
    [1200.000, 1250.000) = 1 
    [1250.000, 1300.000) = 0 
    [1300.000, 1350.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    926.941 ms/op
     p(50.0000) =    991.953 ms/op
     p(90.0000) =   1313.237 ms/op
     p(95.0000) =   1369.440 ms/op
     p(99.0000) =   1369.440 ms/op
     p(99.9000) =   1369.440 ms/op
     p(99.9900) =   1369.440 ms/op
     p(99.9990) =   1369.440 ms/op
     p(99.9999) =   1369.440 ms/op
    p(100.0000) =   1369.440 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readRev
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 17.24% complete, ETA 02:16:17
# Fork: 1 of 3
# Warmup Iteration   1: n = 25, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 37, 50, 79, 88, 88, 88, 88 ms/op
# Warmup Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 34, 34, 35, 35, 35, 35 ms/op
# Warmup Iteration   3: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 37, 49, 66, 73, 73, 73, 73 ms/op
Iteration   1: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 36, 48, 68, 74, 74, 74, 74 ms/op
Iteration   2: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 35, 35, 36, 36, 36, 36 ms/op
Iteration   3: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 33, 34, 34, 34, 34, 34 ms/op

# Run progress: 17.39% complete, ETA 02:15:30
# Fork: 2 of 3
# Warmup Iteration   1: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 36, 38, 42, 46, 46, 46, 46 ms/op
# Warmup Iteration   2: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 38, 60, 68, 69, 69, 69, 69 ms/op
# Warmup Iteration   3: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 38, 62, 72, 73, 73, 73, 73 ms/op
Iteration   1: n = 23, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 38, 66, 72, 73, 73, 73, 73 ms/op
Iteration   2: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 34, 38, 38, 38, 38, 38, 38 ms/op
Iteration   3: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 36, 47, 63, 69, 69, 69, 69 ms/op

# Run progress: 17.53% complete, ETA 02:14:42
# Fork: 3 of 3
# Warmup Iteration   1: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 34, 36, 40, 45, 45, 45, 45 ms/op
# Warmup Iteration   2: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 34, 45, 59, 66, 66, 66, 66 ms/op
# Warmup Iteration   3: n = 28, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 34, 45, 63, 70, 70, 70, 70 ms/op
Iteration   1: n = 25, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 34, 61, 72, 73, 73, 73, 73 ms/op
Iteration   2: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 34, 34, 34, 34, 34, 34 ms/op
Iteration   3: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 34, 44, 57, 64, 64, 64, 64 ms/op


Result "readRev":
  N = 253
  mean =     36.182 ±(99.9%) 1.522 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 160 
    [35.000, 40.000) = 71 
    [40.000, 45.000) = 2 
    [45.000, 50.000) = 6 
    [50.000, 55.000) = 4 
    [55.000, 60.000) = 3 
    [60.000, 65.000) = 1 
    [65.000, 70.000) = 1 
    [70.000, 75.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =     30.441 ms/op
     p(50.0000) =     34.275 ms/op
     p(90.0000) =     39.295 ms/op
     p(95.0000) =     52.992 ms/op
     p(99.0000) =     72.745 ms/op
     p(99.9000) =     74.056 ms/op
     p(99.9900) =     74.056 ms/op
     p(99.9990) =     74.056 ms/op
     p(99.9999) =     74.056 ms/op
    p(100.0000) =     74.056 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readRev
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 17.67% complete, ETA 02:13:55
# Fork: 1 of 3
# Warmup Iteration   1: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 53, 55, 61, 61, 61, 61, 61 ms/op
# Warmup Iteration   2: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 62, 78, 87, 87, 87, 87, 87 ms/op
# Warmup Iteration   3: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 79, 101, 106, 106, 106, 106, 106 ms/op
Iteration   1: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 61, 84, 97, 97, 97, 97, 97 ms/op
Iteration   2: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 53, 53, 53, 53, 53, 53, 53 ms/op
Iteration   3: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 62, 82, 93, 93, 93, 93, 93 ms/op

# Run progress: 17.82% complete, ETA 02:13:13
# Fork: 2 of 3
# Warmup Iteration   1: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 51, 53, 59, 60, 60, 60, 60 ms/op
# Warmup Iteration   2: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 51, 52, 52, 52, 52, 52, 52 ms/op
# Warmup Iteration   3: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 60, 77, 85, 85, 85, 85, 85 ms/op
Iteration   1: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 60, 81, 90, 90, 90, 90, 90 ms/op
Iteration   2: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 59, 81, 91, 91, 91, 91, 91 ms/op
Iteration   3: n = 16, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 59, 82, 92, 92, 92, 92, 92 ms/op

# Run progress: 17.96% complete, ETA 02:12:31
# Fork: 3 of 3
# Warmup Iteration   1: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 72, 79, 111, 118, 118, 118, 118, 118 ms/op
# Warmup Iteration   2: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 72, 79, 104, 112, 112, 112, 112, 112 ms/op
# Warmup Iteration   3: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 62, 83, 94, 94, 94, 94, 94 ms/op
Iteration   1: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 54, 55, 55, 55, 55, 55, 55 ms/op
Iteration   2: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 54, 55, 56, 56, 56, 56, 56 ms/op
Iteration   3: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 73, 79, 101, 106, 106, 106, 106, 106 ms/op


Result "readRev":
  N = 150
  mean =     61.485 ±(99.9%) 2.842 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 54 
    [ 55.000,  60.000) = 31 
    [ 60.000,  65.000) = 38 
    [ 65.000,  70.000) = 4 
    [ 70.000,  75.000) = 1 
    [ 75.000,  80.000) = 14 
    [ 80.000,  85.000) = 1 
    [ 85.000,  90.000) = 1 
    [ 90.000,  95.000) = 4 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     52.625 ms/op
     p(50.0000) =     59.376 ms/op
     p(90.0000) =     78.997 ms/op
     p(95.0000) =     84.895 ms/op
     p(99.0000) =    101.160 ms/op
     p(99.9000) =    105.906 ms/op
     p(99.9900) =    105.906 ms/op
     p(99.9990) =    105.906 ms/op
     p(99.9999) =    105.906 ms/op
    p(100.0000) =    105.906 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readRev
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 18.10% complete, ETA 02:11:50
# Fork: 1 of 3
# Warmup Iteration   1: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 38, 49, 78, 88, 88, 88, 88 ms/op
# Warmup Iteration   2: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 34, 34, 35, 36, 36, 36, 36 ms/op
# Warmup Iteration   3: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 38, 64, 72, 72, 72, 72, 72 ms/op
Iteration   1: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 36, 36, 37, 38, 38, 38, 38 ms/op
Iteration   2: n = 25, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 38, 49, 65, 70, 70, 70, 70 ms/op
Iteration   3: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 35, 46, 63, 70, 70, 70, 70 ms/op

# Run progress: 18.25% complete, ETA 02:11:07
# Fork: 2 of 3
# Warmup Iteration   1: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 34, 38, 42, 46, 46, 46, 46 ms/op
# Warmup Iteration   2: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 63, 68, 70, 70, 70, 70 ms/op
# Warmup Iteration   3: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 66, 73, 74, 74, 74, 74 ms/op
Iteration   1: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 38, 42, 51, 54, 54, 54, 54 ms/op
Iteration   2: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 60, 70, 71, 71, 71, 71 ms/op
Iteration   3: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 36, 50, 68, 74, 74, 74, 74 ms/op

# Run progress: 18.39% complete, ETA 02:10:24
# Fork: 3 of 3
# Warmup Iteration   1: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 37, 51, 78, 87, 87, 87, 87 ms/op
# Warmup Iteration   2: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 35, 46, 62, 68, 68, 68, 68 ms/op
# Warmup Iteration   3: n = 26, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 34, 59, 64, 65, 65, 65, 65 ms/op
Iteration   1: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 35, 47, 65, 73, 73, 73, 73 ms/op
Iteration   2: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 31, 32, 33, 33, 33, 33 ms/op
Iteration   3: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 37, 48, 66, 72, 72, 72, 72 ms/op


Result "readRev":
  N = 244
  mean =     37.502 ±(99.9%) 1.560 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 89 
    [35.000, 40.000) = 127 
    [40.000, 45.000) = 7 
    [45.000, 50.000) = 6 
    [50.000, 55.000) = 7 
    [55.000, 60.000) = 1 
    [60.000, 65.000) = 0 
    [65.000, 70.000) = 1 
    [70.000, 75.000) = 6 

  Percentiles, ms/op:
      p(0.0000) =     30.900 ms/op
     p(50.0000) =     36.176 ms/op
     p(90.0000) =     41.026 ms/op
     p(95.0000) =     53.543 ms/op
     p(99.0000) =     72.640 ms/op
     p(99.9000) =     73.925 ms/op
     p(99.9900) =     73.925 ms/op
     p(99.9990) =     73.925 ms/op
     p(99.9999) =     73.925 ms/op
    p(100.0000) =     73.925 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readRev
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 18.53% complete, ETA 02:09:43
# Fork: 1 of 3
# Warmup Iteration   1: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 53, 55, 62, 62, 62, 62, 62 ms/op
# Warmup Iteration   2: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 69, 95, 101, 101, 101, 101, 101 ms/op
# Warmup Iteration   3: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 53, 62, 64, 64, 64, 64, 64 ms/op
Iteration   1: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 80, 80, 100, 102, 102, 102, 102, 102 ms/op
Iteration   2: n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 80, 109, 117, 117, 117, 117, 117 ms/op
Iteration   3: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 72, 72, 73, 73, 73, 73, 73, 73 ms/op

# Run progress: 18.68% complete, ETA 02:09:06
# Fork: 2 of 3
# Warmup Iteration   1: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 54, 55, 62, 62, 62, 62, 62 ms/op
# Warmup Iteration   2: n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 80, 81, 98, 101, 101, 101, 101, 101 ms/op
# Warmup Iteration   3: n = 13, mean = 83 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 73, 81, 101, 105, 105, 105, 105, 105 ms/op
Iteration   1: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 63, 80, 90, 90, 90, 90, 90 ms/op
Iteration   2: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 54, 55, 55, 55, 55, 55, 55 ms/op
Iteration   3: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 54, 54, 54, 54, 54, 54, 54 ms/op

# Run progress: 18.82% complete, ETA 02:08:29
# Fork: 3 of 3
# Warmup Iteration   1: n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 81, 112, 118, 118, 118, 118, 118 ms/op
# Warmup Iteration   2: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 63, 84, 94, 94, 94, 94, 94 ms/op
# Warmup Iteration   3: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 61, 79, 88, 88, 88, 88, 88 ms/op
Iteration   1: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 57, 73, 87, 87, 87, 87, 87 ms/op
Iteration   2: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 54, 54, 55, 55, 55, 55, 55 ms/op
Iteration   3: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 73, 80, 99, 103, 103, 103, 103, 103 ms/op


Result "readRev":
  N = 141
  mean =     65.782 ±(99.9%) 3.771 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 49 
    [ 55.000,  60.000) = 21 
    [ 60.000,  65.000) = 15 
    [ 65.000,  70.000) = 2 
    [ 70.000,  75.000) = 15 
    [ 75.000,  80.000) = 3 
    [ 80.000,  85.000) = 27 
    [ 85.000,  90.000) = 2 
    [ 90.000,  95.000) = 3 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 2 
    [105.000, 110.000) = 0 
    [110.000, 115.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     53.477 ms/op
     p(50.0000) =     61.604 ms/op
     p(90.0000) =     80.478 ms/op
     p(95.0000) =     91.685 ms/op
     p(99.0000) =    110.853 ms/op
     p(99.9000) =    116.523 ms/op
     p(99.9900) =    116.523 ms/op
     p(99.9990) =    116.523 ms/op
     p(99.9999) =    116.523 ms/op
    p(100.0000) =    116.523 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 18.97% complete, ETA 02:07:53
# Fork: 1 of 3
# Warmup Iteration   1: n = 26, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 41, 42, 47, 50, 50, 50, 50 ms/op
# Warmup Iteration   2: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 36, 59, 69, 72, 72, 72, 72 ms/op
# Warmup Iteration   3: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 45, 58, 62, 62, 62, 62, 62 ms/op
Iteration   1: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 40, 55, 70, 74, 74, 74, 74 ms/op
Iteration   2: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 35, 36, 37, 37, 37, 37, 37 ms/op
Iteration   3: n = 22, mean = 47 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 45, 57, 71, 73, 73, 73, 73 ms/op

# Run progress: 19.11% complete, ETA 02:07:12
# Fork: 2 of 3
# Warmup Iteration   1: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 42, 44, 49, 51, 51, 51, 51 ms/op
# Warmup Iteration   2: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 37, 38, 39, 39, 39, 39, 39 ms/op
# Warmup Iteration   3: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 37, 37, 38, 38, 38, 38, 38 ms/op
Iteration   1: n = 28, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 37, 37, 38, 38, 38, 38, 38 ms/op
Iteration   2: n = 28, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 37, 37, 37, 37, 37, 37, 37 ms/op
Iteration   3: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 47, 51, 64, 78, 78, 78, 78, 78 ms/op

# Run progress: 19.25% complete, ETA 02:06:32
# Fork: 3 of 3
# Warmup Iteration   1: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 50, 50, 62, 95, 95, 95, 95, 95 ms/op
# Warmup Iteration   2: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 45, 46, 48, 49, 49, 49, 49 ms/op
# Warmup Iteration   3: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 45, 45, 46, 46, 46, 46, 46 ms/op
Iteration   1: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 49, 50, 74, 81, 81, 81, 81, 81 ms/op
Iteration   2: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 45, 46, 47, 48, 48, 48, 48 ms/op
Iteration   3: n = 22, mean = 47 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 43, 61, 73, 75, 75, 75, 75 ms/op


Result "readSeq":
  N = 214
  mean =     43.377 ±(99.9%) 1.931 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 7 
    [35.000, 40.000) = 80 
    [40.000, 45.000) = 49 
    [45.000, 50.000) = 32 
    [50.000, 55.000) = 32 
    [55.000, 60.000) = 4 
    [60.000, 65.000) = 3 
    [65.000, 70.000) = 1 
    [70.000, 75.000) = 3 
    [75.000, 80.000) = 2 
    [80.000, 85.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     34.800 ms/op
     p(50.0000) =     42.697 ms/op
     p(90.0000) =     50.790 ms/op
     p(95.0000) =     59.687 ms/op
     p(99.0000) =     77.817 ms/op
     p(99.9000) =     81.002 ms/op
     p(99.9900) =     81.002 ms/op
     p(99.9990) =     81.002 ms/op
     p(99.9999) =     81.002 ms/op
    p(100.0000) =     81.002 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 19.40% complete, ETA 02:05:52
# Fork: 1 of 3
# Warmup Iteration   1: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 57, 67, 74, 74, 74, 74, 74 ms/op
# Warmup Iteration   2: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 58, 59, 59, 59, 59, 59, 59 ms/op
# Warmup Iteration   3: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 58, 59, 59, 59, 59, 59, 59 ms/op
Iteration   1: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 57, 58, 59, 59, 59, 59, 59 ms/op
Iteration   2: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 67, 85, 93, 93, 93, 93, 93 ms/op
Iteration   3: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 67, 87, 96, 96, 96, 96, 96 ms/op

# Run progress: 19.54% complete, ETA 02:05:17
# Fork: 2 of 3
# Warmup Iteration   1: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 80, 84, 111, 122, 122, 122, 122, 122 ms/op
# Warmup Iteration   2: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 84, 102, 106, 106, 106, 106, 106 ms/op
# Warmup Iteration   3: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 57, 65, 66, 66, 66, 66, 66 ms/op
Iteration   1: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 79, 83, 104, 108, 108, 108, 108, 108 ms/op
Iteration   2: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 75, 75, 75, 75, 75, 75, 75 ms/op
Iteration   3: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 65, 86, 94, 94, 94, 94, 94 ms/op

# Run progress: 19.68% complete, ETA 02:04:41
# Fork: 3 of 3
# Warmup Iteration   1: n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 86, 122, 129, 129, 129, 129, 129 ms/op
# Warmup Iteration   2: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 78, 95, 98, 98, 98, 98, 98 ms/op
# Warmup Iteration   3: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 67, 107, 112, 112, 112, 112, 112 ms/op
Iteration   1: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 57, 67, 68, 68, 68, 68, 68 ms/op
Iteration   2: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 57, 58, 58, 58, 58, 58, 58 ms/op
Iteration   3: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 67, 106, 109, 109, 109, 109, 109 ms/op


Result "readSeq":
  N = 137
  mean =     67.850 ±(99.9%) 3.296 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 47 
    [ 60.000,  65.000) = 11 
    [ 65.000,  70.000) = 41 
    [ 70.000,  75.000) = 4 
    [ 75.000,  80.000) = 13 
    [ 80.000,  85.000) = 12 
    [ 85.000,  90.000) = 0 
    [ 90.000,  95.000) = 3 
    [ 95.000, 100.000) = 3 
    [100.000, 105.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     56.885 ms/op
     p(50.0000) =     66.781 ms/op
     p(90.0000) =     83.493 ms/op
     p(95.0000) =     94.031 ms/op
     p(99.0000) =    108.572 ms/op
     p(99.9000) =    108.921 ms/op
     p(99.9900) =    108.921 ms/op
     p(99.9990) =    108.921 ms/op
     p(99.9999) =    108.921 ms/op
    p(100.0000) =    108.921 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 19.83% complete, ETA 02:04:06
# Fork: 1 of 3
# Warmup Iteration   1: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 39, 45, 51, 53, 53, 53, 53 ms/op
# Warmup Iteration   2: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 48, 71, 77, 77, 77, 77, 77 ms/op
# Warmup Iteration   3: n = 22, mean = 47 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 44, 56, 72, 75, 75, 75, 75 ms/op
Iteration   1: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 38, 49, 74, 78, 78, 78, 78 ms/op
Iteration   2: n = 22, mean = 47 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 44, 57, 71, 74, 74, 74, 74 ms/op
Iteration   3: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 38, 38, 38, 38, 38, 38, 38 ms/op

# Run progress: 19.97% complete, ETA 02:03:29
# Fork: 2 of 3
# Warmup Iteration   1: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 43, 46, 49, 50, 50, 50, 50 ms/op
# Warmup Iteration   2: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 44, 44, 74, 79, 79, 79, 79, 79 ms/op
# Warmup Iteration   3: n = 22, mean = 47 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 44, 60, 75, 77, 77, 77, 77 ms/op
Iteration   1: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 38, 38, 38, 39, 39, 39, 39 ms/op
Iteration   2: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 38, 38, 38, 38, 38, 38, 38 ms/op
Iteration   3: n = 23, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 38, 66, 71, 72, 72, 72, 72 ms/op

# Run progress: 20.11% complete, ETA 02:02:52
# Fork: 3 of 3
# Warmup Iteration   1: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 41, 47, 52, 54, 54, 54, 54 ms/op
# Warmup Iteration   2: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 45, 75, 80, 80, 80, 80, 80 ms/op
# Warmup Iteration   3: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 49, 56, 86, 89, 89, 89, 89, 89 ms/op
Iteration   1: n = 21, mean = 50 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 46, 66, 79, 80, 80, 80, 80 ms/op
Iteration   2: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 45, 61, 79, 81, 81, 81, 81 ms/op
Iteration   3: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 39, 40, 40, 40, 40, 40, 40 ms/op


Result "readSeq":
  N = 219
  mean =     42.019 ±(99.9%) 1.764 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 149 
    [40.000, 45.000) = 21 
    [45.000, 50.000) = 31 
    [50.000, 55.000) = 2 
    [55.000, 60.000) = 6 
    [60.000, 65.000) = 3 
    [65.000, 70.000) = 2 
    [70.000, 75.000) = 2 
    [75.000, 80.000) = 1 
    [80.000, 85.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     37.618 ms/op
     p(50.0000) =     38.142 ms/op
     p(90.0000) =     45.613 ms/op
     p(95.0000) =     59.245 ms/op
     p(99.0000) =     79.666 ms/op
     p(99.9000) =     80.740 ms/op
     p(99.9900) =     80.740 ms/op
     p(99.9990) =     80.740 ms/op
     p(99.9999) =     80.740 ms/op
    p(100.0000) =     80.740 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 20.26% complete, ETA 02:02:16
# Fork: 1 of 3
# Warmup Iteration   1: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 61, 63, 67, 67, 67, 67, 67 ms/op
# Warmup Iteration   2: n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 91, 108, 110, 110, 110, 110, 110 ms/op
# Warmup Iteration   3: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 70, 109, 112, 112, 112, 112, 112 ms/op
Iteration   1: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 70, 99, 112, 112, 112, 112, 112 ms/op
Iteration   2: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 60, 60, 61, 61, 61, 61, 61 ms/op
Iteration   3: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 70, 90, 97, 97, 97, 97, 97 ms/op

# Run progress: 20.40% complete, ETA 02:01:44
# Fork: 2 of 3
# Warmup Iteration   1: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 61, 62, 66, 66, 66, 66, 66 ms/op
# Warmup Iteration   2: n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 72, 91, 111, 115, 115, 115, 115, 115 ms/op
# Warmup Iteration   3: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 69, 97, 107, 107, 107, 107, 107 ms/op
Iteration   1: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 69, 91, 97, 97, 97, 97, 97 ms/op
Iteration   2: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 69, 111, 116, 116, 116, 116, 116 ms/op
Iteration   3: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 86, 90, 118, 122, 122, 122, 122, 122 ms/op

# Run progress: 20.55% complete, ETA 02:01:13
# Fork: 3 of 3
# Warmup Iteration   1: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 59, 62, 67, 67, 67, 67, 67 ms/op
# Warmup Iteration   2: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 88, 102, 105, 105, 105, 105, 105 ms/op
# Warmup Iteration   3: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 68, 107, 107, 107, 107, 107, 107 ms/op
Iteration   1: n = 14, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 69, 111, 112, 112, 112, 112, 112 ms/op
Iteration   2: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 69, 97, 109, 109, 109, 109, 109 ms/op
Iteration   3: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 69, 112, 120, 120, 120, 120, 120 ms/op


Result "readSeq":
  N = 124
  mean =     75.032 ±(99.9%) 4.331 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 7 
    [ 60.000,  65.000) = 11 
    [ 65.000,  70.000) = 61 
    [ 70.000,  75.000) = 13 
    [ 75.000,  80.000) = 1 
    [ 80.000,  85.000) = 5 
    [ 85.000,  90.000) = 2 
    [ 90.000,  95.000) = 9 
    [ 95.000, 100.000) = 5 
    [100.000, 105.000) = 3 
    [105.000, 110.000) = 1 
    [110.000, 115.000) = 3 
    [115.000, 120.000) = 1 
    [120.000, 125.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     59.900 ms/op
     p(50.0000) =     69.206 ms/op
     p(90.0000) =     98.304 ms/op
     p(95.0000) =    110.592 ms/op
     p(99.0000) =    121.471 ms/op
     p(99.9000) =    121.897 ms/op
     p(99.9900) =    121.897 ms/op
     p(99.9990) =    121.897 ms/op
     p(99.9999) =    121.897 ms/op
    p(100.0000) =    121.897 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 20.69% complete, ETA 02:00:41
# Fork: 1 of 3
# Warmup Iteration   1: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 67, 87, 99, 99, 99, 99, 99 ms/op
# Warmup Iteration   2: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 61, 98, 115, 115, 115, 115, 115 ms/op
# Warmup Iteration   3: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 72, 99, 101, 101, 101, 101, 101 ms/op
Iteration   1: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 67, 121, 125, 125, 125, 125, 125 ms/op
Iteration   2: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 61, 63, 66, 66, 66, 66, 66 ms/op
Iteration   3: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 72, 103, 122, 122, 122, 122, 122 ms/op

# Run progress: 20.83% complete, ETA 02:00:06
# Fork: 2 of 3
# Warmup Iteration   1: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 67, 123, 161, 161, 161, 161, 161 ms/op
# Warmup Iteration   2: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 70, 113, 115, 115, 115, 115, 115 ms/op
# Warmup Iteration   3: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 67, 102, 123, 123, 123, 123, 123 ms/op
Iteration   1: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 70, 100, 112, 112, 112, 112, 112 ms/op
Iteration   2: n = 15, mean = 71 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 67, 97, 120, 120, 120, 120, 120 ms/op
Iteration   3: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 67, 96, 120, 120, 120, 120, 120 ms/op

# Run progress: 20.98% complete, ETA 01:59:30
# Fork: 3 of 3
# Warmup Iteration   1: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 71, 128, 155, 155, 155, 155, 155 ms/op
# Warmup Iteration   2: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 63, 65, 65, 65, 65, 65, 65 ms/op
# Warmup Iteration   3: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 69, 103, 123, 123, 123, 123, 123 ms/op
Iteration   1: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 72, 105, 125, 125, 125, 125, 125 ms/op
Iteration   2: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 62, 63, 65, 65, 65, 65, 65 ms/op
Iteration   3: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 72, 102, 122, 122, 122, 122, 122 ms/op


Result "readXxh64":
  N = 134
  mean =     70.499 ±(99.9%) 4.020 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 10 
    [ 60.000,  65.000) = 32 
    [ 65.000,  70.000) = 47 
    [ 70.000,  75.000) = 30 
    [ 75.000,  80.000) = 1 
    [ 80.000,  85.000) = 4 
    [ 85.000,  90.000) = 2 
    [ 90.000,  95.000) = 0 
    [ 95.000, 100.000) = 0 
    [100.000, 105.000) = 0 
    [105.000, 110.000) = 0 
    [110.000, 115.000) = 1 
    [115.000, 120.000) = 2 
    [120.000, 125.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =     58.589 ms/op
     p(50.0000) =     66.716 ms/op
     p(90.0000) =     81.134 ms/op
     p(95.0000) =    117.932 ms/op
     p(99.0000) =    125.252 ms/op
     p(99.9000) =    125.436 ms/op
     p(99.9900) =    125.436 ms/op
     p(99.9990) =    125.436 ms/op
     p(99.9999) =    125.436 ms/op
    p(100.0000) =    125.436 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 21.12% complete, ETA 01:58:55
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 111, 195, 195, 195, 195, 195, 195 ms/op
# Warmup Iteration   2: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 94, 95, 95, 95, 95, 95, 95 ms/op
# Warmup Iteration   3: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 94, 152, 154, 154, 154, 154, 154 ms/op
Iteration   1: n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 82, 93, 94, 94, 94, 94, 94 ms/op
Iteration   2: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 82, 82, 82, 82, 82, 82, 82 ms/op
Iteration   3: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 82, 135, 149, 149, 149, 149, 149 ms/op

# Run progress: 21.26% complete, ETA 01:58:25
# Fork: 2 of 3
# Warmup Iteration   1: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 82, 105, 112, 112, 112, 112, 112 ms/op
# Warmup Iteration   2: n = 13, mean = 83 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 83, 85, 86, 86, 86, 86, 86 ms/op
# Warmup Iteration   3: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 114, 136, 138, 138, 138, 138, 138 ms/op
Iteration   1: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 102, 114, 114, 114, 114, 114, 114 ms/op
Iteration   2: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 101, 102, 102, 102, 102, 102, 102 ms/op
Iteration   3: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 95, 141, 145, 145, 145, 145, 145 ms/op

# Run progress: 21.41% complete, ETA 01:57:53
# Fork: 3 of 3
# Warmup Iteration   1: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 110, 183, 183, 183, 183, 183, 183 ms/op
# Warmup Iteration   2: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 98, 128, 130, 130, 130, 130, 130 ms/op
# Warmup Iteration   3: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 93, 158, 160, 160, 160, 160, 160 ms/op
Iteration   1: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 108, 109, 158, 158, 158, 158, 158, 158 ms/op
Iteration   2: n = 11, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 81, 92, 112, 117, 117, 117, 117, 117 ms/op
Iteration   3: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 109, 151, 151, 151, 151, 151, 151 ms/op


Result "readXxh64":
  N = 96
  mean =     97.094 ±(99.9%) 5.666 ms/op

  Histogram, ms/op:
    [ 80.000,  85.000) = 34 
    [ 85.000,  90.000) = 1 
    [ 90.000,  95.000) = 18 
    [ 95.000, 100.000) = 5 
    [100.000, 105.000) = 15 
    [105.000, 110.000) = 12 
    [110.000, 115.000) = 4 
    [115.000, 120.000) = 2 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 1 
    [145.000, 150.000) = 2 
    [150.000, 155.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     80.871 ms/op
     p(50.0000) =     94.896 ms/op
     p(90.0000) =    113.508 ms/op
     p(95.0000) =    141.256 ms/op
     p(99.0000) =    158.335 ms/op
     p(99.9000) =    158.335 ms/op
     p(99.9900) =    158.335 ms/op
     p(99.9990) =    158.335 ms/op
     p(99.9999) =    158.335 ms/op
    p(100.0000) =    158.335 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 21.55% complete, ETA 01:57:22
# Fork: 1 of 3
# Warmup Iteration   1: n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 74, 75, 162, 168, 168, 168, 168, 168 ms/op
# Warmup Iteration   2: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 74, 74, 131, 133, 133, 133, 133, 133 ms/op
# Warmup Iteration   3: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 73, 74, 134, 134, 134, 134, 134, 134 ms/op
Iteration   1: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 74, 80, 120, 132, 132, 132, 132, 132 ms/op
Iteration   2: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 72, 73, 74, 74, 74, 74, 74 ms/op
Iteration   3: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 74, 80, 119, 131, 131, 131, 131, 131 ms/op

# Run progress: 21.70% complete, ETA 01:56:50
# Fork: 2 of 3
# Warmup Iteration   1: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 68, 70, 132, 161, 161, 161, 161, 161 ms/op
# Warmup Iteration   2: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 61, 63, 64, 64, 64, 64, 64 ms/op
# Warmup Iteration   3: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 70, 123, 123, 123, 123, 123, 123 ms/op
Iteration   1: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 70, 106, 127, 127, 127, 127, 127 ms/op
Iteration   2: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 70, 103, 122, 122, 122, 122, 122 ms/op
Iteration   3: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 61, 100, 118, 118, 118, 118, 118 ms/op

# Run progress: 21.84% complete, ETA 01:56:18
# Fork: 3 of 3
# Warmup Iteration   1: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 62, 91, 104, 104, 104, 104, 104 ms/op
# Warmup Iteration   2: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 64, 65, 65, 65, 65, 65, 65 ms/op
# Warmup Iteration   3: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 69, 105, 126, 126, 126, 126, 126 ms/op
Iteration   1: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 61, 62, 62, 62, 62, 62, 62 ms/op
Iteration   2: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 69, 105, 125, 125, 125, 125, 125 ms/op
Iteration   3: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 69, 100, 118, 118, 118, 118, 118 ms/op


Result "readXxh64":
  N = 126
  mean =     73.445 ±(99.9%) 4.342 ms/op

  Histogram, ms/op:
    [ 60.000,  65.000) = 32 
    [ 65.000,  70.000) = 34 
    [ 70.000,  75.000) = 27 
    [ 75.000,  80.000) = 1 
    [ 80.000,  85.000) = 22 
    [ 85.000,  90.000) = 1 
    [ 90.000,  95.000) = 2 
    [ 95.000, 100.000) = 0 
    [100.000, 105.000) = 0 
    [105.000, 110.000) = 0 
    [110.000, 115.000) = 0 
    [115.000, 120.000) = 2 
    [120.000, 125.000) = 1 
    [125.000, 130.000) = 2 
    [130.000, 135.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     60.948 ms/op
     p(50.0000) =     69.861 ms/op
     p(90.0000) =     83.952 ms/op
     p(95.0000) =    118.351 ms/op
     p(99.0000) =    131.681 ms/op
     p(99.9000) =    131.858 ms/op
     p(99.9900) =    131.858 ms/op
     p(99.9990) =    131.858 ms/op
     p(99.9999) =    131.858 ms/op
    p(100.0000) =    131.858 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 21.98% complete, ETA 01:55:46
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 113, 203, 203, 203, 203, 203, 203 ms/op
# Warmup Iteration   2: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 113, 160, 160, 160, 160, 160, 160 ms/op
# Warmup Iteration   3: n = 9, mean = 126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 114, 116, 168, 168, 168, 168, 168, 168 ms/op
Iteration   1: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 116, 172, 172, 172, 172, 172, 172 ms/op
Iteration   2: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 116, 161, 161, 161, 161, 161, 161 ms/op
Iteration   3: n = 9, mean = 120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 116, 171, 171, 171, 171, 171, 171 ms/op

# Run progress: 22.13% complete, ETA 01:55:18
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 99, 184, 192, 192, 192, 192, 192 ms/op
# Warmup Iteration   2: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 86, 86, 116, 124, 124, 124, 124, 124 ms/op
# Warmup Iteration   3: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 86, 86, 86, 86, 86, 86, 86, 86 ms/op
Iteration   1: n = 10, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 96, 140, 144, 144, 144, 144, 144 ms/op
Iteration   2: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 117, 166, 166, 166, 166, 166, 166 ms/op
Iteration   3: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 120, 167, 167, 167, 167, 167, 167 ms/op

# Run progress: 22.27% complete, ETA 01:54:50
# Fork: 3 of 3
# Warmup Iteration   1: n = 12, mean = 88 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 84, 85, 110, 117, 117, 117, 117, 117 ms/op
# Warmup Iteration   2: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 84, 85, 85, 85, 85, 85, 85, 85 ms/op
# Warmup Iteration   3: n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 84, 84, 85, 85, 85, 85, 85, 85 ms/op
Iteration   1: n = 11, mean = 97 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 86, 92, 137, 146, 146, 146, 146, 146 ms/op
Iteration   2: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 85, 85, 85, 85, 85, 85, 85 ms/op
Iteration   3: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 84, 85, 85, 86, 86, 86, 86, 86 ms/op


Result "readXxh64":
  N = 89
  mean =    106.239 ±(99.9%) 8.394 ms/op

  Histogram, ms/op:
    [ 80.000,  90.000) = 25 
    [ 90.000, 100.000) = 25 
    [100.000, 110.000) = 6 
    [110.000, 120.000) = 14 
    [120.000, 130.000) = 6 
    [130.000, 140.000) = 3 
    [140.000, 150.000) = 3 
    [150.000, 160.000) = 2 
    [160.000, 170.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =     84.410 ms/op
     p(50.0000) =     98.959 ms/op
     p(90.0000) =    144.179 ms/op
     p(95.0000) =    163.578 ms/op
     p(99.0000) =    171.966 ms/op
     p(99.9000) =    171.966 ms/op
     p(99.9900) =    171.966 ms/op
     p(99.9990) =    171.966 ms/op
     p(99.9999) =    171.966 ms/op
    p(100.0000) =    171.966 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 22.41% complete, ETA 01:54:22
# Fork: 1 of 3
# Warmup Iteration   1: n = 5, mean = 165 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 144, 240, 240, 240, 240, 240, 240 ms/op
# Warmup Iteration   2: n = 6, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 164, 213, 213, 213, 213, 213, 213 ms/op
# Warmup Iteration   3: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 150, 153, 211, 211, 211, 211, 211, 211 ms/op
Iteration   1: n = 6, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 149, 227, 227, 227, 227, 227, 227 ms/op
Iteration   2: n = 7, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 152, 201, 201, 201, 201, 201, 201 ms/op
Iteration   3: n = 6, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 168, 206, 206, 206, 206, 206, 206 ms/op

# Run progress: 22.56% complete, ETA 01:53:51
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 177, 214, 214, 214, 214, 214, 214 ms/op
# Warmup Iteration   2: n = 6, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 150, 214, 214, 214, 214, 214, 214 ms/op
# Warmup Iteration   3: n = 7, mean = 145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 140, 183, 183, 183, 183, 183, 183 ms/op
Iteration   1: n = 5, mean = 188 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 209, 220, 220, 220, 220, 220, 220 ms/op
Iteration   2: n = 6, mean = 166 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 145, 211, 211, 211, 211, 211, 211 ms/op
Iteration   3: n = 6, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 153, 212, 212, 212, 212, 212, 212 ms/op

# Run progress: 22.70% complete, ETA 01:53:18
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 165 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 154, 204, 204, 204, 204, 204, 204 ms/op
# Warmup Iteration   2: n = 7, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 133, 148, 148, 148, 148, 148, 148 ms/op
# Warmup Iteration   3: n = 7, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 132, 136, 136, 136, 136, 136, 136 ms/op
Iteration   1: n = 7, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 132, 217, 217, 217, 217, 217, 217 ms/op
Iteration   2: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 156, 213, 213, 213, 213, 213, 213 ms/op
Iteration   3: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 148, 181, 181, 181, 181, 181, 181 ms/op


Result "write":
  N = 55
  mean =    165.403 ±(99.9%) 13.727 ms/op

  Histogram, ms/op:
    [120.000, 130.000) = 1 
    [130.000, 140.000) = 4 
    [140.000, 150.000) = 19 
    [150.000, 160.000) = 12 
    [160.000, 170.000) = 1 
    [170.000, 180.000) = 2 
    [180.000, 190.000) = 2 
    [190.000, 200.000) = 1 
    [200.000, 210.000) = 5 
    [210.000, 220.000) = 7 

  Percentiles, ms/op:
      p(0.0000) =    129.106 ms/op
     p(50.0000) =    152.306 ms/op
     p(90.0000) =    213.123 ms/op
     p(95.0000) =    217.370 ms/op
     p(99.0000) =    227.017 ms/op
     p(99.9000) =    227.017 ms/op
     p(99.9900) =    227.017 ms/op
     p(99.9990) =    227.017 ms/op
     p(99.9999) =    227.017 ms/op
    p(100.0000) =    227.017 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = false, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 22.84% complete, ETA 01:52:46
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 859 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 859, 859, 859, 859, 859, 859, 859, 859 ms/op
# Warmup Iteration   2: n = 2, mean = 735 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 734, 735, 736, 736, 736, 736, 736, 736 ms/op
# Warmup Iteration   3: n = 2, mean = 816 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 737, 816, 894, 894, 894, 894, 894, 894 ms/op
Iteration   1: n = 2, mean = 804 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 734, 804, 875, 875, 875, 875, 875, 875 ms/op
Iteration   2: n = 2, mean = 792 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 736, 792, 848, 848, 848, 848, 848, 848 ms/op
Iteration   3: n = 2, mean = 785 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 733, 785, 838, 838, 838, 838, 838, 838 ms/op

# Run progress: 22.99% complete, ETA 01:52:26
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 918 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 918, 918, 918, 918, 918, 918, 918, 918 ms/op
# Warmup Iteration   2: n = 2, mean = 752 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 749, 752, 756, 756, 756, 756, 756, 756 ms/op
# Warmup Iteration   3: n = 2, mean = 848 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 747, 848, 950, 950, 950, 950, 950, 950 ms/op
Iteration   1: n = 2, mean = 825 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 744, 825, 906, 906, 906, 906, 906, 906 ms/op
Iteration   2: n = 2, mean = 743 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 741, 743, 746, 746, 746, 746, 746, 746 ms/op
Iteration   3: n = 2, mean = 751 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 744, 751, 758, 758, 758, 758, 758, 758 ms/op

# Run progress: 23.13% complete, ETA 01:52:05
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 912 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 912, 912, 912, 912, 912, 912, 912, 912 ms/op
# Warmup Iteration   2: n = 1, mean = 996 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 996, 996, 996, 996, 996, 996, 996, 996 ms/op
# Warmup Iteration   3: n = 1, mean = 1019 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019 ms/op
Iteration   1: n = 1, mean = 920 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 920, 920, 920, 920, 920, 920, 920, 920 ms/op
Iteration   2: n = 1, mean = 950 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 950, 950, 950, 950, 950, 950, 950, 950 ms/op
Iteration   3: n = 2, mean = 820 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 741, 820, 899, 899, 899, 899, 899, 899 ms/op


Result "write":
  N = 16
  mean =    807.076 ±(99.9%) 81.868 ms/op

  Histogram, ms/op:
    [ 700.000,  725.000) = 0 
    [ 725.000,  750.000) = 8 
    [ 750.000,  775.000) = 1 
    [ 775.000,  800.000) = 0 
    [ 800.000,  825.000) = 0 
    [ 825.000,  850.000) = 2 
    [ 850.000,  875.000) = 1 
    [ 875.000,  900.000) = 1 
    [ 900.000,  925.000) = 2 
    [ 925.000,  950.000) = 0 
    [ 950.000,  975.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    732.955 ms/op
     p(50.0000) =    751.829 ms/op
     p(90.0000) =    928.724 ms/op
     p(95.0000) =    950.010 ms/op
     p(99.0000) =    950.010 ms/op
     p(99.9000) =    950.010 ms/op
     p(99.9900) =    950.010 ms/op
     p(99.9990) =    950.010 ms/op
     p(99.9999) =    950.010 ms/op
    p(100.0000) =    950.010 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.write
# Parameters: (intKey = false, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 23.28% complete, ETA 01:51:36
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 424 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 372, 424, 476, 476, 476, 476, 476, 476 ms/op
# Warmup Iteration   2: n = 4, mean = 356 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 311, 315, 483, 483, 483, 483, 483, 483 ms/op
# Warmup Iteration   3: n = 3, mean = 384 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 355, 356, 439, 439, 439, 439, 439, 439 ms/op
Iteration   1: n = 3, mean = 392 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 326, 344, 506, 506, 506, 506, 506, 506 ms/op
Iteration   2: n = 3, mean = 414 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 343, 403, 495, 495, 495, 495, 495, 495 ms/op
Iteration   3: n = 3, mean = 368 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 341, 355, 407, 407, 407, 407, 407, 407 ms/op

# Run progress: 23.42% complete, ETA 01:51:09
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 478 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 381, 478, 576, 576, 576, 576, 576, 576 ms/op
# Warmup Iteration   2: n = 3, mean = 372 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 333, 357, 425, 425, 425, 425, 425, 425 ms/op
# Warmup Iteration   3: n = 3, mean = 360 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 329, 340, 411, 411, 411, 411, 411, 411 ms/op
Iteration   1: n = 3, mean = 370 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 308, 381, 423, 423, 423, 423, 423, 423 ms/op
Iteration   2: n = 3, mean = 406 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 383, 391, 445, 445, 445, 445, 445, 445 ms/op
Iteration   3: n = 3, mean = 389 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 348, 401, 418, 418, 418, 418, 418, 418 ms/op

# Run progress: 23.56% complete, ETA 01:50:41
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 420 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 375, 420, 466, 466, 466, 466, 466, 466 ms/op
# Warmup Iteration   2: n = 3, mean = 333 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 306, 322, 371, 371, 371, 371, 371, 371 ms/op
# Warmup Iteration   3: n = 3, mean = 341 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 317, 338, 368, 368, 368, 368, 368, 368 ms/op
Iteration   1: n = 3, mean = 388 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 344, 345, 473, 473, 473, 473, 473, 473 ms/op
Iteration   2: n = 3, mean = 350 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 320, 344, 387, 387, 387, 387, 387, 387 ms/op
Iteration   3: n = 3, mean = 413 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 343, 376, 519, 519, 519, 519, 519, 519 ms/op


Result "write":
  N = 27
  mean =    387.740 ±(99.9%) 41.396 ms/op

  Histogram, ms/op:
    [300.000, 325.000) = 2 
    [325.000, 350.000) = 9 
    [350.000, 375.000) = 1 
    [375.000, 400.000) = 5 
    [400.000, 425.000) = 5 
    [425.000, 450.000) = 1 
    [450.000, 475.000) = 1 
    [475.000, 500.000) = 1 
    [500.000, 525.000) = 2 
    [525.000, 550.000) = 0 
    [550.000, 575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    307.757 ms/op
     p(50.0000) =    380.633 ms/op
     p(90.0000) =    497.549 ms/op
     p(95.0000) =    513.802 ms/op
     p(99.0000) =    519.045 ms/op
     p(99.9000) =    519.045 ms/op
     p(99.9900) =    519.045 ms/op
     p(99.9990) =    519.045 ms/op
     p(99.9999) =    519.045 ms/op
    p(100.0000) =    519.045 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.write
# Parameters: (intKey = false, metaSync = false, num = 1000000, sequential = false, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 23.71% complete, ETA 01:50:11
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1330 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330 ms/op
# Warmup Iteration   2: n = 1, mean = 1281 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281 ms/op
# Warmup Iteration   3: n = 1, mean = 1344 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344 ms/op
Iteration   1: n = 1, mean = 1369 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369 ms/op
Iteration   2: n = 1, mean = 1206 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206 ms/op
Iteration   3: n = 1, mean = 1183 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183 ms/op

# Run progress: 23.85% complete, ETA 01:49:48
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1397 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397 ms/op
# Warmup Iteration   2: n = 1, mean = 1143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143 ms/op
# Warmup Iteration   3: n = 1, mean = 1269 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269 ms/op
Iteration   1: n = 1, mean = 1447 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447 ms/op
Iteration   2: n = 1, mean = 1244 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244 ms/op
Iteration   3: n = 1, mean = 1088 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088 ms/op

# Run progress: 23.99% complete, ETA 01:49:23
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1327 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327 ms/op
# Warmup Iteration   2: n = 1, mean = 1143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143 ms/op
# Warmup Iteration   3: n = 1, mean = 1294 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294 ms/op
Iteration   1: n = 1, mean = 1478 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478 ms/op
Iteration   2: n = 1, mean = 1225 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225 ms/op
Iteration   3: n = 1, mean = 1353 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353 ms/op


Result "write":
  N = 9
  mean =   1288.117 ±(99.9%) 219.112 ms/op

  Histogram, ms/op:
    [1000.000, 1050.000) = 0 
    [1050.000, 1100.000) = 1 
    [1100.000, 1150.000) = 0 
    [1150.000, 1200.000) = 1 
    [1200.000, 1250.000) = 3 
    [1250.000, 1300.000) = 0 
    [1300.000, 1350.000) = 0 
    [1350.000, 1400.000) = 2 
    [1400.000, 1450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1088.422 ms/op
     p(50.0000) =   1243.611 ms/op
     p(90.0000) =   1478.492 ms/op
     p(95.0000) =   1478.492 ms/op
     p(99.0000) =   1478.492 ms/op
     p(99.9000) =   1478.492 ms/op
     p(99.9900) =   1478.492 ms/op
     p(99.9990) =   1478.492 ms/op
     p(99.9999) =   1478.492 ms/op
    p(100.0000) =   1478.492 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readCrc
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 24.14% complete, ETA 01:49:00
# Fork: 1 of 3
# Warmup Iteration   1: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 93, 107, 109, 109, 109, 109, 109 ms/op
# Warmup Iteration   2: n = 12, mean = 88 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 87, 89, 90, 90, 90, 90, 90 ms/op
# Warmup Iteration   3: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 98, 161, 167, 167, 167, 167, 167 ms/op
Iteration   1: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 103, 168, 168, 168, 168, 168, 168 ms/op
Iteration   2: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 92, 104, 104, 104, 104, 104, 104 ms/op
Iteration   3: n = 11, mean = 99 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 92, 146, 158, 158, 158, 158, 158 ms/op

# Run progress: 24.28% complete, ETA 01:48:32
# Fork: 2 of 3
# Warmup Iteration   1: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 90, 107, 109, 109, 109, 109, 109 ms/op
# Warmup Iteration   2: n = 12, mean = 88 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 88, 89, 89, 89, 89, 89, 89 ms/op
# Warmup Iteration   3: n = 12, mean = 88 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 87, 88, 89, 89, 89, 89, 89 ms/op
Iteration   1: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 98, 158, 164, 164, 164, 164, 164 ms/op
Iteration   2: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 102, 158, 163, 163, 163, 163, 163 ms/op
Iteration   3: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 98, 156, 162, 162, 162, 162, 162 ms/op

# Run progress: 24.43% complete, ETA 01:48:03
# Fork: 3 of 3
# Warmup Iteration   1: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 103, 183, 183, 183, 183, 183, 183 ms/op
# Warmup Iteration   2: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 99, 153, 158, 158, 158, 158, 158 ms/op
# Warmup Iteration   3: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 98, 153, 155, 155, 155, 155, 155 ms/op
Iteration   1: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 88, 99, 99, 99, 99, 99, 99 ms/op
Iteration   2: n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 103, 163, 163, 163, 163, 163, 163 ms/op
Iteration   3: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 103, 163, 169, 169, 169, 169, 169 ms/op


Result "readCrc":
  N = 92
  mean =    103.875 ±(99.9%) 7.277 ms/op

  Histogram, ms/op:
    [ 80.000,  85.000) = 0 
    [ 85.000,  90.000) = 11 
    [ 90.000,  95.000) = 20 
    [ 95.000, 100.000) = 18 
    [100.000, 105.000) = 30 
    [105.000, 110.000) = 4 
    [110.000, 115.000) = 0 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 0 
    [150.000, 155.000) = 1 
    [155.000, 160.000) = 1 
    [160.000, 165.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =     87.425 ms/op
     p(50.0000) =     98.501 ms/op
     p(90.0000) =    140.457 ms/op
     p(95.0000) =    163.499 ms/op
     p(99.0000) =    168.821 ms/op
     p(99.9000) =    168.821 ms/op
     p(99.9900) =    168.821 ms/op
     p(99.9990) =    168.821 ms/op
     p(99.9999) =    168.821 ms/op
    p(100.0000) =    168.821 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readCrc
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 24.57% complete, ETA 01:47:36
# Fork: 1 of 3
# Warmup Iteration   1: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 108, 110, 185, 185, 185, 185, 185, 185 ms/op
# Warmup Iteration   2: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 111, 123, 179, 179, 179, 179, 179, 179 ms/op
# Warmup Iteration   3: n = 7, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 139, 139, 183, 183, 183, 183, 183, 183 ms/op
Iteration   1: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 120, 123, 191, 191, 191, 191, 191, 191 ms/op
Iteration   2: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 108, 108, 109, 109, 109, 109, 109, 109 ms/op
Iteration   3: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 108, 108, 108, 108, 108, 108, 108, 108 ms/op

# Run progress: 24.71% complete, ETA 01:47:11
# Fork: 2 of 3
# Warmup Iteration   1: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 108, 160, 160, 160, 160, 160, 160 ms/op
# Warmup Iteration   2: n = 8, mean = 138 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 118, 137, 172, 172, 172, 172, 172, 172 ms/op
# Warmup Iteration   3: n = 8, mean = 139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 117, 121, 197, 197, 197, 197, 197, 197 ms/op
Iteration   1: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 137, 198, 198, 198, 198, 198, 198 ms/op
Iteration   2: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 121, 121, 161, 161, 161, 161, 161, 161 ms/op
Iteration   3: n = 10, mean = 110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 107, 120, 121, 121, 121, 121, 121 ms/op

# Run progress: 24.86% complete, ETA 01:46:46
# Fork: 3 of 3
# Warmup Iteration   1: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 107, 118, 119, 119, 119, 119, 119 ms/op
# Warmup Iteration   2: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 107, 111, 111, 111, 111, 111, 111 ms/op
# Warmup Iteration   3: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 107, 108, 108, 108, 108, 108, 108 ms/op
Iteration   1: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 107, 111, 111, 111, 111, 111, 111 ms/op
Iteration   2: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 114, 122, 182, 182, 182, 182, 182, 182 ms/op
Iteration   3: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 115, 120, 180, 180, 180, 180, 180, 180 ms/op


Result "readCrc":
  N = 79
  mean =    120.100 ±(99.9%) 7.418 ms/op

  Histogram, ms/op:
    [100.000, 110.000) = 35 
    [110.000, 120.000) = 12 
    [120.000, 130.000) = 20 
    [130.000, 140.000) = 6 
    [140.000, 150.000) = 0 
    [150.000, 160.000) = 1 
    [160.000, 170.000) = 1 
    [170.000, 180.000) = 0 
    [180.000, 190.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    106.299 ms/op
     p(50.0000) =    114.164 ms/op
     p(90.0000) =    137.363 ms/op
     p(95.0000) =    180.355 ms/op
     p(99.0000) =    197.919 ms/op
     p(99.9000) =    197.919 ms/op
     p(99.9900) =    197.919 ms/op
     p(99.9990) =    197.919 ms/op
     p(99.9999) =    197.919 ms/op
    p(100.0000) =    197.919 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readCrc
# Parameters: (forceSafe = false, intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 25.00% complete, ETA 01:46:22
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 129, 153, 153, 153, 153, 153, 153 ms/op
# Warmup Iteration   2: n = 7, mean = 151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 143, 211, 211, 211, 211, 211, 211 ms/op
# Warmup Iteration   3: n = 8, mean = 141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 127, 199, 199, 199, 199, 199, 199 ms/op
Iteration   1: n = 7, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 143, 216, 216, 216, 216, 216, 216 ms/op
Iteration   2: n = 6, mean = 168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 150, 215, 215, 215, 215, 215, 215 ms/op
Iteration   3: n = 7, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 143, 216, 216, 216, 216, 216, 216 ms/op

# Run progress: 25.14% complete, ETA 01:45:56
# Fork: 2 of 3
# Warmup Iteration   1: n = 8, mean = 139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 134, 160, 160, 160, 160, 160, 160 ms/op
# Warmup Iteration   2: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 127, 128, 128, 128, 128, 128, 128 ms/op
# Warmup Iteration   3: n = 6, mean = 168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 171, 194, 194, 194, 194, 194, 194 ms/op
Iteration   1: n = 7, mean = 151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 143, 214, 214, 214, 214, 214, 214 ms/op
Iteration   2: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 127, 128, 128, 128, 128, 128, 128 ms/op
Iteration   3: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 127, 132, 132, 132, 132, 132, 132 ms/op

# Run progress: 25.29% complete, ETA 01:45:30
# Fork: 3 of 3
# Warmup Iteration   1: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 146, 226, 226, 226, 226, 226, 226 ms/op
# Warmup Iteration   2: n = 7, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 140, 143, 233, 233, 233, 233, 233, 233 ms/op
# Warmup Iteration   3: n = 7, mean = 155 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 146, 221, 221, 221, 221, 221, 221 ms/op
Iteration   1: n = 6, mean = 168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 146, 215, 215, 215, 215, 215, 215 ms/op
Iteration   2: n = 6, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 145, 220, 220, 220, 220, 220, 220 ms/op
Iteration   3: n = 7, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 144, 216, 216, 216, 216, 216, 216 ms/op


Result "readCrc":
  N = 62
  mean =    150.200 ±(99.9%) 12.741 ms/op

  Histogram, ms/op:
    [120.000, 130.000) = 16 
    [130.000, 140.000) = 4 
    [140.000, 150.000) = 31 
    [150.000, 160.000) = 1 
    [160.000, 170.000) = 0 
    [170.000, 180.000) = 0 
    [180.000, 190.000) = 0 
    [190.000, 200.000) = 0 
    [200.000, 210.000) = 2 
    [210.000, 220.000) = 7 

  Percentiles, ms/op:
      p(0.0000) =    126.878 ms/op
     p(50.0000) =    143.131 ms/op
     p(90.0000) =    214.565 ms/op
     p(95.0000) =    216.007 ms/op
     p(99.0000) =    220.463 ms/op
     p(99.9000) =    220.463 ms/op
     p(99.9900) =    220.463 ms/op
     p(99.9990) =    220.463 ms/op
     p(99.9999) =    220.463 ms/op
    p(100.0000) =    220.463 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readCrc
# Parameters: (forceSafe = false, intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 25.43% complete, ETA 01:45:04
# Fork: 1 of 3
# Warmup Iteration   1: n = 7, mean = 149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 148, 155, 155, 155, 155, 155, 155 ms/op
# Warmup Iteration   2: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 179, 209, 209, 209, 209, 209, 209 ms/op
# Warmup Iteration   3: n = 6, mean = 188 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 163, 166, 235, 235, 235, 235, 235, 235 ms/op
Iteration   1: n = 6, mean = 193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 166, 185, 240, 240, 240, 240, 240, 240 ms/op
Iteration   2: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 159, 168, 241, 241, 241, 241, 241, 241 ms/op
Iteration   3: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 147, 147, 147, 147, 147, 147, 147 ms/op

# Run progress: 25.57% complete, ETA 01:44:42
# Fork: 2 of 3
# Warmup Iteration   1: n = 7, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 151, 152, 161, 161, 161, 161, 161, 161 ms/op
# Warmup Iteration   2: n = 6, mean = 186 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 181, 233, 233, 233, 233, 233, 233 ms/op
# Warmup Iteration   3: n = 7, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 161, 162, 162, 162, 162, 162, 162 ms/op
Iteration   1: n = 6, mean = 193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 162, 183, 226, 226, 226, 226, 226, 226 ms/op
Iteration   2: n = 5, mean = 201 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 181, 196, 236, 236, 236, 236, 236, 236 ms/op
Iteration   3: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 155, 171, 233, 233, 233, 233, 233, 233 ms/op

# Run progress: 25.72% complete, ETA 01:44:20
# Fork: 3 of 3
# Warmup Iteration   1: n = 7, mean = 149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 148, 156, 156, 156, 156, 156, 156 ms/op
# Warmup Iteration   2: n = 6, mean = 184 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 152, 182, 208, 208, 208, 208, 208, 208 ms/op
# Warmup Iteration   3: n = 6, mean = 194 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 167, 186, 239, 239, 239, 239, 239, 239 ms/op
Iteration   1: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 158, 168, 239, 239, 239, 239, 239, 239 ms/op
Iteration   2: n = 7, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 148, 155, 155, 155, 155, 155, 155 ms/op
Iteration   3: n = 7, mean = 149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 149, 151, 151, 151, 151, 151, 151 ms/op


Result "readCrc":
  N = 56
  mean =    172.318 ±(99.9%) 13.287 ms/op

  Histogram, ms/op:
    [140.000, 150.000) = 17 
    [150.000, 160.000) = 7 
    [160.000, 170.000) = 12 
    [170.000, 180.000) = 4 
    [180.000, 190.000) = 5 
    [190.000, 200.000) = 1 
    [200.000, 210.000) = 2 
    [210.000, 220.000) = 1 
    [220.000, 230.000) = 2 
    [230.000, 240.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =    147.063 ms/op
     p(50.0000) =    166.986 ms/op
     p(90.0000) =    228.354 ms/op
     p(95.0000) =    239.193 ms/op
     p(99.0000) =    240.910 ms/op
     p(99.9000) =    240.910 ms/op
     p(99.9900) =    240.910 ms/op
     p(99.9990) =    240.910 ms/op
     p(99.9999) =    240.910 ms/op
    p(100.0000) =    240.910 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readKey
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 25.86% complete, ETA 01:43:58
# Fork: 1 of 3
# Warmup Iteration   1: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 106, 124, 126, 126, 126, 126, 126 ms/op
# Warmup Iteration   2: n = 9, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 116, 139, 139, 139, 139, 139, 139 ms/op
# Warmup Iteration   3: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 116, 165, 165, 165, 165, 165, 165 ms/op
Iteration   1: n = 9, mean = 123 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 112, 117, 149, 149, 149, 149, 149, 149 ms/op
Iteration   2: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 106, 170, 170, 170, 170, 170, 170 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 11, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 93, 95, 95, 95, 95, 95, 95 ms/op

# Run progress: 26.01% complete, ETA 01:43:33
# Fork: 2 of 3
# Warmup Iteration   1: n = 9, mean = 120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 110, 201, 201, 201, 201, 201, 201 ms/op
# Warmup Iteration   2: n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 110, 171, 171, 171, 171, 171, 171 ms/op
# Warmup Iteration   3: n = 11, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 97, 97, 124, 130, 130, 130, 130, 130 ms/op
Iteration   1: n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 109, 169, 169, 169, 169, 169, 169 ms/op
Iteration   2: n = 11, mean = 96 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 96, 99, 100, 100, 100, 100, 100 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 11, mean = 97 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 97, 97, 98, 98, 98, 98, 98, 98 ms/op

# Run progress: 26.15% complete, ETA 01:43:08
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 115, 116, 194, 194, 194, 194, 194, 194 ms/op
# Warmup Iteration   2: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 112, 171, 171, 171, 171, 171, 171 ms/op
# Warmup Iteration   3: n = 9, mean = 120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 113, 173, 173, 173, 173, 173, 173 ms/op
Iteration   1: n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 110, 174, 174, 174, 174, 174, 174 ms/op
Iteration   2: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 100, 158, 164, 164, 164, 164, 164 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 115, 164, 164, 164, 164, 164, 164 ms/op


Result "readKey":
  N = 88
  mean =    108.204 ±(99.9%) 6.524 ms/op

  Histogram, ms/op:
    [ 90.000,  95.000) = 12 
    [ 95.000, 100.000) = 25 
    [100.000, 105.000) = 9 
    [105.000, 110.000) = 14 
    [110.000, 115.000) = 10 
    [115.000, 120.000) = 9 
    [120.000, 125.000) = 2 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 1 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 1 
    [150.000, 155.000) = 0 
    [155.000, 160.000) = 0 
    [160.000, 165.000) = 2 
    [165.000, 170.000) = 2 
    [170.000, 175.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     92.537 ms/op
     p(50.0000) =    103.219 ms/op
     p(90.0000) =    122.723 ms/op
     p(95.0000) =    163.578 ms/op
     p(99.0000) =    174.326 ms/op
     p(99.9000) =    174.326 ms/op
     p(99.9900) =    174.326 ms/op
     p(99.9990) =    174.326 ms/op
     p(99.9999) =    174.326 ms/op
    p(100.0000) =    174.326 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readKey
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 26.29% complete, ETA 01:42:43
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 619 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 612, 619, 625, 625, 625, 625, 625, 625 ms/op
# Warmup Iteration   2: n = 2, mean = 641 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 609, 641, 673, 673, 673, 673, 673, 673 ms/op
# Warmup Iteration   3: n = 2, mean = 753 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 673, 753, 833, 833, 833, 833, 833, 833 ms/op
Iteration   1: n = 2, mean = 700 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 641, 700, 760, 760, 760, 760, 760, 760 ms/op
Iteration   2: n = 2, mean = 617 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 616, 617, 618, 618, 618, 618, 618, 618 ms/op
Iteration   3: 
Bytes	before-close	171884544	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	171884544	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 620 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 619, 620, 621, 621, 621, 621, 621, 621 ms/op

# Run progress: 26.44% complete, ETA 01:42:26
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 719 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 647, 719, 792, 792, 792, 792, 792, 792 ms/op
# Warmup Iteration   2: n = 2, mean = 699 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 655, 699, 742, 742, 742, 742, 742, 742 ms/op
# Warmup Iteration   3: n = 2, mean = 865 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 858, 865, 871, 871, 871, 871, 871, 871 ms/op
Iteration   1: n = 2, mean = 704 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 648, 704, 760, 760, 760, 760, 760, 760 ms/op
Iteration   2: n = 2, mean = 609 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 603, 609, 616, 616, 616, 616, 616, 616 ms/op
Iteration   3: 
Bytes	before-close	172040192	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	172040192	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 612 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 612, 612, 612, 612, 612, 612, 612, 612 ms/op

# Run progress: 26.58% complete, ETA 01:42:09
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 608 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 602, 608, 614, 614, 614, 614, 614, 614 ms/op
# Warmup Iteration   2: n = 2, mean = 750 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 694, 750, 806, 806, 806, 806, 806, 806 ms/op
# Warmup Iteration   3: n = 2, mean = 601 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 601, 601, 601, 601, 601, 601, 601, 601 ms/op
Iteration   1: n = 2, mean = 649 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 613, 649, 684, 684, 684, 684, 684, 684 ms/op
Iteration   2: n = 2, mean = 600 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 598, 600, 602, 602, 602, 602, 602, 602 ms/op
Iteration   3: 
Bytes	before-close	172314624	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	172314624	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 602 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 602, 602, 603, 603, 603, 603, 603, 603 ms/op


Result "readKey":
  N = 18
  mean =    634.796 ±(99.9%) 46.781 ms/op

  Histogram, ms/op:
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 0 
    [550.000, 575.000) = 0 
    [575.000, 600.000) = 1 
    [600.000, 625.000) = 12 
    [625.000, 650.000) = 2 
    [650.000, 675.000) = 0 
    [675.000, 700.000) = 1 
    [700.000, 725.000) = 0 
    [725.000, 750.000) = 0 
    [750.000, 775.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    597.688 ms/op
     p(50.0000) =    615.514 ms/op
     p(90.0000) =    760.218 ms/op
     p(95.0000) =    760.218 ms/op
     p(99.0000) =    760.218 ms/op
     p(99.9000) =    760.218 ms/op
     p(99.9900) =    760.218 ms/op
     p(99.9990) =    760.218 ms/op
     p(99.9999) =    760.218 ms/op
    p(100.0000) =    760.218 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readKey
# Parameters: (forceSafe = false, intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 26.72% complete, ETA 01:41:50
# Fork: 1 of 3
# Warmup Iteration   1: n = 3, mean = 409 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 325, 398, 504, 504, 504, 504, 504, 504 ms/op
# Warmup Iteration   2: n = 4, mean = 307 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 303, 307, 310, 310, 310, 310, 310, 310 ms/op
# Warmup Iteration   3: n = 3, mean = 411 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 405, 412, 416, 416, 416, 416, 416, 416 ms/op
Iteration   1: n = 3, mean = 362 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 331, 339, 415, 415, 415, 415, 415, 415 ms/op
Iteration   2: n = 3, mean = 390 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 347, 353, 470, 470, 470, 470, 470, 470 ms/op
Iteration   3: 
Bytes	before-close	128860160	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	128860160	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 4, mean = 312 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 303, 312, 321, 321, 321, 321, 321, 321 ms/op

# Run progress: 26.87% complete, ETA 01:41:29
# Fork: 2 of 3
# Warmup Iteration   1: n = 3, mean = 413 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 332, 400, 509, 509, 509, 509, 509, 509 ms/op
# Warmup Iteration   2: n = 3, mean = 390 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 348, 369, 454, 454, 454, 454, 454, 454 ms/op
# Warmup Iteration   3: n = 4, mean = 317 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 306, 320, 324, 324, 324, 324, 324, 324 ms/op
Iteration   1: n = 3, mean = 403 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 341, 417, 452, 452, 452, 452, 452, 452 ms/op
Iteration   2: n = 3, mean = 359 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 339, 344, 394, 394, 394, 394, 394, 394 ms/op
Iteration   3: 
Bytes	before-close	128860160	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	128860160	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 4, mean = 332 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 309, 314, 392, 392, 392, 392, 392, 392 ms/op

# Run progress: 27.01% complete, ETA 01:41:08
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 339 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 308, 312, 395, 395, 395, 395, 395, 395 ms/op
# Warmup Iteration   2: n = 4, mean = 306 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 294, 307, 316, 316, 316, 316, 316, 316 ms/op
# Warmup Iteration   3: n = 3, mean = 387 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 333, 409, 418, 418, 418, 418, 418, 418 ms/op
Iteration   1: n = 3, mean = 398 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 377, 378, 440, 440, 440, 440, 440, 440 ms/op
Iteration   2: n = 3, mean = 335 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 296, 323, 385, 385, 385, 385, 385, 385 ms/op
Iteration   3: 
Bytes	before-close	128860160	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	128860160	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 3, mean = 367 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 330, 349, 420, 420, 420, 420, 420, 420 ms/op


Result "readKey":
  N = 29
  mean =    359.282 ±(99.9%) 33.050 ms/op

  Histogram, ms/op:
    [200.000, 225.000) = 0 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 0 
    [275.000, 300.000) = 1 
    [300.000, 325.000) = 8 
    [325.000, 350.000) = 8 
    [350.000, 375.000) = 1 
    [375.000, 400.000) = 5 
    [400.000, 425.000) = 3 
    [425.000, 450.000) = 1 
    [450.000, 475.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    296.223 ms/op
     p(50.0000) =    344.457 ms/op
     p(90.0000) =    439.878 ms/op
     p(95.0000) =    461.111 ms/op
     p(99.0000) =    470.286 ms/op
     p(99.9000) =    470.286 ms/op
     p(99.9900) =    470.286 ms/op
     p(99.9990) =    470.286 ms/op
     p(99.9999) =    470.286 ms/op
    p(100.0000) =    470.286 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readKey
# Parameters: (forceSafe = false, intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 27.16% complete, ETA 01:40:46
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1006 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1006, 1006, 1006, 1006, 1006, 1006, 1006, 1006 ms/op
# Warmup Iteration   2: n = 1, mean = 1120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120 ms/op
# Warmup Iteration   3: n = 1, mean = 1200 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200 ms/op
Iteration   1: n = 1, mean = 1033 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033 ms/op
Iteration   2: n = 2, mean = 963 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 954, 963, 971, 971, 971, 971, 971, 971 ms/op
Iteration   3: 
Bytes	before-close	189325312	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	189325312	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 959 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 957, 959, 962, 962, 962, 962, 962, 962 ms/op

# Run progress: 27.30% complete, ETA 01:40:30
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 1057 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 981, 1057, 1132, 1132, 1132, 1132, 1132, 1132 ms/op
# Warmup Iteration   2: n = 1, mean = 1034 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034 ms/op
# Warmup Iteration   3: n = 1, mean = 1353 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353 ms/op
Iteration   1: n = 1, mean = 1158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158 ms/op
Iteration   2: n = 1, mean = 1035 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035 ms/op
Iteration   3: 
Bytes	before-close	188854272	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	188854272	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 1185 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185 ms/op

# Run progress: 27.44% complete, ETA 01:40:13
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1361 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361 ms/op
# Warmup Iteration   2: n = 1, mean = 1273 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273 ms/op
# Warmup Iteration   3: n = 1, mean = 1321 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321 ms/op
Iteration   1: n = 2, mean = 986 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 985, 986, 987, 987, 987, 987, 987, 987 ms/op
Iteration   2: n = 2, mean = 960 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 932, 960, 988, 988, 988, 988, 988, 988 ms/op
Iteration   3: 
Bytes	before-close	188772352	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	188772352	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 1359 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359 ms/op


Result "readKey":
  N = 13
  mean =   1038.816 ±(99.9%) 147.477 ms/op

  Histogram, ms/op:
    [ 900.000,  950.000) = 1 
    [ 950.000, 1000.000) = 7 
    [1000.000, 1050.000) = 2 
    [1050.000, 1100.000) = 0 
    [1100.000, 1150.000) = 0 
    [1150.000, 1200.000) = 2 
    [1200.000, 1250.000) = 0 
    [1250.000, 1300.000) = 0 
    [1300.000, 1350.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    932.184 ms/op
     p(50.0000) =    986.710 ms/op
     p(90.0000) =   1289.329 ms/op
     p(95.0000) =   1358.954 ms/op
     p(99.0000) =   1358.954 ms/op
     p(99.9000) =   1358.954 ms/op
     p(99.9900) =   1358.954 ms/op
     p(99.9990) =   1358.954 ms/op
     p(99.9999) =   1358.954 ms/op
    p(100.0000) =   1358.954 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readRev
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 27.59% complete, ETA 01:40:01
# Fork: 1 of 3
# Warmup Iteration   1: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 38, 40, 43, 47, 47, 47, 47 ms/op
# Warmup Iteration   2: n = 25, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 38, 50, 67, 72, 72, 72, 72 ms/op
# Warmup Iteration   3: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 37, 49, 67, 74, 74, 74, 74 ms/op
Iteration   1: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 39, 55, 66, 69, 69, 69, 69 ms/op
Iteration   2: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 39, 61, 73, 75, 75, 75, 75 ms/op
Iteration   3: n = 25, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 38, 51, 71, 77, 77, 77, 77 ms/op

# Run progress: 27.73% complete, ETA 01:39:36
# Fork: 2 of 3
# Warmup Iteration   1: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 35, 37, 41, 45, 45, 45, 45 ms/op
# Warmup Iteration   2: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 37, 48, 63, 68, 68, 68, 68 ms/op
# Warmup Iteration   3: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 36, 59, 69, 69, 69, 69, 69 ms/op
Iteration   1: n = 26, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 37, 50, 68, 73, 73, 73, 73 ms/op
Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 33, 34, 34, 34, 34, 34 ms/op
Iteration   3: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 33, 34, 35, 35, 35, 35 ms/op

# Run progress: 27.87% complete, ETA 01:39:12
# Fork: 3 of 3
# Warmup Iteration   1: n = 29, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 35, 37, 41, 45, 45, 45, 45 ms/op
# Warmup Iteration   2: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 37, 47, 63, 68, 68, 68, 68 ms/op
# Warmup Iteration   3: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 33, 34, 34, 34, 34, 34 ms/op
Iteration   1: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 35, 46, 61, 67, 67, 67, 67 ms/op
Iteration   2: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 35, 35, 35, 35, 35, 35 ms/op
Iteration   3: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 32, 33, 33, 33, 33, 33, 33 ms/op


Result "readRev":
  N = 252
  mean =     36.474 ±(99.9%) 1.518 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 141 
    [35.000, 40.000) = 87 
    [40.000, 45.000) = 7 
    [45.000, 50.000) = 4 
    [50.000, 55.000) = 2 
    [55.000, 60.000) = 4 
    [60.000, 65.000) = 2 
    [65.000, 70.000) = 2 
    [70.000, 75.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     31.130 ms/op
     p(50.0000) =     33.391 ms/op
     p(90.0000) =     39.505 ms/op
     p(95.0000) =     51.085 ms/op
     p(99.0000) =     74.324 ms/op
     p(99.9000) =     76.677 ms/op
     p(99.9900) =     76.677 ms/op
     p(99.9990) =     76.677 ms/op
     p(99.9999) =     76.677 ms/op
    p(100.0000) =     76.677 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readRev
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 28.02% complete, ETA 01:38:47
# Fork: 1 of 3
# Warmup Iteration   1: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 54, 92, 100, 100, 100, 100, 100 ms/op
# Warmup Iteration   2: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 77, 91, 94, 94, 94, 94, 94 ms/op
# Warmup Iteration   3: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 73, 79, 102, 109, 109, 109, 109, 109 ms/op
Iteration   1: n = 14, mean = 71 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 71, 72, 72, 72, 72, 72, 72 ms/op
Iteration   2: n = 14, mean = 71 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 71, 72, 73, 73, 73, 73, 73 ms/op
Iteration   3: n = 15, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 71, 79, 89, 89, 89, 89, 89 ms/op

# Run progress: 28.16% complete, ETA 01:38:26
# Fork: 2 of 3
# Warmup Iteration   1: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 54, 82, 85, 85, 85, 85, 85 ms/op
# Warmup Iteration   2: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 60, 78, 87, 87, 87, 87, 87 ms/op
# Warmup Iteration   3: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 77, 92, 97, 97, 97, 97, 97 ms/op
Iteration   1: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 77, 97, 97, 97, 97, 97, 97 ms/op
Iteration   2: n = 13, mean = 83 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 77, 96, 97, 97, 97, 97, 97 ms/op
Iteration   3: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 60, 62, 67, 67, 67, 67, 67 ms/op

# Run progress: 28.30% complete, ETA 01:38:04
# Fork: 3 of 3
# Warmup Iteration   1: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 53, 57, 63, 63, 63, 63, 63 ms/op
# Warmup Iteration   2: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 78, 78, 99, 100, 100, 100, 100, 100 ms/op
# Warmup Iteration   3: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 61, 63, 68, 68, 68, 68, 68 ms/op
Iteration   1: n = 13, mean = 83 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 78, 78, 101, 103, 103, 103, 103, 103 ms/op
Iteration   2: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 60, 61, 64, 64, 64, 64, 64 ms/op
Iteration   3: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 74, 78, 99, 104, 104, 104, 104, 104 ms/op


Result "readRev":
  N = 130
  mean =     72.387 ±(99.9%) 3.220 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 7 
    [ 55.000,  60.000) = 6 
    [ 60.000,  65.000) = 21 
    [ 65.000,  70.000) = 1 
    [ 70.000,  75.000) = 43 
    [ 75.000,  80.000) = 35 
    [ 80.000,  85.000) = 4 
    [ 85.000,  90.000) = 3 
    [ 90.000,  95.000) = 4 
    [ 95.000, 100.000) = 4 
    [100.000, 105.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     51.708 ms/op
     p(50.0000) =     71.369 ms/op
     p(90.0000) =     87.399 ms/op
     p(95.0000) =     95.237 ms/op
     p(99.0000) =    103.715 ms/op
     p(99.9000) =    104.202 ms/op
     p(99.9900) =    104.202 ms/op
     p(99.9990) =    104.202 ms/op
     p(99.9999) =    104.202 ms/op
    p(100.0000) =    104.202 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readRev
# Parameters: (forceSafe = false, intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 28.45% complete, ETA 01:37:43
# Fork: 1 of 3
# Warmup Iteration   1: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 32, 37, 41, 45, 45, 45, 45 ms/op
# Warmup Iteration   2: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 32, 32, 33, 33, 33, 33, 33 ms/op
# Warmup Iteration   3: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 32, 34, 46, 65, 65, 65, 65 ms/op
Iteration   1: n = 26, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 36, 61, 68, 71, 71, 71, 71 ms/op
Iteration   2: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 49, 67, 73, 73, 73, 73 ms/op
Iteration   3: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 33, 34, 34, 35, 35, 35, 35 ms/op

# Run progress: 28.59% complete, ETA 01:37:20
# Fork: 2 of 3
# Warmup Iteration   1: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 39, 52, 79, 85, 85, 85, 85 ms/op
# Warmup Iteration   2: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 37, 61, 67, 69, 69, 69, 69 ms/op
# Warmup Iteration   3: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 39, 39, 39, 39, 39, 39, 39 ms/op
Iteration   1: n = 26, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 37, 49, 67, 73, 73, 73, 73 ms/op
Iteration   2: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 39, 50, 69, 75, 75, 75, 75 ms/op
Iteration   3: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 35, 36, 36, 36, 36, 36, 36 ms/op

# Run progress: 28.74% complete, ETA 01:36:57
# Fork: 3 of 3
# Warmup Iteration   1: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 32, 37, 42, 46, 46, 46, 46 ms/op
# Warmup Iteration   2: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 32, 32, 33, 35, 35, 35, 35 ms/op
# Warmup Iteration   3: n = 26, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 35, 59, 70, 72, 72, 72, 72 ms/op
Iteration   1: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 36, 63, 72, 73, 73, 73, 73 ms/op
Iteration   2: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 36, 65, 73, 74, 74, 74, 74 ms/op
Iteration   3: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 36, 44, 58, 63, 63, 63, 63 ms/op


Result "readRev":
  N = 239
  mean =     38.474 ±(99.9%) 1.787 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 56 
    [35.000, 40.000) = 147 
    [40.000, 45.000) = 8 
    [45.000, 50.000) = 8 
    [50.000, 55.000) = 2 
    [55.000, 60.000) = 7 
    [60.000, 65.000) = 3 
    [65.000, 70.000) = 1 
    [70.000, 75.000) = 6 

  Percentiles, ms/op:
      p(0.0000) =     31.785 ms/op
     p(50.0000) =     35.717 ms/op
     p(90.0000) =     46.793 ms/op
     p(95.0000) =     58.393 ms/op
     p(99.0000) =     73.505 ms/op
     p(99.9000) =     75.104 ms/op
     p(99.9900) =     75.104 ms/op
     p(99.9990) =     75.104 ms/op
     p(99.9999) =     75.104 ms/op
    p(100.0000) =     75.104 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readRev
# Parameters: (forceSafe = false, intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 28.88% complete, ETA 01:36:35
# Fork: 1 of 3
# Warmup Iteration   1: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 66, 105, 118, 118, 118, 118, 118 ms/op
# Warmup Iteration   2: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 66, 90, 104, 104, 104, 104, 104 ms/op
# Warmup Iteration   3: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 57, 57, 57, 57, 57, 57, 57 ms/op
Iteration   1: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 57, 57, 57, 57, 57, 57, 57 ms/op
Iteration   2: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 72, 81, 98, 103, 103, 103, 103, 103 ms/op
Iteration   3: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 72, 87, 93, 93, 93, 93, 93 ms/op

# Run progress: 29.02% complete, ETA 01:36:15
# Fork: 2 of 3
# Warmup Iteration   1: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 56, 58, 64, 64, 64, 64, 64 ms/op
# Warmup Iteration   2: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 77, 104, 107, 107, 107, 107, 107 ms/op
# Warmup Iteration   3: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 65, 109, 109, 109, 109, 109, 109 ms/op
Iteration   1: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 65, 92, 109, 109, 109, 109, 109 ms/op
Iteration   2: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 56, 57, 57, 57, 57, 57, 57 ms/op
Iteration   3: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 56, 56, 57, 57, 57, 57, 57 ms/op

# Run progress: 29.17% complete, ETA 01:35:55
# Fork: 3 of 3
# Warmup Iteration   1: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 56, 58, 62, 62, 62, 62, 62 ms/op
# Warmup Iteration   2: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 55, 56, 56, 56, 56, 56, 56 ms/op
# Warmup Iteration   3: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 81, 83, 100, 102, 102, 102, 102, 102 ms/op
Iteration   1: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 64, 89, 100, 100, 100, 100, 100 ms/op
Iteration   2: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 55, 56, 56, 56, 56, 56, 56 ms/op
Iteration   3: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 64, 85, 90, 90, 90, 90, 90 ms/op


Result "readRev":
  N = 145
  mean =     63.825 ±(99.9%) 3.029 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 13 
    [ 55.000,  60.000) = 62 
    [ 60.000,  65.000) = 23 
    [ 65.000,  70.000) = 15 
    [ 70.000,  75.000) = 10 
    [ 75.000,  80.000) = 3 
    [ 80.000,  85.000) = 13 
    [ 85.000,  90.000) = 1 
    [ 90.000,  95.000) = 2 
    [ 95.000, 100.000) = 0 
    [100.000, 105.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     54.657 ms/op
     p(50.0000) =     57.475 ms/op
     p(90.0000) =     80.609 ms/op
     p(95.0000) =     82.379 ms/op
     p(99.0000) =    106.158 ms/op
     p(99.9000) =    109.052 ms/op
     p(99.9900) =    109.052 ms/op
     p(99.9990) =    109.052 ms/op
     p(99.9999) =    109.052 ms/op
    p(100.0000) =    109.052 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readSeq
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 29.31% complete, ETA 01:35:35
# Fork: 1 of 3
# Warmup Iteration   1: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 36, 41, 48, 52, 52, 52, 52 ms/op
# Warmup Iteration   2: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 46, 58, 72, 74, 74, 74, 74 ms/op
# Warmup Iteration   3: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 42, 56, 71, 74, 74, 74, 74 ms/op
Iteration   1: n = 22, mean = 47 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 40, 69, 78, 80, 80, 80, 80 ms/op
Iteration   2: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 40, 55, 73, 78, 78, 78, 78 ms/op
Iteration   3: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 40, 55, 72, 76, 76, 76, 76 ms/op

# Run progress: 29.45% complete, ETA 01:35:13
# Fork: 2 of 3
# Warmup Iteration   1: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 47, 61, 92, 93, 93, 93, 93 ms/op
# Warmup Iteration   2: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 42, 43, 44, 44, 44, 44, 44 ms/op
# Warmup Iteration   3: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 41, 42, 42, 42, 42, 42, 42 ms/op
Iteration   1: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 47, 79, 87, 87, 87, 87, 87 ms/op
Iteration   2: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 47, 67, 86, 87, 87, 87, 87 ms/op
Iteration   3: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 55, 67, 77, 77, 77, 77, 77 ms/op

# Run progress: 29.60% complete, ETA 01:34:50
# Fork: 3 of 3
# Warmup Iteration   1: n = 20, mean = 50 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 46, 46, 67, 96, 98, 98, 98, 98 ms/op
# Warmup Iteration   2: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 41, 43, 44, 44, 44, 44, 44 ms/op
# Warmup Iteration   3: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 42, 60, 64, 64, 64, 64, 64 ms/op
Iteration   1: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 41, 65, 77, 79, 79, 79, 79 ms/op
Iteration   2: n = 28, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 38, 40, 41, 41, 41, 41 ms/op
Iteration   3: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 46, 60, 77, 79, 79, 79, 79 ms/op


Result "readSeq":
  N = 198
  mean =     46.572 ±(99.9%) 2.567 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 61 
    [40.000, 45.000) = 48 
    [45.000, 50.000) = 44 
    [50.000, 55.000) = 16 
    [55.000, 60.000) = 8 
    [60.000, 65.000) = 4 
    [65.000, 70.000) = 6 
    [70.000, 75.000) = 2 
    [75.000, 80.000) = 7 
    [80.000, 85.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     35.979 ms/op
     p(50.0000) =     41.288 ms/op
     p(90.0000) =     62.672 ms/op
     p(95.0000) =     73.302 ms/op
     p(99.0000) =     86.640 ms/op
     p(99.9000) =     86.770 ms/op
     p(99.9900) =     86.770 ms/op
     p(99.9990) =     86.770 ms/op
     p(99.9999) =     86.770 ms/op
    p(100.0000) =     86.770 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readSeq
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 29.74% complete, ETA 01:34:28
# Fork: 1 of 3
# Warmup Iteration   1: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 59, 62, 67, 67, 67, 67, 67 ms/op
# Warmup Iteration   2: n = 18, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 59, 59, 60, 60, 60, 60, 60 ms/op
# Warmup Iteration   3: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 59, 59, 60, 60, 60, 60, 60 ms/op
Iteration   1: n = 18, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 59, 59, 59, 59, 59, 59, 59 ms/op
Iteration   2: n = 18, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 58, 59, 59, 59, 59, 59, 59 ms/op
Iteration   3: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 68, 87, 95, 95, 95, 95, 95 ms/op

# Run progress: 29.89% complete, ETA 01:34:08
# Fork: 2 of 3
# Warmup Iteration   1: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 58, 60, 65, 65, 65, 65, 65 ms/op
# Warmup Iteration   2: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 58, 58, 58, 58, 58, 58, 58 ms/op
# Warmup Iteration   3: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 58, 58, 59, 59, 59, 59, 59 ms/op
Iteration   1: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 58, 58, 59, 59, 59, 59, 59 ms/op
Iteration   2: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 67, 88, 97, 97, 97, 97, 97 ms/op
Iteration   3: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 58, 58, 58, 58, 58, 58, 58 ms/op

# Run progress: 30.03% complete, ETA 01:33:48
# Fork: 3 of 3
# Warmup Iteration   1: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 57, 62, 72, 72, 72, 72, 72 ms/op
# Warmup Iteration   2: n = 14, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 67, 102, 106, 106, 106, 106, 106 ms/op
# Warmup Iteration   3: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 85, 105, 106, 106, 106, 106, 106 ms/op
Iteration   1: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 76, 85, 85, 85, 85, 85, 85 ms/op
Iteration   2: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 76, 76, 76, 76, 76, 76, 76 ms/op
Iteration   3: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 78, 99, 102, 102, 102, 102, 102 ms/op


Result "readSeq":
  N = 142
  mean =     66.459 ±(99.9%) 2.891 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 73 
    [ 60.000,  65.000) = 1 
    [ 65.000,  70.000) = 22 
    [ 70.000,  75.000) = 2 
    [ 75.000,  80.000) = 30 
    [ 80.000,  85.000) = 7 
    [ 85.000,  90.000) = 3 
    [ 90.000,  95.000) = 1 
    [ 95.000, 100.000) = 2 
    [100.000, 105.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     57.475 ms/op
     p(50.0000) =     58.982 ms/op
     p(90.0000) =     79.613 ms/op
     p(95.0000) =     85.878 ms/op
     p(99.0000) =     99.794 ms/op
     p(99.9000) =    102.105 ms/op
     p(99.9900) =    102.105 ms/op
     p(99.9990) =    102.105 ms/op
     p(99.9999) =    102.105 ms/op
    p(100.0000) =    102.105 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readSeq
# Parameters: (forceSafe = false, intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 30.17% complete, ETA 01:33:28
# Fork: 1 of 3
# Warmup Iteration   1: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 57, 77, 94, 94, 94, 94, 94 ms/op
# Warmup Iteration   2: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 44, 45, 58, 71, 72, 72, 72, 72 ms/op
# Warmup Iteration   3: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 46, 78, 82, 82, 82, 82, 82 ms/op
Iteration   1: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 50, 57, 77, 83, 83, 83, 83, 83 ms/op
Iteration   2: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 44, 46, 63, 78, 79, 79, 79, 79 ms/op
Iteration   3: n = 20, mean = 50 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 49, 68, 77, 77, 77, 77, 77 ms/op

# Run progress: 30.32% complete, ETA 01:33:08
# Fork: 2 of 3
# Warmup Iteration   1: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 48, 48, 74, 98, 98, 98, 98, 98 ms/op
# Warmup Iteration   2: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 43, 44, 46, 46, 46, 46, 46 ms/op
# Warmup Iteration   3: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 42, 57, 73, 76, 76, 76, 76 ms/op
Iteration   1: n = 20, mean = 50 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 46, 46, 66, 83, 84, 84, 84, 84 ms/op
Iteration   2: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 43, 44, 44, 44, 44, 44, 44 ms/op
Iteration   3: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 43, 43, 44, 44, 44, 44, 44 ms/op

# Run progress: 30.46% complete, ETA 01:32:47
# Fork: 3 of 3
# Warmup Iteration   1: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 43, 48, 50, 50, 50, 50 ms/op
# Warmup Iteration   2: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 36, 37, 37, 37, 37, 37 ms/op
# Warmup Iteration   3: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 46, 47, 76, 76, 76, 76, 76, 76 ms/op
Iteration   1: n = 25, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 41, 42, 48, 50, 50, 50, 50 ms/op
Iteration   2: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 36, 36, 37, 37, 37, 37 ms/op
Iteration   3: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 38, 38, 38, 38, 38, 38 ms/op


Result "readSeq":
  N = 207
  mean =     44.351 ±(99.9%) 2.182 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 70 
    [40.000, 45.000) = 69 
    [45.000, 50.000) = 35 
    [50.000, 55.000) = 2 
    [55.000, 60.000) = 19 
    [60.000, 65.000) = 2 
    [65.000, 70.000) = 4 
    [70.000, 75.000) = 1 
    [75.000, 80.000) = 3 
    [80.000, 85.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     35.652 ms/op
     p(50.0000) =     43.057 ms/op
     p(90.0000) =     57.357 ms/op
     p(95.0000) =     65.221 ms/op
     p(99.0000) =     83.026 ms/op
     p(99.9000) =     83.755 ms/op
     p(99.9900) =     83.755 ms/op
     p(99.9990) =     83.755 ms/op
     p(99.9999) =     83.755 ms/op
    p(100.0000) =     83.755 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readSeq
# Parameters: (forceSafe = false, intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 30.60% complete, ETA 01:32:26
# Fork: 1 of 3
# Warmup Iteration   1: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 89, 116, 122, 122, 122, 122, 122 ms/op
# Warmup Iteration   2: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 86, 116, 122, 122, 122, 122, 122 ms/op
# Warmup Iteration   3: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 60, 70, 70, 70, 70, 70, 70 ms/op
Iteration   1: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 91, 109, 112, 112, 112, 112, 112 ms/op
Iteration   2: n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 72, 81, 97, 98, 98, 98, 98, 98 ms/op
Iteration   3: n = 11, mean = 95 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 90, 114, 117, 117, 117, 117, 117 ms/op

# Run progress: 30.75% complete, ETA 01:32:07
# Fork: 2 of 3
# Warmup Iteration   1: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 65, 96, 102, 102, 102, 102, 102 ms/op
# Warmup Iteration   2: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 70, 72, 73, 73, 73, 73, 73 ms/op
# Warmup Iteration   3: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 60, 61, 62, 62, 62, 62, 62 ms/op
Iteration   1: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 60, 61, 61, 61, 61, 61, 61 ms/op
Iteration   2: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 70, 92, 99, 99, 99, 99, 99 ms/op
Iteration   3: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 70, 100, 101, 101, 101, 101, 101 ms/op

# Run progress: 30.89% complete, ETA 01:31:48
# Fork: 3 of 3
# Warmup Iteration   1: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 70, 95, 103, 103, 103, 103, 103 ms/op
# Warmup Iteration   2: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 71, 71, 71, 71, 71, 71, 71 ms/op
# Warmup Iteration   3: n = 15, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 65, 98, 101, 101, 101, 101, 101 ms/op
Iteration   1: n = 11, mean = 96 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 91, 119, 123, 123, 123, 123, 123 ms/op
Iteration   2: n = 12, mean = 88 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 81, 91, 91, 91, 91, 91, 91, 91 ms/op
Iteration   3: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 81, 81, 81, 81, 81, 81, 81, 81 ms/op


Result "readSeq":
  N = 115
  mean =     81.325 ±(99.9%) 4.359 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 15 
    [ 60.000,  65.000) = 2 
    [ 65.000,  70.000) = 11 
    [ 70.000,  75.000) = 13 
    [ 75.000,  80.000) = 0 
    [ 80.000,  85.000) = 24 
    [ 85.000,  90.000) = 6 
    [ 90.000,  95.000) = 30 
    [ 95.000, 100.000) = 6 
    [100.000, 105.000) = 4 
    [105.000, 110.000) = 1 
    [110.000, 115.000) = 1 
    [115.000, 120.000) = 1 
    [120.000, 125.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     59.572 ms/op
     p(50.0000) =     81.134 ms/op
     p(90.0000) =     98.855 ms/op
     p(95.0000) =    101.738 ms/op
     p(99.0000) =    121.808 ms/op
     p(99.9000) =    122.814 ms/op
     p(99.9900) =    122.814 ms/op
     p(99.9990) =    122.814 ms/op
     p(99.9999) =    122.814 ms/op
    p(100.0000) =    122.814 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readXxh64
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 31.03% complete, ETA 01:31:30
# Fork: 1 of 3
# Warmup Iteration   1: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 69, 120, 156, 156, 156, 156, 156 ms/op
# Warmup Iteration   2: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 61, 61, 62, 62, 62, 62, 62 ms/op
# Warmup Iteration   3: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 69, 103, 122, 122, 122, 122, 122 ms/op
Iteration   1: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 67, 102, 122, 122, 122, 122, 122 ms/op
Iteration   2: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 61, 61, 61, 61, 61, 61, 61 ms/op
Iteration   3: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 61, 61, 61, 61, 61, 61, 61 ms/op

# Run progress: 31.18% complete, ETA 01:31:10
# Fork: 2 of 3
# Warmup Iteration   1: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 67, 85, 99, 99, 99, 99, 99 ms/op
# Warmup Iteration   2: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 59, 61, 62, 62, 62, 62, 62 ms/op
# Warmup Iteration   3: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 59, 59, 59, 59, 59, 59, 59 ms/op
Iteration   1: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 69, 94, 102, 102, 102, 102, 102 ms/op
Iteration   2: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 62, 65, 69, 69, 69, 69, 69 ms/op
Iteration   3: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 69, 125, 138, 138, 138, 138, 138 ms/op

# Run progress: 31.32% complete, ETA 01:30:49
# Fork: 3 of 3
# Warmup Iteration   1: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 74, 76, 141, 164, 164, 164, 164, 164 ms/op
# Warmup Iteration   2: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 68, 76, 107, 120, 120, 120, 120, 120 ms/op
# Warmup Iteration   3: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 78, 130, 131, 131, 131, 131, 131 ms/op
Iteration   1: n = 13, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 70, 106, 110, 110, 110, 110, 110 ms/op
Iteration   2: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 61, 70, 70, 70, 70, 70, 70 ms/op
Iteration   3: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 78, 113, 127, 127, 127, 127, 127 ms/op


Result "readXxh64":
  N = 134
  mean =     68.740 ±(99.9%) 3.767 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 2 
    [ 60.000,  65.000) = 64 
    [ 65.000,  70.000) = 35 
    [ 70.000,  75.000) = 8 
    [ 75.000,  80.000) = 15 
    [ 80.000,  85.000) = 1 
    [ 85.000,  90.000) = 1 
    [ 90.000,  95.000) = 1 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 2 
    [105.000, 110.000) = 0 
    [110.000, 115.000) = 1 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 1 
    [125.000, 130.000) = 1 
    [130.000, 135.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     58.655 ms/op
     p(50.0000) =     66.781 ms/op
     p(90.0000) =     78.250 ms/op
     p(95.0000) =    100.336 ms/op
     p(99.0000) =    134.421 ms/op
     p(99.9000) =    138.412 ms/op
     p(99.9900) =    138.412 ms/op
     p(99.9990) =    138.412 ms/op
     p(99.9999) =    138.412 ms/op
    p(100.0000) =    138.412 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readXxh64
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 31.47% complete, ETA 01:30:28
# Fork: 1 of 3
# Warmup Iteration   1: n = 10, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 96, 129, 132, 132, 132, 132, 132 ms/op
# Warmup Iteration   2: n = 11, mean = 95 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 95, 98, 99, 99, 99, 99, 99 ms/op
# Warmup Iteration   3: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 108, 109, 159, 159, 159, 159, 159, 159 ms/op
Iteration   1: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 114, 160, 160, 160, 160, 160, 160 ms/op
Iteration   2: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 108, 148, 148, 148, 148, 148, 148 ms/op
Iteration   3: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 95, 96, 96, 96, 96, 96, 96 ms/op

# Run progress: 31.61% complete, ETA 01:30:10
# Fork: 2 of 3
# Warmup Iteration   1: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 114, 193, 193, 193, 193, 193, 193 ms/op
# Warmup Iteration   2: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 114, 139, 139, 139, 139, 139, 139 ms/op
# Warmup Iteration   3: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 119, 150, 150, 150, 150, 150, 150 ms/op
Iteration   1: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 96, 147, 151, 151, 151, 151, 151 ms/op
Iteration   2: n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 114, 149, 149, 149, 149, 149, 149 ms/op
Iteration   3: n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 98, 160, 160, 160, 160, 160, 160 ms/op

# Run progress: 31.75% complete, ETA 01:29:51
# Fork: 3 of 3
# Warmup Iteration   1: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 82, 105, 112, 112, 112, 112, 112 ms/op
# Warmup Iteration   2: n = 10, mean = 110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 99, 150, 152, 152, 152, 152, 152 ms/op
# Warmup Iteration   3: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 111, 112, 148, 148, 148, 148, 148, 148 ms/op
Iteration   1: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 94, 145, 150, 150, 150, 150, 150 ms/op
Iteration   2: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 81, 82, 83, 84, 84, 84, 84, 84 ms/op
Iteration   3: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 82, 82, 82, 82, 82, 82, 82 ms/op


Result "readXxh64":
  N = 93
  mean =    100.575 ±(99.9%) 6.689 ms/op

  Histogram, ms/op:
    [ 80.000,  85.000) = 26 
    [ 85.000,  90.000) = 1 
    [ 90.000,  95.000) = 14 
    [ 95.000, 100.000) = 18 
    [100.000, 105.000) = 3 
    [105.000, 110.000) = 7 
    [110.000, 115.000) = 12 
    [115.000, 120.000) = 3 
    [120.000, 125.000) = 1 
    [125.000, 130.000) = 1 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 1 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 3 
    [150.000, 155.000) = 1 
    [155.000, 160.000) = 1 
    [160.000, 165.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     81.396 ms/op
     p(50.0000) =     95.814 ms/op
     p(90.0000) =    119.931 ms/op
     p(95.0000) =    149.396 ms/op
     p(99.0000) =    160.170 ms/op
     p(99.9000) =    160.170 ms/op
     p(99.9900) =    160.170 ms/op
     p(99.9990) =    160.170 ms/op
     p(99.9999) =    160.170 ms/op
    p(100.0000) =    160.170 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readXxh64
# Parameters: (forceSafe = false, intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 31.90% complete, ETA 01:29:33
# Fork: 1 of 3
# Warmup Iteration   1: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 67, 96, 110, 110, 110, 110, 110 ms/op
# Warmup Iteration   2: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 80, 106, 111, 111, 111, 111, 111 ms/op
# Warmup Iteration   3: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 80, 130, 141, 141, 141, 141, 141 ms/op
Iteration   1: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 68, 74, 113, 129, 129, 129, 129, 129 ms/op
Iteration   2: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 66, 113, 131, 131, 131, 131, 131 ms/op
Iteration   3: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 74, 115, 133, 133, 133, 133, 133 ms/op

# Run progress: 32.04% complete, ETA 01:29:14
# Fork: 2 of 3
# Warmup Iteration   1: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 74, 81, 146, 169, 169, 169, 169, 169 ms/op
# Warmup Iteration   2: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 72, 73, 74, 75, 75, 75, 75, 75 ms/op
# Warmup Iteration   3: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 72, 73, 75, 76, 76, 76, 76, 76 ms/op
Iteration   1: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 74, 82, 118, 128, 128, 128, 128, 128 ms/op
Iteration   2: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 72, 72, 73, 73, 73, 73, 73, 73 ms/op
Iteration   3: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 72, 73, 73, 74, 74, 74, 74, 74 ms/op

# Run progress: 32.18% complete, ETA 01:28:54
# Fork: 3 of 3
# Warmup Iteration   1: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 68, 74, 134, 163, 163, 163, 163, 163 ms/op
# Warmup Iteration   2: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 74, 109, 123, 123, 123, 123, 123 ms/op
# Warmup Iteration   3: n = 13, mean = 83 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 72, 121, 129, 129, 129, 129, 129 ms/op
Iteration   1: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 74, 109, 125, 125, 125, 125, 125 ms/op
Iteration   2: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 65, 67, 68, 68, 68, 68, 68 ms/op
Iteration   3: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 65, 103, 111, 111, 111, 111, 111 ms/op


Result "readXxh64":
  N = 123
  mean =     75.046 ±(99.9%) 4.102 ms/op

  Histogram, ms/op:
    [ 60.000,  65.000) = 5 
    [ 65.000,  70.000) = 35 
    [ 70.000,  75.000) = 59 
    [ 75.000,  80.000) = 0 
    [ 80.000,  85.000) = 12 
    [ 85.000,  90.000) = 3 
    [ 90.000,  95.000) = 2 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 0 
    [105.000, 110.000) = 0 
    [110.000, 115.000) = 1 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 1 
    [125.000, 130.000) = 2 
    [130.000, 135.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     64.815 ms/op
     p(50.0000) =     72.614 ms/op
     p(90.0000) =     85.826 ms/op
     p(95.0000) =    107.820 ms/op
     p(99.0000) =    132.729 ms/op
     p(99.9000) =    133.169 ms/op
     p(99.9900) =    133.169 ms/op
     p(99.9990) =    133.169 ms/op
     p(99.9999) =    133.169 ms/op
    p(100.0000) =    133.169 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readXxh64
# Parameters: (forceSafe = false, intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 32.33% complete, ETA 01:28:35
# Fork: 1 of 3
# Warmup Iteration   1: n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 113, 152, 152, 152, 152, 152, 152 ms/op
# Warmup Iteration   2: n = 11, mean = 99 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 95, 109, 109, 109, 109, 109, 109 ms/op
# Warmup Iteration   3: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 115, 162, 162, 162, 162, 162, 162 ms/op
Iteration   1: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 108, 161, 161, 161, 161, 161, 161 ms/op
Iteration   2: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 108, 159, 159, 159, 159, 159, 159 ms/op
Iteration   3: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 100, 149, 154, 154, 154, 154, 154 ms/op

# Run progress: 32.47% complete, ETA 01:28:18
# Fork: 2 of 3
# Warmup Iteration   1: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 87, 113, 121, 121, 121, 121, 121 ms/op
# Warmup Iteration   2: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 86, 87, 89, 89, 89, 89, 89, 89 ms/op
# Warmup Iteration   3: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 115, 118, 162, 162, 162, 162, 162, 162 ms/op
Iteration   1: n = 9, mean = 120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 114, 167, 167, 167, 167, 167, 167 ms/op
Iteration   2: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 90, 99, 99, 99, 99, 99, 99 ms/op
Iteration   3: n = 9, mean = 120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 116, 160, 160, 160, 160, 160, 160 ms/op

# Run progress: 32.61% complete, ETA 01:28:01
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 123, 201, 201, 201, 201, 201, 201 ms/op
# Warmup Iteration   2: n = 11, mean = 95 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 93, 101, 101, 101, 101, 101, 101 ms/op
# Warmup Iteration   3: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 120, 162, 162, 162, 162, 162, 162 ms/op
Iteration   1: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 102, 154, 159, 159, 159, 159, 159 ms/op
Iteration   2: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 118, 162, 162, 162, 162, 162, 162 ms/op
Iteration   3: n = 9, mean = 125 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 114, 118, 164, 164, 164, 164, 164, 164 ms/op


Result "readXxh64":
  N = 85
  mean =    112.668 ±(99.9%) 7.050 ms/op

  Histogram, ms/op:
    [ 80.000,  85.000) = 0 
    [ 85.000,  90.000) = 6 
    [ 90.000,  95.000) = 3 
    [ 95.000, 100.000) = 11 
    [100.000, 105.000) = 12 
    [105.000, 110.000) = 16 
    [110.000, 115.000) = 7 
    [115.000, 120.000) = 18 
    [120.000, 125.000) = 2 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 1 
    [145.000, 150.000) = 0 
    [150.000, 155.000) = 2 
    [155.000, 160.000) = 2 
    [160.000, 165.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =     87.032 ms/op
     p(50.0000) =    108.265 ms/op
     p(90.0000) =    153.983 ms/op
     p(95.0000) =    161.087 ms/op
     p(99.0000) =    166.986 ms/op
     p(99.9000) =    166.986 ms/op
     p(99.9900) =    166.986 ms/op
     p(99.9990) =    166.986 ms/op
     p(99.9999) =    166.986 ms/op
    p(100.0000) =    166.986 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 32.76% complete, ETA 01:27:45
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 154, 196, 196, 196, 196, 196, 196 ms/op
# Warmup Iteration   2: n = 7, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 130, 136, 136, 136, 136, 136, 136 ms/op
# Warmup Iteration   3: n = 7, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 131, 135, 135, 135, 135, 135, 135 ms/op
Iteration   1: n = 6, mean = 172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 152, 220, 220, 220, 220, 220, 220 ms/op
Iteration   2: n = 6, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 152, 217, 217, 217, 217, 217, 217 ms/op
Iteration   3: n = 7, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 135, 136, 136, 136, 136, 136, 136 ms/op

# Run progress: 32.90% complete, ETA 01:27:24
# Fork: 2 of 3
# Warmup Iteration   1: n = 5, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 149, 226, 226, 226, 226, 226, 226 ms/op
# Warmup Iteration   2: n = 6, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 149, 211, 211, 211, 211, 211, 211 ms/op
# Warmup Iteration   3: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 129, 131, 131, 131, 131, 131, 131 ms/op
Iteration   1: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 128, 131, 131, 131, 131, 131, 131 ms/op
Iteration   2: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 131, 131, 131, 131, 131, 131, 131 ms/op
Iteration   3: n = 7, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 131, 134, 134, 134, 134, 134, 134 ms/op

# Run progress: 33.05% complete, ETA 01:27:05
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 154, 156, 256, 256, 256, 256, 256, 256 ms/op
# Warmup Iteration   2: n = 6, mean = 165 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 158, 213, 213, 213, 213, 213, 213 ms/op
# Warmup Iteration   3: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 133, 177, 177, 177, 177, 177, 177 ms/op
Iteration   1: n = 6, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 151, 158, 221, 221, 221, 221, 221, 221 ms/op
Iteration   2: n = 7, mean = 141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 135, 160, 160, 160, 160, 160, 160 ms/op
Iteration   3: n = 7, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 134, 136, 136, 136, 136, 136, 136 ms/op


Result "write":
  N = 62
  mean =    144.027 ±(99.9%) 10.279 ms/op

  Histogram, ms/op:
    [120.000, 130.000) = 8 
    [130.000, 140.000) = 34 
    [140.000, 150.000) = 5 
    [150.000, 160.000) = 10 
    [160.000, 170.000) = 0 
    [170.000, 180.000) = 0 
    [180.000, 190.000) = 0 
    [190.000, 200.000) = 0 
    [200.000, 210.000) = 1 
    [210.000, 220.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    128.057 ms/op
     p(50.0000) =    134.480 ms/op
     p(90.0000) =    159.829 ms/op
     p(95.0000) =    216.046 ms/op
     p(99.0000) =    220.987 ms/op
     p(99.9000) =    220.987 ms/op
     p(99.9900) =    220.987 ms/op
     p(99.9990) =    220.987 ms/op
     p(99.9999) =    220.987 ms/op
    p(100.0000) =    220.987 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = false, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 33.19% complete, ETA 01:26:45
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1011 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011 ms/op
# Warmup Iteration   2: n = 1, mean = 916 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 916, 916, 916, 916, 916, 916, 916, 916 ms/op
# Warmup Iteration   3: n = 2, mean = 899 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 857, 899, 942, 942, 942, 942, 942, 942 ms/op
Iteration   1: n = 1, mean = 924 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 924, 924, 924, 924, 924, 924, 924, 924 ms/op
Iteration   2: n = 2, mean = 845 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 747, 845, 943, 943, 943, 943, 943, 943 ms/op
Iteration   3: n = 2, mean = 828 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 756, 828, 900, 900, 900, 900, 900, 900 ms/op

# Run progress: 33.33% complete, ETA 01:26:30
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 908 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 908, 908, 908, 908, 908, 908, 908, 908 ms/op
# Warmup Iteration   2: n = 2, mean = 748 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 741, 748, 754, 754, 754, 754, 754, 754 ms/op
# Warmup Iteration   3: n = 1, mean = 979 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 979, 979, 979, 979, 979, 979, 979, 979 ms/op
Iteration   1: n = 1, mean = 1001 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001 ms/op
Iteration   2: n = 1, mean = 915 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 915, 915, 915, 915, 915, 915, 915, 915 ms/op
Iteration   3: n = 2, mean = 855 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 764, 855, 946, 946, 946, 946, 946, 946 ms/op

# Run progress: 33.48% complete, ETA 01:26:13
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 969 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 969, 969, 969, 969, 969, 969, 969, 969 ms/op
# Warmup Iteration   2: n = 2, mean = 743 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 739, 743, 748, 748, 748, 748, 748, 748 ms/op
# Warmup Iteration   3: n = 1, mean = 1076 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076 ms/op
Iteration   1: n = 1, mean = 928 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 928, 928, 928, 928, 928, 928, 928, 928 ms/op
Iteration   2: n = 1, mean = 1044 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044 ms/op
Iteration   3: n = 2, mean = 893 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 871, 893, 914, 914, 914, 914, 914, 914 ms/op


Result "write":
  N = 13
  mean =    896.452 ±(99.9%) 109.399 ms/op

  Histogram, ms/op:
    [ 700.000,  725.000) = 0 
    [ 725.000,  750.000) = 1 
    [ 750.000,  775.000) = 2 
    [ 775.000,  800.000) = 0 
    [ 800.000,  825.000) = 0 
    [ 825.000,  850.000) = 0 
    [ 850.000,  875.000) = 1 
    [ 875.000,  900.000) = 1 
    [ 900.000,  925.000) = 3 
    [ 925.000,  950.000) = 3 
    [ 950.000,  975.000) = 0 
    [ 975.000, 1000.000) = 0 
    [1000.000, 1025.000) = 1 
    [1025.000, 1050.000) = 1 
    [1050.000, 1075.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    746.586 ms/op
     p(50.0000) =    915.407 ms/op
     p(90.0000) =   1027.185 ms/op
     p(95.0000) =   1044.382 ms/op
     p(99.0000) =   1044.382 ms/op
     p(99.9000) =   1044.382 ms/op
     p(99.9900) =   1044.382 ms/op
     p(99.9990) =   1044.382 ms/op
     p(99.9999) =   1044.382 ms/op
    p(100.0000) =   1044.382 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.write
# Parameters: (intKey = false, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 33.62% complete, ETA 01:25:56
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 456 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 396, 456, 515, 515, 515, 515, 515, 515 ms/op
# Warmup Iteration   2: n = 4, mean = 308 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 304, 308, 312, 312, 312, 312, 312, 312 ms/op
# Warmup Iteration   3: n = 3, mean = 430 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 402, 409, 479, 479, 479, 479, 479, 479 ms/op
Iteration   1: n = 3, mean = 389 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 347, 410, 411, 411, 411, 411, 411, 411 ms/op
Iteration   2: n = 3, mean = 364 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 342, 366, 384, 384, 384, 384, 384, 384 ms/op
Iteration   3: n = 3, mean = 354 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 322, 333, 408, 408, 408, 408, 408, 408 ms/op

# Run progress: 33.76% complete, ETA 01:25:39
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 528 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 494, 528, 562, 562, 562, 562, 562, 562 ms/op
# Warmup Iteration   2: n = 3, mean = 348 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 318, 319, 408, 408, 408, 408, 408, 408 ms/op
# Warmup Iteration   3: n = 4, mean = 318 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 303, 312, 345, 345, 345, 345, 345, 345 ms/op
Iteration   1: n = 3, mean = 373 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 319, 336, 466, 466, 466, 466, 466, 466 ms/op
Iteration   2: n = 4, mean = 332 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 303, 311, 405, 405, 405, 405, 405, 405 ms/op
Iteration   3: n = 3, mean = 389 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 343, 406, 416, 416, 416, 416, 416, 416 ms/op

# Run progress: 33.91% complete, ETA 01:25:22
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 449 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 392, 449, 505, 505, 505, 505, 505, 505 ms/op
# Warmup Iteration   2: n = 3, mean = 400 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 376, 400, 425, 425, 425, 425, 425, 425 ms/op
# Warmup Iteration   3: n = 4, mean = 307 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 303, 306, 314, 314, 314, 314, 314, 314 ms/op
Iteration   1: n = 3, mean = 361 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 328, 346, 411, 411, 411, 411, 411, 411 ms/op
Iteration   2: n = 3, mean = 377 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 353, 361, 416, 416, 416, 416, 416, 416 ms/op
Iteration   3: n = 3, mean = 389 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 340, 413, 414, 414, 414, 414, 414, 414 ms/op


Result "write":
  N = 28
  mean =    368.612 ±(99.9%) 30.287 ms/op

  Histogram, ms/op:
    [300.000, 312.500) = 2 
    [312.500, 325.000) = 3 
    [325.000, 337.500) = 3 
    [337.500, 350.000) = 5 
    [350.000, 362.500) = 2 
    [362.500, 375.000) = 1 
    [375.000, 387.500) = 1 
    [387.500, 400.000) = 0 
    [400.000, 412.500) = 6 
    [412.500, 425.000) = 4 
    [425.000, 437.500) = 0 
    [437.500, 450.000) = 0 
    [450.000, 462.500) = 0 
    [462.500, 475.000) = 1 
    [475.000, 487.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    303.038 ms/op
     p(50.0000) =    357.040 ms/op
     p(90.0000) =    416.285 ms/op
     p(95.0000) =    443.390 ms/op
     p(99.0000) =    465.568 ms/op
     p(99.9000) =    465.568 ms/op
     p(99.9900) =    465.568 ms/op
     p(99.9990) =    465.568 ms/op
     p(99.9999) =    465.568 ms/op
    p(100.0000) =    465.568 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.write
# Parameters: (intKey = false, metaSync = false, num = 1000000, sequential = false, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 34.05% complete, ETA 01:25:04
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1445 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445 ms/op
# Warmup Iteration   2: n = 1, mean = 1128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128 ms/op
# Warmup Iteration   3: n = 1, mean = 1302 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302 ms/op
Iteration   1: n = 1, mean = 1231 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231 ms/op
Iteration   2: n = 1, mean = 1298 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298 ms/op
Iteration   3: n = 1, mean = 1426 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426 ms/op

# Run progress: 34.20% complete, ETA 01:24:48
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1470 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470 ms/op
# Warmup Iteration   2: n = 1, mean = 1156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156 ms/op
# Warmup Iteration   3: n = 1, mean = 1237 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237 ms/op
Iteration   1: n = 1, mean = 1227 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227 ms/op
Iteration   2: n = 1, mean = 1130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130 ms/op
Iteration   3: n = 1, mean = 1141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141 ms/op

# Run progress: 34.34% complete, ETA 01:24:33
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1439 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439 ms/op
# Warmup Iteration   2: n = 1, mean = 1177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177 ms/op
# Warmup Iteration   3: n = 1, mean = 1516 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516 ms/op
Iteration   1: n = 1, mean = 1099 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099 ms/op
Iteration   2: n = 1, mean = 1248 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248 ms/op
Iteration   3: n = 1, mean = 1141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141 ms/op


Result "write":
  N = 9
  mean =   1215.649 ±(99.9%) 172.772 ms/op

  Histogram, ms/op:
    [1000.000, 1050.000) = 0 
    [1050.000, 1100.000) = 1 
    [1100.000, 1150.000) = 3 
    [1150.000, 1200.000) = 0 
    [1200.000, 1250.000) = 3 
    [1250.000, 1300.000) = 1 
    [1300.000, 1350.000) = 0 
    [1350.000, 1400.000) = 0 
    [1400.000, 1450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1098.908 ms/op
     p(50.0000) =   1226.834 ms/op
     p(90.0000) =   1426.063 ms/op
     p(95.0000) =   1426.063 ms/op
     p(99.0000) =   1426.063 ms/op
     p(99.9000) =   1426.063 ms/op
     p(99.9900) =   1426.063 ms/op
     p(99.9990) =   1426.063 ms/op
     p(99.9999) =   1426.063 ms/op
    p(100.0000) =   1426.063 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 34.48% complete, ETA 01:24:17
# Fork: 1 of 3
# Warmup Iteration   1: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 102, 190, 190, 190, 190, 190, 190 ms/op
# Warmup Iteration   2: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 102, 155, 161, 161, 161, 161, 161 ms/op
# Warmup Iteration   3: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 91, 95, 95, 95, 95, 95, 95 ms/op
Iteration   1: n = 12, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 91, 91, 91, 91, 91, 91, 91 ms/op
Iteration   2: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 102, 156, 161, 161, 161, 161, 161 ms/op
Iteration   3: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 102, 159, 165, 165, 165, 165, 165 ms/op

# Run progress: 34.63% complete, ETA 01:23:58
# Fork: 2 of 3
# Warmup Iteration   1: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 102, 191, 191, 191, 191, 191, 191 ms/op
# Warmup Iteration   2: n = 11, mean = 96 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 91, 131, 140, 140, 140, 140, 140 ms/op
# Warmup Iteration   3: n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 91, 93, 93, 93, 93, 93, 93 ms/op
Iteration   1: n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 91, 92, 92, 92, 92, 92, 92 ms/op
Iteration   2: n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 91, 92, 92, 92, 92, 92, 92 ms/op
Iteration   3: n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 91, 95, 96, 96, 96, 96, 96 ms/op

# Run progress: 34.77% complete, ETA 01:23:39
# Fork: 3 of 3
# Warmup Iteration   1: n = 11, mean = 98 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 100, 116, 119, 119, 119, 119, 119 ms/op
# Warmup Iteration   2: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 104, 170, 170, 170, 170, 170, 170 ms/op
# Warmup Iteration   3: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 102, 160, 165, 165, 165, 165, 165 ms/op
Iteration   1: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 102, 164, 170, 170, 170, 170, 170 ms/op
Iteration   2: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 88, 89, 89, 89, 89, 89, 89 ms/op
Iteration   3: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 88, 90, 91, 91, 91, 91, 91 ms/op


Result "readCrc":
  N = 99
  mean =     95.412 ±(99.9%) 4.632 ms/op

  Histogram, ms/op:
    [ 80.000,  90.000) = 24 
    [ 90.000, 100.000) = 51 
    [100.000, 110.000) = 21 
    [110.000, 120.000) = 0 
    [120.000, 130.000) = 0 
    [130.000, 140.000) = 0 
    [140.000, 150.000) = 0 
    [150.000, 160.000) = 0 
    [160.000, 170.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     88.211 ms/op
     p(50.0000) =     90.702 ms/op
     p(90.0000) =    102.236 ms/op
     p(95.0000) =    106.824 ms/op
     p(99.0000) =    170.394 ms/op
     p(99.9000) =    170.394 ms/op
     p(99.9900) =    170.394 ms/op
     p(99.9990) =    170.394 ms/op
     p(99.9999) =    170.394 ms/op
    p(100.0000) =    170.394 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 34.91% complete, ETA 01:23:21
# Fork: 1 of 3
# Warmup Iteration   1: n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 111, 129, 129, 129, 129, 129, 129 ms/op
# Warmup Iteration   2: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 126, 179, 179, 179, 179, 179, 179 ms/op
# Warmup Iteration   3: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 126, 180, 180, 180, 180, 180, 180 ms/op
Iteration   1: n = 10, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 111, 114, 114, 114, 114, 114, 114 ms/op
Iteration   2: n = 8, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 115, 126, 188, 188, 188, 188, 188, 188 ms/op
Iteration   3: n = 8, mean = 134 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 117, 126, 192, 192, 192, 192, 192, 192 ms/op

# Run progress: 35.06% complete, ETA 01:23:04
# Fork: 2 of 3
# Warmup Iteration   1: n = 7, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 139, 145, 214, 214, 214, 214, 214, 214 ms/op
# Warmup Iteration   2: n = 8, mean = 125 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 112, 128, 135, 135, 135, 135, 135, 135 ms/op
# Warmup Iteration   3: n = 7, mean = 149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 141, 200, 200, 200, 200, 200, 200 ms/op
Iteration   1: n = 7, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 145, 201, 201, 201, 201, 201, 201 ms/op
Iteration   2: n = 7, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 146, 202, 202, 202, 202, 202, 202 ms/op
Iteration   3: n = 7, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 145, 205, 205, 205, 205, 205, 205 ms/op

# Run progress: 35.20% complete, ETA 01:22:47
# Fork: 3 of 3
# Warmup Iteration   1: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 110, 132, 132, 132, 132, 132, 132 ms/op
# Warmup Iteration   2: n = 10, mean = 110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 110, 112, 112, 112, 112, 112, 112 ms/op
# Warmup Iteration   3: n = 10, mean = 110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 110, 111, 111, 111, 111, 111, 111 ms/op
Iteration   1: n = 8, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 115, 126, 186, 186, 186, 186, 186, 186 ms/op
Iteration   2: n = 10, mean = 110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 110, 110, 110, 110, 110, 110, 110 ms/op
Iteration   3: n = 10, mean = 110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 110, 111, 111, 111, 111, 111, 111 ms/op


Result "readCrc":
  N = 75
  mean =    129.330 ±(99.9%) 9.879 ms/op

  Histogram, ms/op:
    [100.000, 110.000) = 5 
    [110.000, 120.000) = 28 
    [120.000, 130.000) = 23 
    [130.000, 140.000) = 2 
    [140.000, 150.000) = 8 
    [150.000, 160.000) = 0 
    [160.000, 170.000) = 1 
    [170.000, 180.000) = 1 
    [180.000, 190.000) = 3 
    [190.000, 200.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    109.838 ms/op
     p(50.0000) =    125.567 ms/op
     p(90.0000) =    175.584 ms/op
     p(95.0000) =    193.672 ms/op
     p(99.0000) =    204.734 ms/op
     p(99.9000) =    204.734 ms/op
     p(99.9900) =    204.734 ms/op
     p(99.9990) =    204.734 ms/op
     p(99.9999) =    204.734 ms/op
    p(100.0000) =    204.734 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 35.34% complete, ETA 01:22:31
# Fork: 1 of 3
# Warmup Iteration   1: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 111, 137, 137, 137, 137, 137, 137 ms/op
# Warmup Iteration   2: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 111, 127, 165, 165, 165, 165, 165, 165 ms/op
# Warmup Iteration   3: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 128, 192, 192, 192, 192, 192, 192 ms/op
Iteration   1: n = 8, mean = 145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 128, 210, 210, 210, 210, 210, 210 ms/op
Iteration   2: n = 8, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 124, 167, 167, 167, 167, 167, 167 ms/op
Iteration   3: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 114, 128, 128, 128, 128, 128, 128, 128 ms/op

# Run progress: 35.49% complete, ETA 01:22:14
# Fork: 2 of 3
# Warmup Iteration   1: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 111, 138, 138, 138, 138, 138, 138 ms/op
# Warmup Iteration   2: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 124, 190, 190, 190, 190, 190, 190 ms/op
# Warmup Iteration   3: n = 10, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 110, 114, 114, 114, 114, 114, 114 ms/op
Iteration   1: n = 8, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 115, 124, 197, 197, 197, 197, 197, 197 ms/op
Iteration   2: n = 10, mean = 110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 110, 111, 111, 111, 111, 111, 111 ms/op
Iteration   3: n = 10, mean = 110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 110, 110, 110, 110, 110, 110, 110 ms/op

# Run progress: 35.63% complete, ETA 01:21:56
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 114, 128, 210, 210, 210, 210, 210, 210 ms/op
# Warmup Iteration   2: n = 8, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 114, 127, 185, 185, 185, 185, 185, 185 ms/op
# Warmup Iteration   3: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 113, 114, 114, 114, 114, 114, 114 ms/op
Iteration   1: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 114, 116, 116, 116, 116, 116, 116 ms/op
Iteration   2: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 113, 114, 114, 114, 114, 114, 114 ms/op
Iteration   3: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 113, 118, 118, 118, 118, 118, 118 ms/op


Result "readCrc":
  N = 80
  mean =    120.829 ±(99.9%) 6.799 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 20 
    [112.500, 125.000) = 42 
    [125.000, 137.500) = 12 
    [137.500, 150.000) = 1 
    [150.000, 162.500) = 1 
    [162.500, 175.000) = 1 
    [175.000, 187.500) = 1 
    [187.500, 200.000) = 1 
    [200.000, 212.500) = 1 
    [212.500, 225.000) = 0 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 0 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    109.838 ms/op
     p(50.0000) =    113.508 ms/op
     p(90.0000) =    127.664 ms/op
     p(95.0000) =    165.976 ms/op
     p(99.0000) =    210.239 ms/op
     p(99.9000) =    210.239 ms/op
     p(99.9900) =    210.239 ms/op
     p(99.9990) =    210.239 ms/op
     p(99.9999) =    210.239 ms/op
    p(100.0000) =    210.239 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 35.78% complete, ETA 01:21:39
# Fork: 1 of 3
# Warmup Iteration   1: n = 6, mean = 180 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 177, 192, 192, 192, 192, 192, 192 ms/op
# Warmup Iteration   2: n = 6, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 176, 177, 177, 177, 177, 177, 177 ms/op
# Warmup Iteration   3: n = 5, mean = 216 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 191, 199, 293, 293, 293, 293, 293, 293 ms/op
Iteration   1: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 178, 181, 181, 181, 181, 181, 181 ms/op
Iteration   2: n = 6, mean = 177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 177, 182, 182, 182, 182, 182, 182 ms/op
Iteration   3: n = 5, mean = 224 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 195, 216, 275, 275, 275, 275, 275, 275 ms/op

# Run progress: 35.92% complete, ETA 01:21:23
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 158, 166, 243, 243, 243, 243, 243, 243 ms/op
# Warmup Iteration   2: n = 7, mean = 151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 153, 154, 154, 154, 154, 154, 154 ms/op
# Warmup Iteration   3: n = 7, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 150, 206, 206, 206, 206, 206, 206 ms/op
Iteration   1: n = 6, mean = 174 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 163, 223, 223, 223, 223, 223, 223 ms/op
Iteration   2: n = 8, mean = 138 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 134, 149, 149, 149, 149, 149, 149 ms/op
Iteration   3: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 158, 165, 225, 225, 225, 225, 225, 225 ms/op

# Run progress: 36.06% complete, ETA 01:21:08
# Fork: 3 of 3
# Warmup Iteration   1: n = 6, mean = 180 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 175, 178, 192, 192, 192, 192, 192, 192 ms/op
# Warmup Iteration   2: n = 5, mean = 208 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 186, 198, 257, 257, 257, 257, 257, 257 ms/op
# Warmup Iteration   3: n = 5, mean = 220 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 207, 213, 253, 253, 253, 253, 253, 253 ms/op
Iteration   1: n = 5, mean = 212 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 192, 199, 273, 273, 273, 273, 273, 273 ms/op
Iteration   2: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 175, 175, 175, 175, 175, 175, 175, 175 ms/op
Iteration   3: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 175, 175, 175, 175, 175, 175, 175, 175 ms/op


Result "readCrc":
  N = 54
  mean =    177.930 ±(99.9%) 13.988 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 6 
    [137.500, 150.000) = 4 
    [150.000, 162.500) = 2 
    [162.500, 175.000) = 5 
    [175.000, 187.500) = 24 
    [187.500, 200.000) = 6 
    [200.000, 212.500) = 0 
    [212.500, 225.000) = 4 
    [225.000, 237.500) = 1 
    [237.500, 250.000) = 0 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 1 
    [275.000, 287.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    131.990 ms/op
     p(50.0000) =    175.374 ms/op
     p(90.0000) =    216.400 ms/op
     p(95.0000) =    237.044 ms/op
     p(99.0000) =    275.251 ms/op
     p(99.9000) =    275.251 ms/op
     p(99.9900) =    275.251 ms/op
     p(99.9990) =    275.251 ms/op
     p(99.9999) =    275.251 ms/op
    p(100.0000) =    275.251 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 36.21% complete, ETA 01:20:52
# Fork: 1 of 3
# Warmup Iteration   1: n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 103, 194, 194, 194, 194, 194, 194 ms/op
# Warmup Iteration   2: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 104, 152, 157, 157, 157, 157, 157 ms/op
# Warmup Iteration   3: n = 9, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 104, 163, 163, 163, 163, 163, 163 ms/op
Iteration   1: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 91, 95, 96, 96, 96, 96, 96 ms/op
Iteration   2: n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 91, 92, 92, 92, 92, 92, 92 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 91, 92, 92, 92, 92, 92, 92 ms/op

# Run progress: 36.35% complete, ETA 01:20:35
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 105, 127, 129, 129, 129, 129, 129 ms/op
# Warmup Iteration   2: n = 11, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 93, 94, 94, 94, 94, 94, 94 ms/op
# Warmup Iteration   3: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 119, 174, 174, 174, 174, 174, 174 ms/op
Iteration   1: n = 11, mean = 99 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 100, 106, 106, 106, 106, 106, 106 ms/op
Iteration   2: n = 11, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 93, 95, 96, 96, 96, 96, 96 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 9, mean = 123 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 118, 170, 170, 170, 170, 170, 170 ms/op

# Run progress: 36.49% complete, ETA 01:20:18
# Fork: 3 of 3
# Warmup Iteration   1: n = 11, mean = 99 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 101, 121, 124, 124, 124, 124, 124 ms/op
# Warmup Iteration   2: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 89, 92, 93, 93, 93, 93, 93 ms/op
# Warmup Iteration   3: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 90, 161, 163, 163, 163, 163, 163 ms/op
Iteration   1: n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 113, 149, 149, 149, 149, 149, 149 ms/op
Iteration   2: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 100, 144, 149, 149, 149, 149, 149 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 101, 180, 180, 180, 180, 180, 180 ms/op


Result "readKey":
  N = 92
  mean =    102.074 ±(99.9%) 6.305 ms/op

  Histogram, ms/op:
    [ 80.000,  90.000) = 1 
    [ 90.000, 100.000) = 53 
    [100.000, 110.000) = 19 
    [110.000, 120.000) = 12 
    [120.000, 130.000) = 1 
    [130.000, 140.000) = 1 
    [140.000, 150.000) = 2 
    [150.000, 160.000) = 0 
    [160.000, 170.000) = 0 
    [170.000, 180.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     89.260 ms/op
     p(50.0000) =     93.585 ms/op
     p(90.0000) =    118.633 ms/op
     p(95.0000) =    148.898 ms/op
     p(99.0000) =    180.355 ms/op
     p(99.9000) =    180.355 ms/op
     p(99.9900) =    180.355 ms/op
     p(99.9990) =    180.355 ms/op
     p(99.9999) =    180.355 ms/op
    p(100.0000) =    180.355 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readKey
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 36.64% complete, ETA 01:20:01
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 815 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 804, 815, 825, 825, 825, 825, 825, 825 ms/op
# Warmup Iteration   2: n = 2, mean = 843 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 804, 843, 881, 881, 881, 881, 881, 881 ms/op
# Warmup Iteration   3: n = 2, mean = 702 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 632, 702, 772, 772, 772, 772, 772, 772 ms/op
Iteration   1: n = 2, mean = 663 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 620, 663, 706, 706, 706, 706, 706, 706 ms/op
Iteration   2: n = 2, mean = 602 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 600, 602, 604, 604, 604, 604, 604, 604 ms/op
Iteration   3: 
Bytes	before-close	171429888	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	171429888	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 818 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 797, 818, 839, 839, 839, 839, 839, 839 ms/op

# Run progress: 36.78% complete, ETA 01:19:50
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 736 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 646, 736, 825, 825, 825, 825, 825, 825 ms/op
# Warmup Iteration   2: n = 2, mean = 851 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 849, 851, 854, 854, 854, 854, 854, 854 ms/op
# Warmup Iteration   3: n = 2, mean = 798 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 773, 798, 823, 823, 823, 823, 823, 823 ms/op
Iteration   1: n = 2, mean = 839 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 785, 839, 893, 893, 893, 893, 893, 893 ms/op
Iteration   2: n = 2, mean = 689 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 638, 689, 740, 740, 740, 740, 740, 740 ms/op
Iteration   3: 
Bytes	before-close	172134400	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	172134400	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 722 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 642, 722, 803, 803, 803, 803, 803, 803 ms/op

# Run progress: 36.93% complete, ETA 01:19:40
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 607 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 595, 607, 620, 620, 620, 620, 620, 620 ms/op
# Warmup Iteration   2: n = 2, mean = 663 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 603, 663, 724, 724, 724, 724, 724, 724 ms/op
# Warmup Iteration   3: n = 2, mean = 592 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 591, 592, 592, 592, 592, 592, 592, 592 ms/op
Iteration   1: n = 2, mean = 598 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 591, 598, 604, 604, 604, 604, 604, 604 ms/op
Iteration   2: n = 2, mean = 592 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 590, 592, 595, 595, 595, 595, 595, 595 ms/op
Iteration   3: 
Bytes	before-close	171896832	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	171896832	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 593 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 593, 593, 593, 593, 593, 593, 593, 593 ms/op


Result "readKey":
  N = 18
  mean =    679.652 ±(99.9%) 95.652 ms/op

  Histogram, ms/op:
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 0 
    [550.000, 575.000) = 0 
    [575.000, 600.000) = 6 
    [600.000, 625.000) = 3 
    [625.000, 650.000) = 2 
    [650.000, 675.000) = 0 
    [675.000, 700.000) = 0 
    [700.000, 725.000) = 1 
    [725.000, 750.000) = 1 
    [750.000, 775.000) = 0 
    [775.000, 800.000) = 2 
    [800.000, 825.000) = 1 
    [825.000, 850.000) = 1 
    [850.000, 875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    590.348 ms/op
     p(50.0000) =    628.621 ms/op
     p(90.0000) =    844.313 ms/op
     p(95.0000) =    893.387 ms/op
     p(99.0000) =    893.387 ms/op
     p(99.9000) =    893.387 ms/op
     p(99.9900) =    893.387 ms/op
     p(99.9990) =    893.387 ms/op
     p(99.9999) =    893.387 ms/op
    p(100.0000) =    893.387 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readKey
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 37.07% complete, ETA 01:19:26
# Fork: 1 of 3
# Warmup Iteration   1: n = 3, mean = 429 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 376, 449, 461, 461, 461, 461, 461, 461 ms/op
# Warmup Iteration   2: n = 4, mean = 325 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 304, 307, 382, 382, 382, 382, 382, 382 ms/op
# Warmup Iteration   3: n = 4, mean = 325 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 301, 314, 371, 371, 371, 371, 371, 371 ms/op
Iteration   1: n = 3, mean = 347 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 328, 330, 384, 384, 384, 384, 384, 384 ms/op
Iteration   2: n = 3, mean = 356 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 327, 338, 404, 404, 404, 404, 404, 404 ms/op
Iteration   3: 
Bytes	before-close	128860160	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	128860160	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 3, mean = 352 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 306, 339, 412, 412, 412, 412, 412, 412 ms/op

# Run progress: 37.21% complete, ETA 01:19:11
# Fork: 2 of 3
# Warmup Iteration   1: n = 3, mean = 446 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 431, 451, 456, 456, 456, 456, 456, 456 ms/op
# Warmup Iteration   2: n = 3, mean = 379 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 336, 340, 461, 461, 461, 461, 461, 461 ms/op
# Warmup Iteration   3: n = 3, mean = 346 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 305, 305, 426, 426, 426, 426, 426, 426 ms/op
Iteration   1: n = 3, mean = 389 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 343, 409, 413, 413, 413, 413, 413, 413 ms/op
Iteration   2: n = 3, mean = 419 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 348, 385, 524, 524, 524, 524, 524, 524 ms/op
Iteration   3: 
Bytes	before-close	128860160	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	128860160	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 3, mean = 363 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 339, 341, 409, 409, 409, 409, 409, 409 ms/op

# Run progress: 37.36% complete, ETA 01:18:56
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 388 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 347, 368, 449, 449, 449, 449, 449, 449 ms/op
# Warmup Iteration   2: n = 4, mean = 324 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 305, 313, 364, 364, 364, 364, 364, 364 ms/op
# Warmup Iteration   3: n = 3, mean = 457 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 404, 477, 492, 492, 492, 492, 492, 492 ms/op
Iteration   1: n = 3, mean = 383 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 339, 400, 411, 411, 411, 411, 411, 411 ms/op
Iteration   2: n = 3, mean = 425 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 340, 450, 484, 484, 484, 484, 484, 484 ms/op
Iteration   3: 
Bytes	before-close	128860160	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	128860160	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 3, mean = 411 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 335, 360, 539, 539, 539, 539, 539, 539 ms/op


Result "readKey":
  N = 27
  mean =    382.808 ±(99.9%) 43.223 ms/op

  Histogram, ms/op:
    [300.000, 325.000) = 1 
    [325.000, 350.000) = 12 
    [350.000, 375.000) = 1 
    [375.000, 400.000) = 3 
    [400.000, 425.000) = 6 
    [425.000, 450.000) = 1 
    [450.000, 475.000) = 0 
    [475.000, 500.000) = 1 
    [500.000, 525.000) = 1 
    [525.000, 550.000) = 1 
    [550.000, 575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    306.184 ms/op
     p(50.0000) =    359.662 ms/op
     p(90.0000) =    491.887 ms/op
     p(95.0000) =    532.886 ms/op
     p(99.0000) =    538.968 ms/op
     p(99.9000) =    538.968 ms/op
     p(99.9900) =    538.968 ms/op
     p(99.9990) =    538.968 ms/op
     p(99.9999) =    538.968 ms/op
    p(100.0000) =    538.968 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readKey
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 37.50% complete, ETA 01:18:42
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1397 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397 ms/op
# Warmup Iteration   2: n = 1, mean = 1506 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506 ms/op
# Warmup Iteration   3: n = 1, mean = 1395 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395 ms/op
Iteration   1: n = 1, mean = 1361 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361 ms/op
Iteration   2: n = 1, mean = 1135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135 ms/op
Iteration   3: 
Bytes	before-close	189222912	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	189222912	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 1143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143 ms/op

# Run progress: 37.64% complete, ETA 01:18:30
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1390 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390 ms/op
# Warmup Iteration   2: n = 1, mean = 1311 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311 ms/op
# Warmup Iteration   3: n = 1, mean = 1124 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124 ms/op
Iteration   1: n = 1, mean = 1298 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298 ms/op
Iteration   2: n = 1, mean = 1109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109 ms/op
Iteration   3: 
Bytes	before-close	189513728	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	189513728	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 1204 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204 ms/op

# Run progress: 37.79% complete, ETA 01:18:18
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1200 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200 ms/op
# Warmup Iteration   2: n = 2, mean = 970 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 940, 970, 1000, 1000, 1000, 1000, 1000, 1000 ms/op
# Warmup Iteration   3: n = 1, mean = 1130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130 ms/op
Iteration   1: n = 1, mean = 1225 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225 ms/op
Iteration   2: n = 2, mean = 978 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 974, 978, 981, 981, 981, 981, 981, 981 ms/op
Iteration   3: 
Bytes	before-close	189173760	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	189173760	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 1118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118 ms/op


Result "readKey":
  N = 10
  mean =   1154.797 ±(99.9%) 186.560 ms/op

  Histogram, ms/op:
    [ 900.000,  950.000) = 0 
    [ 950.000, 1000.000) = 2 
    [1000.000, 1050.000) = 0 
    [1050.000, 1100.000) = 0 
    [1100.000, 1150.000) = 4 
    [1150.000, 1200.000) = 0 
    [1200.000, 1250.000) = 2 
    [1250.000, 1300.000) = 1 
    [1300.000, 1350.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    974.127 ms/op
     p(50.0000) =   1138.754 ms/op
     p(90.0000) =   1354.760 ms/op
     p(95.0000) =   1361.052 ms/op
     p(99.0000) =   1361.052 ms/op
     p(99.9000) =   1361.052 ms/op
     p(99.9900) =   1361.052 ms/op
     p(99.9990) =   1361.052 ms/op
     p(99.9999) =   1361.052 ms/op
    p(100.0000) =   1361.052 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readRev
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 37.93% complete, ETA 01:18:07
# Fork: 1 of 3
# Warmup Iteration   1: n = 34, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 30, 30, 36, 42, 42, 42, 42 ms/op
# Warmup Iteration   2: n = 34, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 27, 39, 50, 58, 58, 58, 58 ms/op
# Warmup Iteration   3: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 30, 39, 52, 60, 60, 60, 60 ms/op
Iteration   1: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 32, 42, 53, 59, 59, 59, 59 ms/op
Iteration   2: n = 31, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 31, 40, 51, 58, 58, 58, 58 ms/op
Iteration   3: n = 36, mean = 28 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 28, 30, 30, 30, 30, 30, 30 ms/op

# Run progress: 38.07% complete, ETA 01:17:49
# Fork: 2 of 3
# Warmup Iteration   1: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 32, 39, 60, 72, 72, 72, 72 ms/op
# Warmup Iteration   2: n = 30, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 32, 39, 50, 57, 57, 57, 57 ms/op
# Warmup Iteration   3: n = 36, mean = 28 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 28, 29, 29, 30, 30, 30, 30 ms/op
Iteration   1: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 29, 40, 47, 51, 51, 51, 51 ms/op
Iteration   2: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 30, 48, 55, 61, 61, 61, 61 ms/op
Iteration   3: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 32, 42, 56, 62, 62, 62, 62 ms/op

# Run progress: 38.22% complete, ETA 01:17:32
# Fork: 3 of 3
# Warmup Iteration   1: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 32, 40, 63, 77, 77, 77, 77 ms/op
# Warmup Iteration   2: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 28, 39, 51, 56, 56, 56, 56 ms/op
# Warmup Iteration   3: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 32, 38, 44, 49, 49, 49, 49 ms/op
Iteration   1: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 31, 51, 58, 62, 62, 62, 62 ms/op
Iteration   2: n = 37, mean = 27 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 26, 30, 30, 30, 30, 30, 30 ms/op
Iteration   3: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 32, 41, 55, 62, 62, 62, 62 ms/op


Result "readRev":
  N = 288
  mean =     31.765 ±(99.9%) 1.273 ms/op

  Histogram, ms/op:
    [20.000, 25.000) = 0 
    [25.000, 30.000) = 139 
    [30.000, 35.000) = 112 
    [35.000, 40.000) = 10 
    [40.000, 45.000) = 10 
    [45.000, 50.000) = 6 
    [50.000, 55.000) = 5 
    [55.000, 60.000) = 2 
    [60.000, 65.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =     26.051 ms/op
     p(50.0000) =     30.163 ms/op
     p(90.0000) =     37.664 ms/op
     p(95.0000) =     48.798 ms/op
     p(99.0000) =     62.033 ms/op
     p(99.9000) =     62.456 ms/op
     p(99.9900) =     62.456 ms/op
     p(99.9990) =     62.456 ms/op
     p(99.9999) =     62.456 ms/op
    p(100.0000) =     62.456 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readRev
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 38.36% complete, ETA 01:17:15
# Fork: 1 of 3
# Warmup Iteration   1: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 48, 48, 51, 59, 60, 60, 60, 60 ms/op
# Warmup Iteration   2: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 56, 69, 78, 78, 78, 78, 78 ms/op
# Warmup Iteration   3: n = 18, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 48, 48, 86, 86, 86, 86, 86, 86 ms/op
Iteration   1: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 57, 77, 88, 88, 88, 88, 88 ms/op
Iteration   2: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 56, 67, 80, 80, 80, 80, 80 ms/op
Iteration   3: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 48, 48, 48, 49, 49, 49, 49, 49 ms/op

# Run progress: 38.51% complete, ETA 01:16:59
# Fork: 2 of 3
# Warmup Iteration   1: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 48, 48, 52, 58, 58, 58, 58, 58 ms/op
# Warmup Iteration   2: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 48, 48, 49, 50, 50, 50, 50, 50 ms/op
# Warmup Iteration   3: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 48, 48, 84, 89, 89, 89, 89, 89 ms/op
Iteration   1: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 56, 79, 91, 91, 91, 91, 91 ms/op
Iteration   2: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 48, 48, 50, 50, 50, 50, 50, 50 ms/op
Iteration   3: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 48, 48, 85, 90, 90, 90, 90, 90 ms/op

# Run progress: 38.65% complete, ETA 01:16:43
# Fork: 3 of 3
# Warmup Iteration   1: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 77, 108, 121, 121, 121, 121, 121 ms/op
# Warmup Iteration   2: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 69, 76, 78, 78, 78, 78, 78 ms/op
# Warmup Iteration   3: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 70, 94, 99, 99, 99, 99, 99 ms/op
Iteration   1: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 69, 77, 78, 78, 78, 78, 78 ms/op
Iteration   2: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 69, 69, 69, 69, 69, 69, 69 ms/op
Iteration   3: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 69, 76, 77, 77, 77, 77, 77 ms/op


Result "readRev":
  N = 155
  mean =     59.147 ±(99.9%) 2.868 ms/op

  Histogram, ms/op:
    [ 40.000,  45.000) = 0 
    [ 45.000,  50.000) = 52 
    [ 50.000,  55.000) = 4 
    [ 55.000,  60.000) = 42 
    [ 60.000,  65.000) = 4 
    [ 65.000,  70.000) = 32 
    [ 70.000,  75.000) = 7 
    [ 75.000,  80.000) = 10 
    [ 80.000,  85.000) = 1 
    [ 85.000,  90.000) = 1 
    [ 90.000,  95.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     48.038 ms/op
     p(50.0000) =     56.426 ms/op
     p(90.0000) =     73.951 ms/op
     p(95.0000) =     76.703 ms/op
     p(99.0000) =     90.408 ms/op
     p(99.9000) =     90.702 ms/op
     p(99.9900) =     90.702 ms/op
     p(99.9990) =     90.702 ms/op
     p(99.9999) =     90.702 ms/op
    p(100.0000) =     90.702 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readRev
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 38.79% complete, ETA 01:16:28
# Fork: 1 of 3
# Warmup Iteration   1: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 32, 41, 53, 61, 61, 61, 61 ms/op
# Warmup Iteration   2: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 52, 63, 66, 66, 66, 66 ms/op
# Warmup Iteration   3: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 33, 52, 59, 62, 62, 62, 62 ms/op
Iteration   1: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 29, 33, 33, 33, 33, 33, 33 ms/op
Iteration   2: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 29, 43, 50, 54, 54, 54, 54 ms/op
Iteration   3: n = 35, mean = 29 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 30, 30, 30, 30, 30, 30, 30 ms/op

# Run progress: 38.94% complete, ETA 01:16:11
# Fork: 2 of 3
# Warmup Iteration   1: n = 36, mean = 28 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 27, 30, 34, 41, 41, 41, 41 ms/op
# Warmup Iteration   2: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 37, 60, 63, 64, 64, 64, 64 ms/op
# Warmup Iteration   3: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 33, 42, 53, 59, 59, 59, 59 ms/op
Iteration   1: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 42, 54, 60, 60, 60, 60 ms/op
Iteration   2: n = 37, mean = 27 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 27, 29, 30, 30, 30, 30, 30 ms/op
Iteration   3: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 33, 42, 55, 62, 62, 62, 62 ms/op

# Run progress: 39.08% complete, ETA 01:15:55
# Fork: 3 of 3
# Warmup Iteration   1: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 43, 67, 78, 78, 78, 78 ms/op
# Warmup Iteration   2: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 33, 41, 55, 61, 61, 61, 61 ms/op
# Warmup Iteration   3: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 33, 42, 53, 59, 59, 59, 59 ms/op
Iteration   1: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 51, 63, 63, 63, 63, 63 ms/op
Iteration   2: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 33, 46, 51, 53, 53, 53, 53 ms/op
Iteration   3: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 33, 42, 56, 63, 63, 63, 63 ms/op


Result "readRev":
  N = 285
  mean =     31.928 ±(99.9%) 1.181 ms/op

  Histogram, ms/op:
    [20.000, 25.000) = 0 
    [25.000, 30.000) = 106 
    [30.000, 35.000) = 153 
    [35.000, 40.000) = 6 
    [40.000, 45.000) = 6 
    [45.000, 50.000) = 5 
    [50.000, 55.000) = 4 
    [55.000, 60.000) = 0 
    [60.000, 65.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =     26.247 ms/op
     p(50.0000) =     30.376 ms/op
     p(90.0000) =     34.734 ms/op
     p(95.0000) =     45.305 ms/op
     p(99.0000) =     62.371 ms/op
     p(99.9000) =     63.439 ms/op
     p(99.9900) =     63.439 ms/op
     p(99.9990) =     63.439 ms/op
     p(99.9999) =     63.439 ms/op
    p(100.0000) =     63.439 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readRev
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 39.22% complete, ETA 01:15:38
# Fork: 1 of 3
# Warmup Iteration   1: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 51, 53, 60, 61, 61, 61, 61 ms/op
# Warmup Iteration   2: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 51, 52, 53, 53, 53, 53, 53 ms/op
# Warmup Iteration   3: n = 13, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 78, 79, 100, 103, 103, 103, 103, 103 ms/op
Iteration   1: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 71, 80, 82, 82, 82, 82, 82 ms/op
Iteration   2: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 50, 56, 59, 59, 59, 59, 59, 59 ms/op
Iteration   3: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 59, 84, 90, 90, 90, 90, 90 ms/op

# Run progress: 39.37% complete, ETA 01:15:24
# Fork: 2 of 3
# Warmup Iteration   1: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 80, 105, 114, 114, 114, 114, 114 ms/op
# Warmup Iteration   2: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 62, 82, 92, 92, 92, 92, 92 ms/op
# Warmup Iteration   3: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 61, 75, 82, 82, 82, 82, 82 ms/op
Iteration   1: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 62, 83, 89, 89, 89, 89, 89 ms/op
Iteration   2: n = 20, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 52, 53, 54, 54, 54, 54, 54 ms/op
Iteration   3: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 52, 52, 54, 54, 54, 54, 54 ms/op

# Run progress: 39.51% complete, ETA 01:15:09
# Fork: 3 of 3
# Warmup Iteration   1: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 59, 85, 98, 98, 98, 98, 98 ms/op
# Warmup Iteration   2: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 51, 52, 53, 53, 53, 53, 53 ms/op
# Warmup Iteration   3: n = 13, mean = 83 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 78, 79, 98, 104, 104, 104, 104, 104 ms/op
Iteration   1: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 59, 71, 83, 83, 83, 83, 83 ms/op
Iteration   2: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 50, 50, 51, 51, 52, 52, 52, 52 ms/op
Iteration   3: n = 20, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 50, 50, 56, 88, 90, 90, 90, 90 ms/op


Result "readRev":
  N = 163
  mean =     57.158 ±(99.9%) 2.256 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 89 
    [ 55.000,  60.000) = 40 
    [ 60.000,  65.000) = 14 
    [ 65.000,  70.000) = 3 
    [ 70.000,  75.000) = 7 
    [ 75.000,  80.000) = 3 
    [ 80.000,  85.000) = 4 
    [ 85.000,  90.000) = 2 
    [ 90.000,  95.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     50.397 ms/op
     p(50.0000) =     52.560 ms/op
     p(90.0000) =     70.464 ms/op
     p(95.0000) =     77.935 ms/op
     p(99.0000) =     89.936 ms/op
     p(99.9000) =     90.440 ms/op
     p(99.9900) =     90.440 ms/op
     p(99.9990) =     90.440 ms/op
     p(99.9999) =     90.440 ms/op
    p(100.0000) =     90.440 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 39.66% complete, ETA 01:14:55
# Fork: 1 of 3
# Warmup Iteration   1: n = 26, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 36, 51, 63, 66, 66, 66, 66 ms/op
# Warmup Iteration   2: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 37, 61, 68, 68, 68, 68, 68 ms/op
# Warmup Iteration   3: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 41, 58, 67, 69, 69, 69, 69 ms/op
Iteration   1: n = 22, mean = 47 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 42, 67, 69, 69, 69, 69, 69 ms/op
Iteration   2: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 41, 55, 68, 71, 71, 71, 71 ms/op
Iteration   3: n = 23, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 41, 54, 67, 70, 70, 70, 70 ms/op

# Run progress: 39.80% complete, ETA 01:14:38
# Fork: 2 of 3
# Warmup Iteration   1: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 35, 35, 45, 49, 49, 49, 49 ms/op
# Warmup Iteration   2: n = 33, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 31, 31, 31, 31, 31, 31 ms/op
# Warmup Iteration   3: n = 33, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 31, 31, 32, 32, 32, 32 ms/op
Iteration   1: n = 33, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 31, 31, 31, 31, 31, 31 ms/op
Iteration   2: n = 33, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 31, 31, 31, 31, 31, 31 ms/op
Iteration   3: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 31, 31, 32, 32, 32, 32 ms/op

# Run progress: 39.94% complete, ETA 01:14:22
# Fork: 3 of 3
# Warmup Iteration   1: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 39, 54, 79, 85, 85, 85, 85 ms/op
# Warmup Iteration   2: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 50, 62, 69, 69, 69, 69, 69 ms/op
# Warmup Iteration   3: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 49, 51, 71, 73, 73, 73, 73, 73 ms/op
Iteration   1: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 39, 64, 72, 74, 74, 74, 74 ms/op
Iteration   2: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 34, 39, 39, 39, 39, 39, 39 ms/op
Iteration   3: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 34, 34, 34, 34, 34, 34, 34 ms/op


Result "readSeq":
  N = 248
  mean =     36.629 ±(99.9%) 1.798 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 149 
    [35.000, 40.000) = 29 
    [40.000, 45.000) = 47 
    [45.000, 50.000) = 5 
    [50.000, 55.000) = 3 
    [55.000, 60.000) = 6 
    [60.000, 65.000) = 4 
    [65.000, 70.000) = 3 
    [70.000, 75.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     30.310 ms/op
     p(50.0000) =     33.554 ms/op
     p(90.0000) =     44.106 ms/op
     p(95.0000) =     58.130 ms/op
     p(99.0000) =     70.198 ms/op
     p(99.9000) =     73.662 ms/op
     p(99.9900) =     73.662 ms/op
     p(99.9990) =     73.662 ms/op
     p(99.9999) =     73.662 ms/op
    p(100.0000) =     73.662 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 40.09% complete, ETA 01:14:05
# Fork: 1 of 3
# Warmup Iteration   1: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 78, 85, 117, 126, 126, 126, 126, 126 ms/op
# Warmup Iteration   2: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 85, 100, 102, 102, 102, 102, 102 ms/op
# Warmup Iteration   3: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 63, 64, 64, 64, 64, 64, 64 ms/op
Iteration   1: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 79, 85, 102, 104, 104, 104, 104, 104 ms/op
Iteration   2: n = 14, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 77, 77, 77, 77, 77, 77, 77 ms/op
Iteration   3: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 77, 81, 82, 82, 82, 82, 82 ms/op

# Run progress: 40.23% complete, ETA 01:13:51
# Fork: 2 of 3
# Warmup Iteration   1: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 55, 63, 64, 64, 64, 64, 64 ms/op
# Warmup Iteration   2: n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 84, 100, 102, 102, 102, 102, 102 ms/op
# Warmup Iteration   3: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 82, 100, 103, 103, 103, 103, 103 ms/op
Iteration   1: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 60, 63, 63, 63, 63, 63, 63 ms/op
Iteration   2: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 63, 82, 88, 88, 88, 88, 88 ms/op
Iteration   3: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 54, 54, 54, 54, 54, 54, 54 ms/op

# Run progress: 40.37% complete, ETA 01:13:35
# Fork: 3 of 3
# Warmup Iteration   1: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 54, 55, 67, 67, 67, 67, 67 ms/op
# Warmup Iteration   2: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 54, 54, 54, 54, 54, 54, 54 ms/op
# Warmup Iteration   3: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 55, 93, 97, 97, 97, 97, 97 ms/op
Iteration   1: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 63, 85, 95, 95, 95, 95, 95 ms/op
Iteration   2: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 54, 54, 54, 54, 54, 54, 54 ms/op
Iteration   3: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 63, 81, 88, 88, 88, 88, 88 ms/op


Result "readSeq":
  N = 143
  mean =     65.363 ±(99.9%) 3.185 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 44 
    [ 55.000,  60.000) = 6 
    [ 60.000,  65.000) = 46 
    [ 65.000,  70.000) = 5 
    [ 70.000,  75.000) = 0 
    [ 75.000,  80.000) = 25 
    [ 80.000,  85.000) = 11 
    [ 85.000,  90.000) = 3 
    [ 90.000,  95.000) = 0 
    [ 95.000, 100.000) = 2 
    [100.000, 105.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     53.805 ms/op
     p(50.0000) =     62.980 ms/op
     p(90.0000) =     83.572 ms/op
     p(95.0000) =     84.804 ms/op
     p(99.0000) =    100.773 ms/op
     p(99.9000) =    104.464 ms/op
     p(99.9900) =    104.464 ms/op
     p(99.9990) =    104.464 ms/op
     p(99.9999) =    104.464 ms/op
    p(100.0000) =    104.464 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 40.52% complete, ETA 01:13:20
# Fork: 1 of 3
# Warmup Iteration   1: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 43, 58, 83, 86, 86, 86, 86 ms/op
# Warmup Iteration   2: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 56, 65, 70, 70, 70, 70, 70 ms/op
# Warmup Iteration   3: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 56, 72, 80, 80, 80, 80, 80 ms/op
Iteration   1: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 53, 67, 79, 79, 79, 79, 79 ms/op
Iteration   2: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 42, 57, 69, 71, 71, 71, 71 ms/op
Iteration   3: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 36, 36, 37, 37, 37, 37 ms/op

# Run progress: 40.66% complete, ETA 01:13:05
# Fork: 2 of 3
# Warmup Iteration   1: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 42, 63, 88, 92, 92, 92, 92 ms/op
# Warmup Iteration   2: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 42, 54, 67, 69, 69, 69, 69 ms/op
# Warmup Iteration   3: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 37, 38, 38, 38, 38, 38, 38 ms/op
Iteration   1: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 51, 58, 59, 59, 59, 59 ms/op
Iteration   2: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 42, 55, 67, 70, 70, 70, 70 ms/op
Iteration   3: n = 26, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 57, 66, 67, 67, 67, 67 ms/op

# Run progress: 40.80% complete, ETA 01:12:49
# Fork: 3 of 3
# Warmup Iteration   1: n = 22, mean = 47 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 43, 64, 90, 94, 94, 94, 94 ms/op
# Warmup Iteration   2: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 38, 39, 40, 41, 41, 41, 41 ms/op
# Warmup Iteration   3: n = 23, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 43, 60, 68, 69, 69, 69, 69 ms/op
Iteration   1: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 43, 54, 64, 66, 66, 66, 66 ms/op
Iteration   2: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 38, 38, 39, 39, 39, 39, 39 ms/op
Iteration   3: n = 25, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 38, 45, 61, 65, 65, 65, 65 ms/op


Result "readSeq":
  N = 219
  mean =     41.801 ±(99.9%) 1.760 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 123 
    [40.000, 45.000) = 58 
    [45.000, 50.000) = 4 
    [50.000, 55.000) = 16 
    [55.000, 60.000) = 9 
    [60.000, 65.000) = 2 
    [65.000, 70.000) = 5 
    [70.000, 75.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     35.586 ms/op
     p(50.0000) =     38.273 ms/op
     p(90.0000) =     52.756 ms/op
     p(95.0000) =     58.917 ms/op
     p(99.0000) =     70.753 ms/op
     p(99.9000) =     79.167 ms/op
     p(99.9900) =     79.167 ms/op
     p(99.9990) =     79.167 ms/op
     p(99.9999) =     79.167 ms/op
    p(100.0000) =     79.167 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 40.95% complete, ETA 01:12:34
# Fork: 1 of 3
# Warmup Iteration   1: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 75, 114, 124, 124, 124, 124, 124 ms/op
# Warmup Iteration   2: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 66, 85, 93, 93, 93, 93, 93 ms/op
# Warmup Iteration   3: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 57, 57, 57, 57, 57, 57, 57 ms/op
Iteration   1: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 87, 104, 107, 107, 107, 107, 107 ms/op
Iteration   2: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 61, 66, 66, 66, 66, 66, 66 ms/op
Iteration   3: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 88, 104, 106, 106, 106, 106, 106 ms/op

# Run progress: 41.09% complete, ETA 01:12:20
# Fork: 2 of 3
# Warmup Iteration   1: n = 12, mean = 83 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 85, 116, 123, 123, 123, 123, 123 ms/op
# Warmup Iteration   2: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 65, 73, 81, 81, 81, 81, 81 ms/op
# Warmup Iteration   3: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 56, 56, 56, 56, 56, 56, 56 ms/op
Iteration   1: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 85, 103, 106, 106, 106, 106, 106 ms/op
Iteration   2: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 78, 86, 109, 114, 114, 114, 114, 114 ms/op
Iteration   3: n = 13, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 77, 78, 78, 78, 78, 78, 78 ms/op

# Run progress: 41.24% complete, ETA 01:12:06
# Fork: 3 of 3
# Warmup Iteration   1: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 56, 60, 65, 65, 65, 65, 65 ms/op
# Warmup Iteration   2: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 64, 81, 85, 85, 85, 85, 85 ms/op
# Warmup Iteration   3: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 65, 84, 90, 90, 90, 90, 90 ms/op
Iteration   1: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 56, 56, 58, 58, 58, 58, 58 ms/op
Iteration   2: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 57, 57, 57, 57, 57, 57, 57 ms/op
Iteration   3: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 56, 57, 57, 57, 57, 57, 57 ms/op


Result "readSeq":
  N = 133
  mean =     69.870 ±(99.9%) 4.475 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 62 
    [ 60.000,  65.000) = 1 
    [ 65.000,  70.000) = 16 
    [ 70.000,  75.000) = 0 
    [ 75.000,  80.000) = 15 
    [ 80.000,  85.000) = 3 
    [ 85.000,  90.000) = 27 
    [ 90.000,  95.000) = 0 
    [ 95.000, 100.000) = 5 
    [100.000, 105.000) = 0 
    [105.000, 110.000) = 3 
    [110.000, 115.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     55.575 ms/op
     p(50.0000) =     65.143 ms/op
     p(90.0000) =     87.766 ms/op
     p(95.0000) =     98.619 ms/op
     p(99.0000) =    111.886 ms/op
     p(99.9000) =    114.426 ms/op
     p(99.9900) =    114.426 ms/op
     p(99.9990) =    114.426 ms/op
     p(99.9999) =    114.426 ms/op
    p(100.0000) =    114.426 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 41.38% complete, ETA 01:11:52
# Fork: 1 of 3
# Warmup Iteration   1: n = 15, mean = 71 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 64, 103, 115, 115, 115, 115, 115 ms/op
# Warmup Iteration   2: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 66, 110, 114, 114, 114, 114, 114 ms/op
# Warmup Iteration   3: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 64, 94, 115, 115, 115, 115, 115 ms/op
Iteration   1: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 72, 112, 114, 114, 114, 114, 114 ms/op
Iteration   2: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 72, 118, 121, 121, 121, 121, 121 ms/op
Iteration   3: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 64, 95, 117, 117, 117, 117, 117 ms/op

# Run progress: 41.52% complete, ETA 01:11:36
# Fork: 2 of 3
# Warmup Iteration   1: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 72, 73, 124, 152, 152, 152, 152, 152 ms/op
# Warmup Iteration   2: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 65, 93, 110, 110, 110, 110, 110 ms/op
# Warmup Iteration   3: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 65, 66, 67, 67, 67, 67, 67 ms/op
Iteration   1: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 75, 109, 111, 111, 111, 111, 111 ms/op
Iteration   2: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 65, 74, 74, 74, 74, 74, 74 ms/op
Iteration   3: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 65, 66, 67, 67, 67, 67, 67 ms/op

# Run progress: 41.67% complete, ETA 01:11:20
# Fork: 3 of 3
# Warmup Iteration   1: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 63, 107, 146, 146, 146, 146, 146 ms/op
# Warmup Iteration   2: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 55, 55, 57, 57, 57, 57, 57 ms/op
# Warmup Iteration   3: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 69, 105, 114, 114, 114, 114, 114 ms/op
Iteration   1: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 61, 107, 116, 116, 116, 116, 116 ms/op
Iteration   2: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 55, 62, 63, 63, 63, 63, 63 ms/op
Iteration   3: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 69, 104, 118, 118, 118, 118, 118 ms/op


Result "readXxh64":
  N = 131
  mean =     70.743 ±(99.9%) 4.222 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 4 
    [ 55.000,  60.000) = 11 
    [ 60.000,  65.000) = 37 
    [ 65.000,  70.000) = 28 
    [ 70.000,  75.000) = 27 
    [ 75.000,  80.000) = 2 
    [ 80.000,  85.000) = 9 
    [ 85.000,  90.000) = 1 
    [ 90.000,  95.000) = 2 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 0 
    [105.000, 110.000) = 2 
    [110.000, 115.000) = 3 
    [115.000, 120.000) = 3 
    [120.000, 125.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     54.985 ms/op
     p(50.0000) =     65.470 ms/op
     p(90.0000) =     86.403 ms/op
     p(95.0000) =    112.302 ms/op
     p(99.0000) =    120.151 ms/op
     p(99.9000) =    121.242 ms/op
     p(99.9900) =    121.242 ms/op
     p(99.9990) =    121.242 ms/op
     p(99.9999) =    121.242 ms/op
    p(100.0000) =    121.242 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 41.81% complete, ETA 01:11:05
# Fork: 1 of 3
# Warmup Iteration   1: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 78, 88, 150, 163, 163, 163, 163, 163 ms/op
# Warmup Iteration   2: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 76, 103, 112, 112, 112, 112, 112 ms/op
# Warmup Iteration   3: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 76, 78, 79, 79, 79, 79, 79 ms/op
Iteration   1: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 88, 125, 132, 132, 132, 132, 132 ms/op
Iteration   2: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 76, 77, 77, 77, 77, 77, 77 ms/op
Iteration   3: n = 13, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 77, 79, 79, 79, 79, 79, 79 ms/op

# Run progress: 41.95% complete, ETA 01:10:50
# Fork: 2 of 3
# Warmup Iteration   1: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 77, 97, 107, 107, 107, 107, 107 ms/op
# Warmup Iteration   2: n = 14, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 76, 78, 79, 79, 79, 79, 79 ms/op
# Warmup Iteration   3: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 77, 119, 121, 121, 121, 121, 121 ms/op
Iteration   1: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 106, 145, 145, 145, 145, 145, 145 ms/op
Iteration   2: n = 11, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 88, 131, 139, 139, 139, 139, 139 ms/op
Iteration   3: n = 11, mean = 98 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 106, 134, 139, 139, 139, 139, 139 ms/op

# Run progress: 42.10% complete, ETA 01:10:36
# Fork: 3 of 3
# Warmup Iteration   1: n = 13, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 77, 126, 137, 137, 137, 137, 137 ms/op
# Warmup Iteration   2: n = 11, mean = 98 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 88, 141, 143, 143, 143, 143, 143 ms/op
# Warmup Iteration   3: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 87, 130, 138, 138, 138, 138, 138 ms/op
Iteration   1: n = 14, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 76, 78, 78, 78, 78, 78, 78 ms/op
Iteration   2: n = 14, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 76, 78, 78, 78, 78, 78, 78 ms/op
Iteration   3: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 76, 76, 76, 76, 76, 76, 76 ms/op


Result "readXxh64":
  N = 112
  mean =     84.683 ±(99.9%) 4.870 ms/op

  Histogram, ms/op:
    [ 70.000,  75.000) = 0 
    [ 75.000,  80.000) = 73 
    [ 80.000,  85.000) = 2 
    [ 85.000,  90.000) = 18 
    [ 90.000,  95.000) = 0 
    [ 95.000, 100.000) = 3 
    [100.000, 105.000) = 2 
    [105.000, 110.000) = 7 
    [110.000, 115.000) = 2 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 1 
    [135.000, 140.000) = 2 
    [140.000, 145.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     75.629 ms/op
     p(50.0000) =     76.808 ms/op
     p(90.0000) =    106.168 ms/op
     p(95.0000) =    118.699 ms/op
     p(99.0000) =    144.614 ms/op
     p(99.9000) =    145.228 ms/op
     p(99.9900) =    145.228 ms/op
     p(99.9990) =    145.228 ms/op
     p(99.9999) =    145.228 ms/op
    p(100.0000) =    145.228 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 42.24% complete, ETA 01:10:22
# Fork: 1 of 3
# Warmup Iteration   1: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 62, 83, 98, 98, 98, 98, 98 ms/op
# Warmup Iteration   2: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 61, 62, 62, 62, 62, 62, 62 ms/op
# Warmup Iteration   3: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 61, 66, 83, 83, 83, 83, 83 ms/op
Iteration   1: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 69, 101, 119, 119, 119, 119, 119 ms/op
Iteration   2: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 61, 61, 61, 61, 61, 61, 61 ms/op
Iteration   3: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 60, 61, 61, 61, 61, 61, 61 ms/op

# Run progress: 42.39% complete, ETA 01:10:08
# Fork: 2 of 3
# Warmup Iteration   1: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 59, 80, 99, 99, 99, 99, 99 ms/op
# Warmup Iteration   2: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 67, 94, 115, 115, 115, 115, 115 ms/op
# Warmup Iteration   3: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 67, 96, 119, 119, 119, 119, 119 ms/op
Iteration   1: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 67, 101, 120, 120, 120, 120, 120 ms/op
Iteration   2: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 59, 60, 61, 61, 61, 61, 61 ms/op
Iteration   3: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 59, 60, 60, 60, 60, 60, 60 ms/op

# Run progress: 42.53% complete, ETA 01:09:52
# Fork: 3 of 3
# Warmup Iteration   1: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 60, 80, 97, 97, 97, 97, 97 ms/op
# Warmup Iteration   2: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 59, 62, 68, 68, 68, 68, 68 ms/op
# Warmup Iteration   3: n = 15, mean = 71 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 66, 95, 114, 114, 114, 114, 114 ms/op
Iteration   1: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 72, 74, 109, 123, 123, 123, 123, 123 ms/op
Iteration   2: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 67, 118, 119, 119, 119, 119, 119 ms/op
Iteration   3: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 67, 102, 122, 122, 122, 122, 122 ms/op


Result "readXxh64":
  N = 137
  mean =     67.082 ±(99.9%) 3.711 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 32 
    [ 60.000,  65.000) = 38 
    [ 65.000,  70.000) = 43 
    [ 70.000,  75.000) = 11 
    [ 75.000,  80.000) = 2 
    [ 80.000,  85.000) = 4 
    [ 85.000,  90.000) = 1 
    [ 90.000,  95.000) = 0 
    [ 95.000, 100.000) = 0 
    [100.000, 105.000) = 0 
    [105.000, 110.000) = 0 
    [110.000, 115.000) = 0 
    [115.000, 120.000) = 4 
    [120.000, 125.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     58.720 ms/op
     p(50.0000) =     62.783 ms/op
     p(90.0000) =     74.580 ms/op
     p(95.0000) =     91.619 ms/op
     p(99.0000) =    122.565 ms/op
     p(99.9000) =    122.814 ms/op
     p(99.9900) =    122.814 ms/op
     p(99.9990) =    122.814 ms/op
     p(99.9999) =    122.814 ms/op
    p(100.0000) =    122.814 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 42.67% complete, ETA 01:09:38
# Fork: 1 of 3
# Warmup Iteration   1: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 106, 186, 186, 186, 186, 186, 186 ms/op
# Warmup Iteration   2: n = 11, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 95, 125, 125, 125, 125, 125, 125 ms/op
# Warmup Iteration   3: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 98, 149, 154, 154, 154, 154, 154 ms/op
Iteration   1: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 106, 152, 152, 152, 152, 152, 152 ms/op
Iteration   2: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 98, 146, 150, 150, 150, 150, 150 ms/op
Iteration   3: n = 11, mean = 97 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 86, 129, 129, 129, 129, 129, 129 ms/op

# Run progress: 42.82% complete, ETA 01:09:25
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 95, 169, 176, 176, 176, 176, 176 ms/op
# Warmup Iteration   2: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 81, 82, 83, 83, 83, 83, 83, 83 ms/op
# Warmup Iteration   3: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 94, 162, 167, 167, 167, 167, 167 ms/op
Iteration   1: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 94, 160, 162, 162, 162, 162, 162 ms/op
Iteration   2: n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 112, 155, 155, 155, 155, 155, 155 ms/op
Iteration   3: n = 10, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 100, 101, 101, 101, 101, 101, 101 ms/op

# Run progress: 42.96% complete, ETA 01:09:11
# Fork: 3 of 3
# Warmup Iteration   1: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 93, 169, 176, 176, 176, 176, 176 ms/op
# Warmup Iteration   2: n = 11, mean = 97 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 93, 135, 143, 143, 143, 143, 143 ms/op
# Warmup Iteration   3: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 80, 80, 81, 82, 82, 82, 82, 82 ms/op
Iteration   1: n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 110, 154, 154, 154, 154, 154, 154 ms/op
Iteration   2: n = 11, mean = 96 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 81, 93, 131, 138, 138, 138, 138, 138 ms/op
Iteration   3: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 80, 80, 83, 83, 83, 83, 83, 83 ms/op


Result "readXxh64":
  N = 92
  mean =    102.135 ±(99.9%) 6.468 ms/op

  Histogram, ms/op:
    [ 80.000,  85.000) = 14 
    [ 85.000,  90.000) = 11 
    [ 90.000,  95.000) = 11 
    [ 95.000, 100.000) = 7 
    [100.000, 105.000) = 13 
    [105.000, 110.000) = 11 
    [110.000, 115.000) = 12 
    [115.000, 120.000) = 4 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 2 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 1 
    [140.000, 145.000) = 1 
    [145.000, 150.000) = 0 
    [150.000, 155.000) = 4 
    [155.000, 160.000) = 0 
    [160.000, 165.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     80.216 ms/op
     p(50.0000) =    100.008 ms/op
     p(90.0000) =    124.086 ms/op
     p(95.0000) =    150.759 ms/op
     p(99.0000) =    162.267 ms/op
     p(99.9000) =    162.267 ms/op
     p(99.9900) =    162.267 ms/op
     p(99.9990) =    162.267 ms/op
     p(99.9999) =    162.267 ms/op
    p(100.0000) =    162.267 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 43.10% complete, ETA 01:08:58
# Fork: 1 of 3
# Warmup Iteration   1: n = 6, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 148, 204, 204, 204, 204, 204, 204 ms/op
# Warmup Iteration   2: n = 7, mean = 148 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 130, 252, 252, 252, 252, 252, 252 ms/op
# Warmup Iteration   3: n = 6, mean = 172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 151, 220, 220, 220, 220, 220, 220 ms/op
Iteration   1: n = 6, mean = 171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 149, 220, 220, 220, 220, 220, 220 ms/op
Iteration   2: n = 7, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 131, 148, 148, 148, 148, 148, 148 ms/op
Iteration   3: n = 6, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 150, 188, 188, 188, 188, 188, 188 ms/op

# Run progress: 43.25% complete, ETA 01:08:43
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 151, 195, 195, 195, 195, 195, 195 ms/op
# Warmup Iteration   2: n = 7, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 134, 134, 134, 134, 134, 134, 134 ms/op
# Warmup Iteration   3: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 148, 222, 222, 222, 222, 222, 222 ms/op
Iteration   1: n = 5, mean = 195 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 155, 215, 223, 223, 223, 223, 223, 223 ms/op
Iteration   2: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 147, 220, 220, 220, 220, 220, 220 ms/op
Iteration   3: n = 6, mean = 171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 157, 227, 227, 227, 227, 227, 227 ms/op

# Run progress: 43.39% complete, ETA 01:08:28
# Fork: 3 of 3
# Warmup Iteration   1: n = 6, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 143, 186, 186, 186, 186, 186, 186 ms/op
# Warmup Iteration   2: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 140, 149, 205, 205, 205, 205, 205, 205 ms/op
# Warmup Iteration   3: n = 5, mean = 201 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 214, 217, 217, 217, 217, 217, 217 ms/op
Iteration   1: n = 6, mean = 172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 153, 217, 217, 217, 217, 217, 217 ms/op
Iteration   2: n = 7, mean = 141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 139, 158, 158, 158, 158, 158, 158 ms/op
Iteration   3: n = 6, mean = 165 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 157, 213, 213, 213, 213, 213, 213 ms/op


Result "write":
  N = 55
  mean =    160.928 ±(99.9%) 13.947 ms/op

  Histogram, ms/op:
    [130.000, 140.000) = 11 
    [140.000, 150.000) = 18 
    [150.000, 160.000) = 13 
    [160.000, 170.000) = 1 
    [170.000, 180.000) = 0 
    [180.000, 190.000) = 2 
    [190.000, 200.000) = 0 
    [200.000, 210.000) = 0 
    [210.000, 220.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =    130.023 ms/op
     p(50.0000) =    148.111 ms/op
     p(90.0000) =    218.156 ms/op
     p(95.0000) =    221.879 ms/op
     p(99.0000) =    227.017 ms/op
     p(99.9000) =    227.017 ms/op
     p(99.9900) =    227.017 ms/op
     p(99.9990) =    227.017 ms/op
     p(99.9999) =    227.017 ms/op
    p(100.0000) =    227.017 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = false, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 43.53% complete, ETA 01:08:13
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 968 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 968, 968, 968, 968, 968, 968, 968, 968 ms/op
# Warmup Iteration   2: n = 1, mean = 909 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 909, 909, 909, 909, 909, 909, 909, 909 ms/op
# Warmup Iteration   3: n = 2, mean = 864 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 849, 864, 878, 878, 878, 878, 878, 878 ms/op
Iteration   1: n = 1, mean = 1019 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1019 ms/op
Iteration   2: n = 2, mean = 813 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 774, 813, 851, 851, 851, 851, 851, 851 ms/op
Iteration   3: n = 1, mean = 913 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 913, 913, 913, 913, 913, 913, 913, 913 ms/op

# Run progress: 43.68% complete, ETA 01:07:59
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 880 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 880, 880, 880, 880, 880, 880, 880, 880 ms/op
# Warmup Iteration   2: n = 2, mean = 933 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 903, 933, 963, 963, 963, 963, 963, 963 ms/op
# Warmup Iteration   3: n = 1, mean = 988 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 988, 988, 988, 988, 988, 988, 988, 988 ms/op
Iteration   1: n = 2, mean = 825 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 746, 825, 905, 905, 905, 905, 905, 905 ms/op
Iteration   2: n = 2, mean = 747 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 746, 747, 748, 748, 748, 748, 748, 748 ms/op
Iteration   3: n = 2, mean = 842 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 783, 842, 901, 901, 901, 901, 901, 901 ms/op

# Run progress: 43.82% complete, ETA 01:07:48
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 971 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 971, 971, 971, 971, 971, 971, 971, 971 ms/op
# Warmup Iteration   2: n = 2, mean = 778 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 777, 778, 778, 778, 778, 778, 778, 778 ms/op
# Warmup Iteration   3: n = 1, mean = 914 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 914, 914, 914, 914, 914, 914, 914, 914 ms/op
Iteration   1: n = 1, mean = 992 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 992, 992, 992, 992, 992, 992, 992, 992 ms/op
Iteration   2: n = 1, mean = 991 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 991, 991, 991, 991, 991, 991, 991, 991 ms/op
Iteration   3: n = 2, mean = 834 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 762, 834, 906, 906, 906, 906, 906, 906 ms/op


Result "write":
  N = 14
  mean =    859.757 ±(99.9%) 112.928 ms/op

  Histogram, ms/op:
    [ 700.000,  725.000) = 0 
    [ 725.000,  750.000) = 3 
    [ 750.000,  775.000) = 2 
    [ 775.000,  800.000) = 1 
    [ 800.000,  825.000) = 0 
    [ 825.000,  850.000) = 0 
    [ 850.000,  875.000) = 1 
    [ 875.000,  900.000) = 0 
    [ 900.000,  925.000) = 4 
    [ 925.000,  950.000) = 0 
    [ 950.000,  975.000) = 0 
    [ 975.000, 1000.000) = 2 
    [1000.000, 1025.000) = 1 
    [1025.000, 1050.000) = 0 
    [1050.000, 1075.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    745.538 ms/op
     p(50.0000) =    876.085 ms/op
     p(90.0000) =   1005.584 ms/op
     p(95.0000) =   1019.216 ms/op
     p(99.0000) =   1019.216 ms/op
     p(99.9000) =   1019.216 ms/op
     p(99.9900) =   1019.216 ms/op
     p(99.9990) =   1019.216 ms/op
     p(99.9999) =   1019.216 ms/op
    p(100.0000) =   1019.216 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.write
# Parameters: (intKey = false, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 43.97% complete, ETA 01:07:35
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 500 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 435, 500, 565, 565, 565, 565, 565, 565 ms/op
# Warmup Iteration   2: n = 3, mean = 360 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 340, 365, 373, 373, 373, 373, 373, 373 ms/op
# Warmup Iteration   3: n = 3, mean = 389 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 306, 419, 441, 441, 441, 441, 441, 441 ms/op
Iteration   1: n = 3, mean = 408 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 391, 410, 423, 423, 423, 423, 423, 423 ms/op
Iteration   2: n = 3, mean = 394 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 350, 409, 424, 424, 424, 424, 424, 424 ms/op
Iteration   3: n = 3, mean = 399 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 344, 413, 439, 439, 439, 439, 439, 439 ms/op

# Run progress: 44.11% complete, ETA 01:07:21
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 456 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 376, 456, 536, 536, 536, 536, 536, 536 ms/op
# Warmup Iteration   2: n = 3, mean = 454 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 437, 438, 486, 486, 486, 486, 486, 486 ms/op
# Warmup Iteration   3: n = 3, mean = 359 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 343, 357, 379, 379, 379, 379, 379, 379 ms/op
Iteration   1: n = 3, mean = 407 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 341, 343, 538, 538, 538, 538, 538, 538 ms/op
Iteration   2: n = 3, mean = 343 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 301, 307, 421, 421, 421, 421, 421, 421 ms/op
Iteration   3: n = 3, mean = 366 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 333, 356, 410, 410, 410, 410, 410, 410 ms/op

# Run progress: 44.25% complete, ETA 01:07:07
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 419 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 349, 430, 478, 478, 478, 478, 478, 478 ms/op
# Warmup Iteration   2: n = 3, mean = 389 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 341, 349, 478, 478, 478, 478, 478, 478 ms/op
# Warmup Iteration   3: n = 4, mean = 328 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 305, 312, 382, 382, 382, 382, 382, 382 ms/op
Iteration   1: n = 3, mean = 396 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 355, 409, 422, 422, 422, 422, 422, 422 ms/op
Iteration   2: n = 3, mean = 394 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 352, 413, 416, 416, 416, 416, 416, 416 ms/op
Iteration   3: n = 3, mean = 360 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 330, 339, 410, 410, 410, 410, 410, 410 ms/op


Result "write":
  N = 27
  mean =    385.157 ±(99.9%) 36.414 ms/op

  Histogram, ms/op:
    [300.000, 325.000) = 2 
    [325.000, 350.000) = 6 
    [350.000, 375.000) = 4 
    [375.000, 400.000) = 1 
    [400.000, 425.000) = 12 
    [425.000, 450.000) = 1 
    [450.000, 475.000) = 0 
    [475.000, 500.000) = 0 
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 1 
    [550.000, 575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    301.466 ms/op
     p(50.0000) =    408.945 ms/op
     p(90.0000) =    426.770 ms/op
     p(95.0000) =    498.493 ms/op
     p(99.0000) =    537.919 ms/op
     p(99.9000) =    537.919 ms/op
     p(99.9900) =    537.919 ms/op
     p(99.9990) =    537.919 ms/op
     p(99.9999) =    537.919 ms/op
    p(100.0000) =    537.919 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.write
# Parameters: (intKey = false, metaSync = false, num = 1000000, sequential = false, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 44.40% complete, ETA 01:06:53
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1552 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552 ms/op
# Warmup Iteration   2: n = 1, mean = 1315 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315 ms/op
# Warmup Iteration   3: n = 1, mean = 1084 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084 ms/op
Iteration   1: n = 1, mean = 1334 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334 ms/op
Iteration   2: n = 1, mean = 1374 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374 ms/op
Iteration   3: n = 1, mean = 1393 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393 ms/op

# Run progress: 44.54% complete, ETA 01:06:42
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1374 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374 ms/op
# Warmup Iteration   2: n = 1, mean = 1351 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351 ms/op
# Warmup Iteration   3: n = 1, mean = 1307 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307 ms/op
Iteration   1: n = 1, mean = 1466 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466 ms/op
Iteration   2: n = 1, mean = 1361 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361 ms/op
Iteration   3: n = 1, mean = 1283 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283 ms/op

# Run progress: 44.68% complete, ETA 01:06:30
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1367 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367 ms/op
# Warmup Iteration   2: n = 1, mean = 1103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103 ms/op
# Warmup Iteration   3: n = 1, mean = 1483 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483 ms/op
Iteration   1: n = 1, mean = 1516 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516 ms/op
Iteration   2: n = 1, mean = 1342 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342 ms/op
Iteration   3: n = 1, mean = 1304 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304 ms/op


Result "write":
  N = 9
  mean =   1374.800 ±(99.9%) 125.826 ms/op

  Histogram, ms/op:
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 0 
    [1275.000, 1300.000) = 1 
    [1300.000, 1325.000) = 1 
    [1325.000, 1350.000) = 2 
    [1350.000, 1375.000) = 2 
    [1375.000, 1400.000) = 1 
    [1400.000, 1425.000) = 0 
    [1425.000, 1450.000) = 0 
    [1450.000, 1475.000) = 1 
    [1475.000, 1500.000) = 0 
    [1500.000, 1525.000) = 1 
    [1525.000, 1550.000) = 0 
    [1550.000, 1575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1283.457 ms/op
     p(50.0000) =   1361.052 ms/op
     p(90.0000) =   1516.241 ms/op
     p(95.0000) =   1516.241 ms/op
     p(99.0000) =   1516.241 ms/op
     p(99.9000) =   1516.241 ms/op
     p(99.9900) =   1516.241 ms/op
     p(99.9990) =   1516.241 ms/op
     p(99.9999) =   1516.241 ms/op
    p(100.0000) =   1516.241 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 48.28% complete, ETA 01:00:52
# Fork: 1 of 3
# Warmup Iteration   1: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 79, 85, 160, 174, 174, 174, 174, 174 ms/op
# Warmup Iteration   2: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 75, 76, 77, 77, 77, 77, 77 ms/op
# Warmup Iteration   3: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 75, 78, 78, 78, 78, 78, 78 ms/op
Iteration   1: n = 11, mean = 98 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 84, 84, 144, 147, 147, 147, 147, 147 ms/op
Iteration   2: n = 13, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 75, 84, 84, 84, 84, 84, 84 ms/op
Iteration   3: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 98, 143, 148, 148, 148, 148, 148 ms/op

# Run progress: 48.42% complete, ETA 01:00:38
# Fork: 2 of 3
# Warmup Iteration   1: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 84, 110, 113, 113, 113, 113, 113 ms/op
# Warmup Iteration   2: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 74, 74, 75, 76, 76, 76, 76, 76 ms/op
# Warmup Iteration   3: n = 12, mean = 88 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 74, 83, 128, 144, 144, 144, 144, 144 ms/op
Iteration   1: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 98, 138, 139, 139, 139, 139, 139 ms/op
Iteration   2: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 84, 106, 114, 114, 114, 114, 114 ms/op
Iteration   3: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 75, 79, 79, 79, 79, 79, 79 ms/op

# Run progress: 48.56% complete, ETA 01:00:25
# Fork: 3 of 3
# Warmup Iteration   1: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 87, 110, 113, 113, 113, 113, 113 ms/op
# Warmup Iteration   2: n = 11, mean = 97 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 86, 87, 157, 167, 167, 167, 167, 167 ms/op
# Warmup Iteration   3: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 77, 80, 82, 82, 82, 82, 82 ms/op
Iteration   1: n = 10, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 104, 150, 151, 151, 151, 151, 151 ms/op
Iteration   2: n = 10, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 93, 130, 131, 131, 131, 131, 131 ms/op
Iteration   3: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 105, 149, 153, 153, 153, 153, 153 ms/op


Result "readCrc":
  N = 100
  mean =     95.170 ±(99.9%) 6.627 ms/op

  Histogram, ms/op:
    [ 70.000,  75.000) = 15 
    [ 75.000,  80.000) = 12 
    [ 80.000,  85.000) = 17 
    [ 85.000,  90.000) = 6 
    [ 90.000,  95.000) = 5 
    [ 95.000, 100.000) = 12 
    [100.000, 105.000) = 15 
    [105.000, 110.000) = 2 
    [110.000, 115.000) = 4 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 2 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 4 
    [135.000, 140.000) = 1 
    [140.000, 145.000) = 1 
    [145.000, 150.000) = 2 
    [150.000, 155.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     74.711 ms/op
     p(50.0000) =     90.374 ms/op
     p(90.0000) =    129.617 ms/op
     p(95.0000) =    142.174 ms/op
     p(99.0000) =    152.814 ms/op
     p(99.9000) =    152.830 ms/op
     p(99.9900) =    152.830 ms/op
     p(99.9990) =    152.830 ms/op
     p(99.9999) =    152.830 ms/op
    p(100.0000) =    152.830 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 48.71% complete, ETA 01:00:12
# Fork: 1 of 3
# Warmup Iteration   1: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 96, 120, 120, 120, 120, 120, 120 ms/op
# Warmup Iteration   2: n = 11, mean = 96 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 96, 97, 97, 97, 97, 97, 97 ms/op
# Warmup Iteration   3: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 96, 156, 156, 156, 156, 156, 156 ms/op
Iteration   1: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 120, 174, 174, 174, 174, 174, 174 ms/op
Iteration   2: n = 8, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 128, 168, 168, 168, 168, 168, 168 ms/op
Iteration   3: n = 8, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 128, 169, 169, 169, 169, 169, 169 ms/op

# Run progress: 48.85% complete, ETA 00:59:59
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 97, 122, 123, 123, 123, 123, 123 ms/op
# Warmup Iteration   2: n = 11, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 96, 150, 154, 154, 154, 154, 154 ms/op
# Warmup Iteration   3: n = 8, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 115, 127, 174, 174, 174, 174, 174, 174 ms/op
Iteration   1: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 114, 127, 127, 127, 127, 127, 127 ms/op
Iteration   2: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 113, 114, 114, 114, 114, 114, 114 ms/op
Iteration   3: n = 8, mean = 139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 127, 175, 175, 175, 175, 175, 175 ms/op

# Run progress: 48.99% complete, ETA 00:59:47
# Fork: 3 of 3
# Warmup Iteration   1: n = 7, mean = 148 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 128, 209, 209, 209, 209, 209, 209 ms/op
# Warmup Iteration   2: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 109, 120, 121, 121, 121, 121, 121 ms/op
# Warmup Iteration   3: n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 99, 170, 170, 170, 170, 170, 170 ms/op
Iteration   1: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 109, 110, 156, 156, 156, 156, 156, 156 ms/op
Iteration   2: n = 11, mean = 98 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 96, 108, 110, 110, 110, 110, 110 ms/op
Iteration   3: n = 8, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 118, 127, 177, 177, 177, 177, 177, 177 ms/op


Result "readCrc":
  N = 78
  mean =    122.556 ±(99.9%) 7.802 ms/op

  Histogram, ms/op:
    [ 90.000,  95.000) = 0 
    [ 95.000, 100.000) = 9 
    [100.000, 105.000) = 1 
    [105.000, 110.000) = 10 
    [110.000, 115.000) = 22 
    [115.000, 120.000) = 1 
    [120.000, 125.000) = 1 
    [125.000, 130.000) = 18 
    [130.000, 135.000) = 3 
    [135.000, 140.000) = 2 
    [140.000, 145.000) = 2 
    [145.000, 150.000) = 0 
    [150.000, 155.000) = 0 
    [155.000, 160.000) = 1 
    [160.000, 165.000) = 3 
    [165.000, 170.000) = 2 
    [170.000, 175.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     95.683 ms/op
     p(50.0000) =    113.836 ms/op
     p(90.0000) =    162.267 ms/op
     p(95.0000) =    169.555 ms/op
     p(99.0000) =    176.947 ms/op
     p(99.9000) =    176.947 ms/op
     p(99.9900) =    176.947 ms/op
     p(99.9990) =    176.947 ms/op
     p(99.9999) =    176.947 ms/op
    p(100.0000) =    176.947 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 49.14% complete, ETA 00:59:34
# Fork: 1 of 3
# Warmup Iteration   1: n = 7, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 135, 225, 225, 225, 225, 225, 225 ms/op
# Warmup Iteration   2: n = 7, mean = 151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 134, 193, 193, 193, 193, 193, 193 ms/op
# Warmup Iteration   3: n = 7, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 133, 202, 202, 202, 202, 202, 202 ms/op
Iteration   1: n = 8, mean = 139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 119, 134, 196, 196, 196, 196, 196, 196 ms/op
Iteration   2: n = 8, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 119, 121, 194, 194, 194, 194, 194, 194 ms/op
Iteration   3: n = 8, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 119, 134, 172, 172, 172, 172, 172, 172 ms/op

# Run progress: 49.28% complete, ETA 00:59:22
# Fork: 2 of 3
# Warmup Iteration   1: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 132, 224, 224, 224, 224, 224, 224 ms/op
# Warmup Iteration   2: n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 115, 116, 118, 118, 118, 118, 118, 118 ms/op
# Warmup Iteration   3: n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 115, 115, 121, 121, 121, 121, 121, 121 ms/op
Iteration   1: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 133, 204, 204, 204, 204, 204, 204 ms/op
Iteration   2: n = 8, mean = 137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 130, 164, 164, 164, 164, 164, 164 ms/op
Iteration   3: n = 7, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 135, 204, 204, 204, 204, 204, 204 ms/op

# Run progress: 49.43% complete, ETA 00:59:09
# Fork: 3 of 3
# Warmup Iteration   1: n = 7, mean = 148 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 133, 224, 224, 224, 224, 224, 224 ms/op
# Warmup Iteration   2: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 118, 118, 120, 120, 120, 120, 120, 120 ms/op
# Warmup Iteration   3: n = 8, mean = 142 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 134, 198, 198, 198, 198, 198, 198 ms/op
Iteration   1: n = 8, mean = 139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 119, 132, 201, 201, 201, 201, 201, 201 ms/op
Iteration   2: n = 9, mean = 120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 119, 120, 124, 124, 124, 124, 124, 124 ms/op
Iteration   3: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 119, 120, 125, 125, 125, 125, 125, 125 ms/op


Result "readCrc":
  N = 72
  mean =    134.824 ±(99.9%) 8.895 ms/op

  Histogram, ms/op:
    [110.000, 120.000) = 19 
    [120.000, 130.000) = 16 
    [130.000, 140.000) = 27 
    [140.000, 150.000) = 1 
    [150.000, 160.000) = 1 
    [160.000, 170.000) = 1 
    [170.000, 180.000) = 1 
    [180.000, 190.000) = 0 
    [190.000, 200.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    118.882 ms/op
     p(50.0000) =    130.023 ms/op
     p(90.0000) =    169.450 ms/op
     p(95.0000) =    200.986 ms/op
     p(99.0000) =    203.948 ms/op
     p(99.9000) =    203.948 ms/op
     p(99.9900) =    203.948 ms/op
     p(99.9990) =    203.948 ms/op
     p(99.9999) =    203.948 ms/op
    p(100.0000) =    203.948 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 49.57% complete, ETA 00:58:56
# Fork: 1 of 3
# Warmup Iteration   1: n = 5, mean = 202 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 168, 169, 253, 253, 253, 253, 253, 253 ms/op
# Warmup Iteration   2: n = 7, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 152, 208, 208, 208, 208, 208, 208 ms/op
# Warmup Iteration   3: n = 7, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 163, 176, 176, 176, 176, 176, 176 ms/op
Iteration   1: n = 6, mean = 187 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 163, 180, 229, 229, 229, 229, 229, 229 ms/op
Iteration   2: n = 7, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 149, 163, 163, 163, 163, 163, 163 ms/op
Iteration   3: n = 6, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 157, 167, 229, 229, 229, 229, 229, 229 ms/op

# Run progress: 49.71% complete, ETA 00:58:44
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 188 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 172, 256, 256, 256, 256, 256, 256 ms/op
# Warmup Iteration   2: n = 6, mean = 185 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 157, 172, 224, 224, 224, 224, 224, 224 ms/op
# Warmup Iteration   3: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 157, 158, 272, 272, 272, 272, 272, 272 ms/op
Iteration   1: n = 8, mean = 138 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 138, 140, 140, 140, 140, 140, 140 ms/op
Iteration   2: n = 8, mean = 138 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 138, 140, 140, 140, 140, 140, 140 ms/op
Iteration   3: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 158, 171, 230, 230, 230, 230, 230, 230 ms/op

# Run progress: 49.86% complete, ETA 00:58:33
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 142 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 137, 159, 159, 159, 159, 159, 159 ms/op
# Warmup Iteration   2: n = 8, mean = 139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 137, 143, 143, 143, 143, 143, 143 ms/op
# Warmup Iteration   3: n = 7, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 155, 217, 217, 217, 217, 217, 217 ms/op
Iteration   1: n = 7, mean = 149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 137, 220, 220, 220, 220, 220, 220 ms/op
Iteration   2: n = 7, mean = 143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 137, 182, 182, 182, 182, 182, 182 ms/op
Iteration   3: n = 8, mean = 137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 137, 137, 137, 137, 137, 137, 137 ms/op


Result "readCrc":
  N = 63
  mean =    153.492 ±(99.9%) 10.915 ms/op

  Histogram, ms/op:
    [130.000, 140.000) = 36 
    [140.000, 150.000) = 4 
    [150.000, 160.000) = 2 
    [160.000, 170.000) = 10 
    [170.000, 180.000) = 4 
    [180.000, 190.000) = 1 
    [190.000, 200.000) = 1 
    [200.000, 210.000) = 1 
    [210.000, 220.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    136.315 ms/op
     p(50.0000) =    138.412 ms/op
     p(90.0000) =    188.744 ms/op
     p(95.0000) =    227.069 ms/op
     p(99.0000) =    229.900 ms/op
     p(99.9000) =    229.900 ms/op
     p(99.9900) =    229.900 ms/op
     p(99.9990) =    229.900 ms/op
     p(99.9999) =    229.900 ms/op
    p(100.0000) =    229.900 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 50.00% complete, ETA 00:58:21
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 117, 174, 174, 174, 174, 174, 174 ms/op
# Warmup Iteration   2: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 120, 122, 122, 122, 122, 122, 122 ms/op
# Warmup Iteration   3: n = 11, mean = 97 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 95, 101, 102, 102, 102, 102, 102 ms/op
Iteration   1: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 117, 179, 179, 179, 179, 179, 179 ms/op
Iteration   2: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 97, 111, 111, 111, 111, 111, 111 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 11, mean = 97 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 96, 101, 102, 102, 102, 102, 102 ms/op

# Run progress: 50.14% complete, ETA 00:58:08
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 78, 103, 151, 154, 154, 154, 154, 154 ms/op
# Warmup Iteration   2: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 91, 128, 135, 135, 135, 135, 135 ms/op
# Warmup Iteration   3: n = 13, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 74, 77, 85, 87, 87, 87, 87, 87 ms/op
Iteration   1: n = 11, mean = 99 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 95, 140, 143, 143, 143, 143, 143 ms/op
Iteration   2: n = 12, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 83, 90, 120, 130, 130, 130, 130, 130 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 86, 95, 146, 146, 146, 146, 146, 146 ms/op

# Run progress: 50.29% complete, ETA 00:57:56
# Fork: 3 of 3
# Warmup Iteration   1: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 81, 100, 147, 149, 149, 149, 149, 149 ms/op
# Warmup Iteration   2: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 96, 163, 165, 165, 165, 165, 165 ms/op
# Warmup Iteration   3: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 93, 145, 146, 146, 146, 146, 146 ms/op
Iteration   1: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 86, 127, 141, 141, 141, 141, 141 ms/op
Iteration   2: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 89, 91, 91, 91, 91, 91, 91 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 77, 122, 133, 133, 133, 133, 133 ms/op


Result "readKey":
  N = 98
  mean =     96.654 ±(99.9%) 6.970 ms/op

  Histogram, ms/op:
    [  0.000,  12.500) = 0 
    [ 12.500,  25.000) = 0 
    [ 25.000,  37.500) = 0 
    [ 37.500,  50.000) = 0 
    [ 50.000,  62.500) = 0 
    [ 62.500,  75.000) = 0 
    [ 75.000,  87.500) = 31 
    [ 87.500, 100.000) = 43 
    [100.000, 112.500) = 12 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 4 
    [137.500, 150.000) = 6 
    [150.000, 162.500) = 1 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =     75.235 ms/op
     p(50.0000) =     91.947 ms/op
     p(90.0000) =    130.430 ms/op
     p(95.0000) =    143.485 ms/op
     p(99.0000) =    179.306 ms/op
     p(99.9000) =    179.306 ms/op
     p(99.9900) =    179.306 ms/op
     p(99.9990) =    179.306 ms/op
     p(99.9999) =    179.306 ms/op
    p(100.0000) =    179.306 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readKey
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 50.43% complete, ETA 00:57:43
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 625 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 612, 625, 639, 639, 639, 639, 639, 639 ms/op
# Warmup Iteration   2: n = 2, mean = 598 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 598, 598, 599, 599, 599, 599, 599, 599 ms/op
# Warmup Iteration   3: n = 2, mean = 816 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 755, 816, 877, 877, 877, 877, 877, 877 ms/op
Iteration   1: n = 2, mean = 723 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 684, 723, 762, 762, 762, 762, 762, 762 ms/op
Iteration   2: n = 2, mean = 666 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 666, 666, 667, 667, 667, 667, 667, 667 ms/op
Iteration   3: 
Bytes	before-close	171446272	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	171446272	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 711 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 628, 711, 794, 794, 794, 794, 794, 794 ms/op

# Run progress: 50.57% complete, ETA 00:57:33
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 619 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 612, 619, 625, 625, 625, 625, 625, 625 ms/op
# Warmup Iteration   2: n = 2, mean = 598 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 596, 598, 600, 600, 600, 600, 600, 600 ms/op
# Warmup Iteration   3: n = 2, mean = 786 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 747, 786, 825, 825, 825, 825, 825, 825 ms/op
Iteration   1: n = 2, mean = 625 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 606, 625, 644, 644, 644, 644, 644, 644 ms/op
Iteration   2: n = 2, mean = 668 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 666, 668, 670, 670, 670, 670, 670, 670 ms/op
Iteration   3: 
Bytes	before-close	172023808	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	172023808	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 646 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 625, 646, 668, 668, 668, 668, 668, 668 ms/op

# Run progress: 50.72% complete, ETA 00:57:23
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 614 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 606, 614, 622, 622, 622, 622, 622, 622 ms/op
# Warmup Iteration   2: n = 2, mean = 593 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 592, 593, 593, 593, 593, 593, 593, 593 ms/op
# Warmup Iteration   3: n = 2, mean = 694 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 634, 694, 753, 753, 753, 753, 753, 753 ms/op
Iteration   1: n = 2, mean = 620 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 617, 620, 624, 624, 624, 624, 624, 624 ms/op
Iteration   2: n = 2, mean = 616 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 616, 616, 616, 616, 616, 616, 616, 616 ms/op
Iteration   3: 
Bytes	before-close	171806720	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	171806720	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 713 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 657, 713, 768, 768, 768, 768, 768, 768 ms/op


Result "readKey":
  N = 18
  mean =    665.321 ±(99.9%) 52.101 ms/op

  Histogram, ms/op:
    [600.000, 612.500) = 1 
    [612.500, 625.000) = 5 
    [625.000, 637.500) = 1 
    [637.500, 650.000) = 1 
    [650.000, 662.500) = 1 
    [662.500, 675.000) = 5 
    [675.000, 687.500) = 1 
    [687.500, 700.000) = 0 
    [700.000, 712.500) = 0 
    [712.500, 725.000) = 0 
    [725.000, 737.500) = 0 
    [737.500, 750.000) = 0 
    [750.000, 762.500) = 1 
    [762.500, 775.000) = 1 
    [775.000, 787.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    606.077 ms/op
     p(50.0000) =    661.651 ms/op
     p(90.0000) =    770.179 ms/op
     p(95.0000) =    793.772 ms/op
     p(99.0000) =    793.772 ms/op
     p(99.9000) =    793.772 ms/op
     p(99.9900) =    793.772 ms/op
     p(99.9990) =    793.772 ms/op
     p(99.9999) =    793.772 ms/op
    p(100.0000) =    793.772 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readKey
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 50.86% complete, ETA 00:57:12
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 322 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 271, 331, 357, 357, 357, 357, 357, 357 ms/op
# Warmup Iteration   2: n = 4, mean = 288 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 252, 287, 325, 325, 325, 325, 325, 325 ms/op
# Warmup Iteration   3: n = 4, mean = 299 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 260, 298, 339, 339, 339, 339, 339, 339 ms/op
Iteration   1: n = 4, mean = 273 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 238, 270, 316, 316, 316, 316, 316, 316 ms/op
Iteration   2: n = 4, mean = 288 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 267, 278, 329, 329, 329, 329, 329, 329 ms/op
Iteration   3: 
Bytes	before-close	128860160	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	128860160	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 4, mean = 304 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 257, 297, 364, 364, 364, 364, 364, 364 ms/op

# Run progress: 51.01% complete, ETA 00:57:01
# Fork: 2 of 3
# Warmup Iteration   1: n = 3, mean = 358 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 301, 343, 430, 430, 430, 430, 430, 430 ms/op
# Warmup Iteration   2: n = 4, mean = 270 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 242, 268, 301, 301, 301, 301, 301, 301 ms/op
# Warmup Iteration   3: n = 4, mean = 302 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 255, 293, 369, 369, 369, 369, 369, 369 ms/op
Iteration   1: n = 3, mean = 343 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 311, 341, 376, 376, 376, 376, 376, 376 ms/op
Iteration   2: n = 5, mean = 245 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 228, 248, 269, 269, 269, 269, 269, 269 ms/op
Iteration   3: 
Bytes	before-close	128860160	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	128860160	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 4, mean = 303 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 257, 306, 341, 341, 341, 341, 341, 341 ms/op

# Run progress: 51.15% complete, ETA 00:56:49
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 340 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 289, 300, 432, 432, 432, 432, 432, 432 ms/op
# Warmup Iteration   2: n = 4, mean = 259 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 248, 252, 286, 286, 286, 286, 286, 286 ms/op
# Warmup Iteration   3: n = 4, mean = 318 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 269, 333, 336, 336, 336, 336, 336, 336 ms/op
Iteration   1: n = 4, mean = 305 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 266, 305, 344, 344, 344, 344, 344, 344 ms/op
Iteration   2: n = 4, mean = 255 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 252, 255, 257, 257, 257, 257, 257, 257 ms/op
Iteration   3: 
Bytes	before-close	128860160	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	128860160	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 5, mean = 242 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 240, 241, 243, 243, 243, 243, 243, 243 ms/op


Result "readKey":
  N = 37
  mean =    280.395 ±(99.9%) 24.616 ms/op

  Histogram, ms/op:
    [200.000, 212.500) = 0 
    [212.500, 225.000) = 0 
    [225.000, 237.500) = 2 
    [237.500, 250.000) = 7 
    [250.000, 262.500) = 8 
    [262.500, 275.000) = 6 
    [275.000, 287.500) = 3 
    [287.500, 300.000) = 0 
    [300.000, 312.500) = 1 
    [312.500, 325.000) = 1 
    [325.000, 337.500) = 3 
    [337.500, 350.000) = 4 
    [350.000, 362.500) = 0 
    [362.500, 375.000) = 1 
    [375.000, 387.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    228.065 ms/op
     p(50.0000) =    266.338 ms/op
     p(90.0000) =    341.836 ms/op
     p(95.0000) =    365.114 ms/op
     p(99.0000) =    376.439 ms/op
     p(99.9000) =    376.439 ms/op
     p(99.9900) =    376.439 ms/op
     p(99.9990) =    376.439 ms/op
     p(99.9999) =    376.439 ms/op
    p(100.0000) =    376.439 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readKey
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 51.29% complete, ETA 00:56:37
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132 ms/op
# Warmup Iteration   2: n = 1, mean = 1041 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041 ms/op
# Warmup Iteration   3: n = 1, mean = 1200 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200 ms/op
Iteration   1: n = 1, mean = 1233 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233 ms/op
Iteration   2: n = 1, mean = 1022 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022 ms/op
Iteration   3: 
Bytes	before-close	189104128	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	189104128	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 1041 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041 ms/op

# Run progress: 51.44% complete, ETA 00:56:26
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 953 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 950, 953, 955, 955, 955, 955, 955, 955 ms/op
# Warmup Iteration   2: n = 2, mean = 861 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 859, 861, 863, 863, 863, 863, 863, 863 ms/op
# Warmup Iteration   3: n = 2, mean = 949 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 921, 949, 977, 977, 977, 977, 977, 977 ms/op
Iteration   1: n = 1, mean = 1060 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060 ms/op
Iteration   2: n = 1, mean = 1039 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039 ms/op
Iteration   3: 
Bytes	before-close	188899328	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	188899328	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 859 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 855, 859, 863, 863, 863, 863, 863, 863 ms/op

# Run progress: 51.58% complete, ETA 00:56:18
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1338 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338 ms/op
# Warmup Iteration   2: n = 2, mean = 902 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 867, 902, 937, 937, 937, 937, 937, 937 ms/op
# Warmup Iteration   3: n = 1, mean = 1035 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035 ms/op
Iteration   1: n = 1, mean = 1029 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029 ms/op
Iteration   2: n = 2, mean = 872 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 871, 872, 872, 872, 872, 872, 872, 872 ms/op
Iteration   3: 
Bytes	before-close	189554688	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	189554688	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 1237 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237 ms/op


Result "readKey":
  N = 11
  mean =   1011.209 ±(99.9%) 190.732 ms/op

  Histogram, ms/op:
    [ 800.000,  850.000) = 0 
    [ 850.000,  900.000) = 4 
    [ 900.000,  950.000) = 0 
    [ 950.000, 1000.000) = 0 
    [1000.000, 1050.000) = 4 
    [1050.000, 1100.000) = 1 
    [1100.000, 1150.000) = 0 
    [1150.000, 1200.000) = 0 
    [1200.000, 1250.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    854.589 ms/op
     p(50.0000) =   1028.653 ms/op
     p(90.0000) =   1236.481 ms/op
     p(95.0000) =   1237.320 ms/op
     p(99.0000) =   1237.320 ms/op
     p(99.9000) =   1237.320 ms/op
     p(99.9900) =   1237.320 ms/op
     p(99.9990) =   1237.320 ms/op
     p(99.9999) =   1237.320 ms/op
    p(100.0000) =   1237.320 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readRev
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 51.72% complete, ETA 00:56:08
# Fork: 1 of 3
# Warmup Iteration   1: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 32, 48, 53, 56, 56, 56, 56 ms/op
# Warmup Iteration   2: n = 40, mean = 25 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 23, 23, 32, 33, 47, 47, 47, 47 ms/op
# Warmup Iteration   3: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 40, 52, 62, 65, 65, 65, 65 ms/op
Iteration   1: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 32, 37, 39, 39, 39, 39, 39 ms/op
Iteration   2: n = 29, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 36, 44, 53, 54, 54, 54, 54 ms/op
Iteration   3: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 38, 56, 63, 65, 65, 65, 65 ms/op

# Run progress: 51.87% complete, ETA 00:55:55
# Fork: 2 of 3
# Warmup Iteration   1: n = 25, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 38, 52, 64, 67, 67, 67, 67 ms/op
# Warmup Iteration   2: n = 34, mean = 29 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 27, 36, 44, 50, 50, 50, 50 ms/op
# Warmup Iteration   3: n = 40, mean = 25 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 23, 23, 33, 34, 35, 35, 35, 35 ms/op
Iteration   1: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 40, 50, 60, 63, 63, 63, 63 ms/op
Iteration   2: n = 34, mean = 29 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 27, 38, 46, 52, 52, 52, 52 ms/op
Iteration   3: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 27, 47, 53, 54, 54, 54, 54 ms/op

# Run progress: 52.01% complete, ETA 00:55:42
# Fork: 3 of 3
# Warmup Iteration   1: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 23, 27, 47, 55, 55, 55, 55, 55 ms/op
# Warmup Iteration   2: n = 34, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 23, 26, 38, 43, 48, 48, 48, 48 ms/op
# Warmup Iteration   3: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 36, 39, 46, 52, 52, 52, 52 ms/op
Iteration   1: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 23, 35, 43, 47, 52, 52, 52, 52 ms/op
Iteration   2: n = 31, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 27, 43, 49, 51, 51, 51, 51 ms/op
Iteration   3: n = 37, mean = 28 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 23, 26, 34, 44, 53, 53, 53, 53 ms/op


Result "readRev":
  N = 275
  mean =     33.422 ±(99.9%) 1.644 ms/op

  Histogram, ms/op:
    [20.000, 25.000) = 14 
    [25.000, 30.000) = 114 
    [30.000, 35.000) = 30 
    [35.000, 40.000) = 62 
    [40.000, 45.000) = 34 
    [45.000, 50.000) = 7 
    [50.000, 55.000) = 11 
    [55.000, 60.000) = 1 
    [60.000, 65.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     23.396 ms/op
     p(50.0000) =     32.178 ms/op
     p(90.0000) =     43.162 ms/op
     p(95.0000) =     50.423 ms/op
     p(99.0000) =     58.702 ms/op
     p(99.9000) =     65.470 ms/op
     p(99.9900) =     65.470 ms/op
     p(99.9990) =     65.470 ms/op
     p(99.9999) =     65.470 ms/op
    p(100.0000) =     65.470 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readRev
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 52.16% complete, ETA 00:55:29
# Fork: 1 of 3
# Warmup Iteration   1: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 86, 121, 129, 129, 129, 129, 129 ms/op
# Warmup Iteration   2: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 57, 88, 91, 91, 91, 91, 91 ms/op
# Warmup Iteration   3: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 48, 49, 88, 89, 89, 89, 89, 89 ms/op
Iteration   1: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 61, 104, 107, 107, 107, 107, 107 ms/op
Iteration   2: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 48, 55, 59, 62, 62, 62, 62, 62 ms/op
Iteration   3: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 48, 49, 59, 65, 65, 65, 65, 65 ms/op

# Run progress: 52.30% complete, ETA 00:55:17
# Fork: 2 of 3
# Warmup Iteration   1: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 49, 52, 68, 77, 77, 77, 77, 77 ms/op
# Warmup Iteration   2: n = 13, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 80, 96, 102, 102, 102, 102, 102 ms/op
# Warmup Iteration   3: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 59, 99, 106, 106, 106, 106, 106 ms/op
Iteration   1: n = 19, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 49, 58, 64, 77, 77, 77, 77, 77 ms/op
Iteration   2: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 50, 58, 69, 72, 72, 72, 72, 72 ms/op
Iteration   3: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 49, 55, 92, 93, 93, 93, 93, 93 ms/op

# Run progress: 52.44% complete, ETA 00:55:05
# Fork: 3 of 3
# Warmup Iteration   1: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 47, 48, 66, 72, 72, 72, 72, 72 ms/op
# Warmup Iteration   2: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 46, 47, 52, 61, 62, 62, 62, 62 ms/op
# Warmup Iteration   3: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 77, 89, 92, 92, 92, 92, 92 ms/op
Iteration   1: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 47, 57, 68, 68, 68, 68, 68, 68 ms/op
Iteration   2: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 55, 92, 95, 95, 95, 95, 95 ms/op
Iteration   3: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 63, 94, 101, 101, 101, 101, 101 ms/op


Result "readRev":
  N = 156
  mean =     59.483 ±(99.9%) 3.119 ms/op

  Histogram, ms/op:
    [ 40.000,  45.000) = 0 
    [ 45.000,  50.000) = 36 
    [ 50.000,  55.000) = 10 
    [ 55.000,  60.000) = 65 
    [ 60.000,  65.000) = 13 
    [ 65.000,  70.000) = 14 
    [ 70.000,  75.000) = 5 
    [ 75.000,  80.000) = 3 
    [ 80.000,  85.000) = 1 
    [ 85.000,  90.000) = 0 
    [ 90.000,  95.000) = 5 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     47.383 ms/op
     p(50.0000) =     57.344 ms/op
     p(90.0000) =     73.348 ms/op
     p(95.0000) =     90.695 ms/op
     p(99.0000) =    104.601 ms/op
     p(99.9000) =    106.693 ms/op
     p(99.9900) =    106.693 ms/op
     p(99.9990) =    106.693 ms/op
     p(99.9999) =    106.693 ms/op
    p(100.0000) =    106.693 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readRev
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 52.59% complete, ETA 00:54:53
# Fork: 1 of 3
# Warmup Iteration   1: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 39, 55, 58, 58, 58, 58, 58 ms/op
# Warmup Iteration   2: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 36, 45, 54, 54, 54, 54, 54 ms/op
# Warmup Iteration   3: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 32, 54, 56, 57, 57, 57, 57 ms/op
Iteration   1: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 31, 50, 63, 67, 67, 67, 67 ms/op
Iteration   2: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 32, 37, 39, 41, 41, 41, 41 ms/op
Iteration   3: n = 36, mean = 28 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 27, 33, 34, 35, 35, 35, 35 ms/op

# Run progress: 52.73% complete, ETA 00:54:41
# Fork: 2 of 3
# Warmup Iteration   1: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 23, 24, 50, 55, 57, 57, 57, 57 ms/op
# Warmup Iteration   2: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 43, 51, 53, 54, 54, 54, 54 ms/op
# Warmup Iteration   3: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 28, 38, 38, 38, 38, 38, 38 ms/op
Iteration   1: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 31, 53, 63, 64, 64, 64, 64 ms/op
Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 31, 39, 44, 48, 48, 48, 48 ms/op
Iteration   3: n = 35, mean = 29 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 24, 27, 35, 46, 52, 52, 52, 52 ms/op

# Run progress: 52.87% complete, ETA 00:54:28
# Fork: 3 of 3
# Warmup Iteration   1: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 35, 55, 85, 93, 93, 93, 93 ms/op
# Warmup Iteration   2: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 28, 48, 52, 52, 52, 52, 52 ms/op
# Warmup Iteration   3: n = 31, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 31, 43, 44, 46, 46, 46, 46 ms/op
Iteration   1: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 43, 51, 54, 55, 55, 55, 55 ms/op
Iteration   2: n = 35, mean = 29 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 27, 35, 43, 44, 44, 44, 44 ms/op
Iteration   3: n = 34, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 28, 36, 45, 46, 46, 46, 46 ms/op


Result "readRev":
  N = 283
  mean =     32.194 ±(99.9%) 1.429 ms/op

  Histogram, ms/op:
    [20.000, 25.000) = 2 
    [25.000, 30.000) = 144 
    [30.000, 35.000) = 68 
    [35.000, 40.000) = 26 
    [40.000, 45.000) = 27 
    [45.000, 50.000) = 8 
    [50.000, 55.000) = 4 
    [55.000, 60.000) = 1 
    [60.000, 65.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     23.822 ms/op
     p(50.0000) =     29.950 ms/op
     p(90.0000) =     42.992 ms/op
     p(95.0000) =     45.338 ms/op
     p(99.0000) =     62.618 ms/op
     p(99.9000) =     67.371 ms/op
     p(99.9900) =     67.371 ms/op
     p(99.9990) =     67.371 ms/op
     p(99.9999) =     67.371 ms/op
    p(100.0000) =     67.371 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readRev
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 53.02% complete, ETA 00:54:15
# Fork: 1 of 3
# Warmup Iteration   1: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 69, 100, 107, 107, 107, 107, 107 ms/op
# Warmup Iteration   2: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 61, 81, 92, 92, 92, 92, 92 ms/op
# Warmup Iteration   3: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 61, 83, 86, 86, 86, 86, 86 ms/op
Iteration   1: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 61, 81, 87, 87, 87, 87, 87 ms/op
Iteration   2: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 64, 83, 83, 83, 83, 83, 83 ms/op
Iteration   3: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 64, 102, 108, 108, 108, 108, 108 ms/op

# Run progress: 53.16% complete, ETA 00:54:04
# Fork: 2 of 3
# Warmup Iteration   1: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 89, 122, 126, 126, 126, 126, 126 ms/op
# Warmup Iteration   2: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 69, 75, 77, 77, 77, 77, 77 ms/op
# Warmup Iteration   3: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 78, 100, 104, 104, 104, 104, 104 ms/op
Iteration   1: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 69, 76, 76, 76, 76, 76, 76 ms/op
Iteration   2: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 78, 82, 84, 84, 84, 84, 84 ms/op
Iteration   3: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 72, 87, 88, 88, 88, 88, 88 ms/op

# Run progress: 53.30% complete, ETA 00:53:52
# Fork: 3 of 3
# Warmup Iteration   1: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 50, 51, 69, 74, 74, 74, 74, 74 ms/op
# Warmup Iteration   2: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 50, 51, 69, 74, 74, 74, 74, 74 ms/op
# Warmup Iteration   3: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 60, 96, 101, 101, 101, 101, 101 ms/op
Iteration   1: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 68, 93, 106, 106, 106, 106, 106 ms/op
Iteration   2: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 50, 51, 56, 64, 65, 65, 65, 65 ms/op
Iteration   3: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 60, 61, 61, 61, 61, 61, 61 ms/op


Result "readRev":
  N = 142
  mean =     65.542 ±(99.9%) 3.329 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 33 
    [ 55.000,  60.000) = 5 
    [ 60.000,  65.000) = 33 
    [ 65.000,  70.000) = 29 
    [ 70.000,  75.000) = 13 
    [ 75.000,  80.000) = 14 
    [ 80.000,  85.000) = 9 
    [ 85.000,  90.000) = 3 
    [ 90.000,  95.000) = 0 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     50.201 ms/op
     p(50.0000) =     64.881 ms/op
     p(90.0000) =     81.645 ms/op
     p(95.0000) =     84.895 ms/op
     p(99.0000) =    107.307 ms/op
     p(99.9000) =    108.265 ms/op
     p(99.9900) =    108.265 ms/op
     p(99.9990) =    108.265 ms/op
     p(99.9999) =    108.265 ms/op
    p(100.0000) =    108.265 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 53.45% complete, ETA 00:53:41
# Fork: 1 of 3
# Warmup Iteration   1: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 49, 54, 89, 112, 112, 112, 112, 112 ms/op
# Warmup Iteration   2: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 49, 59, 66, 66, 66, 66, 66 ms/op
# Warmup Iteration   3: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 47, 49, 64, 70, 71, 71, 71, 71 ms/op
Iteration   1: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 44, 49, 64, 69, 69, 69, 69, 69 ms/op
Iteration   2: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 49, 53, 70, 76, 76, 76, 76, 76 ms/op
Iteration   3: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 44, 49, 56, 60, 61, 61, 61, 61 ms/op

# Run progress: 53.59% complete, ETA 00:53:28
# Fork: 2 of 3
# Warmup Iteration   1: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 33, 51, 60, 63, 63, 63, 63 ms/op
# Warmup Iteration   2: n = 25, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 34, 57, 62, 64, 64, 64, 64 ms/op
# Warmup Iteration   3: n = 25, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 38, 52, 59, 61, 61, 61, 61 ms/op
Iteration   1: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 29, 39, 39, 39, 39, 39, 39 ms/op
Iteration   2: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 29, 39, 41, 43, 43, 43, 43 ms/op
Iteration   3: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 33, 43, 54, 61, 61, 61, 61 ms/op

# Run progress: 53.74% complete, ETA 00:53:16
# Fork: 3 of 3
# Warmup Iteration   1: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 49, 62, 82, 109, 109, 109, 109, 109 ms/op
# Warmup Iteration   2: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 53, 72, 76, 76, 76, 76, 76 ms/op
# Warmup Iteration   3: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 49, 51, 70, 80, 80, 80, 80, 80 ms/op
Iteration   1: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 49, 62, 71, 77, 77, 77, 77, 77 ms/op
Iteration   2: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 49, 65, 74, 74, 74, 74, 74 ms/op
Iteration   3: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 50, 66, 79, 80, 80, 80, 80 ms/op


Result "readSeq":
  N = 209
  mean =     43.902 ±(99.9%) 2.911 ms/op

  Histogram, ms/op:
    [20.000, 25.000) = 0 
    [25.000, 30.000) = 48 
    [30.000, 35.000) = 23 
    [35.000, 40.000) = 22 
    [40.000, 45.000) = 16 
    [45.000, 50.000) = 44 
    [50.000, 55.000) = 19 
    [55.000, 60.000) = 10 
    [60.000, 65.000) = 16 
    [65.000, 70.000) = 7 
    [70.000, 75.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     28.475 ms/op
     p(50.0000) =     44.564 ms/op
     p(90.0000) =     62.390 ms/op
     p(95.0000) =     65.765 ms/op
     p(99.0000) =     77.293 ms/op
     p(99.9000) =     79.954 ms/op
     p(99.9900) =     79.954 ms/op
     p(99.9990) =     79.954 ms/op
     p(99.9999) =     79.954 ms/op
    p(100.0000) =     79.954 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 53.88% complete, ETA 00:53:03
# Fork: 1 of 3
# Warmup Iteration   1: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 84, 97, 139, 142, 142, 142, 142, 142 ms/op
# Warmup Iteration   2: n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 85, 102, 104, 104, 104, 104, 104 ms/op
# Warmup Iteration   3: n = 11, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 89, 117, 118, 118, 118, 118, 118 ms/op
Iteration   1: n = 12, mean = 88 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 79, 84, 110, 116, 116, 116, 116, 116 ms/op
Iteration   2: n = 13, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 76, 84, 86, 86, 86, 86, 86 ms/op
Iteration   3: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 86, 110, 111, 111, 111, 111, 111 ms/op

# Run progress: 54.02% complete, ETA 00:52:51
# Fork: 2 of 3
# Warmup Iteration   1: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 63, 84, 97, 97, 97, 97, 97 ms/op
# Warmup Iteration   2: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 85, 110, 115, 115, 115, 115, 115 ms/op
# Warmup Iteration   3: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 76, 82, 83, 83, 83, 83, 83 ms/op
Iteration   1: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 62, 90, 99, 99, 99, 99, 99 ms/op
Iteration   2: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 68, 96, 98, 98, 98, 98, 98 ms/op
Iteration   3: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 62, 71, 95, 95, 95, 95, 95 ms/op

# Run progress: 54.17% complete, ETA 00:52:40
# Fork: 3 of 3
# Warmup Iteration   1: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 78, 105, 110, 110, 110, 110, 110 ms/op
# Warmup Iteration   2: n = 12, mean = 88 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 83, 121, 128, 128, 128, 128, 128 ms/op
# Warmup Iteration   3: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 78, 105, 108, 108, 108, 108, 108 ms/op
Iteration   1: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 73, 81, 87, 88, 88, 88, 88, 88 ms/op
Iteration   2: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 73, 75, 99, 105, 105, 105, 105, 105 ms/op
Iteration   3: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 81, 85, 108, 112, 112, 112, 112, 112 ms/op


Result "readSeq":
  N = 121
  mean =     76.904 ±(99.9%) 4.297 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 10 
    [ 55.000,  60.000) = 2 
    [ 60.000,  65.000) = 23 
    [ 65.000,  70.000) = 4 
    [ 70.000,  75.000) = 9 
    [ 75.000,  80.000) = 18 
    [ 80.000,  85.000) = 25 
    [ 85.000,  90.000) = 15 
    [ 90.000,  95.000) = 2 
    [ 95.000, 100.000) = 7 
    [100.000, 105.000) = 1 
    [105.000, 110.000) = 2 
    [110.000, 115.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     52.429 ms/op
     p(50.0000) =     76.677 ms/op
     p(90.0000) =     95.394 ms/op
     p(95.0000) =    104.032 ms/op
     p(99.0000) =    115.425 ms/op
     p(99.9000) =    116.261 ms/op
     p(99.9900) =    116.261 ms/op
     p(99.9990) =    116.261 ms/op
     p(99.9999) =    116.261 ms/op
    p(100.0000) =    116.261 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 54.31% complete, ETA 00:52:28
# Fork: 1 of 3
# Warmup Iteration   1: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 36, 54, 62, 65, 65, 65, 65 ms/op
# Warmup Iteration   2: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 52, 74, 74, 74, 74, 74, 74 ms/op
# Warmup Iteration   3: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 35, 45, 60, 69, 69, 69, 69 ms/op
Iteration   1: n = 20, mean = 50 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 49, 63, 67, 67, 67, 67, 67 ms/op
Iteration   2: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 39, 65, 88, 91, 91, 91, 91 ms/op
Iteration   3: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 36, 46, 59, 65, 65, 65, 65 ms/op

# Run progress: 54.45% complete, ETA 00:52:16
# Fork: 2 of 3
# Warmup Iteration   1: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 43, 87, 117, 117, 117, 117, 117 ms/op
# Warmup Iteration   2: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 56, 65, 69, 69, 69, 69, 69 ms/op
# Warmup Iteration   3: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 72, 89, 92, 92, 92, 92, 92 ms/op
Iteration   1: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 42, 61, 76, 78, 78, 78, 78 ms/op
Iteration   2: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 46, 53, 54, 54, 54, 54, 54 ms/op
Iteration   3: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 36, 36, 36, 36, 36, 36, 36 ms/op

# Run progress: 54.60% complete, ETA 00:52:03
# Fork: 3 of 3
# Warmup Iteration   1: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 42, 61, 68, 69, 69, 69, 69 ms/op
# Warmup Iteration   2: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 60, 74, 75, 75, 75, 75, 75 ms/op
# Warmup Iteration   3: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 60, 72, 75, 75, 75, 75, 75 ms/op
Iteration   1: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 55, 77, 79, 79, 79, 79, 79 ms/op
Iteration   2: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 49, 52, 59, 62, 62, 62, 62, 62 ms/op
Iteration   3: n = 19, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 54, 62, 88, 88, 88, 88, 88 ms/op


Result "readSeq":
  N = 196
  mean =     46.896 ±(99.9%) 2.546 ms/op

  Histogram, ms/op:
    [ 30.000,  35.000) = 7 
    [ 35.000,  40.000) = 60 
    [ 40.000,  45.000) = 26 
    [ 45.000,  50.000) = 31 
    [ 50.000,  55.000) = 44 
    [ 55.000,  60.000) = 10 
    [ 60.000,  65.000) = 8 
    [ 65.000,  70.000) = 3 
    [ 70.000,  75.000) = 2 
    [ 75.000,  80.000) = 3 
    [ 80.000,  85.000) = 0 
    [ 85.000,  90.000) = 1 
    [ 90.000,  95.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     34.144 ms/op
     p(50.0000) =     45.810 ms/op
     p(90.0000) =     59.238 ms/op
     p(95.0000) =     65.565 ms/op
     p(99.0000) =     88.429 ms/op
     p(99.9000) =     91.226 ms/op
     p(99.9900) =     91.226 ms/op
     p(99.9990) =     91.226 ms/op
     p(99.9999) =     91.226 ms/op
    p(100.0000) =     91.226 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 54.74% complete, ETA 00:51:51
# Fork: 1 of 3
# Warmup Iteration   1: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 55, 74, 79, 79, 79, 79, 79 ms/op
# Warmup Iteration   2: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 55, 62, 65, 65, 65, 65, 65 ms/op
# Warmup Iteration   3: n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 76, 118, 120, 120, 120, 120, 120 ms/op
Iteration   1: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 64, 94, 96, 96, 96, 96, 96 ms/op
Iteration   2: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 64, 77, 89, 89, 89, 89, 89 ms/op
Iteration   3: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 64, 84, 88, 88, 88, 88, 88 ms/op

# Run progress: 54.89% complete, ETA 00:51:40
# Fork: 2 of 3
# Warmup Iteration   1: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 59, 78, 81, 81, 81, 81, 81 ms/op
# Warmup Iteration   2: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 58, 61, 64, 64, 64, 64, 64 ms/op
# Warmup Iteration   3: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 71, 114, 120, 120, 120, 120, 120 ms/op
Iteration   1: n = 15, mean = 71 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 67, 106, 114, 114, 114, 114, 114 ms/op
Iteration   2: n = 13, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 68, 121, 129, 129, 129, 129, 129 ms/op
Iteration   3: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 58, 66, 67, 67, 67, 67, 67 ms/op

# Run progress: 55.03% complete, ETA 00:51:29
# Fork: 3 of 3
# Warmup Iteration   1: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 58, 75, 81, 81, 81, 81, 81 ms/op
# Warmup Iteration   2: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 67, 83, 87, 87, 87, 87, 87 ms/op
# Warmup Iteration   3: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 58, 62, 65, 65, 65, 65, 65 ms/op
Iteration   1: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 58, 61, 62, 62, 62, 62, 62 ms/op
Iteration   2: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 67, 95, 96, 96, 96, 96, 96 ms/op
Iteration   3: n = 17, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 57, 101, 101, 101, 101, 101, 101 ms/op


Result "readSeq":
  N = 140
  mean =     66.721 ±(99.9%) 3.499 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 45 
    [ 60.000,  65.000) = 39 
    [ 65.000,  70.000) = 34 
    [ 70.000,  75.000) = 6 
    [ 75.000,  80.000) = 0 
    [ 80.000,  85.000) = 2 
    [ 85.000,  90.000) = 4 
    [ 90.000,  95.000) = 1 
    [ 95.000, 100.000) = 3 
    [100.000, 105.000) = 3 
    [105.000, 110.000) = 1 
    [110.000, 115.000) = 1 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     56.164 ms/op
     p(50.0000) =     63.898 ms/op
     p(90.0000) =     85.485 ms/op
     p(95.0000) =     95.807 ms/op
     p(99.0000) =    122.586 ms/op
     p(99.9000) =    128.713 ms/op
     p(99.9900) =    128.713 ms/op
     p(99.9990) =    128.713 ms/op
     p(99.9999) =    128.713 ms/op
    p(100.0000) =    128.713 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 55.17% complete, ETA 00:51:17
# Fork: 1 of 3
# Warmup Iteration   1: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 63, 92, 105, 105, 105, 105, 105 ms/op
# Warmup Iteration   2: n = 14, mean = 71 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 69, 89, 99, 99, 99, 99, 99 ms/op
# Warmup Iteration   3: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 60, 60, 61, 61, 61, 61, 61 ms/op
Iteration   1: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 60, 60, 60, 60, 60, 60, 60 ms/op
Iteration   2: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 60, 60, 60, 60, 60, 60, 60 ms/op
Iteration   3: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 60, 60, 60, 60, 60, 60, 60 ms/op

# Run progress: 55.32% complete, ETA 00:51:05
# Fork: 2 of 3
# Warmup Iteration   1: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 63, 120, 151, 151, 151, 151, 151 ms/op
# Warmup Iteration   2: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 57, 91, 111, 111, 111, 111, 111 ms/op
# Warmup Iteration   3: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 65, 90, 105, 105, 105, 105, 105 ms/op
Iteration   1: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 58, 80, 92, 92, 92, 92, 92 ms/op
Iteration   2: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 50, 50, 57, 57, 57, 57, 57, 57 ms/op
Iteration   3: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 65, 89, 104, 104, 104, 104, 104 ms/op

# Run progress: 55.46% complete, ETA 00:50:53
# Fork: 3 of 3
# Warmup Iteration   1: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 59, 80, 95, 95, 95, 95, 95 ms/op
# Warmup Iteration   2: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 52, 53, 53, 53, 53, 53, 53 ms/op
# Warmup Iteration   3: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 56, 76, 97, 97, 97, 97, 97 ms/op
Iteration   1: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 52, 55, 55, 55, 55, 55, 55 ms/op
Iteration   2: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 52, 52, 52, 52, 52, 52, 52 ms/op
Iteration   3: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 51, 52, 52, 52, 52, 52, 52 ms/op


Result "readXxh64":
  N = 162
  mean =     56.837 ±(99.9%) 1.842 ms/op

  Histogram, ms/op:
    [ 40.000,  45.000) = 0 
    [ 45.000,  50.000) = 5 
    [ 50.000,  55.000) = 70 
    [ 55.000,  60.000) = 60 
    [ 60.000,  65.000) = 19 
    [ 65.000,  70.000) = 4 
    [ 70.000,  75.000) = 0 
    [ 75.000,  80.000) = 2 
    [ 80.000,  85.000) = 0 
    [ 85.000,  90.000) = 0 
    [ 90.000,  95.000) = 1 
    [ 95.000, 100.000) = 0 
    [100.000, 105.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     49.807 ms/op
     p(50.0000) =     57.868 ms/op
     p(90.0000) =     63.806 ms/op
     p(95.0000) =     65.002 ms/op
     p(99.0000) =     96.227 ms/op
     p(99.9000) =    104.071 ms/op
     p(99.9900) =    104.071 ms/op
     p(99.9990) =    104.071 ms/op
     p(99.9999) =    104.071 ms/op
    p(100.0000) =    104.071 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 55.60% complete, ETA 00:50:41
# Fork: 1 of 3
# Warmup Iteration   1: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 71, 100, 111, 111, 111, 111, 111 ms/op
# Warmup Iteration   2: n = 15, mean = 71 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 71, 72, 72, 72, 72, 72, 72 ms/op
# Warmup Iteration   3: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 76, 103, 115, 115, 115, 115, 115 ms/op
Iteration   1: n = 15, mean = 71 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 71, 72, 72, 72, 72, 72, 72 ms/op
Iteration   2: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 70, 70, 71, 71, 71, 71, 71 ms/op
Iteration   3: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 71, 71, 71, 71, 71, 71, 71 ms/op

# Run progress: 55.75% complete, ETA 00:50:29
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 98, 174, 180, 180, 180, 180, 180 ms/op
# Warmup Iteration   2: n = 12, mean = 88 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 88, 88, 88, 88, 88, 88, 88 ms/op
# Warmup Iteration   3: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 88, 90, 91, 91, 91, 91, 91 ms/op
Iteration   1: n = 11, mean = 98 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 90, 131, 137, 137, 137, 137, 137 ms/op
Iteration   2: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 80, 82, 121, 123, 123, 123, 123, 123 ms/op
Iteration   3: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 81, 99, 140, 142, 142, 142, 142, 142 ms/op

# Run progress: 55.89% complete, ETA 00:50:18
# Fork: 3 of 3
# Warmup Iteration   1: n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 100, 193, 193, 193, 193, 193, 193 ms/op
# Warmup Iteration   2: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 82, 82, 82, 82, 82, 82, 82 ms/op
# Warmup Iteration   3: n = 11, mean = 97 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 88, 132, 136, 136, 136, 136, 136 ms/op
Iteration   1: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 82, 145, 148, 148, 148, 148, 148 ms/op
Iteration   2: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 100, 140, 143, 143, 143, 143, 143 ms/op
Iteration   3: n = 11, mean = 96 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 81, 94, 131, 135, 135, 135, 135, 135 ms/op


Result "readXxh64":
  N = 109
  mean =     86.545 ±(99.9%) 6.150 ms/op

  Histogram, ms/op:
    [ 60.000,  65.000) = 0 
    [ 65.000,  70.000) = 18 
    [ 70.000,  75.000) = 27 
    [ 75.000,  80.000) = 0 
    [ 80.000,  85.000) = 20 
    [ 85.000,  90.000) = 6 
    [ 90.000,  95.000) = 5 
    [ 95.000, 100.000) = 9 
    [100.000, 105.000) = 9 
    [105.000, 110.000) = 5 
    [110.000, 115.000) = 2 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 1 
    [125.000, 130.000) = 1 
    [130.000, 135.000) = 2 
    [135.000, 140.000) = 1 
    [140.000, 145.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     69.861 ms/op
     p(50.0000) =     81.658 ms/op
     p(90.0000) =    108.659 ms/op
     p(95.0000) =    132.383 ms/op
     p(99.0000) =    147.849 ms/op
     p(99.9000) =    148.374 ms/op
     p(99.9900) =    148.374 ms/op
     p(99.9990) =    148.374 ms/op
     p(99.9999) =    148.374 ms/op
    p(100.0000) =    148.374 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 56.03% complete, ETA 00:50:07
# Fork: 1 of 3
# Warmup Iteration   1: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 63, 125, 160, 160, 160, 160, 160 ms/op
# Warmup Iteration   2: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 55, 57, 57, 57, 57, 57, 57 ms/op
# Warmup Iteration   3: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 55, 55, 55, 55, 55, 55, 55 ms/op
Iteration   1: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 72, 100, 112, 112, 112, 112, 112 ms/op
Iteration   2: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 65, 91, 110, 110, 110, 110, 110 ms/op
Iteration   3: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 63, 106, 115, 115, 115, 115, 115 ms/op

# Run progress: 56.18% complete, ETA 00:49:55
# Fork: 2 of 3
# Warmup Iteration   1: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 72, 137, 163, 163, 163, 163, 163 ms/op
# Warmup Iteration   2: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 64, 93, 109, 109, 109, 109, 109 ms/op
# Warmup Iteration   3: n = 18, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 56, 64, 64, 64, 64, 64, 64 ms/op
Iteration   1: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 72, 92, 94, 94, 94, 94, 94 ms/op
Iteration   2: n = 16, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 64, 80, 111, 111, 111, 111, 111 ms/op
Iteration   3: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 73, 73, 114, 115, 115, 115, 115, 115 ms/op

# Run progress: 56.32% complete, ETA 00:49:43
# Fork: 3 of 3
# Warmup Iteration   1: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 59, 90, 106, 106, 106, 106, 106 ms/op
# Warmup Iteration   2: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 56, 56, 57, 57, 57, 57, 57 ms/op
# Warmup Iteration   3: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 63, 87, 106, 106, 106, 106, 106 ms/op
Iteration   1: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 55, 56, 56, 56, 56, 56, 56 ms/op
Iteration   2: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 55, 55, 56, 56, 56, 56, 56 ms/op
Iteration   3: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 55, 55, 56, 56, 56, 56, 56 ms/op


Result "readXxh64":
  N = 143
  mean =     66.003 ±(99.9%) 3.814 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 14 
    [ 55.000,  60.000) = 43 
    [ 60.000,  65.000) = 26 
    [ 65.000,  70.000) = 15 
    [ 70.000,  75.000) = 28 
    [ 75.000,  80.000) = 3 
    [ 80.000,  85.000) = 1 
    [ 85.000,  90.000) = 3 
    [ 90.000,  95.000) = 3 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 0 
    [105.000, 110.000) = 1 
    [110.000, 115.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =     54.460 ms/op
     p(50.0000) =     63.111 ms/op
     p(90.0000) =     80.557 ms/op
     p(95.0000) =     96.626 ms/op
     p(99.0000) =    115.286 ms/op
     p(99.9000) =    115.343 ms/op
     p(99.9900) =    115.343 ms/op
     p(99.9990) =    115.343 ms/op
     p(99.9999) =    115.343 ms/op
    p(100.0000) =    115.343 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 56.47% complete, ETA 00:49:31
# Fork: 1 of 3
# Warmup Iteration   1: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 95, 132, 134, 134, 134, 134, 134 ms/op
# Warmup Iteration   2: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 90, 119, 124, 124, 124, 124, 124 ms/op
# Warmup Iteration   3: n = 11, mean = 95 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 91, 117, 119, 119, 119, 119, 119 ms/op
Iteration   1: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 101, 142, 146, 146, 146, 146, 146 ms/op
Iteration   2: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 90, 90, 90, 90, 90, 90, 90 ms/op
Iteration   3: n = 11, mean = 95 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 90, 118, 118, 118, 118, 118, 118 ms/op

# Run progress: 56.61% complete, ETA 00:49:20
# Fork: 2 of 3
# Warmup Iteration   1: n = 11, mean = 96 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 78, 88, 165, 179, 179, 179, 179, 179 ms/op
# Warmup Iteration   2: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 76, 77, 77, 77, 77, 77, 77 ms/op
# Warmup Iteration   3: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 105, 127, 129, 129, 129, 129, 129 ms/op
Iteration   1: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 84, 87, 128, 135, 135, 135, 135, 135 ms/op
Iteration   2: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 76, 78, 78, 78, 78, 78, 78 ms/op
Iteration   3: n = 11, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 88, 133, 133, 133, 133, 133, 133 ms/op

# Run progress: 56.75% complete, ETA 00:49:09
# Fork: 3 of 3
# Warmup Iteration   1: n = 11, mean = 96 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 86, 167, 182, 182, 182, 182, 182 ms/op
# Warmup Iteration   2: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 74, 86, 113, 120, 120, 120, 120, 120 ms/op
# Warmup Iteration   3: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 85, 115, 126, 126, 126, 126, 126 ms/op
Iteration   1: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 75, 75, 75, 75, 75, 75, 75 ms/op
Iteration   2: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 86, 143, 144, 144, 144, 144, 144 ms/op
Iteration   3: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 80, 101, 144, 145, 145, 145, 145, 145 ms/op


Result "readXxh64":
  N = 103
  mean =     91.741 ±(99.9%) 5.736 ms/op

  Histogram, ms/op:
    [ 70.000,  75.000) = 14 
    [ 75.000,  80.000) = 14 
    [ 80.000,  85.000) = 3 
    [ 85.000,  90.000) = 38 
    [ 90.000,  95.000) = 7 
    [ 95.000, 100.000) = 2 
    [100.000, 105.000) = 11 
    [105.000, 110.000) = 2 
    [110.000, 115.000) = 1 
    [115.000, 120.000) = 3 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 3 
    [135.000, 140.000) = 2 
    [140.000, 145.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     74.580 ms/op
     p(50.0000) =     87.949 ms/op
     p(90.0000) =    117.965 ms/op
     p(95.0000) =    134.847 ms/op
     p(99.0000) =    145.972 ms/op
     p(99.9000) =    146.014 ms/op
     p(99.9900) =    146.014 ms/op
     p(99.9990) =    146.014 ms/op
     p(99.9999) =    146.014 ms/op
    p(100.0000) =    146.014 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 56.90% complete, ETA 00:48:58
# Fork: 1 of 3
# Warmup Iteration   1: n = 5, mean = 166 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 135, 261, 261, 261, 261, 261, 261 ms/op
# Warmup Iteration   2: n = 6, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 143, 205, 205, 205, 205, 205, 205 ms/op
# Warmup Iteration   3: n = 6, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 139, 199, 199, 199, 199, 199, 199 ms/op
Iteration   1: n = 6, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 155, 214, 214, 214, 214, 214, 214 ms/op
Iteration   2: n = 8, mean = 126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 117, 127, 135, 135, 135, 135, 135, 135 ms/op
Iteration   3: n = 7, mean = 142 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 117, 129, 189, 189, 189, 189, 189, 189 ms/op

# Run progress: 57.04% complete, ETA 00:48:46
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 135, 207, 207, 207, 207, 207, 207 ms/op
# Warmup Iteration   2: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 119, 119, 198, 198, 198, 198, 198, 198 ms/op
# Warmup Iteration   3: n = 6, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 136, 207, 207, 207, 207, 207, 207 ms/op
Iteration   1: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 121, 137, 202, 202, 202, 202, 202, 202 ms/op
Iteration   2: n = 7, mean = 148 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 120, 137, 206, 206, 206, 206, 206, 206 ms/op
Iteration   3: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 138, 202, 202, 202, 202, 202, 202 ms/op

# Run progress: 57.18% complete, ETA 00:48:34
# Fork: 3 of 3
# Warmup Iteration   1: n = 6, mean = 151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 121, 137, 208, 208, 208, 208, 208, 208 ms/op
# Warmup Iteration   2: n = 8, mean = 123 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 120, 122, 128, 128, 128, 128, 128, 128 ms/op
# Warmup Iteration   3: n = 8, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 121, 122, 123, 123, 123, 123, 123, 123 ms/op
Iteration   1: n = 8, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 120, 121, 127, 127, 127, 127, 127, 127 ms/op
Iteration   2: n = 7, mean = 148 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 119, 138, 199, 199, 199, 199, 199, 199 ms/op
Iteration   3: n = 6, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 147, 202, 202, 202, 202, 202, 202 ms/op


Result "write":
  N = 63
  mean =    142.733 ±(99.9%) 11.712 ms/op

  Histogram, ms/op:
    [110.000, 120.000) = 9 
    [120.000, 130.000) = 13 
    [130.000, 140.000) = 23 
    [140.000, 150.000) = 3 
    [150.000, 160.000) = 2 
    [160.000, 170.000) = 1 
    [170.000, 180.000) = 4 
    [180.000, 190.000) = 1 
    [190.000, 200.000) = 2 
    [200.000, 210.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =    116.654 ms/op
     p(50.0000) =    135.004 ms/op
     p(90.0000) =    197.919 ms/op
     p(95.0000) =    202.375 ms/op
     p(99.0000) =    213.647 ms/op
     p(99.9000) =    213.647 ms/op
     p(99.9900) =    213.647 ms/op
     p(99.9990) =    213.647 ms/op
     p(99.9999) =    213.647 ms/op
    p(100.0000) =    213.647 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = false, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 57.33% complete, ETA 00:48:22
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1005 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005 ms/op
# Warmup Iteration   2: n = 1, mean = 967 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 967, 967, 967, 967, 967, 967, 967, 967 ms/op
# Warmup Iteration   3: n = 1, mean = 1009 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009 ms/op
Iteration   1: n = 1, mean = 1018 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018 ms/op
Iteration   2: n = 2, mean = 755 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 736, 755, 775, 775, 775, 775, 775, 775 ms/op
Iteration   3: n = 2, mean = 760 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 736, 760, 784, 784, 784, 784, 784, 784 ms/op

# Run progress: 57.47% complete, ETA 00:48:11
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 960 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 960, 960, 960, 960, 960, 960, 960, 960 ms/op
# Warmup Iteration   2: n = 2, mean = 741 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 734, 741, 748, 748, 748, 748, 748, 748 ms/op
# Warmup Iteration   3: n = 2, mean = 922 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 914, 922, 929, 929, 929, 929, 929, 929 ms/op
Iteration   1: n = 1, mean = 966 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 966, 966, 966, 966, 966, 966, 966, 966 ms/op
Iteration   2: n = 2, mean = 795 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 741, 795, 848, 848, 848, 848, 848, 848 ms/op
Iteration   3: n = 2, mean = 824 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 749, 824, 899, 899, 899, 899, 899, 899 ms/op

# Run progress: 57.61% complete, ETA 00:48:02
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 974 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 974, 974, 974, 974, 974, 974, 974, 974 ms/op
# Warmup Iteration   2: n = 2, mean = 810 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 727, 810, 892, 892, 892, 892, 892, 892 ms/op
# Warmup Iteration   3: n = 2, mean = 731 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 729, 731, 733, 733, 733, 733, 733, 733 ms/op
Iteration   1: n = 2, mean = 908 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 883, 908, 932, 932, 932, 932, 932, 932 ms/op
Iteration   2: n = 2, mean = 776 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 737, 776, 815, 815, 815, 815, 815, 815 ms/op
Iteration   3: n = 2, mean = 812 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 735, 812, 888, 888, 888, 888, 888, 888 ms/op


Result "write":
  N = 16
  mean =    827.654 ±(99.9%) 94.973 ms/op

  Histogram, ms/op:
    [ 700.000,  725.000) = 0 
    [ 725.000,  750.000) = 6 
    [ 750.000,  775.000) = 1 
    [ 775.000,  800.000) = 1 
    [ 800.000,  825.000) = 1 
    [ 825.000,  850.000) = 1 
    [ 850.000,  875.000) = 0 
    [ 875.000,  900.000) = 3 
    [ 900.000,  925.000) = 0 
    [ 925.000,  950.000) = 1 
    [ 950.000,  975.000) = 1 
    [ 975.000, 1000.000) = 0 
    [1000.000, 1025.000) = 1 
    [1025.000, 1050.000) = 0 
    [1050.000, 1075.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    735.052 ms/op
     p(50.0000) =    799.539 ms/op
     p(90.0000) =    981.467 ms/op
     p(95.0000) =   1018.167 ms/op
     p(99.0000) =   1018.167 ms/op
     p(99.9000) =   1018.167 ms/op
     p(99.9900) =   1018.167 ms/op
     p(99.9990) =   1018.167 ms/op
     p(99.9999) =   1018.167 ms/op
    p(100.0000) =   1018.167 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.write
# Parameters: (intKey = false, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 57.76% complete, ETA 00:47:52
# Fork: 1 of 3
# Warmup Iteration   1: n = 3, mean = 375 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 276, 420, 428, 428, 428, 428, 428, 428 ms/op
# Warmup Iteration   2: n = 4, mean = 333 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 279, 308, 436, 436, 436, 436, 436, 436 ms/op
# Warmup Iteration   3: n = 3, mean = 331 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 277, 318, 398, 398, 398, 398, 398, 398 ms/op
Iteration   1: n = 4, mean = 270 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 249, 266, 297, 297, 297, 297, 297, 297 ms/op
Iteration   2: n = 3, mean = 363 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 279, 404, 405, 405, 405, 405, 405, 405 ms/op
Iteration   3: n = 4, mean = 283 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 248, 283, 317, 317, 317, 317, 317, 317 ms/op

# Run progress: 57.90% complete, ETA 00:47:41
# Fork: 2 of 3
# Warmup Iteration   1: n = 3, mean = 334 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 255, 357, 391, 391, 391, 391, 391, 391 ms/op
# Warmup Iteration   2: n = 3, mean = 327 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 322, 328, 331, 331, 331, 331, 331, 331 ms/op
# Warmup Iteration   3: n = 4, mean = 255 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 241, 244, 290, 290, 290, 290, 290, 290 ms/op
Iteration   1: n = 4, mean = 290 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 254, 280, 343, 343, 343, 343, 343, 343 ms/op
Iteration   2: n = 4, mean = 273 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 245, 258, 332, 332, 332, 332, 332, 332 ms/op
Iteration   3: n = 4, mean = 291 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 252, 278, 357, 357, 357, 357, 357, 357 ms/op

# Run progress: 58.05% complete, ETA 00:47:29
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 342 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 263, 350, 412, 412, 412, 412, 412, 412 ms/op
# Warmup Iteration   2: n = 4, mean = 251 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 243, 247, 268, 268, 268, 268, 268, 268 ms/op
# Warmup Iteration   3: n = 4, mean = 250 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 244, 250, 255, 255, 255, 255, 255, 255 ms/op
Iteration   1: n = 3, mean = 321 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 277, 341, 344, 344, 344, 344, 344, 344 ms/op
Iteration   2: n = 4, mean = 287 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 257, 273, 344, 344, 344, 344, 344, 344 ms/op
Iteration   3: n = 4, mean = 285 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 246, 275, 345, 345, 345, 345, 345, 345 ms/op


Result "write":
  N = 34
  mean =    293.108 ±(99.9%) 27.277 ms/op

  Histogram, ms/op:
    [200.000, 225.000) = 0 
    [225.000, 250.000) = 5 
    [250.000, 275.000) = 10 
    [275.000, 300.000) = 9 
    [300.000, 325.000) = 1 
    [325.000, 350.000) = 6 
    [350.000, 375.000) = 1 
    [375.000, 400.000) = 0 
    [400.000, 425.000) = 2 
    [425.000, 450.000) = 0 
    [450.000, 475.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    244.842 ms/op
     p(50.0000) =    277.348 ms/op
     p(90.0000) =    350.749 ms/op
     p(95.0000) =    404.488 ms/op
     p(99.0000) =    405.275 ms/op
     p(99.9000) =    405.275 ms/op
     p(99.9900) =    405.275 ms/op
     p(99.9990) =    405.275 ms/op
     p(99.9999) =    405.275 ms/op
    p(100.0000) =    405.275 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.write
# Parameters: (intKey = false, metaSync = false, num = 1000000, sequential = false, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 58.19% complete, ETA 00:47:18
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1218 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218 ms/op
# Warmup Iteration   2: n = 1, mean = 1237 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237 ms/op
# Warmup Iteration   3: n = 1, mean = 1267 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267 ms/op
Iteration   1: n = 1, mean = 1105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105 ms/op
Iteration   2: n = 1, mean = 1281 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281 ms/op
Iteration   3: n = 1, mean = 1197 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197 ms/op

# Run progress: 58.33% complete, ETA 00:47:07
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1265 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265 ms/op
# Warmup Iteration   2: n = 1, mean = 1434 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434 ms/op
# Warmup Iteration   3: n = 1, mean = 1028 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028 ms/op
Iteration   1: n = 1, mean = 1074 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074 ms/op
Iteration   2: n = 1, mean = 1302 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302 ms/op
Iteration   3: n = 1, mean = 1082 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082 ms/op

# Run progress: 58.48% complete, ETA 00:46:56
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1353 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353 ms/op
# Warmup Iteration   2: n = 1, mean = 1221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221 ms/op
# Warmup Iteration   3: n = 1, mean = 1016 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016 ms/op
Iteration   1: n = 1, mean = 1210 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210 ms/op
Iteration   2: n = 1, mean = 1149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149 ms/op
Iteration   3: n = 1, mean = 1103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103 ms/op


Result "write":
  N = 9
  mean =   1167.182 ±(99.9%) 143.444 ms/op

  Histogram, ms/op:
    [1000.000, 1025.000) = 0 
    [1025.000, 1050.000) = 0 
    [1050.000, 1075.000) = 1 
    [1075.000, 1100.000) = 1 
    [1100.000, 1125.000) = 2 
    [1125.000, 1150.000) = 1 
    [1150.000, 1175.000) = 0 
    [1175.000, 1200.000) = 1 
    [1200.000, 1225.000) = 1 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 0 
    [1275.000, 1300.000) = 1 
    [1300.000, 1325.000) = 1 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1073.742 ms/op
     p(50.0000) =   1149.239 ms/op
     p(90.0000) =   1302.331 ms/op
     p(95.0000) =   1302.331 ms/op
     p(99.0000) =   1302.331 ms/op
     p(99.9000) =   1302.331 ms/op
     p(99.9900) =   1302.331 ms/op
     p(99.9990) =   1302.331 ms/op
     p(99.9999) =   1302.331 ms/op
    p(100.0000) =   1302.331 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 58.62% complete, ETA 00:46:45
# Fork: 1 of 3
# Warmup Iteration   1: n = 6, mean = 183 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 179, 179, 198, 198, 198, 198, 198, 198 ms/op
# Warmup Iteration   2: n = 6, mean = 177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 176, 178, 178, 178, 178, 178, 178 ms/op
# Warmup Iteration   3: n = 6, mean = 194 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 178, 179, 264, 264, 264, 264, 264, 264 ms/op
Iteration   1: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 177, 178, 184, 184, 184, 184, 184, 184 ms/op
Iteration   2: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 178, 183, 183, 183, 183, 183, 183 ms/op
Iteration   3: n = 5, mean = 214 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 192, 203, 271, 271, 271, 271, 271, 271 ms/op

# Run progress: 58.76% complete, ETA 00:46:42
# Fork: 2 of 3
# Warmup Iteration   1: n = 5, mean = 266 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 212, 286, 334, 334, 334, 334, 334, 334 ms/op
# Warmup Iteration   2: n = 5, mean = 207 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 197, 206, 222, 222, 222, 222, 222, 222 ms/op
# Warmup Iteration   3: n = 5, mean = 236 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 201, 238, 272, 272, 272, 272, 272, 272 ms/op
Iteration   1: n = 5, mean = 238 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 214, 238, 266, 266, 266, 266, 266, 266 ms/op
Iteration   2: n = 5, mean = 226 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 210, 214, 282, 282, 282, 282, 282, 282 ms/op
Iteration   3: n = 6, mean = 194 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 187, 192, 203, 203, 203, 203, 203, 203 ms/op

# Run progress: 58.91% complete, ETA 00:46:38
# Fork: 3 of 3
# Warmup Iteration   1: n = 5, mean = 216 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 185, 189, 261, 261, 261, 261, 261, 261 ms/op
# Warmup Iteration   2: n = 7, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 156, 163, 171, 171, 171, 171, 171, 171 ms/op
# Warmup Iteration   3: n = 5, mean = 207 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 180, 209, 250, 250, 250, 250, 250, 250 ms/op
Iteration   1: n = 6, mean = 189 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 174, 275, 275, 275, 275, 275, 275 ms/op
Iteration   2: n = 6, mean = 171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 163, 164, 208, 208, 208, 208, 208, 208 ms/op
Iteration   3: n = 7, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 162, 163, 164, 164, 164, 164, 164, 164 ms/op


Result "readCrc":
  N = 52
  mean =    192.242 ±(99.9%) 15.268 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 0 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 2 
    [162.500, 175.000) = 15 
    [175.000, 187.500) = 13 
    [187.500, 200.000) = 6 
    [200.000, 212.500) = 6 
    [212.500, 225.000) = 4 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 1 
    [250.000, 262.500) = 1 
    [262.500, 275.000) = 3 
    [275.000, 287.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    160.694 ms/op
     p(50.0000) =    178.651 ms/op
     p(90.0000) =    251.632 ms/op
     p(95.0000) =    272.001 ms/op
     p(99.0000) =    281.543 ms/op
     p(99.9000) =    281.543 ms/op
     p(99.9900) =    281.543 ms/op
     p(99.9990) =    281.543 ms/op
     p(99.9999) =    281.543 ms/op
    p(100.0000) =    281.543 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 59.05% complete, ETA 00:46:33
# Fork: 1 of 3
# Warmup Iteration   1: n = 5, mean = 212 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 184, 195, 282, 282, 282, 282, 282, 282 ms/op
# Warmup Iteration   2: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 170, 170, 172, 172, 172, 172, 172, 172 ms/op
# Warmup Iteration   3: n = 5, mean = 236 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 215, 226, 274, 274, 274, 274, 274, 274 ms/op
Iteration   1: n = 5, mean = 209 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 190, 191, 279, 279, 279, 279, 279, 279 ms/op
Iteration   2: n = 6, mean = 174 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 172, 175, 177, 177, 177, 177, 177, 177 ms/op
Iteration   3: n = 6, mean = 183 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 172, 172, 236, 236, 236, 236, 236, 236 ms/op

# Run progress: 59.20% complete, ETA 00:46:29
# Fork: 2 of 3
# Warmup Iteration   1: n = 5, mean = 213 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 189, 192, 284, 284, 284, 284, 284, 284 ms/op
# Warmup Iteration   2: n = 6, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 172, 173, 191, 191, 191, 191, 191, 191 ms/op
# Warmup Iteration   3: n = 5, mean = 226 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 195, 213, 278, 278, 278, 278, 278, 278 ms/op
Iteration   1: n = 5, mean = 233 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 195, 223, 284, 284, 284, 284, 284, 284 ms/op
Iteration   2: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 172, 174, 195, 195, 195, 195, 195, 195 ms/op
Iteration   3: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 168, 172, 187, 187, 187, 187, 187, 187 ms/op

# Run progress: 59.34% complete, ETA 00:46:25
# Fork: 3 of 3
# Warmup Iteration   1: n = 5, mean = 214 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 187, 199, 280, 280, 280, 280, 280, 280 ms/op
# Warmup Iteration   2: n = 6, mean = 180 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 173, 182, 186, 186, 186, 186, 186, 186 ms/op
# Warmup Iteration   3: n = 6, mean = 180 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 173, 178, 199, 199, 199, 199, 199, 199 ms/op
Iteration   1: n = 5, mean = 207 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 185, 198, 261, 261, 261, 261, 261, 261 ms/op
Iteration   2: n = 6, mean = 185 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 174, 181, 209, 209, 209, 209, 209, 209 ms/op
Iteration   3: n = 6, mean = 185 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 178, 182, 202, 202, 202, 202, 202, 202 ms/op


Result "readCrc":
  N = 51
  mean =    190.707 ±(99.9%) 13.625 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 0 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 17 
    [175.000, 187.500) = 15 
    [187.500, 200.000) = 11 
    [200.000, 212.500) = 2 
    [212.500, 225.000) = 1 
    [225.000, 237.500) = 1 
    [237.500, 250.000) = 0 
    [250.000, 262.500) = 1 
    [262.500, 275.000) = 1 
    [275.000, 287.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =    168.034 ms/op
     p(50.0000) =    181.142 ms/op
     p(90.0000) =    233.518 ms/op
     p(95.0000) =    272.368 ms/op
     p(99.0000) =    284.164 ms/op
     p(99.9000) =    284.164 ms/op
     p(99.9900) =    284.164 ms/op
     p(99.9990) =    284.164 ms/op
     p(99.9999) =    284.164 ms/op
    p(100.0000) =    284.164 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 59.48% complete, ETA 00:46:21
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 273 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 222, 277, 316, 316, 316, 316, 316, 316 ms/op
# Warmup Iteration   2: n = 5, mean = 227 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 204, 219, 284, 284, 284, 284, 284, 284 ms/op
# Warmup Iteration   3: n = 4, mean = 257 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 214, 249, 315, 315, 315, 315, 315, 315 ms/op
Iteration   1: n = 4, mean = 283 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 226, 280, 348, 348, 348, 348, 348, 348 ms/op
Iteration   2: n = 5, mean = 202 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 192, 203, 207, 207, 207, 207, 207, 207 ms/op
Iteration   3: n = 5, mean = 204 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 187, 201, 232, 232, 232, 232, 232, 232 ms/op

# Run progress: 59.63% complete, ETA 00:46:18
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 260 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 216, 263, 298, 298, 298, 298, 298, 298 ms/op
# Warmup Iteration   2: n = 5, mean = 248 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 214, 215, 319, 319, 319, 319, 319, 319 ms/op
# Warmup Iteration   3: n = 5, mean = 229 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 196, 218, 295, 295, 295, 295, 295, 295 ms/op
Iteration   1: n = 5, mean = 234 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 190, 200, 299, 299, 299, 299, 299, 299 ms/op
Iteration   2: n = 4, mean = 253 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 212, 253, 295, 295, 295, 295, 295, 295 ms/op
Iteration   3: n = 5, mean = 223 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 207, 216, 259, 259, 259, 259, 259, 259 ms/op

# Run progress: 59.77% complete, ETA 00:46:15
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 264 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 221, 261, 314, 314, 314, 314, 314, 314 ms/op
# Warmup Iteration   2: n = 5, mean = 204 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 192, 204, 222, 222, 222, 222, 222, 222 ms/op
# Warmup Iteration   3: n = 5, mean = 211 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 198, 199, 249, 249, 249, 249, 249, 249 ms/op
Iteration   1: n = 5, mean = 213 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 200, 204, 232, 232, 232, 232, 232, 232 ms/op
Iteration   2: n = 5, mean = 202 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 193, 201, 215, 215, 215, 215, 215, 215 ms/op
Iteration   3: n = 5, mean = 219 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 200, 204, 286, 286, 286, 286, 286, 286 ms/op


Result "readCrc":
  N = 43
  mean =    223.993 ±(99.9%) 20.315 ms/op

  Histogram, ms/op:
    [100.000, 125.000) = 0 
    [125.000, 150.000) = 0 
    [150.000, 175.000) = 0 
    [175.000, 200.000) = 9 
    [200.000, 225.000) = 20 
    [225.000, 250.000) = 5 
    [250.000, 275.000) = 2 
    [275.000, 300.000) = 6 
    [300.000, 325.000) = 0 
    [325.000, 350.000) = 1 
    [350.000, 375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    187.433 ms/op
     p(50.0000) =    206.832 ms/op
     p(90.0000) =    287.939 ms/op
     p(95.0000) =    298.425 ms/op
     p(99.0000) =    348.127 ms/op
     p(99.9000) =    348.127 ms/op
     p(99.9900) =    348.127 ms/op
     p(99.9990) =    348.127 ms/op
     p(99.9999) =    348.127 ms/op
    p(100.0000) =    348.127 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 59.91% complete, ETA 00:46:12
# Fork: 1 of 3
# Warmup Iteration   1: n = 5, mean = 224 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 195, 200, 325, 325, 325, 325, 325, 325 ms/op
# Warmup Iteration   2: n = 5, mean = 203 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 190, 191, 251, 251, 251, 251, 251, 251 ms/op
# Warmup Iteration   3: n = 4, mean = 258 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 214, 258, 300, 300, 300, 300, 300, 300 ms/op
Iteration   1: n = 4, mean = 259 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 214, 259, 304, 304, 304, 304, 304, 304 ms/op
Iteration   2: n = 5, mean = 239 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 202, 215, 347, 347, 347, 347, 347, 347 ms/op
Iteration   3: n = 5, mean = 225 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 196, 214, 289, 289, 289, 289, 289, 289 ms/op

# Run progress: 60.06% complete, ETA 00:46:07
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 265 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 214, 272, 300, 300, 300, 300, 300, 300 ms/op
# Warmup Iteration   2: n = 5, mean = 206 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 193, 204, 218, 218, 218, 218, 218, 218 ms/op
# Warmup Iteration   3: n = 6, mean = 193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 192, 193, 194, 194, 194, 194, 194, 194 ms/op
Iteration   1: n = 4, mean = 256 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 218, 252, 300, 300, 300, 300, 300, 300 ms/op
Iteration   2: n = 5, mean = 229 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 195, 218, 290, 290, 290, 290, 290, 290 ms/op
Iteration   3: n = 5, mean = 231 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 216, 224, 267, 267, 267, 267, 267, 267 ms/op

# Run progress: 60.20% complete, ETA 00:46:03
# Fork: 3 of 3
# Warmup Iteration   1: n = 5, mean = 204 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 197, 201, 220, 220, 220, 220, 220, 220 ms/op
# Warmup Iteration   2: n = 6, mean = 195 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 189, 195, 200, 200, 200, 200, 200, 200 ms/op
# Warmup Iteration   3: n = 4, mean = 259 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 224, 249, 317, 317, 317, 317, 317, 317 ms/op
Iteration   1: n = 5, mean = 204 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 199, 200, 220, 220, 220, 220, 220, 220 ms/op
Iteration   2: n = 5, mean = 201 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 197, 199, 209, 209, 209, 209, 209, 209 ms/op
Iteration   3: n = 5, mean = 220 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 192, 200, 305, 305, 305, 305, 305, 305 ms/op


Result "readCrc":
  N = 43
  mean =    227.858 ±(99.9%) 20.600 ms/op

  Histogram, ms/op:
    [100.000, 125.000) = 0 
    [125.000, 150.000) = 0 
    [150.000, 175.000) = 0 
    [175.000, 200.000) = 9 
    [200.000, 225.000) = 24 
    [225.000, 250.000) = 1 
    [250.000, 275.000) = 2 
    [275.000, 300.000) = 4 
    [300.000, 325.000) = 2 
    [325.000, 350.000) = 1 
    [350.000, 375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    192.152 ms/op
     p(50.0000) =    214.958 ms/op
     p(90.0000) =    295.908 ms/op
     p(95.0000) =    304.821 ms/op
     p(99.0000) =    347.079 ms/op
     p(99.9000) =    347.079 ms/op
     p(99.9900) =    347.079 ms/op
     p(99.9990) =    347.079 ms/op
     p(99.9999) =    347.079 ms/op
    p(100.0000) =    347.079 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 60.34% complete, ETA 00:45:59
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 9043 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9043, 9043, 9043, 9043, 9043, 9043, 9043, 9043 ms/op
# Warmup Iteration   2: n = 1, mean = 9999 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999 ms/op
# Warmup Iteration   3: n = 1, mean = 10670 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10670, 10670, 10670, 10670, 10670, 10670, 10670, 10670 ms/op
Iteration   1: n = 1, mean = 10117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10117, 10117, 10117, 10117, 10117, 10117, 10117, 10117 ms/op
Iteration   2: n = 1, mean = 10016 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10016, 10016, 10016, 10016, 10016, 10016, 10016, 10016 ms/op
Iteration   3: 
Bytes	before-close	330301440	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	330301440	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 9479 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479 ms/op

# Run progress: 60.49% complete, ETA 00:46:29
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 9714 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9714, 9714, 9714, 9714, 9714, 9714, 9714, 9714 ms/op
# Warmup Iteration   2: n = 1, mean = 9429 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9429, 9429, 9429, 9429, 9429, 9429, 9429, 9429 ms/op
# Warmup Iteration   3: n = 1, mean = 9311 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9311, 9311, 9311, 9311, 9311, 9311, 9311, 9311 ms/op
Iteration   1: n = 1, mean = 9429 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9429, 9429, 9429, 9429, 9429, 9429, 9429, 9429 ms/op
Iteration   2: n = 1, mean = 9009 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9009, 9009, 9009, 9009, 9009, 9009, 9009, 9009 ms/op
Iteration   3: 
Bytes	before-close	330301440	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	330301440	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 9882 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9882, 9882, 9882, 9882, 9882, 9882, 9882, 9882 ms/op

# Run progress: 60.63% complete, ETA 00:46:57
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 9731 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9731, 9731, 9731, 9731, 9731, 9731, 9731, 9731 ms/op
# Warmup Iteration   2: n = 1, mean = 9194 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9194, 9194, 9194, 9194, 9194, 9194, 9194, 9194 ms/op
# Warmup Iteration   3: n = 1, mean = 9513 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9513, 9513, 9513, 9513, 9513, 9513, 9513, 9513 ms/op
Iteration   1: n = 1, mean = 9714 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9714, 9714, 9714, 9714, 9714, 9714, 9714, 9714 ms/op
Iteration   2: n = 1, mean = 9580 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9580, 9580, 9580, 9580, 9580, 9580, 9580, 9580 ms/op
Iteration   3: 
Bytes	before-close	330301440	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	330301440	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 9865 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9865, 9865, 9865, 9865, 9865, 9865, 9865, 9865 ms/op


Result "readKey":
  N = 9
  mean =   9676.725 ±(99.9%) 576.886 ms/op

  Histogram, ms/op:
    [ 9000.000,  9125.000) = 1 
    [ 9125.000,  9250.000) = 0 
    [ 9250.000,  9375.000) = 0 
    [ 9375.000,  9500.000) = 2 
    [ 9500.000,  9625.000) = 1 
    [ 9625.000,  9750.000) = 1 
    [ 9750.000,  9875.000) = 1 
    [ 9875.000, 10000.000) = 1 
    [10000.000, 10125.000) = 2 
    [10125.000, 10250.000) = 0 
    [10250.000, 10375.000) = 0 
    [10375.000, 10500.000) = 0 
    [10500.000, 10625.000) = 0 
    [10625.000, 10750.000) = 0 
    [10750.000, 10875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   9009.365 ms/op
     p(50.0000) =   9714.008 ms/op
     p(90.0000) =  10116.661 ms/op
     p(95.0000) =  10116.661 ms/op
     p(99.0000) =  10116.661 ms/op
     p(99.9000) =  10116.661 ms/op
     p(99.9900) =  10116.661 ms/op
     p(99.9990) =  10116.661 ms/op
     p(99.9999) =  10116.661 ms/op
    p(100.0000) =  10116.661 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readKey
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 60.78% complete, ETA 00:47:26
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 9999 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9999, 9999, 9999, 9999, 9999, 9999, 9999, 9999 ms/op
# Warmup Iteration   2: n = 1, mean = 10972 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10972, 10972, 10972, 10972, 10972, 10972, 10972, 10972 ms/op
# Warmup Iteration   3: n = 1, mean = 11358 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11358, 11358, 11358, 11358, 11358, 11358, 11358, 11358 ms/op
Iteration   1: n = 1, mean = 10301 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10301, 10301, 10301, 10301, 10301, 10301, 10301, 10301 ms/op
Iteration   2: n = 1, mean = 10335 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10335, 10335, 10335, 10335, 10335, 10335, 10335, 10335 ms/op
Iteration   3: 
Bytes	before-close	118489088	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	118489088	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 10301 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10301, 10301, 10301, 10301, 10301, 10301, 10301, 10301 ms/op

# Run progress: 60.92% complete, ETA 00:47:57
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 10184 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10184, 10184, 10184, 10184, 10184, 10184, 10184, 10184 ms/op
# Warmup Iteration   2: n = 1, mean = 10737 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10737, 10737, 10737, 10737, 10737, 10737, 10737, 10737 ms/op
# Warmup Iteration   3: n = 1, mean = 11090 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11090, 11090, 11090, 11090, 11090, 11090, 11090, 11090 ms/op
Iteration   1: n = 1, mean = 10771 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10771, 10771, 10771, 10771, 10771, 10771, 10771, 10771 ms/op
Iteration   2: n = 1, mean = 10033 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10033, 10033, 10033, 10033, 10033, 10033, 10033, 10033 ms/op
Iteration   3: 
Bytes	before-close	118489088	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	118489088	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 10922 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10922, 10922, 10922, 10922, 10922, 10922, 10922, 10922 ms/op

# Run progress: 61.06% complete, ETA 00:48:28
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 8229 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8229, 8229, 8229, 8229, 8229, 8229, 8229, 8229 ms/op
# Warmup Iteration   2: n = 1, mean = 7550 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7550, 7550, 7550, 7550, 7550, 7550, 7550, 7550 ms/op
# Warmup Iteration   3: n = 1, mean = 8321 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8321, 8321, 8321, 8321, 8321, 8321, 8321, 8321 ms/op
Iteration   1: n = 1, mean = 8355 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8355, 8355, 8355, 8355, 8355, 8355, 8355, 8355 ms/op
Iteration   2: n = 1, mean = 8372 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8372, 8372, 8372, 8372, 8372, 8372, 8372, 8372 ms/op
Iteration   3: 
Bytes	before-close	118489088	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	118489088	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 7978 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7978, 7978, 7978, 7978, 7978, 7978, 7978, 7978 ms/op


Result "readKey":
  N = 9
  mean =   9707.484 ±(99.9%) 1917.460 ms/op

  Histogram, ms/op:
    [ 7000.000,  7250.000) = 0 
    [ 7250.000,  7500.000) = 0 
    [ 7500.000,  7750.000) = 0 
    [ 7750.000,  8000.000) = 1 
    [ 8000.000,  8250.000) = 0 
    [ 8250.000,  8500.000) = 2 
    [ 8500.000,  8750.000) = 0 
    [ 8750.000,  9000.000) = 0 
    [ 9000.000,  9250.000) = 0 
    [ 9250.000,  9500.000) = 0 
    [ 9500.000,  9750.000) = 0 
    [ 9750.000, 10000.000) = 0 
    [10000.000, 10250.000) = 1 
    [10250.000, 10500.000) = 3 
    [10500.000, 10750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   7977.566 ms/op
     p(50.0000) =  10301.211 ms/op
     p(90.0000) =  10921.968 ms/op
     p(95.0000) =  10921.968 ms/op
     p(99.0000) =  10921.968 ms/op
     p(99.9000) =  10921.968 ms/op
     p(99.9900) =  10921.968 ms/op
     p(99.9990) =  10921.968 ms/op
     p(99.9999) =  10921.968 ms/op
    p(100.0000) =  10921.968 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readKey
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 61.21% complete, ETA 00:48:48
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 7558 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7558, 7558, 7558, 7558, 7558, 7558, 7558, 7558 ms/op
# Warmup Iteration   2: n = 1, mean = 7936 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936 ms/op
# Warmup Iteration   3: n = 1, mean = 7097 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7097, 7097, 7097, 7097, 7097, 7097, 7097, 7097 ms/op
Iteration   1: n = 1, mean = 7759 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7759, 7759, 7759, 7759, 7759, 7759, 7759, 7759 ms/op
Iteration   2: n = 1, mean = 8330 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8330, 8330, 8330, 8330, 8330, 8330, 8330, 8330 ms/op
Iteration   3: 
Bytes	before-close	288358400	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	288358400	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 7961 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7961, 7961, 7961, 7961, 7961, 7961, 7961, 7961 ms/op

# Run progress: 61.35% complete, ETA 00:49:08
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 8607 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8607, 8607, 8607, 8607, 8607, 8607, 8607, 8607 ms/op
# Warmup Iteration   2: n = 1, mean = 8607 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8607, 8607, 8607, 8607, 8607, 8607, 8607, 8607 ms/op
# Warmup Iteration   3: n = 1, mean = 8523 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8523, 8523, 8523, 8523, 8523, 8523, 8523, 8523 ms/op
Iteration   1: n = 1, mean = 8691 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8691, 8691, 8691, 8691, 8691, 8691, 8691, 8691 ms/op
Iteration   2: n = 1, mean = 8976 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8976, 8976, 8976, 8976, 8976, 8976, 8976, 8976 ms/op
Iteration   3: 
Bytes	before-close	288358400	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	288358400	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 8582 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8582, 8582, 8582, 8582, 8582, 8582, 8582, 8582 ms/op

# Run progress: 61.49% complete, ETA 00:49:32
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 8129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8129, 8129, 8129, 8129, 8129, 8129, 8129, 8129 ms/op
# Warmup Iteration   2: n = 1, mean = 8338 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8338, 8338, 8338, 8338, 8338, 8338, 8338, 8338 ms/op
# Warmup Iteration   3: n = 1, mean = 8087 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8087, 8087, 8087, 8087, 8087, 8087, 8087, 8087 ms/op
Iteration   1: n = 1, mean = 7994 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7994, 7994, 7994, 7994, 7994, 7994, 7994, 7994 ms/op
Iteration   2: n = 1, mean = 8321 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8321, 8321, 8321, 8321, 8321, 8321, 8321, 8321 ms/op
Iteration   3: 
Bytes	before-close	288358400	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	288358400	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 8171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8171, 8171, 8171, 8171, 8171, 8171, 8171, 8171 ms/op


Result "readKey":
  N = 9
  mean =   8309.382 ±(99.9%) 652.606 ms/op

  Histogram, ms/op:
    [7000.000, 7125.000) = 0 
    [7125.000, 7250.000) = 0 
    [7250.000, 7375.000) = 0 
    [7375.000, 7500.000) = 0 
    [7500.000, 7625.000) = 0 
    [7625.000, 7750.000) = 0 
    [7750.000, 7875.000) = 1 
    [7875.000, 8000.000) = 2 
    [8000.000, 8125.000) = 0 
    [8125.000, 8250.000) = 1 
    [8250.000, 8375.000) = 2 
    [8375.000, 8500.000) = 0 
    [8500.000, 8625.000) = 1 
    [8625.000, 8750.000) = 1 
    [8750.000, 8875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   7759.462 ms/op
     p(50.0000) =   8321.499 ms/op
     p(90.0000) =   8975.811 ms/op
     p(95.0000) =   8975.811 ms/op
     p(99.0000) =   8975.811 ms/op
     p(99.9000) =   8975.811 ms/op
     p(99.9900) =   8975.811 ms/op
     p(99.9990) =   8975.811 ms/op
     p(99.9999) =   8975.811 ms/op
    p(100.0000) =   8975.811 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readKey
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 61.64% complete, ETA 00:49:53
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 10452 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10452, 10452, 10452, 10452, 10452, 10452, 10452, 10452 ms/op
# Warmup Iteration   2: n = 1, mean = 10939 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10939, 10939, 10939, 10939, 10939, 10939, 10939, 10939 ms/op
# Warmup Iteration   3: n = 1, mean = 11107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11107, 11107, 11107, 11107, 11107, 11107, 11107, 11107 ms/op
Iteration   1: n = 1, mean = 11073 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11073, 11073, 11073, 11073, 11073, 11073, 11073, 11073 ms/op
Iteration   2: n = 1, mean = 11610 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11610, 11610, 11610, 11610, 11610, 11610, 11610, 11610 ms/op
Iteration   3: 
Bytes	before-close	133169152	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	133169152	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 10888 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10888, 10888, 10888, 10888, 10888, 10888, 10888, 10888 ms/op

# Run progress: 61.78% complete, ETA 00:50:23
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 11023 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11023, 11023, 11023, 11023, 11023, 11023, 11023, 11023 ms/op
# Warmup Iteration   2: n = 1, mean = 10704 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10704, 10704, 10704, 10704, 10704, 10704, 10704, 10704 ms/op
# Warmup Iteration   3: n = 1, mean = 10939 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10939, 10939, 10939, 10939, 10939, 10939, 10939, 10939 ms/op
Iteration   1: n = 1, mean = 11660 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11660, 11660, 11660, 11660, 11660, 11660, 11660, 11660 ms/op
Iteration   2: n = 1, mean = 11794 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11794, 11794, 11794, 11794, 11794, 11794, 11794, 11794 ms/op
Iteration   3: 
Bytes	before-close	132120576	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	132120576	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 11962 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11962, 11962, 11962, 11962, 11962, 11962, 11962, 11962 ms/op

# Run progress: 61.93% complete, ETA 00:50:55
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 9915 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9915, 9915, 9915, 9915, 9915, 9915, 9915, 9915 ms/op
# Warmup Iteration   2: n = 1, mean = 10033 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10033, 10033, 10033, 10033, 10033, 10033, 10033, 10033 ms/op
# Warmup Iteration   3: n = 1, mean = 10284 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10284, 10284, 10284, 10284, 10284, 10284, 10284, 10284 ms/op
Iteration   1: n = 1, mean = 9966 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9966, 9966, 9966, 9966, 9966, 9966, 9966, 9966 ms/op
Iteration   2: n = 1, mean = 10100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10100, 10100, 10100, 10100, 10100, 10100, 10100, 10100 ms/op
Iteration   3: 
Bytes	before-close	133169152	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	133169152	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 11308 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11308, 11308, 11308, 11308, 11308, 11308, 11308, 11308 ms/op


Result "readKey":
  N = 9
  mean =  11151.256 ±(99.9%) 1210.496 ms/op

  Histogram, ms/op:
    [ 9000.000,  9250.000) = 0 
    [ 9250.000,  9500.000) = 0 
    [ 9500.000,  9750.000) = 0 
    [ 9750.000, 10000.000) = 1 
    [10000.000, 10250.000) = 1 
    [10250.000, 10500.000) = 0 
    [10500.000, 10750.000) = 0 
    [10750.000, 11000.000) = 1 
    [11000.000, 11250.000) = 1 
    [11250.000, 11500.000) = 1 
    [11500.000, 11750.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   9965.666 ms/op
     p(50.0000) =  11307.844 ms/op
     p(90.0000) =  11962.155 ms/op
     p(95.0000) =  11962.155 ms/op
     p(99.0000) =  11962.155 ms/op
     p(99.9000) =  11962.155 ms/op
     p(99.9900) =  11962.155 ms/op
     p(99.9990) =  11962.155 ms/op
     p(99.9999) =  11962.155 ms/op
    p(100.0000) =  11962.155 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readRev
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 62.07% complete, ETA 00:51:22
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 120, 191, 191, 191, 191, 191, 191 ms/op
# Warmup Iteration   2: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 102, 104, 104, 104, 104, 104, 104 ms/op
# Warmup Iteration   3: n = 7, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 134, 186, 186, 186, 186, 186, 186 ms/op
Iteration   1: n = 8, mean = 138 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 116, 123, 187, 187, 187, 187, 187, 187 ms/op
Iteration   2: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 103, 146, 149, 149, 149, 149, 149 ms/op
Iteration   3: n = 8, mean = 137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 116, 118, 193, 193, 193, 193, 193, 193 ms/op

# Run progress: 62.21% complete, ETA 00:51:14
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 99, 136, 138, 138, 138, 138, 138 ms/op
# Warmup Iteration   2: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 101, 106, 106, 106, 106, 106, 106 ms/op
# Warmup Iteration   3: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 112, 117, 188, 188, 188, 188, 188, 188 ms/op
Iteration   1: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 107, 116, 116, 116, 116, 116, 116 ms/op
Iteration   2: n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 107, 167, 167, 167, 167, 167, 167 ms/op
Iteration   3: n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 120, 123, 123, 123, 123, 123, 123 ms/op

# Run progress: 62.36% complete, ETA 00:51:07
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 125 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 118, 154, 154, 154, 154, 154, 154 ms/op
# Warmup Iteration   2: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 101, 111, 112, 112, 112, 112, 112 ms/op
# Warmup Iteration   3: n = 8, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 112, 116, 186, 186, 186, 186, 186, 186 ms/op
Iteration   1: n = 10, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 112, 175, 181, 181, 181, 181, 181 ms/op
Iteration   2: n = 9, mean = 120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 113, 181, 181, 181, 181, 181, 181 ms/op
Iteration   3: n = 10, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 99, 103, 103, 103, 103, 103, 103 ms/op


Result "readRev":
  N = 83
  mean =    117.103 ±(99.9%) 8.215 ms/op

  Histogram, ms/op:
    [ 90.000, 100.000) = 9 
    [100.000, 110.000) = 28 
    [110.000, 120.000) = 27 
    [120.000, 130.000) = 8 
    [130.000, 140.000) = 2 
    [140.000, 150.000) = 2 
    [150.000, 160.000) = 0 
    [160.000, 170.000) = 1 
    [170.000, 180.000) = 1 
    [180.000, 190.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =     98.959 ms/op
     p(50.0000) =    112.591 ms/op
     p(90.0000) =    149.632 ms/op
     p(95.0000) =    181.351 ms/op
     p(99.0000) =    193.462 ms/op
     p(99.9000) =    193.462 ms/op
     p(99.9900) =    193.462 ms/op
     p(99.9990) =    193.462 ms/op
     p(99.9999) =    193.462 ms/op
    p(100.0000) =    193.462 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readRev
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 62.50% complete, ETA 00:50:59
# Fork: 1 of 3
# Warmup Iteration   1: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 157, 188, 188, 188, 188, 188, 188 ms/op
# Warmup Iteration   2: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 100, 138, 140, 140, 140, 140, 140 ms/op
# Warmup Iteration   3: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 104, 161, 161, 161, 161, 161, 161 ms/op
Iteration   1: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 100, 164, 164, 164, 164, 164, 164 ms/op
Iteration   2: n = 10, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 100, 118, 120, 120, 120, 120, 120 ms/op
Iteration   3: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 89, 94, 96, 96, 96, 96, 96 ms/op

# Run progress: 62.64% complete, ETA 00:50:50
# Fork: 2 of 3
# Warmup Iteration   1: n = 11, mean = 95 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 90, 117, 122, 122, 122, 122, 122 ms/op
# Warmup Iteration   2: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 89, 92, 94, 94, 94, 94, 94 ms/op
# Warmup Iteration   3: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 98, 156, 156, 156, 156, 156, 156 ms/op
Iteration   1: n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 102, 158, 158, 158, 158, 158, 158 ms/op
Iteration   2: n = 11, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 90, 102, 102, 102, 102, 102, 102 ms/op
Iteration   3: n = 10, mean = 110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 98, 167, 170, 170, 170, 170, 170 ms/op

# Run progress: 62.79% complete, ETA 00:50:41
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 118, 203, 203, 203, 203, 203, 203 ms/op
# Warmup Iteration   2: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 106, 121, 122, 122, 122, 122, 122 ms/op
# Warmup Iteration   3: n = 8, mean = 139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 120, 124, 186, 186, 186, 186, 186, 186 ms/op
Iteration   1: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 115, 119, 119, 119, 119, 119, 119 ms/op
Iteration   2: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 106, 110, 110, 110, 110, 110, 110 ms/op
Iteration   3: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 122, 181, 181, 181, 181, 181, 181 ms/op


Result "readRev":
  N = 88
  mean =    106.559 ±(99.9%) 6.795 ms/op

  Histogram, ms/op:
    [ 80.000,  90.000) = 17 
    [ 90.000, 100.000) = 19 
    [100.000, 110.000) = 30 
    [110.000, 120.000) = 7 
    [120.000, 130.000) = 6 
    [130.000, 140.000) = 2 
    [140.000, 150.000) = 3 
    [150.000, 160.000) = 1 
    [160.000, 170.000) = 2 
    [170.000, 180.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     88.605 ms/op
     p(50.0000) =    100.598 ms/op
     p(90.0000) =    130.784 ms/op
     p(95.0000) =    151.467 ms/op
     p(99.0000) =    181.142 ms/op
     p(99.9000) =    181.142 ms/op
     p(99.9900) =    181.142 ms/op
     p(99.9990) =    181.142 ms/op
     p(99.9999) =    181.142 ms/op
    p(100.0000) =    181.142 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readRev
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 62.93% complete, ETA 00:50:32
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 116, 121, 208, 208, 208, 208, 208, 208 ms/op
# Warmup Iteration   2: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 115, 170, 170, 170, 170, 170, 170 ms/op
# Warmup Iteration   3: n = 8, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 114, 120, 184, 184, 184, 184, 184, 184 ms/op
Iteration   1: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 104, 114, 115, 115, 115, 115, 115 ms/op
Iteration   2: n = 9, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 102, 169, 169, 169, 169, 169, 169 ms/op
Iteration   3: n = 8, mean = 139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 120, 133, 191, 191, 191, 191, 191, 191 ms/op

# Run progress: 63.07% complete, ETA 00:50:25
# Fork: 2 of 3
# Warmup Iteration   1: n = 8, mean = 125 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 109, 114, 203, 203, 203, 203, 203, 203 ms/op
# Warmup Iteration   2: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 102, 104, 105, 105, 105, 105, 105 ms/op
# Warmup Iteration   3: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 117, 195, 195, 195, 195, 195, 195 ms/op
Iteration   1: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 115, 118, 190, 190, 190, 190, 190, 190 ms/op
Iteration   2: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 102, 120, 120, 120, 120, 120, 120 ms/op
Iteration   3: n = 9, mean = 120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 103, 182, 182, 182, 182, 182, 182 ms/op

# Run progress: 63.22% complete, ETA 00:50:18
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 112, 125, 183, 183, 183, 183, 183, 183 ms/op
# Warmup Iteration   2: n = 10, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 111, 115, 115, 115, 115, 115, 115 ms/op
# Warmup Iteration   3: n = 7, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 129, 234, 234, 234, 234, 234, 234 ms/op
Iteration   1: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 112, 120, 126, 126, 126, 126, 126, 126 ms/op
Iteration   2: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 111, 117, 118, 118, 118, 118, 118 ms/op
Iteration   3: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 113, 201, 201, 201, 201, 201, 201 ms/op


Result "readRev":
  N = 81
  mean =    117.491 ±(99.9%) 7.963 ms/op

  Histogram, ms/op:
    [100.000, 110.000) = 34 
    [110.000, 120.000) = 26 
    [120.000, 130.000) = 7 
    [130.000, 140.000) = 7 
    [140.000, 150.000) = 2 
    [150.000, 160.000) = 0 
    [160.000, 170.000) = 1 
    [170.000, 180.000) = 0 
    [180.000, 190.000) = 1 
    [190.000, 200.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    102.105 ms/op
     p(50.0000) =    111.411 ms/op
     p(90.0000) =    136.000 ms/op
     p(95.0000) =    180.617 ms/op
     p(99.0000) =    200.802 ms/op
     p(99.9000) =    200.802 ms/op
     p(99.9900) =    200.802 ms/op
     p(99.9990) =    200.802 ms/op
     p(99.9999) =    200.802 ms/op
    p(100.0000) =    200.802 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readRev
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 63.36% complete, ETA 00:50:10
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 117, 122, 204, 204, 204, 204, 204, 204 ms/op
# Warmup Iteration   2: n = 8, mean = 126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 117, 192, 192, 192, 192, 192, 192 ms/op
# Warmup Iteration   3: n = 7, mean = 148 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 117, 149, 182, 182, 182, 182, 182, 182 ms/op
Iteration   1: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 114, 119, 119, 119, 119, 119, 119 ms/op
Iteration   2: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 106, 137, 137, 137, 137, 137, 137 ms/op
Iteration   3: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 105, 116, 117, 117, 117, 117, 117 ms/op

# Run progress: 63.51% complete, ETA 00:50:02
# Fork: 2 of 3
# Warmup Iteration   1: n = 8, mean = 140 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 118, 126, 213, 213, 213, 213, 213, 213 ms/op
# Warmup Iteration   2: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 127, 188, 188, 188, 188, 188, 188 ms/op
# Warmup Iteration   3: n = 7, mean = 148 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 135, 189, 189, 189, 189, 189, 189 ms/op
Iteration   1: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 112, 121, 137, 137, 137, 137, 137, 137 ms/op
Iteration   2: n = 7, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 117, 144, 195, 195, 195, 195, 195, 195 ms/op
Iteration   3: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 111, 122, 126, 126, 126, 126, 126, 126 ms/op

# Run progress: 63.65% complete, ETA 00:49:55
# Fork: 3 of 3
# Warmup Iteration   1: n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 114, 134, 134, 134, 134, 134, 134 ms/op
# Warmup Iteration   2: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 110, 116, 116, 116, 116, 116, 116 ms/op
# Warmup Iteration   3: n = 7, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 137, 192, 192, 192, 192, 192, 192 ms/op
Iteration   1: n = 7, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 149, 198, 198, 198, 198, 198, 198 ms/op
Iteration   2: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 116, 128, 128, 128, 128, 128, 128 ms/op
Iteration   3: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 101, 113, 113, 113, 113, 113, 113 ms/op


Result "readRev":
  N = 79
  mean =    119.835 ±(99.9%) 8.289 ms/op

  Histogram, ms/op:
    [100.000, 110.000) = 30 
    [110.000, 120.000) = 21 
    [120.000, 130.000) = 16 
    [130.000, 140.000) = 4 
    [140.000, 150.000) = 2 
    [150.000, 160.000) = 0 
    [160.000, 170.000) = 2 
    [170.000, 180.000) = 1 
    [180.000, 190.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    100.270 ms/op
     p(50.0000) =    113.115 ms/op
     p(90.0000) =    144.179 ms/op
     p(95.0000) =    179.831 ms/op
     p(99.0000) =    198.181 ms/op
     p(99.9000) =    198.181 ms/op
     p(99.9900) =    198.181 ms/op
     p(99.9990) =    198.181 ms/op
     p(99.9999) =    198.181 ms/op
    p(100.0000) =    198.181 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 63.79% complete, ETA 00:49:47
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 127, 170, 170, 170, 170, 170, 170 ms/op
# Warmup Iteration   2: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 112, 128, 128, 128, 128, 128, 128 ms/op
# Warmup Iteration   3: n = 8, mean = 139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 125, 184, 184, 184, 184, 184, 184 ms/op
Iteration   1: n = 8, mean = 126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 113, 206, 206, 206, 206, 206, 206 ms/op
Iteration   2: n = 11, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 99, 104, 105, 105, 105, 105, 105 ms/op
Iteration   3: n = 9, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 99, 186, 186, 186, 186, 186, 186 ms/op

# Run progress: 63.94% complete, ETA 00:49:38
# Fork: 2 of 3
# Warmup Iteration   1: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 110, 176, 176, 176, 176, 176, 176 ms/op
# Warmup Iteration   2: n = 10, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 92, 153, 158, 158, 158, 158, 158 ms/op
# Warmup Iteration   3: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 80, 81, 86, 87, 87, 87, 87, 87 ms/op
Iteration   1: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 80, 82, 88, 88, 88, 88, 88, 88 ms/op
Iteration   2: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 80, 82, 84, 85, 85, 85, 85, 85 ms/op
Iteration   3: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 96, 152, 153, 153, 153, 153, 153 ms/op

# Run progress: 64.08% complete, ETA 00:49:29
# Fork: 3 of 3
# Warmup Iteration   1: n = 13, mean = 88 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 79, 81, 130, 150, 150, 150, 150, 150 ms/op
# Warmup Iteration   2: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 79, 80, 116, 122, 122, 122, 122, 122 ms/op
# Warmup Iteration   3: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 104, 152, 157, 157, 157, 157, 157 ms/op
Iteration   1: n = 10, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 103, 168, 169, 169, 169, 169, 169 ms/op
Iteration   2: n = 12, mean = 88 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 81, 90, 94, 96, 96, 96, 96, 96 ms/op
Iteration   3: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 79, 81, 84, 84, 84, 84, 84, 84 ms/op


Result "readSeq":
  N = 99
  mean =     96.878 ±(99.9%) 7.740 ms/op

  Histogram, ms/op:
    [  0.000,  25.000) = 0 
    [ 25.000,  50.000) = 0 
    [ 50.000,  75.000) = 0 
    [ 75.000, 100.000) = 75 
    [100.000, 125.000) = 16 
    [125.000, 150.000) = 3 
    [150.000, 175.000) = 3 
    [175.000, 200.000) = 1 
    [200.000, 225.000) = 1 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     79.430 ms/op
     p(50.0000) =     90.309 ms/op
     p(90.0000) =    120.848 ms/op
     p(95.0000) =    151.781 ms/op
     p(99.0000) =    206.045 ms/op
     p(99.9000) =    206.045 ms/op
     p(99.9900) =    206.045 ms/op
     p(99.9990) =    206.045 ms/op
     p(99.9999) =    206.045 ms/op
    p(100.0000) =    206.045 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 64.22% complete, ETA 00:49:20
# Fork: 1 of 3
# Warmup Iteration   1: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 108, 154, 154, 154, 154, 154, 154 ms/op
# Warmup Iteration   2: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 105, 112, 113, 113, 113, 113, 113 ms/op
# Warmup Iteration   3: n = 7, mean = 145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 120, 137, 186, 186, 186, 186, 186, 186 ms/op
Iteration   1: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 110, 128, 128, 128, 128, 128, 128 ms/op
Iteration   2: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 107, 116, 117, 117, 117, 117, 117 ms/op
Iteration   3: n = 8, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 115, 136, 182, 182, 182, 182, 182, 182 ms/op

# Run progress: 64.37% complete, ETA 00:49:12
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 103, 137, 140, 140, 140, 140, 140 ms/op
# Warmup Iteration   2: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 114, 119, 171, 171, 171, 171, 171, 171 ms/op
# Warmup Iteration   3: n = 8, mean = 137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 115, 135, 181, 181, 181, 181, 181, 181 ms/op
Iteration   1: n = 10, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 110, 118, 118, 118, 118, 118, 118 ms/op
Iteration   2: n = 8, mean = 125 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 118, 170, 170, 170, 170, 170, 170 ms/op
Iteration   3: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 114, 150, 150, 150, 150, 150, 150 ms/op

# Run progress: 64.51% complete, ETA 00:49:03
# Fork: 3 of 3
# Warmup Iteration   1: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 85, 102, 107, 107, 107, 107, 107 ms/op
# Warmup Iteration   2: n = 11, mean = 98 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 94, 142, 149, 149, 149, 149, 149 ms/op
# Warmup Iteration   3: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 96, 154, 159, 159, 159, 159, 159 ms/op
Iteration   1: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 86, 89, 89, 89, 89, 89, 89 ms/op
Iteration   2: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 85, 90, 91, 91, 91, 91, 91 ms/op
Iteration   3: n = 11, mean = 96 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 86, 145, 155, 155, 155, 155, 155 ms/op


Result "readSeq":
  N = 89
  mean =    107.379 ±(99.9%) 7.717 ms/op

  Histogram, ms/op:
    [ 80.000,  90.000) = 29 
    [ 90.000, 100.000) = 5 
    [100.000, 110.000) = 18 
    [110.000, 120.000) = 22 
    [120.000, 130.000) = 4 
    [130.000, 140.000) = 5 
    [140.000, 150.000) = 1 
    [150.000, 160.000) = 2 
    [160.000, 170.000) = 1 
    [170.000, 180.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     84.804 ms/op
     p(50.0000) =    106.430 ms/op
     p(90.0000) =    134.218 ms/op
     p(95.0000) =    156.369 ms/op
     p(99.0000) =    181.928 ms/op
     p(99.9000) =    181.928 ms/op
     p(99.9900) =    181.928 ms/op
     p(99.9990) =    181.928 ms/op
     p(99.9999) =    181.928 ms/op
    p(100.0000) =    181.928 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 64.66% complete, ETA 00:48:54
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 115, 220, 220, 220, 220, 220, 220 ms/op
# Warmup Iteration   2: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 104, 107, 107, 107, 107, 107, 107 ms/op
# Warmup Iteration   3: n = 8, mean = 137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 121, 194, 194, 194, 194, 194, 194 ms/op
Iteration   1: n = 9, mean = 120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 113, 181, 181, 181, 181, 181, 181 ms/op
Iteration   2: n = 10, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 100, 104, 104, 104, 104, 104, 104 ms/op
Iteration   3: n = 9, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 99, 167, 167, 167, 167, 167, 167 ms/op

# Run progress: 64.80% complete, ETA 00:48:46
# Fork: 2 of 3
# Warmup Iteration   1: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 114, 130, 153, 153, 153, 153, 153, 153 ms/op
# Warmup Iteration   2: n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 111, 166, 166, 166, 166, 166, 166 ms/op
# Warmup Iteration   3: n = 7, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 112, 137, 188, 188, 188, 188, 188, 188 ms/op
Iteration   1: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 111, 115, 115, 115, 115, 115, 115 ms/op
Iteration   2: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 99, 149, 149, 149, 149, 149, 149 ms/op
Iteration   3: n = 9, mean = 123 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 111, 175, 175, 175, 175, 175, 175 ms/op

# Run progress: 64.94% complete, ETA 00:48:38
# Fork: 3 of 3
# Warmup Iteration   1: n = 9, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 109, 112, 199, 199, 199, 199, 199, 199 ms/op
# Warmup Iteration   2: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 112, 140, 140, 140, 140, 140, 140 ms/op
# Warmup Iteration   3: n = 7, mean = 145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 125, 201, 201, 201, 201, 201, 201 ms/op
Iteration   1: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 112, 125, 125, 125, 125, 125, 125 ms/op
Iteration   2: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 101, 105, 105, 105, 105, 105, 105 ms/op
Iteration   3: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 100, 110, 111, 111, 111, 111, 111 ms/op


Result "readSeq":
  N = 86
  mean =    109.457 ±(99.9%) 6.202 ms/op

  Histogram, ms/op:
    [ 90.000, 100.000) = 24 
    [100.000, 110.000) = 30 
    [110.000, 120.000) = 23 
    [120.000, 130.000) = 2 
    [130.000, 140.000) = 0 
    [140.000, 150.000) = 3 
    [150.000, 160.000) = 0 
    [160.000, 170.000) = 2 
    [170.000, 180.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     97.649 ms/op
     p(50.0000) =    102.171 ms/op
     p(90.0000) =    121.753 ms/op
     p(95.0000) =    158.453 ms/op
     p(99.0000) =    181.142 ms/op
     p(99.9000) =    181.142 ms/op
     p(99.9900) =    181.142 ms/op
     p(99.9990) =    181.142 ms/op
     p(99.9999) =    181.142 ms/op
    p(100.0000) =    181.142 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 65.09% complete, ETA 00:48:30
# Fork: 1 of 3
# Warmup Iteration   1: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 101, 137, 139, 139, 139, 139, 139 ms/op
# Warmup Iteration   2: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 111, 112, 210, 210, 210, 210, 210, 210 ms/op
# Warmup Iteration   3: n = 8, mean = 137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 129, 184, 184, 184, 184, 184, 184 ms/op
Iteration   1: n = 8, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 115, 130, 188, 188, 188, 188, 188, 188 ms/op
Iteration   2: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 114, 176, 176, 176, 176, 176, 176 ms/op
Iteration   3: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 101, 105, 106, 106, 106, 106, 106 ms/op

# Run progress: 65.23% complete, ETA 00:48:21
# Fork: 2 of 3
# Warmup Iteration   1: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 115, 118, 192, 192, 192, 192, 192, 192 ms/op
# Warmup Iteration   2: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 112, 176, 176, 176, 176, 176, 176 ms/op
# Warmup Iteration   3: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 118, 163, 163, 163, 163, 163, 163 ms/op
Iteration   1: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 113, 182, 182, 182, 182, 182, 182 ms/op
Iteration   2: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 100, 120, 121, 121, 121, 121, 121 ms/op
Iteration   3: n = 11, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 100, 100, 100, 100, 100, 100, 100 ms/op

# Run progress: 65.37% complete, ETA 00:48:13
# Fork: 3 of 3
# Warmup Iteration   1: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 104, 157, 157, 157, 157, 157, 157 ms/op
# Warmup Iteration   2: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 112, 180, 180, 180, 180, 180, 180 ms/op
# Warmup Iteration   3: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 100, 134, 136, 136, 136, 136, 136 ms/op
Iteration   1: n = 8, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 114, 194, 194, 194, 194, 194, 194 ms/op
Iteration   2: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 100, 113, 114, 114, 114, 114, 114 ms/op
Iteration   3: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 112, 181, 181, 181, 181, 181, 181 ms/op


Result "readSeq":
  N = 84
  mean =    113.742 ±(99.9%) 8.010 ms/op

  Histogram, ms/op:
    [ 90.000, 100.000) = 14 
    [100.000, 110.000) = 29 
    [110.000, 120.000) = 25 
    [120.000, 130.000) = 7 
    [130.000, 140.000) = 3 
    [140.000, 150.000) = 0 
    [150.000, 160.000) = 0 
    [160.000, 170.000) = 0 
    [170.000, 180.000) = 2 
    [180.000, 190.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =     98.566 ms/op
     p(50.0000) =    108.724 ms/op
     p(90.0000) =    131.924 ms/op
     p(95.0000) =    180.552 ms/op
     p(99.0000) =    194.249 ms/op
     p(99.9000) =    194.249 ms/op
     p(99.9900) =    194.249 ms/op
     p(99.9990) =    194.249 ms/op
     p(99.9999) =    194.249 ms/op
    p(100.0000) =    194.249 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 65.52% complete, ETA 00:48:04
# Fork: 1 of 3
# Warmup Iteration   1: n = 6, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 163, 231, 231, 231, 231, 231, 231 ms/op
# Warmup Iteration   2: n = 9, mean = 120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 124, 126, 126, 126, 126, 126, 126 ms/op
# Warmup Iteration   3: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 108, 116, 116, 116, 116, 116, 116 ms/op
Iteration   1: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 124, 188, 188, 188, 188, 188, 188 ms/op
Iteration   2: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 112, 121, 121, 121, 121, 121, 121 ms/op
Iteration   3: n = 8, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 108, 132, 163, 163, 163, 163, 163, 163 ms/op

# Run progress: 65.66% complete, ETA 00:47:54
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 150, 154, 245, 245, 245, 245, 245, 245 ms/op
# Warmup Iteration   2: n = 7, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 145, 212, 212, 212, 212, 212, 212 ms/op
# Warmup Iteration   3: n = 7, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 145, 226, 226, 226, 226, 226, 226 ms/op
Iteration   1: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 127, 137, 137, 137, 137, 137, 137 ms/op
Iteration   2: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 127, 129, 129, 129, 129, 129, 129 ms/op
Iteration   3: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 127, 134, 134, 134, 134, 134, 134 ms/op

# Run progress: 65.80% complete, ETA 00:47:45
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 125, 164, 164, 164, 164, 164, 164 ms/op
# Warmup Iteration   2: n = 7, mean = 149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 141, 205, 205, 205, 205, 205, 205 ms/op
# Warmup Iteration   3: n = 7, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 152, 211, 211, 211, 211, 211, 211 ms/op
Iteration   1: n = 7, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 145, 217, 217, 217, 217, 217, 217 ms/op
Iteration   2: n = 8, mean = 139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 126, 199, 199, 199, 199, 199, 199 ms/op
Iteration   3: n = 7, mean = 143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 141, 165, 165, 165, 165, 165, 165 ms/op


Result "readXxh64":
  N = 71
  mean =    132.575 ±(99.9%) 7.857 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 9 
    [112.500, 125.000) = 8 
    [125.000, 137.500) = 37 
    [137.500, 150.000) = 8 
    [150.000, 162.500) = 4 
    [162.500, 175.000) = 2 
    [175.000, 187.500) = 0 
    [187.500, 200.000) = 2 
    [200.000, 212.500) = 0 
    [212.500, 225.000) = 1 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 0 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    107.872 ms/op
     p(50.0000) =    127.140 ms/op
     p(90.0000) =    156.657 ms/op
     p(95.0000) =    174.535 ms/op
     p(99.0000) =    217.317 ms/op
     p(99.9000) =    217.317 ms/op
     p(99.9900) =    217.317 ms/op
     p(99.9990) =    217.317 ms/op
     p(99.9999) =    217.317 ms/op
    p(100.0000) =    217.317 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 65.95% complete, ETA 00:47:36
# Fork: 1 of 3
# Warmup Iteration   1: n = 7, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 145, 245, 245, 245, 245, 245, 245 ms/op
# Warmup Iteration   2: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 128, 133, 133, 133, 133, 133, 133 ms/op
# Warmup Iteration   3: n = 8, mean = 138 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 129, 189, 189, 189, 189, 189, 189 ms/op
Iteration   1: n = 8, mean = 140 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 133, 161, 161, 161, 161, 161, 161 ms/op
Iteration   2: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 128, 136, 136, 136, 136, 136, 136 ms/op
Iteration   3: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 127, 129, 129, 129, 129, 129, 129 ms/op

# Run progress: 66.09% complete, ETA 00:47:28
# Fork: 2 of 3
# Warmup Iteration   1: n = 8, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 132, 168, 168, 168, 168, 168, 168 ms/op
# Warmup Iteration   2: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 129, 133, 133, 133, 133, 133, 133 ms/op
# Warmup Iteration   3: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 130, 134, 134, 134, 134, 134, 134 ms/op
Iteration   1: n = 8, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 130, 170, 170, 170, 170, 170, 170 ms/op
Iteration   2: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 129, 135, 135, 135, 135, 135, 135 ms/op
Iteration   3: n = 6, mean = 171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 146, 225, 225, 225, 225, 225, 225 ms/op

# Run progress: 66.24% complete, ETA 00:47:19
# Fork: 3 of 3
# Warmup Iteration   1: n = 6, mean = 189 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 184, 259, 259, 259, 259, 259, 259 ms/op
# Warmup Iteration   2: n = 8, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 132, 144, 144, 144, 144, 144, 144 ms/op
# Warmup Iteration   3: n = 6, mean = 183 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 187, 218, 218, 218, 218, 218, 218 ms/op
Iteration   1: n = 7, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 148, 195, 195, 195, 195, 195, 195 ms/op
Iteration   2: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 130, 132, 132, 132, 132, 132, 132 ms/op
Iteration   3: n = 7, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 149, 218, 218, 218, 218, 218, 218 ms/op


Result "readXxh64":
  N = 68
  mean =    140.494 ±(99.9%) 9.427 ms/op

  Histogram, ms/op:
    [120.000, 130.000) = 34 
    [130.000, 140.000) = 14 
    [140.000, 150.000) = 9 
    [150.000, 160.000) = 3 
    [160.000, 170.000) = 3 
    [170.000, 180.000) = 0 
    [180.000, 190.000) = 0 
    [190.000, 200.000) = 2 
    [200.000, 210.000) = 0 
    [210.000, 220.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    126.484 ms/op
     p(50.0000) =    129.958 ms/op
     p(90.0000) =    169.371 ms/op
     p(95.0000) =    207.317 ms/op
     p(99.0000) =    224.920 ms/op
     p(99.9000) =    224.920 ms/op
     p(99.9900) =    224.920 ms/op
     p(99.9990) =    224.920 ms/op
     p(99.9999) =    224.920 ms/op
    p(100.0000) =    224.920 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 66.38% complete, ETA 00:47:10
# Fork: 1 of 3
# Warmup Iteration   1: n = 7, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 146, 251, 251, 251, 251, 251, 251 ms/op
# Warmup Iteration   2: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 130, 137, 137, 137, 137, 137, 137 ms/op
# Warmup Iteration   3: n = 6, mean = 177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 158, 227, 227, 227, 227, 227, 227 ms/op
Iteration   1: n = 6, mean = 168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 155, 219, 219, 219, 219, 219, 219 ms/op
Iteration   2: n = 7, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 151, 184, 184, 184, 184, 184, 184 ms/op
Iteration   3: n = 7, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 148, 193, 193, 193, 193, 193, 193 ms/op

# Run progress: 66.52% complete, ETA 00:47:02
# Fork: 2 of 3
# Warmup Iteration   1: n = 7, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 139, 207, 207, 207, 207, 207, 207 ms/op
# Warmup Iteration   2: n = 7, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 148, 214, 214, 214, 214, 214, 214 ms/op
# Warmup Iteration   3: n = 6, mean = 171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 149, 268, 268, 268, 268, 268, 268 ms/op
Iteration   1: n = 6, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 150, 256, 256, 256, 256, 256, 256 ms/op
Iteration   2: n = 8, mean = 138 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 134, 153, 153, 153, 153, 153, 153 ms/op
Iteration   3: n = 8, mean = 134 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 133, 141, 141, 141, 141, 141, 141 ms/op

# Run progress: 66.67% complete, ETA 00:46:53
# Fork: 3 of 3
# Warmup Iteration   1: n = 6, mean = 188 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 156, 175, 266, 266, 266, 266, 266, 266 ms/op
# Warmup Iteration   2: n = 7, mean = 148 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 139, 150, 157, 157, 157, 157, 157, 157 ms/op
# Warmup Iteration   3: n = 6, mean = 181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 156, 172, 224, 224, 224, 224, 224, 224 ms/op
Iteration   1: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 139, 149, 158, 158, 158, 158, 158, 158 ms/op
Iteration   2: n = 7, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 158, 204, 204, 204, 204, 204, 204 ms/op
Iteration   3: n = 6, mean = 180 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 156, 165, 230, 230, 230, 230, 230, 230 ms/op


Result "readXxh64":
  N = 62
  mean =    154.862 ±(99.9%) 11.606 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 17 
    [137.500, 150.000) = 21 
    [150.000, 162.500) = 10 
    [162.500, 175.000) = 3 
    [175.000, 187.500) = 4 
    [187.500, 200.000) = 2 
    [200.000, 212.500) = 2 
    [212.500, 225.000) = 1 
    [225.000, 237.500) = 1 
    [237.500, 250.000) = 0 
    [250.000, 262.500) = 1 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    131.072 ms/op
     p(50.0000) =    148.111 ms/op
     p(90.0000) =    195.114 ms/op
     p(95.0000) =    217.540 ms/op
     p(99.0000) =    256.115 ms/op
     p(99.9000) =    256.115 ms/op
     p(99.9900) =    256.115 ms/op
     p(99.9990) =    256.115 ms/op
     p(99.9999) =    256.115 ms/op
    p(100.0000) =    256.115 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 66.81% complete, ETA 00:46:44
# Fork: 1 of 3
# Warmup Iteration   1: n = 7, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 138, 236, 236, 236, 236, 236, 236 ms/op
# Warmup Iteration   2: n = 8, mean = 134 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 132, 142, 142, 142, 142, 142, 142 ms/op
# Warmup Iteration   3: n = 7, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 152, 215, 215, 215, 215, 215, 215 ms/op
Iteration   1: n = 7, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 148, 215, 215, 215, 215, 215, 215 ms/op
Iteration   2: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 149, 240, 240, 240, 240, 240, 240 ms/op
Iteration   3: n = 7, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 147, 242, 242, 242, 242, 242, 242 ms/op

# Run progress: 66.95% complete, ETA 00:46:36
# Fork: 2 of 3
# Warmup Iteration   1: n = 7, mean = 145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 143, 179, 179, 179, 179, 179, 179 ms/op
# Warmup Iteration   2: n = 7, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 146, 221, 221, 221, 221, 221, 221 ms/op
# Warmup Iteration   3: n = 7, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 141, 214, 214, 214, 214, 214, 214 ms/op
Iteration   1: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 128, 131, 131, 131, 131, 131, 131 ms/op
Iteration   2: n = 7, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 144, 215, 215, 215, 215, 215, 215 ms/op
Iteration   3: n = 7, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 145, 217, 217, 217, 217, 217, 217 ms/op

# Run progress: 67.10% complete, ETA 00:46:27
# Fork: 3 of 3
# Warmup Iteration   1: n = 6, mean = 183 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 171, 249, 249, 249, 249, 249, 249 ms/op
# Warmup Iteration   2: n = 7, mean = 145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 141, 160, 160, 160, 160, 160, 160 ms/op
# Warmup Iteration   3: n = 7, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 144, 191, 191, 191, 191, 191, 191 ms/op
Iteration   1: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 157, 240, 240, 240, 240, 240, 240 ms/op
Iteration   2: n = 6, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 160, 219, 219, 219, 219, 219, 219 ms/op
Iteration   3: n = 6, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 149, 253, 253, 253, 253, 253, 253 ms/op


Result "readXxh64":
  N = 60
  mean =    159.403 ±(99.9%) 15.085 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 11 
    [137.500, 150.000) = 28 
    [150.000, 162.500) = 9 
    [162.500, 175.000) = 1 
    [175.000, 187.500) = 0 
    [187.500, 200.000) = 0 
    [200.000, 212.500) = 0 
    [212.500, 225.000) = 7 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 3 
    [250.000, 262.500) = 1 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    126.353 ms/op
     p(50.0000) =    147.194 ms/op
     p(90.0000) =    218.549 ms/op
     p(95.0000) =    240.347 ms/op
     p(99.0000) =    252.969 ms/op
     p(99.9000) =    252.969 ms/op
     p(99.9900) =    252.969 ms/op
     p(99.9990) =    252.969 ms/op
     p(99.9999) =    252.969 ms/op
    p(100.0000) =    252.969 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.write
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 67.24% complete, ETA 00:46:18
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 9647 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9647, 9647, 9647, 9647, 9647, 9647, 9647, 9647 ms/op
# Warmup Iteration   2: n = 1, mean = 8380 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8380, 8380, 8380, 8380, 8380, 8380, 8380, 8380 ms/op
# Warmup Iteration   3: n = 1, mean = 7927 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7927, 7927, 7927, 7927, 7927, 7927, 7927, 7927 ms/op
Iteration   1: n = 1, mean = 8053 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8053, 8053, 8053, 8053, 8053, 8053, 8053, 8053 ms/op
Iteration   2: n = 1, mean = 8993 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8993, 8993, 8993, 8993, 8993, 8993, 8993, 8993 ms/op
Iteration   3: n = 1, mean = 9378 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9378, 9378, 9378, 9378, 9378, 9378, 9378, 9378 ms/op

# Run progress: 67.39% complete, ETA 00:46:26
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 9211 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9211, 9211, 9211, 9211, 9211, 9211, 9211, 9211 ms/op
# Warmup Iteration   2: n = 1, mean = 9412 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9412, 9412, 9412, 9412, 9412, 9412, 9412, 9412 ms/op
# Warmup Iteration   3: n = 1, mean = 9546 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9546, 9546, 9546, 9546, 9546, 9546, 9546, 9546 ms/op
Iteration   1: n = 1, mean = 9513 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9513, 9513, 9513, 9513, 9513, 9513, 9513, 9513 ms/op
Iteration   2: n = 1, mean = 8959 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8959, 8959, 8959, 8959, 8959, 8959, 8959, 8959 ms/op
Iteration   3: n = 1, mean = 8162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8162, 8162, 8162, 8162, 8162, 8162, 8162, 8162 ms/op

# Run progress: 67.53% complete, ETA 00:46:35
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 10217 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10217, 10217, 10217, 10217, 10217, 10217, 10217, 10217 ms/op
# Warmup Iteration   2: n = 1, mean = 10251 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10251, 10251, 10251, 10251, 10251, 10251, 10251, 10251 ms/op
# Warmup Iteration   3: n = 1, mean = 8590 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8590, 8590, 8590, 8590, 8590, 8590, 8590, 8590 ms/op
Iteration   1: n = 1, mean = 9043 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9043, 9043, 9043, 9043, 9043, 9043, 9043, 9043 ms/op
Iteration   2: n = 1, mean = 8875 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8875, 8875, 8875, 8875, 8875, 8875, 8875, 8875 ms/op
Iteration   3: n = 1, mean = 8909 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8909, 8909, 8909, 8909, 8909, 8909, 8909, 8909 ms/op


Result "write":
  N = 9
  mean =   8876.079 ±(99.9%) 817.672 ms/op

  Histogram, ms/op:
    [ 8000.000,  8125.000) = 1 
    [ 8125.000,  8250.000) = 1 
    [ 8250.000,  8375.000) = 0 
    [ 8375.000,  8500.000) = 0 
    [ 8500.000,  8625.000) = 0 
    [ 8625.000,  8750.000) = 0 
    [ 8750.000,  8875.000) = 0 
    [ 8875.000,  9000.000) = 4 
    [ 9000.000,  9125.000) = 1 
    [ 9125.000,  9250.000) = 0 
    [ 9250.000,  9375.000) = 0 
    [ 9375.000,  9500.000) = 1 
    [ 9500.000,  9625.000) = 1 
    [ 9625.000,  9750.000) = 0 
    [ 9750.000,  9875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   8053.064 ms/op
     p(50.0000) =   8959.033 ms/op
     p(90.0000) =   9512.681 ms/op
     p(95.0000) =   9512.681 ms/op
     p(99.0000) =   9512.681 ms/op
     p(99.9000) =   9512.681 ms/op
     p(99.9900) =   9512.681 ms/op
     p(99.9990) =   9512.681 ms/op
     p(99.9999) =   9512.681 ms/op
    p(100.0000) =   9512.681 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.write
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 67.67% complete, ETA 00:46:44
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 11409 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11409, 11409, 11409, 11409, 11409, 11409, 11409, 11409 ms/op
# Warmup Iteration   2: n = 1, mean = 10301 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10301, 10301, 10301, 10301, 10301, 10301, 10301, 10301 ms/op
# Warmup Iteration   3: n = 1, mean = 8691 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8691, 8691, 8691, 8691, 8691, 8691, 8691, 8691 ms/op
Iteration   1: n = 1, mean = 8707 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8707, 8707, 8707, 8707, 8707, 8707, 8707, 8707 ms/op
Iteration   2: n = 1, mean = 9043 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9043, 9043, 9043, 9043, 9043, 9043, 9043, 9043 ms/op
Iteration   3: n = 1, mean = 9412 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9412, 9412, 9412, 9412, 9412, 9412, 9412, 9412 ms/op

# Run progress: 67.82% complete, ETA 00:46:54
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 9580 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9580, 9580, 9580, 9580, 9580, 9580, 9580, 9580 ms/op
# Warmup Iteration   2: n = 1, mean = 9009 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9009, 9009, 9009, 9009, 9009, 9009, 9009, 9009 ms/op
# Warmup Iteration   3: n = 1, mean = 9345 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9345, 9345, 9345, 9345, 9345, 9345, 9345, 9345 ms/op
Iteration   1: n = 1, mean = 10217 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10217, 10217, 10217, 10217, 10217, 10217, 10217, 10217 ms/op
Iteration   2: n = 1, mean = 10117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10117, 10117, 10117, 10117, 10117, 10117, 10117, 10117 ms/op
Iteration   3: n = 1, mean = 8565 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8565, 8565, 8565, 8565, 8565, 8565, 8565, 8565 ms/op

# Run progress: 67.96% complete, ETA 00:47:03
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 10318 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10318, 10318, 10318, 10318, 10318, 10318, 10318, 10318 ms/op
# Warmup Iteration   2: n = 1, mean = 10503 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10503, 10503, 10503, 10503, 10503, 10503, 10503, 10503 ms/op
# Warmup Iteration   3: n = 1, mean = 9043 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9043, 9043, 9043, 9043, 9043, 9043, 9043, 9043 ms/op
Iteration   1: n = 1, mean = 9093 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9093, 9093, 9093, 9093, 9093, 9093, 9093, 9093 ms/op
Iteration   2: n = 1, mean = 9580 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9580, 9580, 9580, 9580, 9580, 9580, 9580, 9580 ms/op
Iteration   3: n = 1, mean = 9009 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9009, 9009, 9009, 9009, 9009, 9009, 9009, 9009 ms/op


Result "write":
  N = 9
  mean =   9304.830 ±(99.9%) 973.368 ms/op

  Histogram, ms/op:
    [ 8000.000,  8250.000) = 0 
    [ 8250.000,  8500.000) = 0 
    [ 8500.000,  8750.000) = 2 
    [ 8750.000,  9000.000) = 0 
    [ 9000.000,  9250.000) = 3 
    [ 9250.000,  9500.000) = 1 
    [ 9500.000,  9750.000) = 1 
    [ 9750.000, 10000.000) = 0 
    [10000.000, 10250.000) = 2 
    [10250.000, 10500.000) = 0 
    [10500.000, 10750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   8564.769 ms/op
     p(50.0000) =   9093.251 ms/op
     p(90.0000) =  10217.325 ms/op
     p(95.0000) =  10217.325 ms/op
     p(99.0000) =  10217.325 ms/op
     p(99.9000) =  10217.325 ms/op
     p(99.9900) =  10217.325 ms/op
     p(99.9990) =  10217.325 ms/op
     p(99.9999) =  10217.325 ms/op
    p(100.0000) =  10217.325 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.write
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 68.10% complete, ETA 00:47:12
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 12600 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12600, 12600, 12600, 12600, 12600, 12600, 12600, 12600 ms/op
# Warmup Iteration   2: n = 1, mean = 12314 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12314, 12314, 12314, 12314, 12314, 12314, 12314, 12314 ms/op
# Warmup Iteration   3: n = 1, mean = 10956 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10956, 10956, 10956, 10956, 10956, 10956, 10956, 10956 ms/op
Iteration   1: n = 1, mean = 11325 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11325, 11325, 11325, 11325, 11325, 11325, 11325, 11325 ms/op
Iteration   2: n = 1, mean = 11056 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11056, 11056, 11056, 11056, 11056, 11056, 11056, 11056 ms/op
Iteration   3: n = 1, mean = 11425 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11425, 11425, 11425, 11425, 11425, 11425, 11425, 11425 ms/op

# Run progress: 68.25% complete, ETA 00:47:26
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 12449 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12449, 12449, 12449, 12449, 12449, 12449, 12449, 12449 ms/op
# Warmup Iteration   2: n = 1, mean = 12063 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12063, 12063, 12063, 12063, 12063, 12063, 12063, 12063 ms/op
# Warmup Iteration   3: n = 1, mean = 12063 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12063, 12063, 12063, 12063, 12063, 12063, 12063, 12063 ms/op
Iteration   1: n = 1, mean = 11509 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11509, 11509, 11509, 11509, 11509, 11509, 11509, 11509 ms/op
Iteration   2: n = 1, mean = 11291 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11291, 11291, 11291, 11291, 11291, 11291, 11291, 11291 ms/op
Iteration   3: n = 1, mean = 11610 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11610, 11610, 11610, 11610, 11610, 11610, 11610, 11610 ms/op

# Run progress: 68.39% complete, ETA 00:47:41
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 11643 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11643, 11643, 11643, 11643, 11643, 11643, 11643, 11643 ms/op
# Warmup Iteration   2: n = 1, mean = 11258 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11258, 11258, 11258, 11258, 11258, 11258, 11258, 11258 ms/op
# Warmup Iteration   3: n = 1, mean = 11761 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11761, 11761, 11761, 11761, 11761, 11761, 11761, 11761 ms/op
Iteration   1: n = 1, mean = 10637 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10637, 10637, 10637, 10637, 10637, 10637, 10637, 10637 ms/op
Iteration   2: n = 1, mean = 11710 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11710, 11710, 11710, 11710, 11710, 11710, 11710, 11710 ms/op
Iteration   3: n = 1, mean = 11694 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11694, 11694, 11694, 11694, 11694, 11694, 11694, 11694 ms/op


Result "write":
  N = 9
  mean =  11361.904 ±(99.9%) 577.403 ms/op

  Histogram, ms/op:
    [10000.000, 10125.000) = 0 
    [10125.000, 10250.000) = 0 
    [10250.000, 10375.000) = 0 
    [10375.000, 10500.000) = 0 
    [10500.000, 10625.000) = 0 
    [10625.000, 10750.000) = 1 
    [10750.000, 10875.000) = 0 
    [10875.000, 11000.000) = 0 
    [11000.000, 11125.000) = 1 
    [11125.000, 11250.000) = 0 
    [11250.000, 11375.000) = 2 
    [11375.000, 11500.000) = 1 
    [11500.000, 11625.000) = 2 
    [11625.000, 11750.000) = 2 
    [11750.000, 11875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  10636.755 ms/op
     p(50.0000) =  11425.284 ms/op
     p(90.0000) =  11710.497 ms/op
     p(95.0000) =  11710.497 ms/op
     p(99.0000) =  11710.497 ms/op
     p(99.9000) =  11710.497 ms/op
     p(99.9900) =  11710.497 ms/op
     p(99.9990) =  11710.497 ms/op
     p(99.9999) =  11710.497 ms/op
    p(100.0000) =  11710.497 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.write
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 68.53% complete, ETA 00:47:54
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 11341 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11341, 11341, 11341, 11341, 11341, 11341, 11341, 11341 ms/op
# Warmup Iteration   2: n = 1, mean = 10217 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10217, 10217, 10217, 10217, 10217, 10217, 10217, 10217 ms/op
# Warmup Iteration   3: n = 1, mean = 10083 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10083, 10083, 10083, 10083, 10083, 10083, 10083, 10083 ms/op
Iteration   1: n = 1, mean = 9697 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9697, 9697, 9697, 9697, 9697, 9697, 9697, 9697 ms/op
Iteration   2: n = 1, mean = 9597 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9597, 9597, 9597, 9597, 9597, 9597, 9597, 9597 ms/op
Iteration   3: n = 1, mean = 11610 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11610, 11610, 11610, 11610, 11610, 11610, 11610, 11610 ms/op

# Run progress: 68.68% complete, ETA 00:48:05
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 10603 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10603, 10603, 10603, 10603, 10603, 10603, 10603, 10603 ms/op
# Warmup Iteration   2: n = 1, mean = 10805 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10805, 10805, 10805, 10805, 10805, 10805, 10805, 10805 ms/op
# Warmup Iteration   3: n = 1, mean = 11409 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11409, 11409, 11409, 11409, 11409, 11409, 11409, 11409 ms/op
Iteration   1: n = 1, mean = 11409 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11409, 11409, 11409, 11409, 11409, 11409, 11409, 11409 ms/op
Iteration   2: n = 1, mean = 11543 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11543, 11543, 11543, 11543, 11543, 11543, 11543, 11543 ms/op
Iteration   3: n = 1, mean = 11325 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11325, 11325, 11325, 11325, 11325, 11325, 11325, 11325 ms/op

# Run progress: 68.82% complete, ETA 00:48:17
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 11107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11107, 11107, 11107, 11107, 11107, 11107, 11107, 11107 ms/op
# Warmup Iteration   2: n = 1, mean = 11023 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11023, 11023, 11023, 11023, 11023, 11023, 11023, 11023 ms/op
# Warmup Iteration   3: n = 1, mean = 11123 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11123, 11123, 11123, 11123, 11123, 11123, 11123, 11123 ms/op
Iteration   1: n = 1, mean = 12835 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12835, 12835, 12835, 12835, 12835, 12835, 12835, 12835 ms/op
Iteration   2: n = 1, mean = 11476 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11476, 11476, 11476, 11476, 11476, 11476, 11476, 11476 ms/op
Iteration   3: n = 1, mean = 11912 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11912, 11912, 11912, 11912, 11912, 11912, 11912, 11912 ms/op


Result "write":
  N = 9
  mean =  11266.833 ±(99.9%) 1720.705 ms/op

  Histogram, ms/op:
    [ 9000.000,  9250.000) = 0 
    [ 9250.000,  9500.000) = 0 
    [ 9500.000,  9750.000) = 2 
    [ 9750.000, 10000.000) = 0 
    [10000.000, 10250.000) = 0 
    [10250.000, 10500.000) = 0 
    [10500.000, 10750.000) = 0 
    [10750.000, 11000.000) = 0 
    [11000.000, 11250.000) = 0 
    [11250.000, 11500.000) = 3 
    [11500.000, 11750.000) = 2 
    [11750.000, 12000.000) = 1 
    [12000.000, 12250.000) = 0 
    [12250.000, 12500.000) = 0 
    [12500.000, 12750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   9596.568 ms/op
     p(50.0000) =  11475.616 ms/op
     p(90.0000) =  12834.570 ms/op
     p(95.0000) =  12834.570 ms/op
     p(99.0000) =  12834.570 ms/op
     p(99.9000) =  12834.570 ms/op
     p(99.9900) =  12834.570 ms/op
     p(99.9990) =  12834.570 ms/op
     p(99.9999) =  12834.570 ms/op
    p(100.0000) =  12834.570 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 68.97% complete, ETA 00:48:29
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 657 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 549, 657, 764, 764, 764, 764, 764, 764 ms/op
# Warmup Iteration   2: n = 2, mean = 588 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 546, 588, 630, 630, 630, 630, 630, 630 ms/op
# Warmup Iteration   3: n = 3, mean = 514 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 496, 499, 547, 547, 547, 547, 547, 547 ms/op
Iteration   1: n = 2, mean = 621 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 568, 621, 673, 673, 673, 673, 673, 673 ms/op
Iteration   2: n = 2, mean = 593 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 543, 593, 643, 643, 643, 643, 643, 643 ms/op
Iteration   3: n = 2, mean = 511 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 511, 511, 512, 512, 512, 512, 512, 512 ms/op

# Run progress: 69.11% complete, ETA 00:48:14
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 720 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 592, 720, 848, 848, 848, 848, 848, 848 ms/op
# Warmup Iteration   2: n = 2, mean = 678 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 634, 678, 721, 721, 721, 721, 721, 721 ms/op
# Warmup Iteration   3: n = 2, mean = 662 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 643, 662, 681, 681, 681, 681, 681, 681 ms/op
Iteration   1: n = 2, mean = 600 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 564, 600, 635, 635, 635, 635, 635, 635 ms/op
Iteration   2: n = 2, mean = 612 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 542, 612, 682, 682, 682, 682, 682, 682 ms/op
Iteration   3: n = 2, mean = 501 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 499, 501, 504, 504, 504, 504, 504, 504 ms/op

# Run progress: 69.25% complete, ETA 00:47:59
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 708 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 694, 708, 722, 722, 722, 722, 722, 722 ms/op
# Warmup Iteration   2: n = 2, mean = 659 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 643, 659, 674, 674, 674, 674, 674, 674 ms/op
# Warmup Iteration   3: n = 2, mean = 638 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 568, 638, 707, 707, 707, 707, 707, 707 ms/op
Iteration   1: n = 2, mean = 672 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 595, 672, 749, 749, 749, 749, 749, 749 ms/op
Iteration   2: n = 2, mean = 620 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 596, 620, 644, 644, 644, 644, 644, 644 ms/op
Iteration   3: n = 2, mean = 520 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 518, 520, 522, 522, 522, 522, 522, 522 ms/op


Result "readCrc":
  N = 18
  mean =    583.241 ±(99.9%) 68.399 ms/op

  Histogram, ms/op:
    [400.000, 425.000) = 0 
    [425.000, 450.000) = 0 
    [450.000, 475.000) = 0 
    [475.000, 500.000) = 1 
    [500.000, 525.000) = 5 
    [525.000, 550.000) = 2 
    [550.000, 575.000) = 2 
    [575.000, 600.000) = 2 
    [600.000, 625.000) = 0 
    [625.000, 650.000) = 3 
    [650.000, 675.000) = 1 
    [675.000, 700.000) = 1 
    [700.000, 725.000) = 0 
    [725.000, 750.000) = 1 
    [750.000, 775.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    498.598 ms/op
     p(50.0000) =    566.231 ms/op
     p(90.0000) =    688.285 ms/op
     p(95.0000) =    748.683 ms/op
     p(99.0000) =    748.683 ms/op
     p(99.9000) =    748.683 ms/op
     p(99.9900) =    748.683 ms/op
     p(99.9990) =    748.683 ms/op
     p(99.9999) =    748.683 ms/op
    p(100.0000) =    748.683 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 69.40% complete, ETA 00:47:44
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 754 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 616, 754, 892, 892, 892, 892, 892, 892 ms/op
# Warmup Iteration   2: n = 2, mean = 674 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 578, 674, 770, 770, 770, 770, 770, 770 ms/op
# Warmup Iteration   3: n = 2, mean = 642 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 543, 642, 740, 740, 740, 740, 740, 740 ms/op
Iteration   1: n = 2, mean = 624 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 592, 624, 656, 656, 656, 656, 656, 656 ms/op
Iteration   2: n = 2, mean = 572 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 526, 572, 618, 618, 618, 618, 618, 618 ms/op
Iteration   3: n = 2, mean = 540 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 536, 540, 543, 543, 543, 543, 543, 543 ms/op

# Run progress: 69.54% complete, ETA 00:47:29
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 621 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 551, 621, 692, 692, 692, 692, 692, 692 ms/op
# Warmup Iteration   2: n = 2, mean = 544 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 537, 544, 552, 552, 552, 552, 552, 552 ms/op
# Warmup Iteration   3: n = 2, mean = 633 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 534, 633, 732, 732, 732, 732, 732, 732 ms/op
Iteration   1: n = 2, mean = 606 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 578, 606, 634, 634, 634, 634, 634, 634 ms/op
Iteration   2: n = 2, mean = 560 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 538, 560, 582, 582, 582, 582, 582, 582 ms/op
Iteration   3: n = 2, mean = 528 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 524, 528, 532, 532, 532, 532, 532, 532 ms/op

# Run progress: 69.68% complete, ETA 00:47:14
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 626 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 555, 626, 697, 697, 697, 697, 697, 697 ms/op
# Warmup Iteration   2: n = 2, mean = 637 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 605, 637, 669, 669, 669, 669, 669, 669 ms/op
# Warmup Iteration   3: n = 2, mean = 658 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 540, 658, 776, 776, 776, 776, 776, 776 ms/op
Iteration   1: n = 2, mean = 630 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 576, 630, 684, 684, 684, 684, 684, 684 ms/op
Iteration   2: n = 2, mean = 596 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 555, 596, 638, 638, 638, 638, 638, 638 ms/op
Iteration   3: n = 2, mean = 577 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 562, 577, 592, 592, 592, 592, 592, 592 ms/op


Result "readCrc":
  N = 18
  mean =    581.465 ±(99.9%) 44.701 ms/op

  Histogram, ms/op:
    [500.000, 512.500) = 0 
    [512.500, 525.000) = 1 
    [525.000, 537.500) = 3 
    [537.500, 550.000) = 2 
    [550.000, 562.500) = 2 
    [562.500, 575.000) = 0 
    [575.000, 587.500) = 3 
    [587.500, 600.000) = 2 
    [600.000, 612.500) = 0 
    [612.500, 625.000) = 1 
    [625.000, 637.500) = 1 
    [637.500, 650.000) = 1 
    [650.000, 662.500) = 1 
    [662.500, 675.000) = 0 
    [675.000, 687.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    523.764 ms/op
     p(50.0000) =    576.717 ms/op
     p(90.0000) =    659.135 ms/op
     p(95.0000) =    683.672 ms/op
     p(99.0000) =    683.672 ms/op
     p(99.9000) =    683.672 ms/op
     p(99.9900) =    683.672 ms/op
     p(99.9990) =    683.672 ms/op
     p(99.9999) =    683.672 ms/op
    p(100.0000) =    683.672 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 69.83% complete, ETA 00:46:59
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 870 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 746, 870, 994, 994, 994, 994, 994, 994 ms/op
# Warmup Iteration   2: n = 1, mean = 1084 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084 ms/op
# Warmup Iteration   3: n = 1, mean = 1082 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082 ms/op
Iteration   1: n = 2, mean = 834 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 731, 834, 937, 937, 937, 937, 937, 937 ms/op
Iteration   2: n = 2, mean = 685 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 678, 685, 691, 691, 691, 691, 691, 691 ms/op
Iteration   3: n = 2, mean = 674 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 672, 674, 675, 675, 675, 675, 675, 675 ms/op

# Run progress: 69.97% complete, ETA 00:46:44
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 909 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 850, 909, 968, 968, 968, 968, 968, 968 ms/op
# Warmup Iteration   2: n = 2, mean = 766 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 708, 766, 824, 824, 824, 824, 824, 824 ms/op
# Warmup Iteration   3: n = 2, mean = 782 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 719, 782, 845, 845, 845, 845, 845, 845 ms/op
Iteration   1: n = 2, mean = 688 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 679, 688, 697, 697, 697, 697, 697, 697 ms/op
Iteration   2: n = 2, mean = 704 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 681, 704, 728, 728, 728, 728, 728, 728 ms/op
Iteration   3: n = 2, mean = 692 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 678, 692, 705, 705, 705, 705, 705, 705 ms/op

# Run progress: 70.11% complete, ETA 00:46:30
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 875 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 757, 875, 993, 993, 993, 993, 993, 993 ms/op
# Warmup Iteration   2: n = 2, mean = 830 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 733, 830, 928, 928, 928, 928, 928, 928 ms/op
# Warmup Iteration   3: n = 2, mean = 751 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 735, 751, 768, 768, 768, 768, 768, 768 ms/op
Iteration   1: n = 2, mean = 689 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 688, 689, 691, 691, 691, 691, 691, 691 ms/op
Iteration   2: n = 2, mean = 827 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 679, 827, 975, 975, 975, 975, 975, 975 ms/op
Iteration   3: n = 2, mean = 697 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 675, 697, 718, 718, 718, 718, 718, 718 ms/op


Result "readCrc":
  N = 18
  mean =    721.129 ±(99.9%) 81.916 ms/op

  Histogram, ms/op:
    [ 600.000,  625.000) = 0 
    [ 625.000,  650.000) = 0 
    [ 650.000,  675.000) = 1 
    [ 675.000,  700.000) = 11 
    [ 700.000,  725.000) = 2 
    [ 725.000,  750.000) = 2 
    [ 750.000,  775.000) = 0 
    [ 775.000,  800.000) = 0 
    [ 800.000,  825.000) = 0 
    [ 825.000,  850.000) = 0 
    [ 850.000,  875.000) = 0 
    [ 875.000,  900.000) = 0 
    [ 900.000,  925.000) = 0 
    [ 925.000,  950.000) = 1 
    [ 950.000,  975.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    672.137 ms/op
     p(50.0000) =    689.439 ms/op
     p(90.0000) =    941.202 ms/op
     p(95.0000) =    975.176 ms/op
     p(99.0000) =    975.176 ms/op
     p(99.9000) =    975.176 ms/op
     p(99.9900) =    975.176 ms/op
     p(99.9990) =    975.176 ms/op
     p(99.9999) =    975.176 ms/op
    p(100.0000) =    975.176 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 70.26% complete, ETA 00:46:16
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 830 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 781, 830, 880, 880, 880, 880, 880, 880 ms/op
# Warmup Iteration   2: n = 2, mean = 736 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 700, 736, 771, 771, 771, 771, 771, 771 ms/op
# Warmup Iteration   3: n = 2, mean = 839 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 759, 839, 920, 920, 920, 920, 920, 920 ms/op
Iteration   1: n = 2, mean = 742 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 689, 742, 796, 796, 796, 796, 796, 796 ms/op
Iteration   2: n = 2, mean = 693 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 691, 693, 695, 695, 695, 695, 695, 695 ms/op
Iteration   3: n = 2, mean = 798 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 710, 798, 886, 886, 886, 886, 886, 886 ms/op

# Run progress: 70.40% complete, ETA 00:46:02
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 837 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 729, 837, 946, 946, 946, 946, 946, 946 ms/op
# Warmup Iteration   2: n = 2, mean = 715 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 647, 715, 783, 783, 783, 783, 783, 783 ms/op
# Warmup Iteration   3: n = 2, mean = 756 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 681, 756, 832, 832, 832, 832, 832, 832 ms/op
Iteration   1: n = 2, mean = 742 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 645, 742, 839, 839, 839, 839, 839, 839 ms/op
Iteration   2: n = 2, mean = 631 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 629, 631, 632, 632, 632, 632, 632, 632 ms/op
Iteration   3: n = 2, mean = 690 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 639, 690, 742, 742, 742, 742, 742, 742 ms/op

# Run progress: 70.55% complete, ETA 00:45:48
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 860 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 758, 860, 962, 962, 962, 962, 962, 962 ms/op
# Warmup Iteration   2: n = 2, mean = 649 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 646, 649, 652, 652, 652, 652, 652, 652 ms/op
# Warmup Iteration   3: n = 2, mean = 686 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 681, 686, 692, 692, 692, 692, 692, 692 ms/op
Iteration   1: n = 2, mean = 675 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 641, 675, 710, 710, 710, 710, 710, 710 ms/op
Iteration   2: n = 2, mean = 732 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 669, 732, 795, 795, 795, 795, 795, 795 ms/op
Iteration   3: n = 2, mean = 650 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 648, 650, 651, 651, 651, 651, 651, 651 ms/op


Result "readCrc":
  N = 18
  mean =    705.925 ±(99.9%) 71.553 ms/op

  Histogram, ms/op:
    [600.000, 625.000) = 0 
    [625.000, 650.000) = 6 
    [650.000, 675.000) = 2 
    [675.000, 700.000) = 3 
    [700.000, 725.000) = 2 
    [725.000, 750.000) = 1 
    [750.000, 775.000) = 0 
    [775.000, 800.000) = 2 
    [800.000, 825.000) = 0 
    [825.000, 850.000) = 1 
    [850.000, 875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    629.146 ms/op
     p(50.0000) =    689.963 ms/op
     p(90.0000) =    843.579 ms/op
     p(95.0000) =    886.047 ms/op
     p(99.0000) =    886.047 ms/op
     p(99.9000) =    886.047 ms/op
     p(99.9900) =    886.047 ms/op
     p(99.9990) =    886.047 ms/op
     p(99.9999) =    886.047 ms/op
    p(100.0000) =    886.047 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 70.69% complete, ETA 00:45:34
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 8590 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8590, 8590, 8590, 8590, 8590, 8590, 8590, 8590 ms/op
# Warmup Iteration   2: n = 1, mean = 8145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8145, 8145, 8145, 8145, 8145, 8145, 8145, 8145 ms/op
# Warmup Iteration   3: n = 1, mean = 7910 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7910, 7910, 7910, 7910, 7910, 7910, 7910, 7910 ms/op
Iteration   1: n = 1, mean = 7927 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7927, 7927, 7927, 7927, 7927, 7927, 7927, 7927 ms/op
Iteration   2: n = 1, mean = 7533 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7533, 7533, 7533, 7533, 7533, 7533, 7533, 7533 ms/op
Iteration   3: 
Bytes	before-close	108859392	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	108859392	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 7869 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7869, 7869, 7869, 7869, 7869, 7869, 7869, 7869 ms/op

# Run progress: 70.83% complete, ETA 00:45:35
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 9043 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9043, 9043, 9043, 9043, 9043, 9043, 9043, 9043 ms/op
# Warmup Iteration   2: n = 1, mean = 7936 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7936, 7936, 7936, 7936, 7936, 7936, 7936, 7936 ms/op
# Warmup Iteration   3: n = 1, mean = 7608 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7608, 7608, 7608, 7608, 7608, 7608, 7608, 7608 ms/op
Iteration   1: n = 1, mean = 7600 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7600, 7600, 7600, 7600, 7600, 7600, 7600, 7600 ms/op
Iteration   2: n = 1, mean = 7617 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7617, 7617, 7617, 7617, 7617, 7617, 7617, 7617 ms/op
Iteration   3: 
Bytes	before-close	108859392	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	108859392	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 7457 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7457, 7457, 7457, 7457, 7457, 7457, 7457, 7457 ms/op

# Run progress: 70.98% complete, ETA 00:45:37
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 8414 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8414, 8414, 8414, 8414, 8414, 8414, 8414, 8414 ms/op
# Warmup Iteration   2: n = 1, mean = 8103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8103, 8103, 8103, 8103, 8103, 8103, 8103, 8103 ms/op
# Warmup Iteration   3: n = 1, mean = 7684 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7684, 7684, 7684, 7684, 7684, 7684, 7684, 7684 ms/op
Iteration   1: n = 1, mean = 7793 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7793, 7793, 7793, 7793, 7793, 7793, 7793, 7793 ms/op
Iteration   2: n = 1, mean = 8280 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8280, 8280, 8280, 8280, 8280, 8280, 8280, 8280 ms/op
Iteration   3: 
Bytes	before-close	108859392	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	108859392	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 7743 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7743, 7743, 7743, 7743, 7743, 7743, 7743, 7743 ms/op


Result "readKey":
  N = 9
  mean =   7757.598 ±(99.9%) 420.172 ms/op

  Histogram, ms/op:
    [7400.000, 7450.000) = 0 
    [7450.000, 7500.000) = 1 
    [7500.000, 7550.000) = 1 
    [7550.000, 7600.000) = 0 
    [7600.000, 7650.000) = 2 
    [7650.000, 7700.000) = 0 
    [7700.000, 7750.000) = 1 
    [7750.000, 7800.000) = 1 
    [7800.000, 7850.000) = 0 
    [7850.000, 7900.000) = 1 
    [7900.000, 7950.000) = 1 
    [7950.000, 8000.000) = 0 
    [8000.000, 8050.000) = 0 
    [8050.000, 8100.000) = 0 
    [8100.000, 8150.000) = 0 
    [8150.000, 8200.000) = 0 
    [8200.000, 8250.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   7457.473 ms/op
     p(50.0000) =   7742.685 ms/op
     p(90.0000) =   8279.556 ms/op
     p(95.0000) =   8279.556 ms/op
     p(99.0000) =   8279.556 ms/op
     p(99.9000) =   8279.556 ms/op
     p(99.9900) =   8279.556 ms/op
     p(99.9990) =   8279.556 ms/op
     p(99.9999) =   8279.556 ms/op
    p(100.0000) =   8279.556 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readKey
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 71.12% complete, ETA 00:45:38
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 9227 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9227, 9227, 9227, 9227, 9227, 9227, 9227, 9227 ms/op
# Warmup Iteration   2: n = 1, mean = 8758 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8758, 8758, 8758, 8758, 8758, 8758, 8758, 8758 ms/op
# Warmup Iteration   3: n = 1, mean = 8414 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8414, 8414, 8414, 8414, 8414, 8414, 8414, 8414 ms/op
Iteration   1: n = 1, mean = 8305 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8305, 8305, 8305, 8305, 8305, 8305, 8305, 8305 ms/op
Iteration   2: n = 1, mean = 8212 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8212, 8212, 8212, 8212, 8212, 8212, 8212, 8212 ms/op
Iteration   3: 
Bytes	before-close	108937216	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	108937216	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 8246 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8246, 8246, 8246, 8246, 8246, 8246, 8246, 8246 ms/op

# Run progress: 71.26% complete, ETA 00:45:41
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 8842 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8842, 8842, 8842, 8842, 8842, 8842, 8842, 8842 ms/op
# Warmup Iteration   2: n = 1, mean = 8590 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8590, 8590, 8590, 8590, 8590, 8590, 8590, 8590 ms/op
# Warmup Iteration   3: n = 1, mean = 9093 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9093, 9093, 9093, 9093, 9093, 9093, 9093, 9093 ms/op
Iteration   1: n = 1, mean = 8590 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8590, 8590, 8590, 8590, 8590, 8590, 8590, 8590 ms/op
Iteration   2: n = 1, mean = 8540 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8540, 8540, 8540, 8540, 8540, 8540, 8540, 8540 ms/op
Iteration   3: 
Bytes	before-close	108933120	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	108933120	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 8707 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8707, 8707, 8707, 8707, 8707, 8707, 8707, 8707 ms/op

# Run progress: 71.41% complete, ETA 00:45:44
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 8909 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8909, 8909, 8909, 8909, 8909, 8909, 8909, 8909 ms/op
# Warmup Iteration   2: n = 1, mean = 8565 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8565, 8565, 8565, 8565, 8565, 8565, 8565, 8565 ms/op
# Warmup Iteration   3: n = 1, mean = 8791 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8791, 8791, 8791, 8791, 8791, 8791, 8791, 8791 ms/op
Iteration   1: n = 1, mean = 8540 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8540, 8540, 8540, 8540, 8540, 8540, 8540, 8540 ms/op
Iteration   2: n = 1, mean = 8246 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8246, 8246, 8246, 8246, 8246, 8246, 8246, 8246 ms/op
Iteration   3: 
Bytes	before-close	108933120	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	108933120	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 8397 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8397, 8397, 8397, 8397, 8397, 8397, 8397, 8397 ms/op


Result "readKey":
  N = 9
  mean =   8420.298 ±(99.9%) 301.496 ms/op

  Histogram, ms/op:
    [8200.000, 8250.000) = 3 
    [8250.000, 8300.000) = 0 
    [8300.000, 8350.000) = 1 
    [8350.000, 8400.000) = 1 
    [8400.000, 8450.000) = 0 
    [8450.000, 8500.000) = 0 
    [8500.000, 8550.000) = 2 
    [8550.000, 8600.000) = 1 
    [8600.000, 8650.000) = 0 
    [8650.000, 8700.000) = 0 
    [8700.000, 8750.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   8212.447 ms/op
     p(50.0000) =   8396.997 ms/op
     p(90.0000) =   8707.375 ms/op
     p(95.0000) =   8707.375 ms/op
     p(99.0000) =   8707.375 ms/op
     p(99.9000) =   8707.375 ms/op
     p(99.9900) =   8707.375 ms/op
     p(99.9990) =   8707.375 ms/op
     p(99.9999) =   8707.375 ms/op
    p(100.0000) =   8707.375 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readKey
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 71.55% complete, ETA 00:45:46
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 841 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 794, 841, 889, 889, 889, 889, 889, 889 ms/op
# Warmup Iteration   2: n = 2, mean = 793 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 714, 793, 872, 872, 872, 872, 872, 872 ms/op
# Warmup Iteration   3: n = 2, mean = 851 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 748, 851, 954, 954, 954, 954, 954, 954 ms/op
Iteration   1: n = 2, mean = 836 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 778, 836, 893, 893, 893, 893, 893, 893 ms/op
Iteration   2: n = 2, mean = 822 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 822, 822, 822, 822, 822, 822, 822, 822 ms/op
Iteration   3: 
Bytes	before-close	124211200	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	124211200	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 2, mean = 768 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 757, 768, 778, 778, 778, 778, 778, 778 ms/op

# Run progress: 71.70% complete, ETA 00:45:32
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 838 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 736, 838, 940, 940, 940, 940, 940, 940 ms/op
# Warmup Iteration   2: n = 1, mean = 1031 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031 ms/op
# Warmup Iteration   3: n = 2, mean = 815 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 799, 815, 830, 830, 830, 830, 830, 830 ms/op
Iteration   1: n = 1, mean = 1000 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000 ms/op
Iteration   2: n = 2, mean = 823 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 822, 823, 823, 823, 823, 823, 823, 823 ms/op
Iteration   3: 
Bytes	before-close	124211200	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	124211200	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 1076 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076 ms/op

# Run progress: 71.84% complete, ETA 00:45:17
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141 ms/op
# Warmup Iteration   2: n = 2, mean = 1044 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 957, 1044, 1130, 1130, 1130, 1130, 1130, 1130 ms/op
# Warmup Iteration   3: n = 2, mean = 785 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 784, 785, 785, 785, 785, 785, 785, 785 ms/op
Iteration   1: n = 2, mean = 866 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 789, 866, 943, 943, 943, 943, 943, 943 ms/op
Iteration   2: n = 2, mean = 812 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 785, 812, 838, 838, 838, 838, 838, 838 ms/op
Iteration   3: 
Bytes	before-close	124211200	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	124211200	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 1021 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021 ms/op


Result "readKey":
  N = 15
  mean =    863.188 ±(99.9%) 107.275 ms/op

  Histogram, ms/op:
    [ 700.000,  725.000) = 0 
    [ 725.000,  750.000) = 0 
    [ 750.000,  775.000) = 1 
    [ 775.000,  800.000) = 4 
    [ 800.000,  825.000) = 4 
    [ 825.000,  850.000) = 1 
    [ 850.000,  875.000) = 0 
    [ 875.000,  900.000) = 1 
    [ 900.000,  925.000) = 0 
    [ 925.000,  950.000) = 1 
    [ 950.000,  975.000) = 0 
    [ 975.000, 1000.000) = 0 
    [1000.000, 1025.000) = 2 
    [1025.000, 1050.000) = 0 
    [1050.000, 1075.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    757.072 ms/op
     p(50.0000) =    822.084 ms/op
     p(90.0000) =   1043.123 ms/op
     p(95.0000) =   1075.839 ms/op
     p(99.0000) =   1075.839 ms/op
     p(99.9000) =   1075.839 ms/op
     p(99.9900) =   1075.839 ms/op
     p(99.9990) =   1075.839 ms/op
     p(99.9999) =   1075.839 ms/op
    p(100.0000) =   1075.839 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readKey
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 71.98% complete, ETA 00:45:02
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 10603 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10603, 10603, 10603, 10603, 10603, 10603, 10603, 10603 ms/op
# Warmup Iteration   2: n = 1, mean = 10016 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10016, 10016, 10016, 10016, 10016, 10016, 10016, 10016 ms/op
# Warmup Iteration   3: n = 1, mean = 10016 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10016, 10016, 10016, 10016, 10016, 10016, 10016, 10016 ms/op
Iteration   1: n = 1, mean = 9412 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9412, 9412, 9412, 9412, 9412, 9412, 9412, 9412 ms/op
Iteration   2: n = 1, mean = 9446 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9446, 9446, 9446, 9446, 9446, 9446, 9446, 9446 ms/op
Iteration   3: 
Bytes	before-close	123576320	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	123576320	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 9731 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9731, 9731, 9731, 9731, 9731, 9731, 9731, 9731 ms/op

# Run progress: 72.13% complete, ETA 00:45:07
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 10536 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10536, 10536, 10536, 10536, 10536, 10536, 10536, 10536 ms/op
# Warmup Iteration   2: n = 1, mean = 10066 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10066, 10066, 10066, 10066, 10066, 10066, 10066, 10066 ms/op
# Warmup Iteration   3: n = 1, mean = 9697 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9697, 9697, 9697, 9697, 9697, 9697, 9697, 9697 ms/op
Iteration   1: n = 1, mean = 9982 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9982, 9982, 9982, 9982, 9982, 9982, 9982, 9982 ms/op
Iteration   2: n = 1, mean = 9647 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9647, 9647, 9647, 9647, 9647, 9647, 9647, 9647 ms/op
Iteration   3: 
Bytes	before-close	123580416	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	123580416	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 9529 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9529, 9529, 9529, 9529, 9529, 9529, 9529, 9529 ms/op

# Run progress: 72.27% complete, ETA 00:45:12
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 10452 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10452, 10452, 10452, 10452, 10452, 10452, 10452, 10452 ms/op
# Warmup Iteration   2: n = 1, mean = 10050 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10050, 10050, 10050, 10050, 10050, 10050, 10050, 10050 ms/op
# Warmup Iteration   3: n = 1, mean = 9899 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9899, 9899, 9899, 9899, 9899, 9899, 9899, 9899 ms/op
Iteration   1: n = 1, mean = 9479 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9479, 9479, 9479, 9479, 9479, 9479, 9479, 9479 ms/op
Iteration   2: n = 1, mean = 9915 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9915, 9915, 9915, 9915, 9915, 9915, 9915, 9915 ms/op
Iteration   3: 
Bytes	before-close	123580416	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	123580416	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 9680 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9680, 9680, 9680, 9680, 9680, 9680, 9680, 9680 ms/op


Result "readKey":
  N = 9
  mean =   9646.899 ±(99.9%) 341.531 ms/op

  Histogram, ms/op:
    [ 9400.000,  9450.000) = 2 
    [ 9450.000,  9500.000) = 1 
    [ 9500.000,  9550.000) = 1 
    [ 9550.000,  9600.000) = 0 
    [ 9600.000,  9650.000) = 1 
    [ 9650.000,  9700.000) = 1 
    [ 9700.000,  9750.000) = 1 
    [ 9750.000,  9800.000) = 0 
    [ 9800.000,  9850.000) = 0 
    [ 9850.000,  9900.000) = 0 
    [ 9900.000,  9950.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   9412.018 ms/op
     p(50.0000) =   9646.899 ms/op
     p(90.0000) =   9982.444 ms/op
     p(95.0000) =   9982.444 ms/op
     p(99.0000) =   9982.444 ms/op
     p(99.9000) =   9982.444 ms/op
     p(99.9900) =   9982.444 ms/op
     p(99.9990) =   9982.444 ms/op
     p(99.9999) =   9982.444 ms/op
    p(100.0000) =   9982.444 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readRev
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 72.41% complete, ETA 00:45:16
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 708 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 643, 708, 774, 774, 774, 774, 774, 774 ms/op
# Warmup Iteration   2: n = 2, mean = 654 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 622, 654, 686, 686, 686, 686, 686, 686 ms/op
# Warmup Iteration   3: n = 2, mean = 542 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 537, 542, 547, 547, 547, 547, 547, 547 ms/op
Iteration   1: n = 2, mean = 580 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 576, 580, 585, 585, 585, 585, 585, 585 ms/op
Iteration   2: n = 2, mean = 563 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 543, 563, 583, 583, 583, 583, 583, 583 ms/op
Iteration   3: n = 2, mean = 541 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 531, 541, 552, 552, 552, 552, 552, 552 ms/op

# Run progress: 72.56% complete, ETA 00:45:01
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 676 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 569, 676, 783, 783, 783, 783, 783, 783 ms/op
# Warmup Iteration   2: n = 2, mean = 592 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 536, 592, 648, 648, 648, 648, 648, 648 ms/op
# Warmup Iteration   3: n = 2, mean = 661 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 625, 661, 696, 696, 696, 696, 696, 696 ms/op
Iteration   1: n = 2, mean = 624 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 587, 624, 662, 662, 662, 662, 662, 662 ms/op
Iteration   2: n = 2, mean = 618 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 592, 618, 644, 644, 644, 644, 644, 644 ms/op
Iteration   3: n = 2, mean = 613 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 563, 613, 664, 664, 664, 664, 664, 664 ms/op

# Run progress: 72.70% complete, ETA 00:44:45
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 630 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 541, 630, 719, 719, 719, 719, 719, 719 ms/op
# Warmup Iteration   2: n = 2, mean = 607 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 568, 607, 646, 646, 646, 646, 646, 646 ms/op
# Warmup Iteration   3: n = 2, mean = 629 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 568, 629, 690, 690, 690, 690, 690, 690 ms/op
Iteration   1: n = 2, mean = 602 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 569, 602, 635, 635, 635, 635, 635, 635 ms/op
Iteration   2: n = 2, mean = 548 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 530, 548, 565, 565, 565, 565, 565, 565 ms/op
Iteration   3: n = 2, mean = 536 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 534, 536, 537, 537, 537, 537, 537, 537 ms/op


Result "readRev":
  N = 18
  mean =    580.678 ±(99.9%) 41.024 ms/op

  Histogram, ms/op:
    [500.000, 512.500) = 0 
    [512.500, 525.000) = 0 
    [525.000, 537.500) = 4 
    [537.500, 550.000) = 1 
    [550.000, 562.500) = 1 
    [562.500, 575.000) = 3 
    [575.000, 587.500) = 4 
    [587.500, 600.000) = 1 
    [600.000, 612.500) = 0 
    [612.500, 625.000) = 0 
    [625.000, 637.500) = 1 
    [637.500, 650.000) = 1 
    [650.000, 662.500) = 1 
    [662.500, 675.000) = 1 
    [675.000, 687.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    530.055 ms/op
     p(50.0000) =    572.522 ms/op
     p(90.0000) =    661.861 ms/op
     p(95.0000) =    663.749 ms/op
     p(99.0000) =    663.749 ms/op
     p(99.9000) =    663.749 ms/op
     p(99.9900) =    663.749 ms/op
     p(99.9990) =    663.749 ms/op
     p(99.9999) =    663.749 ms/op
    p(100.0000) =    663.749 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readRev
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 72.84% complete, ETA 00:44:29
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 660 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 580, 660, 739, 739, 739, 739, 739, 739 ms/op
# Warmup Iteration   2: n = 2, mean = 601 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 593, 601, 608, 608, 608, 608, 608, 608 ms/op
# Warmup Iteration   3: n = 2, mean = 625 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 590, 625, 661, 661, 661, 661, 661, 661 ms/op
Iteration   1: n = 2, mean = 625 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 621, 625, 630, 630, 630, 630, 630, 630 ms/op
Iteration   2: n = 2, mean = 600 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 597, 600, 603, 603, 603, 603, 603, 603 ms/op
Iteration   3: n = 2, mean = 582 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 582, 582, 583, 583, 583, 583, 583, 583 ms/op

# Run progress: 72.99% complete, ETA 00:44:13
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 780 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 776, 780, 783, 783, 783, 783, 783, 783 ms/op
# Warmup Iteration   2: n = 2, mean = 599 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 578, 599, 620, 620, 620, 620, 620, 620 ms/op
# Warmup Iteration   3: n = 2, mean = 527 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 526, 527, 527, 527, 527, 527, 527, 527 ms/op
Iteration   1: n = 2, mean = 563 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 561, 563, 565, 565, 565, 565, 565, 565 ms/op
Iteration   2: n = 2, mean = 539 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 523, 539, 556, 556, 556, 556, 556, 556 ms/op
Iteration   3: n = 2, mean = 530 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 522, 530, 538, 538, 538, 538, 538, 538 ms/op

# Run progress: 73.13% complete, ETA 00:43:57
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 613 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 532, 613, 695, 695, 695, 695, 695, 695 ms/op
# Warmup Iteration   2: n = 2, mean = 613 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 595, 613, 631, 631, 631, 631, 631, 631 ms/op
# Warmup Iteration   3: n = 2, mean = 543 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 541, 543, 544, 544, 544, 544, 544, 544 ms/op
Iteration   1: n = 2, mean = 633 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 575, 633, 691, 691, 691, 691, 691, 691 ms/op
Iteration   2: n = 2, mean = 551 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 537, 551, 565, 565, 565, 565, 565, 565 ms/op
Iteration   3: n = 2, mean = 547 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 545, 547, 549, 549, 549, 549, 549, 549 ms/op


Result "readRev":
  N = 18
  mean =    574.591 ±(99.9%) 39.655 ms/op

  Histogram, ms/op:
    [500.000, 512.500) = 0 
    [512.500, 525.000) = 2 
    [525.000, 537.500) = 1 
    [537.500, 550.000) = 3 
    [550.000, 562.500) = 2 
    [562.500, 575.000) = 3 
    [575.000, 587.500) = 2 
    [587.500, 600.000) = 1 
    [600.000, 612.500) = 1 
    [612.500, 625.000) = 1 
    [625.000, 637.500) = 1 
    [637.500, 650.000) = 0 
    [650.000, 662.500) = 0 
    [662.500, 675.000) = 0 
    [675.000, 687.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    521.667 ms/op
     p(50.0000) =    565.182 ms/op
     p(90.0000) =    636.276 ms/op
     p(95.0000) =    691.012 ms/op
     p(99.0000) =    691.012 ms/op
     p(99.9000) =    691.012 ms/op
     p(99.9900) =    691.012 ms/op
     p(99.9990) =    691.012 ms/op
     p(99.9999) =    691.012 ms/op
    p(100.0000) =    691.012 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readRev
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 73.28% complete, ETA 00:43:41
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 832 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 705, 832, 959, 959, 959, 959, 959, 959 ms/op
# Warmup Iteration   2: n = 2, mean = 800 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 796, 800, 803, 803, 803, 803, 803, 803 ms/op
# Warmup Iteration   3: n = 2, mean = 756 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 713, 756, 799, 799, 799, 799, 799, 799 ms/op
Iteration   1: n = 2, mean = 727 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 661, 727, 793, 793, 793, 793, 793, 793 ms/op
Iteration   2: n = 2, mean = 660 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 660, 660, 661, 661, 661, 661, 661, 661 ms/op
Iteration   3: n = 2, mean = 669 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 660, 669, 678, 678, 678, 678, 678, 678 ms/op

# Run progress: 73.42% complete, ETA 00:43:26
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 832 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 823, 832, 841, 841, 841, 841, 841, 841 ms/op
# Warmup Iteration   2: n = 2, mean = 707 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 685, 707, 729, 729, 729, 729, 729, 729 ms/op
# Warmup Iteration   3: n = 2, mean = 721 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 718, 721, 725, 725, 725, 725, 725, 725 ms/op
Iteration   1: n = 2, mean = 681 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 675, 681, 687, 687, 687, 687, 687, 687 ms/op
Iteration   2: n = 2, mean = 687 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 679, 687, 694, 694, 694, 694, 694, 694 ms/op
Iteration   3: n = 2, mean = 685 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 683, 685, 688, 688, 688, 688, 688, 688 ms/op

# Run progress: 73.56% complete, ETA 00:43:11
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1000 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000 ms/op
# Warmup Iteration   2: n = 1, mean = 1033 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033 ms/op
# Warmup Iteration   3: n = 2, mean = 736 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 733, 736, 739, 739, 739, 739, 739, 739 ms/op
Iteration   1: n = 2, mean = 739 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 729, 739, 749, 749, 749, 749, 749, 749 ms/op
Iteration   2: n = 1, mean = 1051 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051 ms/op
Iteration   3: n = 2, mean = 751 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 701, 751, 801, 801, 801, 801, 801, 801 ms/op


Result "readRev":
  N = 17
  mean =    720.495 ±(99.9%) 93.142 ms/op

  Histogram, ms/op:
    [ 600.000,  650.000) = 0 
    [ 650.000,  700.000) = 11 
    [ 700.000,  750.000) = 3 
    [ 750.000,  800.000) = 1 
    [ 800.000,  850.000) = 1 
    [ 850.000,  900.000) = 0 
    [ 900.000,  950.000) = 0 
    [ 950.000, 1000.000) = 0 
    [1000.000, 1050.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    659.554 ms/op
     p(50.0000) =    686.817 ms/op
     p(90.0000) =    851.024 ms/op
     p(95.0000) =   1050.673 ms/op
     p(99.0000) =   1050.673 ms/op
     p(99.9000) =   1050.673 ms/op
     p(99.9900) =   1050.673 ms/op
     p(99.9990) =   1050.673 ms/op
     p(99.9999) =   1050.673 ms/op
    p(100.0000) =   1050.673 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readRev
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 73.71% complete, ETA 00:42:55
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 829 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 701, 829, 957, 957, 957, 957, 957, 957 ms/op
# Warmup Iteration   2: n = 2, mean = 791 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 772, 791, 810, 810, 810, 810, 810, 810 ms/op
# Warmup Iteration   3: n = 2, mean = 751 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 691, 751, 812, 812, 812, 812, 812, 812 ms/op
Iteration   1: n = 2, mean = 746 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 656, 746, 836, 836, 836, 836, 836, 836 ms/op
Iteration   2: n = 2, mean = 726 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 661, 726, 792, 792, 792, 792, 792, 792 ms/op
Iteration   3: n = 2, mean = 642 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 638, 642, 646, 646, 646, 646, 646, 646 ms/op

# Run progress: 73.85% complete, ETA 00:42:40
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 860 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 743, 860, 976, 976, 976, 976, 976, 976 ms/op
# Warmup Iteration   2: n = 2, mean = 759 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 666, 759, 851, 851, 851, 851, 851, 851 ms/op
# Warmup Iteration   3: n = 2, mean = 715 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 701, 715, 729, 729, 729, 729, 729, 729 ms/op
Iteration   1: n = 2, mean = 846 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 728, 846, 964, 964, 964, 964, 964, 964 ms/op
Iteration   2: n = 2, mean = 768 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 715, 768, 820, 820, 820, 820, 820, 820 ms/op
Iteration   3: n = 2, mean = 696 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 694, 696, 698, 698, 698, 698, 698, 698 ms/op

# Run progress: 73.99% complete, ETA 00:42:26
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 921 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 856, 921, 986, 986, 986, 986, 986, 986 ms/op
# Warmup Iteration   2: n = 2, mean = 762 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 694, 762, 830, 830, 830, 830, 830, 830 ms/op
# Warmup Iteration   3: n = 2, mean = 725 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 722, 725, 728, 728, 728, 728, 728, 728 ms/op
Iteration   1: n = 2, mean = 696 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 668, 696, 725, 725, 725, 725, 725, 725 ms/op
Iteration   2: n = 2, mean = 675 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 666, 675, 684, 684, 684, 684, 684, 684 ms/op
Iteration   3: n = 2, mean = 811 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 728, 811, 894, 894, 894, 894, 894, 894 ms/op


Result "readRev":
  N = 18
  mean =    733.945 ±(99.9%) 85.697 ms/op

  Histogram, ms/op:
    [ 600.000,  625.000) = 0 
    [ 625.000,  650.000) = 2 
    [ 650.000,  675.000) = 4 
    [ 675.000,  700.000) = 3 
    [ 700.000,  725.000) = 2 
    [ 725.000,  750.000) = 2 
    [ 750.000,  775.000) = 0 
    [ 775.000,  800.000) = 1 
    [ 800.000,  825.000) = 1 
    [ 825.000,  850.000) = 1 
    [ 850.000,  875.000) = 0 
    [ 875.000,  900.000) = 1 
    [ 900.000,  925.000) = 0 
    [ 925.000,  950.000) = 0 
    [ 950.000,  975.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    637.534 ms/op
     p(50.0000) =    706.740 ms/op
     p(90.0000) =    901.356 ms/op
     p(95.0000) =    963.641 ms/op
     p(99.0000) =    963.641 ms/op
     p(99.9000) =    963.641 ms/op
     p(99.9900) =    963.641 ms/op
     p(99.9990) =    963.641 ms/op
     p(99.9999) =    963.641 ms/op
    p(100.0000) =    963.641 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 74.14% complete, ETA 00:42:11
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 550 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 468, 550, 631, 631, 631, 631, 631, 631 ms/op
# Warmup Iteration   2: n = 2, mean = 522 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 498, 522, 547, 547, 547, 547, 547, 547 ms/op
# Warmup Iteration   3: n = 3, mean = 454 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 442, 442, 478, 478, 478, 478, 478, 478 ms/op
Iteration   1: n = 3, mean = 468 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 441, 478, 484, 484, 484, 484, 484, 484 ms/op
Iteration   2: n = 3, mean = 441 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 440, 441, 442, 442, 442, 442, 442, 442 ms/op
Iteration   3: n = 3, mean = 443 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 439, 440, 449, 449, 449, 449, 449, 449 ms/op

# Run progress: 74.28% complete, ETA 00:41:55
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 527 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 455, 527, 599, 599, 599, 599, 599, 599 ms/op
# Warmup Iteration   2: n = 2, mean = 531 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 505, 531, 558, 558, 558, 558, 558, 558 ms/op
# Warmup Iteration   3: n = 2, mean = 528 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 494, 528, 562, 562, 562, 562, 562, 562 ms/op
Iteration   1: n = 3, mean = 496 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 483, 499, 505, 505, 505, 505, 505, 505 ms/op
Iteration   2: n = 2, mean = 517 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 470, 517, 564, 564, 564, 564, 564, 564 ms/op
Iteration   3: n = 2, mean = 529 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 494, 529, 564, 564, 564, 564, 564, 564 ms/op

# Run progress: 74.43% complete, ETA 00:41:40
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 571 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 495, 571, 646, 646, 646, 646, 646, 646 ms/op
# Warmup Iteration   2: n = 2, mean = 531 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 506, 531, 555, 555, 555, 555, 555, 555 ms/op
# Warmup Iteration   3: n = 3, mean = 456 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 442, 445, 481, 481, 481, 481, 481, 481 ms/op
Iteration   1: n = 2, mean = 580 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 528, 580, 631, 631, 631, 631, 631, 631 ms/op
Iteration   2: n = 3, mean = 446 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 442, 444, 451, 451, 451, 451, 451, 451 ms/op
Iteration   3: n = 3, mean = 457 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 451, 455, 466, 466, 466, 466, 466, 466 ms/op


Result "readSeq":
  N = 24
  mean =    479.330 ±(99.9%) 37.980 ms/op

  Histogram, ms/op:
    [400.000, 425.000) = 0 
    [425.000, 450.000) = 9 
    [450.000, 475.000) = 5 
    [475.000, 500.000) = 5 
    [500.000, 525.000) = 1 
    [525.000, 550.000) = 1 
    [550.000, 575.000) = 2 
    [575.000, 600.000) = 0 
    [600.000, 625.000) = 0 
    [625.000, 650.000) = 1 
    [650.000, 675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    438.829 ms/op
     p(50.0000) =    460.587 ms/op
     p(90.0000) =    564.134 ms/op
     p(95.0000) =    614.466 ms/op
     p(99.0000) =    631.243 ms/op
     p(99.9000) =    631.243 ms/op
     p(99.9900) =    631.243 ms/op
     p(99.9990) =    631.243 ms/op
     p(99.9999) =    631.243 ms/op
    p(100.0000) =    631.243 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 74.57% complete, ETA 00:41:24
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 623 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 609, 623, 636, 636, 636, 636, 636, 636 ms/op
# Warmup Iteration   2: n = 2, mean = 507 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 461, 507, 554, 554, 554, 554, 554, 554 ms/op
# Warmup Iteration   3: n = 3, mean = 456 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 441, 458, 470, 470, 470, 470, 470, 470 ms/op
Iteration   1: n = 3, mean = 468 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 463, 463, 479, 479, 479, 479, 479, 479 ms/op
Iteration   2: n = 3, mean = 446 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 439, 450, 450, 450, 450, 450, 450, 450 ms/op
Iteration   3: n = 3, mean = 456 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 448, 455, 466, 466, 466, 466, 466, 466 ms/op

# Run progress: 74.71% complete, ETA 00:41:09
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 618 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 506, 618, 731, 731, 731, 731, 731, 731 ms/op
# Warmup Iteration   2: n = 2, mean = 527 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 476, 527, 579, 579, 579, 579, 579, 579 ms/op
# Warmup Iteration   3: n = 2, mean = 593 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 528, 593, 659, 659, 659, 659, 659, 659 ms/op
Iteration   1: n = 2, mean = 553 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 506, 553, 600, 600, 600, 600, 600, 600 ms/op
Iteration   2: n = 3, mean = 469 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 458, 460, 490, 490, 490, 490, 490, 490 ms/op
Iteration   3: n = 3, mean = 470 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 455, 463, 491, 491, 491, 491, 491, 491 ms/op

# Run progress: 74.86% complete, ETA 00:40:53
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 599 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 494, 599, 704, 704, 704, 704, 704, 704 ms/op
# Warmup Iteration   2: n = 3, mean = 456 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 454, 454, 459, 459, 459, 459, 459, 459 ms/op
# Warmup Iteration   3: n = 2, mean = 613 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 585, 613, 642, 642, 642, 642, 642, 642 ms/op
Iteration   1: n = 2, mean = 582 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 529, 582, 634, 634, 634, 634, 634, 634 ms/op
Iteration   2: n = 2, mean = 548 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 505, 548, 590, 590, 590, 590, 590, 590 ms/op
Iteration   3: n = 3, mean = 452 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 445, 452, 458, 458, 458, 458, 458, 458 ms/op


Result "readSeq":
  N = 24
  mean =    485.381 ±(99.9%) 40.520 ms/op

  Histogram, ms/op:
    [400.000, 425.000) = 0 
    [425.000, 450.000) = 5 
    [450.000, 475.000) = 10 
    [475.000, 500.000) = 3 
    [500.000, 525.000) = 2 
    [525.000, 550.000) = 1 
    [550.000, 575.000) = 0 
    [575.000, 600.000) = 2 
    [600.000, 625.000) = 0 
    [625.000, 650.000) = 1 
    [650.000, 675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    439.353 ms/op
     p(50.0000) =    462.946 ms/op
     p(90.0000) =    595.067 ms/op
     p(95.0000) =    625.738 ms/op
     p(99.0000) =    634.388 ms/op
     p(99.9000) =    634.388 ms/op
     p(99.9900) =    634.388 ms/op
     p(99.9990) =    634.388 ms/op
     p(99.9999) =    634.388 ms/op
    p(100.0000) =    634.388 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 75.00% complete, ETA 00:40:38
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 850 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 757, 850, 943, 943, 943, 943, 943, 943 ms/op
# Warmup Iteration   2: n = 2, mean = 631 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 609, 631, 652, 652, 652, 652, 652, 652 ms/op
# Warmup Iteration   3: n = 2, mean = 638 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 635, 638, 641, 641, 641, 641, 641, 641 ms/op
Iteration   1: n = 2, mean = 645 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 587, 645, 703, 703, 703, 703, 703, 703 ms/op
Iteration   2: n = 2, mean = 599 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 584, 599, 614, 614, 614, 614, 614, 614 ms/op
Iteration   3: n = 2, mean = 590 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 589, 590, 591, 591, 591, 591, 591, 591 ms/op

# Run progress: 75.14% complete, ETA 00:40:23
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 812 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 675, 812, 949, 949, 949, 949, 949, 949 ms/op
# Warmup Iteration   2: n = 2, mean = 753 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 743, 753, 762, 762, 762, 762, 762, 762 ms/op
# Warmup Iteration   3: n = 2, mean = 635 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 619, 635, 651, 651, 651, 651, 651, 651 ms/op
Iteration   1: n = 2, mean = 588 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 585, 588, 590, 590, 590, 590, 590, 590 ms/op
Iteration   2: n = 2, mean = 776 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 765, 776, 786, 786, 786, 786, 786, 786 ms/op
Iteration   3: n = 2, mean = 696 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 623, 696, 770, 770, 770, 770, 770, 770 ms/op

# Run progress: 75.29% complete, ETA 00:40:07
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 668 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 613, 668, 722, 722, 722, 722, 722, 722 ms/op
# Warmup Iteration   2: n = 2, mean = 658 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 571, 658, 744, 744, 744, 744, 744, 744 ms/op
# Warmup Iteration   3: n = 2, mean = 679 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 677, 679, 682, 682, 682, 682, 682, 682 ms/op
Iteration   1: n = 2, mean = 574 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 569, 574, 578, 578, 578, 578, 578, 578 ms/op
Iteration   2: n = 2, mean = 586 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 579, 586, 593, 593, 593, 593, 593, 593 ms/op
Iteration   3: n = 2, mean = 574 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 569, 574, 578, 578, 578, 578, 578, 578 ms/op


Result "readSeq":
  N = 18
  mean =    625.301 ±(99.9%) 69.835 ms/op

  Histogram, ms/op:
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 0 
    [550.000, 575.000) = 2 
    [575.000, 600.000) = 10 
    [600.000, 625.000) = 2 
    [625.000, 650.000) = 0 
    [650.000, 675.000) = 0 
    [675.000, 700.000) = 0 
    [700.000, 725.000) = 1 
    [725.000, 750.000) = 0 
    [750.000, 775.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    569.377 ms/op
     p(50.0000) =    589.824 ms/op
     p(90.0000) =    771.333 ms/op
     p(95.0000) =    786.432 ms/op
     p(99.0000) =    786.432 ms/op
     p(99.9000) =    786.432 ms/op
     p(99.9900) =    786.432 ms/op
     p(99.9990) =    786.432 ms/op
     p(99.9999) =    786.432 ms/op
    p(100.0000) =    786.432 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 75.43% complete, ETA 00:39:52
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 900 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 852, 900, 948, 948, 948, 948, 948, 948 ms/op
# Warmup Iteration   2: n = 2, mean = 725 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 724, 725, 726, 726, 726, 726, 726, 726 ms/op
# Warmup Iteration   3: n = 2, mean = 794 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 721, 794, 867, 867, 867, 867, 867, 867 ms/op
Iteration   1: n = 2, mean = 583 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 563, 583, 603, 603, 603, 603, 603, 603 ms/op
Iteration   2: n = 2, mean = 598 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 587, 598, 609, 609, 609, 609, 609, 609 ms/op
Iteration   3: n = 2, mean = 614 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 589, 614, 639, 639, 639, 639, 639, 639 ms/op

# Run progress: 75.57% complete, ETA 00:39:37
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 850 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 849, 850, 850, 850, 850, 850, 850, 850 ms/op
# Warmup Iteration   2: n = 2, mean = 646 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 578, 646, 714, 714, 714, 714, 714, 714 ms/op
# Warmup Iteration   3: n = 2, mean = 579 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 570, 579, 587, 587, 587, 587, 587, 587 ms/op
Iteration   1: n = 2, mean = 565 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 547, 565, 582, 582, 582, 582, 582, 582 ms/op
Iteration   2: n = 2, mean = 548 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 543, 548, 553, 553, 553, 553, 553, 553 ms/op
Iteration   3: n = 2, mean = 558 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 551, 558, 566, 566, 566, 566, 566, 566 ms/op

# Run progress: 75.72% complete, ETA 00:39:22
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 846 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 770, 846, 923, 923, 923, 923, 923, 923 ms/op
# Warmup Iteration   2: n = 2, mean = 689 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 663, 689, 716, 716, 716, 716, 716, 716 ms/op
# Warmup Iteration   3: n = 2, mean = 644 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 602, 644, 687, 687, 687, 687, 687, 687 ms/op
Iteration   1: n = 2, mean = 651 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 604, 651, 697, 697, 697, 697, 697, 697 ms/op
Iteration   2: n = 2, mean = 552 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 547, 552, 556, 556, 556, 556, 556, 556 ms/op
Iteration   3: n = 2, mean = 666 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 624, 666, 708, 708, 708, 708, 708, 708 ms/op


Result "readSeq":
  N = 18
  mean =    592.678 ±(99.9%) 45.800 ms/op

  Histogram, ms/op:
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 3 
    [550.000, 575.000) = 5 
    [575.000, 600.000) = 3 
    [600.000, 625.000) = 4 
    [625.000, 650.000) = 1 
    [650.000, 675.000) = 0 
    [675.000, 700.000) = 1 
    [700.000, 725.000) = 1 
    [725.000, 750.000) = 0 
    [750.000, 775.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    543.162 ms/op
     p(50.0000) =    584.581 ms/op
     p(90.0000) =    698.352 ms/op
     p(95.0000) =    707.789 ms/op
     p(99.0000) =    707.789 ms/op
     p(99.9000) =    707.789 ms/op
     p(99.9900) =    707.789 ms/op
     p(99.9990) =    707.789 ms/op
     p(99.9999) =    707.789 ms/op
    p(100.0000) =    707.789 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 75.86% complete, ETA 00:39:07
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 640 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 531, 640, 749, 749, 749, 749, 749, 749 ms/op
# Warmup Iteration   2: n = 3, mean = 483 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 478, 480, 491, 491, 491, 491, 491, 491 ms/op
# Warmup Iteration   3: n = 2, mean = 623 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 566, 623, 681, 681, 681, 681, 681, 681 ms/op
Iteration   1: n = 2, mean = 589 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 539, 589, 640, 640, 640, 640, 640, 640 ms/op
Iteration   2: n = 3, mean = 470 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 465, 468, 476, 476, 476, 476, 476, 476 ms/op
Iteration   3: n = 3, mean = 473 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 469, 473, 477, 477, 477, 477, 477, 477 ms/op

# Run progress: 76.01% complete, ETA 00:38:52
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 568 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 482, 568, 653, 653, 653, 653, 653, 653 ms/op
# Warmup Iteration   2: n = 2, mean = 569 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 537, 569, 602, 602, 602, 602, 602, 602 ms/op
# Warmup Iteration   3: n = 2, mean = 545 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 521, 545, 568, 568, 568, 568, 568, 568 ms/op
Iteration   1: n = 2, mean = 588 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 533, 588, 644, 644, 644, 644, 644, 644 ms/op
Iteration   2: n = 2, mean = 553 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 521, 553, 586, 586, 586, 586, 586, 586 ms/op
Iteration   3: n = 2, mean = 546 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 505, 546, 587, 587, 587, 587, 587, 587 ms/op

# Run progress: 76.15% complete, ETA 00:38:36
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 579 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 496, 579, 663, 663, 663, 663, 663, 663 ms/op
# Warmup Iteration   2: n = 3, mean = 473 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 467, 469, 483, 483, 483, 483, 483, 483 ms/op
# Warmup Iteration   3: n = 2, mean = 631 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 621, 631, 641, 641, 641, 641, 641, 641 ms/op
Iteration   1: n = 2, mean = 619 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 616, 619, 622, 622, 622, 622, 622, 622 ms/op
Iteration   2: n = 2, mean = 518 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 491, 518, 544, 544, 544, 544, 544, 544 ms/op
Iteration   3: n = 3, mean = 488 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 478, 486, 499, 499, 499, 499, 499, 499 ms/op


Result "readXxh64":
  N = 21
  mean =    529.431 ±(99.9%) 51.785 ms/op

  Histogram, ms/op:
    [400.000, 425.000) = 0 
    [425.000, 450.000) = 0 
    [450.000, 475.000) = 4 
    [475.000, 500.000) = 6 
    [500.000, 525.000) = 2 
    [525.000, 550.000) = 3 
    [550.000, 575.000) = 0 
    [575.000, 600.000) = 2 
    [600.000, 625.000) = 2 
    [625.000, 650.000) = 2 
    [650.000, 675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    465.043 ms/op
     p(50.0000) =    505.414 ms/op
     p(90.0000) =    636.066 ms/op
     p(95.0000) =    643.406 ms/op
     p(99.0000) =    643.826 ms/op
     p(99.9000) =    643.826 ms/op
     p(99.9900) =    643.826 ms/op
     p(99.9990) =    643.826 ms/op
     p(99.9999) =    643.826 ms/op
    p(100.0000) =    643.826 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 76.29% complete, ETA 00:38:21
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 629 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 546, 629, 712, 712, 712, 712, 712, 712 ms/op
# Warmup Iteration   2: n = 2, mean = 622 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 610, 622, 633, 633, 633, 633, 633, 633 ms/op
# Warmup Iteration   3: n = 3, mean = 496 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 471, 491, 525, 525, 525, 525, 525, 525 ms/op
Iteration   1: n = 3, mean = 489 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 471, 491, 505, 505, 505, 505, 505, 505 ms/op
Iteration   2: n = 2, mean = 555 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 514, 555, 596, 596, 596, 596, 596, 596 ms/op
Iteration   3: n = 3, mean = 483 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 473, 483, 492, 492, 492, 492, 492, 492 ms/op

# Run progress: 76.44% complete, ETA 00:38:06
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 591 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 513, 591, 669, 669, 669, 669, 669, 669 ms/op
# Warmup Iteration   2: n = 2, mean = 639 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 546, 639, 731, 731, 731, 731, 731, 731 ms/op
# Warmup Iteration   3: n = 2, mean = 564 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 521, 564, 606, 606, 606, 606, 606, 606 ms/op
Iteration   1: n = 2, mean = 518 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 512, 518, 524, 524, 524, 524, 524, 524 ms/op
Iteration   2: n = 2, mean = 502 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 495, 502, 509, 509, 509, 509, 509, 509 ms/op
Iteration   3: n = 3, mean = 480 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 477, 478, 485, 485, 485, 485, 485, 485 ms/op

# Run progress: 76.58% complete, ETA 00:37:51
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 640 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 542, 640, 738, 738, 738, 738, 738, 738 ms/op
# Warmup Iteration   2: n = 2, mean = 597 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 536, 597, 657, 657, 657, 657, 657, 657 ms/op
# Warmup Iteration   3: n = 2, mean = 595 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 495, 595, 695, 695, 695, 695, 695, 695 ms/op
Iteration   1: n = 2, mean = 584 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 547, 584, 620, 620, 620, 620, 620, 620 ms/op
Iteration   2: n = 2, mean = 535 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 514, 535, 555, 555, 555, 555, 555, 555 ms/op
Iteration   3: n = 2, mean = 564 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 499, 564, 628, 628, 628, 628, 628, 628 ms/op


Result "readXxh64":
  N = 21
  mean =    517.472 ±(99.9%) 39.054 ms/op

  Histogram, ms/op:
    [400.000, 425.000) = 0 
    [425.000, 450.000) = 0 
    [450.000, 475.000) = 2 
    [475.000, 500.000) = 8 
    [500.000, 525.000) = 6 
    [525.000, 550.000) = 1 
    [550.000, 575.000) = 1 
    [575.000, 600.000) = 1 
    [600.000, 625.000) = 1 
    [625.000, 650.000) = 1 
    [650.000, 675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    470.811 ms/op
     p(50.0000) =    504.889 ms/op
     p(90.0000) =    614.885 ms/op
     p(95.0000) =    627.258 ms/op
     p(99.0000) =    628.097 ms/op
     p(99.9000) =    628.097 ms/op
     p(99.9900) =    628.097 ms/op
     p(99.9990) =    628.097 ms/op
     p(99.9999) =    628.097 ms/op
    p(100.0000) =    628.097 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 76.72% complete, ETA 00:37:36
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 699 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 628, 699, 771, 771, 771, 771, 771, 771 ms/op
# Warmup Iteration   2: n = 2, mean = 614 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 612, 614, 617, 617, 617, 617, 617, 617 ms/op
# Warmup Iteration   3: n = 2, mean = 657 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 652, 657, 662, 662, 662, 662, 662, 662 ms/op
Iteration   1: n = 2, mean = 618 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 617, 618, 619, 619, 619, 619, 619, 619 ms/op
Iteration   2: n = 2, mean = 619 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 614, 619, 624, 624, 624, 624, 624, 624 ms/op
Iteration   3: n = 2, mean = 617 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 611, 617, 622, 622, 622, 622, 622, 622 ms/op

# Run progress: 76.87% complete, ETA 00:37:20
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 910 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 824, 910, 995, 995, 995, 995, 995, 995 ms/op
# Warmup Iteration   2: n = 2, mean = 699 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 643, 699, 755, 755, 755, 755, 755, 755 ms/op
# Warmup Iteration   3: n = 2, mean = 661 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 655, 661, 667, 667, 667, 667, 667, 667 ms/op
Iteration   1: n = 2, mean = 621 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 617, 621, 626, 626, 626, 626, 626, 626 ms/op
Iteration   2: n = 2, mean = 623 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 618, 623, 629, 629, 629, 629, 629, 629 ms/op
Iteration   3: n = 2, mean = 625 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 625, 625, 625, 625, 625, 625, 625, 625 ms/op

# Run progress: 77.01% complete, ETA 00:37:05
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 798 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 796, 798, 801, 801, 801, 801, 801, 801 ms/op
# Warmup Iteration   2: n = 2, mean = 723 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 667, 723, 779, 779, 779, 779, 779, 779 ms/op
# Warmup Iteration   3: n = 2, mean = 799 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 748, 799, 850, 850, 850, 850, 850, 850 ms/op
Iteration   1: n = 2, mean = 710 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 643, 710, 777, 777, 777, 777, 777, 777 ms/op
Iteration   2: n = 2, mean = 631 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 623, 631, 640, 640, 640, 640, 640, 640 ms/op
Iteration   3: n = 2, mean = 628 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 618, 628, 638, 638, 638, 638, 638, 638 ms/op


Result "readXxh64":
  N = 18
  mean =    632.408 ±(99.9%) 34.693 ms/op

  Histogram, ms/op:
    [600.000, 612.500) = 1 
    [612.500, 625.000) = 11 
    [625.000, 637.500) = 2 
    [637.500, 650.000) = 3 
    [650.000, 662.500) = 0 
    [662.500, 675.000) = 0 
    [675.000, 687.500) = 0 
    [687.500, 700.000) = 0 
    [700.000, 712.500) = 0 
    [712.500, 725.000) = 0 
    [725.000, 737.500) = 0 
    [737.500, 750.000) = 0 
    [750.000, 762.500) = 0 
    [762.500, 775.000) = 0 
    [775.000, 787.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    611.320 ms/op
     p(50.0000) =    623.378 ms/op
     p(90.0000) =    656.199 ms/op
     p(95.0000) =    776.995 ms/op
     p(99.0000) =    776.995 ms/op
     p(99.9000) =    776.995 ms/op
     p(99.9900) =    776.995 ms/op
     p(99.9990) =    776.995 ms/op
     p(99.9999) =    776.995 ms/op
    p(100.0000) =    776.995 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 77.16% complete, ETA 00:36:50
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 848 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 838, 848, 859, 859, 859, 859, 859, 859 ms/op
# Warmup Iteration   2: n = 2, mean = 693 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 663, 693, 724, 724, 724, 724, 724, 724 ms/op
# Warmup Iteration   3: n = 2, mean = 759 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 690, 759, 827, 827, 827, 827, 827, 827 ms/op
Iteration   1: n = 2, mean = 614 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 588, 614, 640, 640, 640, 640, 640, 640 ms/op
Iteration   2: n = 2, mean = 611 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 604, 611, 619, 619, 619, 619, 619, 619 ms/op
Iteration   3: n = 2, mean = 624 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 621, 624, 627, 627, 627, 627, 627, 627 ms/op

# Run progress: 77.30% complete, ETA 00:36:36
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 699 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 644, 699, 755, 755, 755, 755, 755, 755 ms/op
# Warmup Iteration   2: n = 2, mean = 589 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 587, 589, 590, 590, 590, 590, 590, 590 ms/op
# Warmup Iteration   3: n = 2, mean = 628 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 625, 628, 631, 631, 631, 631, 631, 631 ms/op
Iteration   1: n = 2, mean = 694 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 636, 694, 752, 752, 752, 752, 752, 752 ms/op
Iteration   2: n = 2, mean = 588 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 587, 588, 588, 588, 588, 588, 588, 588 ms/op
Iteration   3: n = 2, mean = 590 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 590, 590, 590, 590, 590, 590, 590, 590 ms/op

# Run progress: 77.44% complete, ETA 00:36:21
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 895 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 867, 895, 924, 924, 924, 924, 924, 924 ms/op
# Warmup Iteration   2: n = 2, mean = 704 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 674, 704, 734, 734, 734, 734, 734, 734 ms/op
# Warmup Iteration   3: n = 2, mean = 698 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 642, 698, 755, 755, 755, 755, 755, 755 ms/op
Iteration   1: n = 2, mean = 694 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 642, 694, 746, 746, 746, 746, 746, 746 ms/op
Iteration   2: n = 2, mean = 670 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 605, 670, 734, 734, 734, 734, 734, 734 ms/op
Iteration   3: n = 2, mean = 603 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 575, 603, 632, 632, 632, 632, 632, 632 ms/op


Result "readXxh64":
  N = 18
  mean =    632.000 ±(99.9%) 51.821 ms/op

  Histogram, ms/op:
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 0 
    [550.000, 575.000) = 1 
    [575.000, 600.000) = 5 
    [600.000, 625.000) = 4 
    [625.000, 650.000) = 5 
    [650.000, 675.000) = 0 
    [675.000, 700.000) = 0 
    [700.000, 725.000) = 0 
    [725.000, 750.000) = 2 
    [750.000, 775.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    574.620 ms/op
     p(50.0000) =    619.708 ms/op
     p(90.0000) =    746.167 ms/op
     p(95.0000) =    751.829 ms/op
     p(99.0000) =    751.829 ms/op
     p(99.9000) =    751.829 ms/op
     p(99.9900) =    751.829 ms/op
     p(99.9990) =    751.829 ms/op
     p(99.9999) =    751.829 ms/op
    p(100.0000) =    751.829 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.write
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 77.59% complete, ETA 00:36:06
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1470 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470 ms/op
# Warmup Iteration   2: n = 1, mean = 1686 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686 ms/op
# Warmup Iteration   3: n = 1, mean = 1474 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1474, 1474, 1474, 1474, 1474, 1474, 1474, 1474 ms/op
Iteration   1: n = 1, mean = 1388 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388 ms/op
Iteration   2: n = 1, mean = 1229 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229 ms/op
Iteration   3: n = 1, mean = 1315 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315 ms/op

# Run progress: 77.73% complete, ETA 00:35:51
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1558 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558 ms/op
# Warmup Iteration   2: n = 1, mean = 1237 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237 ms/op
# Warmup Iteration   3: n = 1, mean = 1336 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336 ms/op
Iteration   1: n = 1, mean = 1170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170 ms/op
Iteration   2: n = 1, mean = 1156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156 ms/op
Iteration   3: n = 1, mean = 1275 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275 ms/op

# Run progress: 77.87% complete, ETA 00:35:36
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1531 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531 ms/op
# Warmup Iteration   2: n = 1, mean = 1323 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323 ms/op
# Warmup Iteration   3: n = 1, mean = 1646 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646 ms/op
Iteration   1: n = 1, mean = 1590 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590 ms/op
Iteration   2: n = 1, mean = 1307 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307 ms/op
Iteration   3: n = 1, mean = 1529 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1529, 1529, 1529, 1529, 1529, 1529, 1529, 1529 ms/op


Result "write":
  N = 9
  mean =   1328.662 ±(99.9%) 252.284 ms/op

  Histogram, ms/op:
    [1100.000, 1150.000) = 0 
    [1150.000, 1200.000) = 2 
    [1200.000, 1250.000) = 1 
    [1250.000, 1300.000) = 1 
    [1300.000, 1350.000) = 2 
    [1350.000, 1400.000) = 1 
    [1400.000, 1450.000) = 0 
    [1450.000, 1500.000) = 0 
    [1500.000, 1550.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1155.531 ms/op
     p(50.0000) =   1306.526 ms/op
     p(90.0000) =   1589.641 ms/op
     p(95.0000) =   1589.641 ms/op
     p(99.0000) =   1589.641 ms/op
     p(99.9000) =   1589.641 ms/op
     p(99.9900) =   1589.641 ms/op
     p(99.9990) =   1589.641 ms/op
     p(99.9999) =   1589.641 ms/op
    p(100.0000) =   1589.641 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.write
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 78.02% complete, ETA 00:35:20
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 2168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2168, 2168, 2168, 2168, 2168, 2168, 2168, 2168 ms/op
# Warmup Iteration   2: n = 1, mean = 1569 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1569, 1569, 1569, 1569, 1569, 1569, 1569, 1569 ms/op
# Warmup Iteration   3: n = 1, mean = 1770 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770 ms/op
Iteration   1: n = 1, mean = 1625 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625 ms/op
Iteration   2: n = 1, mean = 1554 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554 ms/op
Iteration   3: n = 1, mean = 2074 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2074, 2074, 2074, 2074, 2074, 2074, 2074, 2074 ms/op

# Run progress: 78.16% complete, ETA 00:35:06
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1785 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785 ms/op
# Warmup Iteration   2: n = 1, mean = 2147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2147, 2147, 2147, 2147, 2147, 2147, 2147, 2147 ms/op
# Warmup Iteration   3: n = 1, mean = 1994 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1994, 1994, 1994, 1994, 1994, 1994, 1994, 1994 ms/op
Iteration   1: n = 1, mean = 1665 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665 ms/op
Iteration   2: n = 1, mean = 1596 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596 ms/op
Iteration   3: n = 1, mean = 1705 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705 ms/op

# Run progress: 78.30% complete, ETA 00:34:52
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1996 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1996, 1996, 1996, 1996, 1996, 1996, 1996, 1996 ms/op
# Warmup Iteration   2: n = 1, mean = 1541 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541 ms/op
# Warmup Iteration   3: n = 1, mean = 1764 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764 ms/op
Iteration   1: n = 1, mean = 1552 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552 ms/op
Iteration   2: n = 1, mean = 1585 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585 ms/op
Iteration   3: n = 1, mean = 1722 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722 ms/op


Result "write":
  N = 9
  mean =   1675.391 ±(99.9%) 271.606 ms/op

  Histogram, ms/op:
    [1500.000, 1550.000) = 0 
    [1550.000, 1600.000) = 4 
    [1600.000, 1650.000) = 1 
    [1650.000, 1700.000) = 1 
    [1700.000, 1750.000) = 2 
    [1750.000, 1800.000) = 0 
    [1800.000, 1850.000) = 0 
    [1850.000, 1900.000) = 0 
    [1900.000, 1950.000) = 0 
    [1950.000, 2000.000) = 0 
    [2000.000, 2050.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1551.892 ms/op
     p(50.0000) =   1625.293 ms/op
     p(90.0000) =   2074.083 ms/op
     p(95.0000) =   2074.083 ms/op
     p(99.0000) =   2074.083 ms/op
     p(99.9000) =   2074.083 ms/op
     p(99.9900) =   2074.083 ms/op
     p(99.9990) =   2074.083 ms/op
     p(99.9999) =   2074.083 ms/op
    p(100.0000) =   2074.083 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.write
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 78.45% complete, ETA 00:34:37
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1499 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499 ms/op
# Warmup Iteration   2: n = 1, mean = 1273 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273 ms/op
# Warmup Iteration   3: n = 1, mean = 1149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149 ms/op
Iteration   1: n = 1, mean = 1307 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307 ms/op
Iteration   2: n = 1, mean = 1405 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405 ms/op
Iteration   3: n = 1, mean = 1062 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062 ms/op

# Run progress: 78.59% complete, ETA 00:34:22
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1535 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535 ms/op
# Warmup Iteration   2: n = 1, mean = 1434 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434 ms/op
# Warmup Iteration   3: n = 1, mean = 1195 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195 ms/op
Iteration   1: n = 1, mean = 1073 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073 ms/op
Iteration   2: n = 1, mean = 1275 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275 ms/op
Iteration   3: n = 1, mean = 1124 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124 ms/op

# Run progress: 78.74% complete, ETA 00:34:06
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1510 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510 ms/op
# Warmup Iteration   2: n = 1, mean = 1162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162 ms/op
# Warmup Iteration   3: n = 1, mean = 1309 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309 ms/op
Iteration   1: n = 2, mean = 975 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 911, 975, 1039, 1039, 1039, 1039, 1039, 1039 ms/op
Iteration   2: n = 2, mean = 870 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 856, 870, 884, 884, 884, 884, 884, 884 ms/op
Iteration   3: n = 1, mean = 1250 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250 ms/op


Result "write":
  N = 11
  mean =   1107.773 ±(99.9%) 253.764 ms/op

  Histogram, ms/op:
    [ 800.000,  850.000) = 0 
    [ 850.000,  900.000) = 2 
    [ 900.000,  950.000) = 1 
    [ 950.000, 1000.000) = 0 
    [1000.000, 1050.000) = 1 
    [1050.000, 1100.000) = 2 
    [1100.000, 1150.000) = 1 
    [1150.000, 1200.000) = 0 
    [1200.000, 1250.000) = 1 
    [1250.000, 1300.000) = 1 
    [1300.000, 1350.000) = 1 
    [1350.000, 1400.000) = 0 
    [1400.000, 1450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    855.638 ms/op
     p(50.0000) =   1072.693 ms/op
     p(90.0000) =   1385.379 ms/op
     p(95.0000) =   1405.092 ms/op
     p(99.0000) =   1405.092 ms/op
     p(99.9000) =   1405.092 ms/op
     p(99.9900) =   1405.092 ms/op
     p(99.9990) =   1405.092 ms/op
     p(99.9999) =   1405.092 ms/op
    p(100.0000) =   1405.092 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.write
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 78.88% complete, ETA 00:33:51
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 2361 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2361, 2361, 2361, 2361, 2361, 2361, 2361, 2361 ms/op
# Warmup Iteration   2: n = 1, mean = 2336 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2336, 2336, 2336, 2336, 2336, 2336, 2336, 2336 ms/op
# Warmup Iteration   3: n = 1, mean = 2001 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001 ms/op
Iteration   1: n = 1, mean = 2152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152 ms/op
Iteration   2: n = 1, mean = 2261 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2261, 2261, 2261, 2261, 2261, 2261, 2261, 2261 ms/op
Iteration   3: n = 1, mean = 2078 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078 ms/op

# Run progress: 79.02% complete, ETA 00:33:37
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 2642 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2642, 2642, 2642, 2642, 2642, 2642, 2642, 2642 ms/op
# Warmup Iteration   2: n = 1, mean = 2466 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2466, 2466, 2466, 2466, 2466, 2466, 2466, 2466 ms/op
# Warmup Iteration   3: n = 1, mean = 1967 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1967, 1967, 1967, 1967, 1967, 1967, 1967, 1967 ms/op
Iteration   1: n = 1, mean = 1980 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1980, 1980, 1980, 1980, 1980, 1980, 1980, 1980 ms/op
Iteration   2: n = 1, mean = 2236 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2236, 2236, 2236, 2236, 2236, 2236, 2236, 2236 ms/op
Iteration   3: n = 1, mean = 1982 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1982, 1982, 1982, 1982, 1982, 1982, 1982, 1982 ms/op

# Run progress: 79.17% complete, ETA 00:33:24
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 2378 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378 ms/op
# Warmup Iteration   2: n = 1, mean = 2496 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2496, 2496, 2496, 2496, 2496, 2496, 2496, 2496 ms/op
# Warmup Iteration   3: n = 1, mean = 2110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110 ms/op
Iteration   1: n = 1, mean = 1942 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1942, 1942, 1942, 1942, 1942, 1942, 1942, 1942 ms/op
Iteration   2: n = 1, mean = 2391 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2391, 2391, 2391, 2391, 2391, 2391, 2391, 2391 ms/op
Iteration   3: n = 1, mean = 2005 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005 ms/op


Result "write":
  N = 9
  mean =   2113.929 ±(99.9%) 260.744 ms/op

  Histogram, ms/op:
    [1900.000, 1950.000) = 1 
    [1950.000, 2000.000) = 2 
    [2000.000, 2050.000) = 1 
    [2050.000, 2100.000) = 1 
    [2100.000, 2150.000) = 0 
    [2150.000, 2200.000) = 1 
    [2200.000, 2250.000) = 1 
    [2250.000, 2300.000) = 1 
    [2300.000, 2350.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1941.963 ms/op
     p(50.0000) =   2078.278 ms/op
     p(90.0000) =   2390.753 ms/op
     p(95.0000) =   2390.753 ms/op
     p(99.0000) =   2390.753 ms/op
     p(99.9000) =   2390.753 ms/op
     p(99.9900) =   2390.753 ms/op
     p(99.9990) =   2390.753 ms/op
     p(99.9999) =   2390.753 ms/op
    p(100.0000) =   2390.753 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 79.31% complete, ETA 00:33:10
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 501 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 485, 501, 516, 516, 516, 516, 516, 516 ms/op
# Warmup Iteration   2: n = 3, mean = 402 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 377, 392, 438, 438, 438, 438, 438, 438 ms/op
# Warmup Iteration   3: n = 3, mean = 451 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 393, 407, 552, 552, 552, 552, 552, 552 ms/op
Iteration   1: n = 3, mean = 454 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 403, 460, 500, 500, 500, 500, 500, 500 ms/op
Iteration   2: n = 3, mean = 369 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 344, 358, 406, 406, 406, 406, 406, 406 ms/op
Iteration   3: n = 3, mean = 434 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 371, 396, 536, 536, 536, 536, 536, 536 ms/op

# Run progress: 79.45% complete, ETA 00:32:55
# Fork: 2 of 3
# Warmup Iteration   1: n = 3, mean = 347 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 338, 341, 363, 363, 363, 363, 363, 363 ms/op
# Warmup Iteration   2: n = 3, mean = 355 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 352, 352, 361, 361, 361, 361, 361, 361 ms/op
# Warmup Iteration   3: n = 3, mean = 359 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 353, 359, 366, 366, 366, 366, 366, 366 ms/op
Iteration   1: n = 3, mean = 403 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 359, 398, 451, 451, 451, 451, 451, 451 ms/op
Iteration   2: n = 3, mean = 356 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 352, 352, 363, 363, 363, 363, 363, 363 ms/op
Iteration   3: n = 3, mean = 343 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 342, 342, 346, 346, 346, 346, 346, 346 ms/op

# Run progress: 79.60% complete, ETA 00:32:40
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 354 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 343, 349, 369, 369, 369, 369, 369, 369 ms/op
# Warmup Iteration   2: n = 3, mean = 396 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 348, 349, 491, 491, 491, 491, 491, 491 ms/op
# Warmup Iteration   3: n = 3, mean = 414 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 362, 399, 482, 482, 482, 482, 482, 482 ms/op
Iteration   1: n = 3, mean = 416 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 348, 441, 460, 460, 460, 460, 460, 460 ms/op
Iteration   2: n = 3, mean = 378 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 359, 377, 398, 398, 398, 398, 398, 398 ms/op
Iteration   3: n = 3, mean = 345 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 344, 345, 346, 346, 346, 346, 346, 346 ms/op


Result "readCrc":
  N = 27
  mean =    388.789 ±(99.9%) 38.008 ms/op

  Histogram, ms/op:
    [300.000, 325.000) = 0 
    [325.000, 350.000) = 8 
    [350.000, 375.000) = 7 
    [375.000, 400.000) = 4 
    [400.000, 425.000) = 2 
    [425.000, 450.000) = 1 
    [450.000, 475.000) = 3 
    [475.000, 500.000) = 1 
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 1 
    [550.000, 575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    341.836 ms/op
     p(50.0000) =    362.807 ms/op
     p(90.0000) =    468.189 ms/op
     p(95.0000) =    521.667 ms/op
     p(99.0000) =    536.347 ms/op
     p(99.9000) =    536.347 ms/op
     p(99.9900) =    536.347 ms/op
     p(99.9990) =    536.347 ms/op
     p(99.9999) =    536.347 ms/op
    p(100.0000) =    536.347 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 79.74% complete, ETA 00:32:25
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 574 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 536, 574, 612, 612, 612, 612, 612, 612 ms/op
# Warmup Iteration   2: n = 2, mean = 529 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 504, 529, 555, 555, 555, 555, 555, 555 ms/op
# Warmup Iteration   3: n = 2, mean = 558 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 491, 558, 625, 625, 625, 625, 625, 625 ms/op
Iteration   1: n = 3, mean = 406 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 377, 404, 438, 438, 438, 438, 438, 438 ms/op
Iteration   2: n = 3, mean = 441 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 412, 456, 457, 457, 457, 457, 457, 457 ms/op
Iteration   3: n = 2, mean = 540 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 469, 540, 611, 611, 611, 611, 611, 611 ms/op

# Run progress: 79.89% complete, ETA 00:32:10
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 600 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 570, 600, 630, 630, 630, 630, 630, 630 ms/op
# Warmup Iteration   2: n = 2, mean = 553 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 536, 553, 570, 570, 570, 570, 570, 570 ms/op
# Warmup Iteration   3: n = 2, mean = 556 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 524, 556, 588, 588, 588, 588, 588, 588 ms/op
Iteration   1: n = 3, mean = 449 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 386, 462, 500, 500, 500, 500, 500, 500 ms/op
Iteration   2: n = 2, mean = 505 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 471, 505, 540, 540, 540, 540, 540, 540 ms/op
Iteration   3: n = 3, mean = 424 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 409, 428, 434, 434, 434, 434, 434, 434 ms/op

# Run progress: 80.03% complete, ETA 00:31:55
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 660 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 570, 660, 750, 750, 750, 750, 750, 750 ms/op
# Warmup Iteration   2: n = 2, mean = 591 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 509, 591, 672, 672, 672, 672, 672, 672 ms/op
# Warmup Iteration   3: n = 2, mean = 543 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 492, 543, 593, 593, 593, 593, 593, 593 ms/op
Iteration   1: n = 2, mean = 563 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 563, 563, 563, 563, 563, 563, 563, 563 ms/op
Iteration   2: n = 2, mean = 543 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 460, 543, 625, 625, 625, 625, 625, 625 ms/op
Iteration   3: n = 2, mean = 522 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 469, 522, 575, 575, 575, 575, 575, 575 ms/op


Result "readCrc":
  N = 22
  mean =    477.650 ±(99.9%) 58.558 ms/op

  Histogram, ms/op:
    [300.000, 325.000) = 0 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 0 
    [375.000, 400.000) = 2 
    [400.000, 425.000) = 3 
    [425.000, 450.000) = 3 
    [450.000, 475.000) = 7 
    [475.000, 500.000) = 1 
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 1 
    [550.000, 575.000) = 3 
    [575.000, 600.000) = 0 
    [600.000, 625.000) = 2 
    [625.000, 650.000) = 0 
    [650.000, 675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    376.963 ms/op
     p(50.0000) =    461.373 ms/op
     p(90.0000) =    600.310 ms/op
     p(95.0000) =    622.907 ms/op
     p(99.0000) =    624.951 ms/op
     p(99.9000) =    624.951 ms/op
     p(99.9900) =    624.951 ms/op
     p(99.9990) =    624.951 ms/op
     p(99.9999) =    624.951 ms/op
    p(100.0000) =    624.951 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 80.17% complete, ETA 00:31:40
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 289 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 275, 288, 304, 304, 304, 304, 304, 304 ms/op
# Warmup Iteration   2: n = 4, mean = 271 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 269, 271, 273, 273, 273, 273, 273, 273 ms/op
# Warmup Iteration   3: n = 3, mean = 358 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 316, 376, 381, 381, 381, 381, 381, 381 ms/op
Iteration   1: n = 3, mean = 349 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 306, 363, 378, 378, 378, 378, 378, 378 ms/op
Iteration   2: n = 4, mean = 317 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 276, 304, 383, 383, 383, 383, 383, 383 ms/op
Iteration   3: n = 3, mean = 334 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 300, 325, 379, 379, 379, 379, 379, 379 ms/op

# Run progress: 80.32% complete, ETA 00:31:25
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 287 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 273, 283, 310, 310, 310, 310, 310, 310 ms/op
# Warmup Iteration   2: n = 4, mean = 276 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 270, 272, 288, 288, 288, 288, 288, 288 ms/op
# Warmup Iteration   3: n = 3, mean = 336 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 278, 351, 380, 380, 380, 380, 380, 380 ms/op
Iteration   1: n = 3, mean = 347 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 306, 362, 372, 372, 372, 372, 372, 372 ms/op
Iteration   2: n = 3, mean = 359 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 314, 316, 446, 446, 446, 446, 446, 446 ms/op
Iteration   3: n = 4, mean = 272 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 268, 270, 280, 280, 280, 280, 280, 280 ms/op

# Run progress: 80.46% complete, ETA 00:31:10
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 288 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 273, 282, 313, 313, 313, 313, 313, 313 ms/op
# Warmup Iteration   2: n = 4, mean = 275 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 268, 274, 285, 285, 285, 285, 285, 285 ms/op
# Warmup Iteration   3: n = 3, mean = 382 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 376, 379, 392, 392, 392, 392, 392, 392 ms/op
Iteration   1: n = 3, mean = 347 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 305, 361, 376, 376, 376, 376, 376, 376 ms/op
Iteration   2: n = 4, mean = 316 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 272, 299, 395, 395, 395, 395, 395, 395 ms/op
Iteration   3: n = 4, mean = 275 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 269, 273, 286, 286, 286, 286, 286, 286 ms/op


Result "readCrc":
  N = 31
  mean =    320.281 ±(99.9%) 31.077 ms/op

  Histogram, ms/op:
    [200.000, 225.000) = 0 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 7 
    [275.000, 300.000) = 4 
    [300.000, 325.000) = 10 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 4 
    [375.000, 400.000) = 5 
    [400.000, 425.000) = 0 
    [425.000, 450.000) = 1 
    [450.000, 475.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    268.173 ms/op
     p(50.0000) =    304.611 ms/op
     p(90.0000) =    382.311 ms/op
     p(95.0000) =    415.131 ms/op
     p(99.0000) =    445.645 ms/op
     p(99.9000) =    445.645 ms/op
     p(99.9900) =    445.645 ms/op
     p(99.9990) =    445.645 ms/op
     p(99.9999) =    445.645 ms/op
    p(100.0000) =    445.645 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 80.60% complete, ETA 00:30:55
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 601 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 509, 601, 692, 692, 692, 692, 692, 692 ms/op
# Warmup Iteration   2: n = 2, mean = 544 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 514, 544, 575, 575, 575, 575, 575, 575 ms/op
# Warmup Iteration   3: n = 3, mean = 465 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 447, 469, 479, 479, 479, 479, 479, 479 ms/op
Iteration   1: n = 2, mean = 535 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 497, 535, 574, 574, 574, 574, 574, 574 ms/op
Iteration   2: n = 2, mean = 653 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 635, 653, 671, 671, 671, 671, 671, 671 ms/op
Iteration   3: n = 2, mean = 620 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 564, 620, 676, 676, 676, 676, 676, 676 ms/op

# Run progress: 80.75% complete, ETA 00:30:40
# Fork: 2 of 3
# Warmup Iteration   1: n = 3, mean = 445 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 436, 438, 462, 462, 462, 462, 462, 462 ms/op
# Warmup Iteration   2: n = 2, mean = 633 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 627, 633, 640, 640, 640, 640, 640, 640 ms/op
# Warmup Iteration   3: n = 2, mean = 589 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 513, 589, 666, 666, 666, 666, 666, 666 ms/op
Iteration   1: n = 2, mean = 530 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 484, 530, 577, 577, 577, 577, 577, 577 ms/op
Iteration   2: n = 2, mean = 526 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 493, 526, 558, 558, 558, 558, 558, 558 ms/op
Iteration   3: n = 3, mean = 434 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 433, 434, 434, 434, 434, 434, 434, 434 ms/op

# Run progress: 80.89% complete, ETA 00:30:26
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 628 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 503, 628, 753, 753, 753, 753, 753, 753 ms/op
# Warmup Iteration   2: n = 2, mean = 575 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 554, 575, 597, 597, 597, 597, 597, 597 ms/op
# Warmup Iteration   3: n = 2, mean = 596 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 586, 596, 605, 605, 605, 605, 605, 605 ms/op
Iteration   1: n = 3, mean = 471 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 433, 467, 513, 513, 513, 513, 513, 513 ms/op
Iteration   2: n = 3, mean = 491 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 436, 508, 530, 530, 530, 530, 530, 530 ms/op
Iteration   3: n = 2, mean = 617 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 567, 617, 667, 667, 667, 667, 667, 667 ms/op


Result "readCrc":
  N = 21
  mean =    530.929 ±(99.9%) 68.783 ms/op

  Histogram, ms/op:
    [400.000, 425.000) = 0 
    [425.000, 450.000) = 5 
    [450.000, 475.000) = 1 
    [475.000, 500.000) = 3 
    [500.000, 525.000) = 2 
    [525.000, 550.000) = 1 
    [550.000, 575.000) = 4 
    [575.000, 600.000) = 1 
    [600.000, 625.000) = 0 
    [625.000, 650.000) = 1 
    [650.000, 675.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    433.062 ms/op
     p(50.0000) =    512.754 ms/op
     p(90.0000) =    670.250 ms/op
     p(95.0000) =    675.807 ms/op
     p(99.0000) =    676.332 ms/op
     p(99.9000) =    676.332 ms/op
     p(99.9900) =    676.332 ms/op
     p(99.9990) =    676.332 ms/op
     p(99.9999) =    676.332 ms/op
    p(100.0000) =    676.332 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 81.03% complete, ETA 00:30:11
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1894 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1894, 1894, 1894, 1894, 1894, 1894, 1894, 1894 ms/op
# Warmup Iteration   2: n = 1, mean = 1590 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590 ms/op
# Warmup Iteration   3: n = 1, mean = 1996 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1996, 1996, 1996, 1996, 1996, 1996, 1996, 1996 ms/op
Iteration   1: n = 1, mean = 2068 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2068, 2068, 2068, 2068, 2068, 2068, 2068, 2068 ms/op
Iteration   2: n = 1, mean = 1915 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1915, 1915, 1915, 1915, 1915, 1915, 1915, 1915 ms/op
Iteration   3: 
Bytes	before-close	107057152	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	107057152	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 1780 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780 ms/op

# Run progress: 81.18% complete, ETA 00:29:58
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 2059 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059 ms/op
# Warmup Iteration   2: n = 1, mean = 2057 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2057, 2057, 2057, 2057, 2057, 2057, 2057, 2057 ms/op
# Warmup Iteration   3: n = 1, mean = 2248 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2248, 2248, 2248, 2248, 2248, 2248, 2248, 2248 ms/op
Iteration   1: n = 1, mean = 1783 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783 ms/op
Iteration   2: n = 1, mean = 1688 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688 ms/op
Iteration   3: 
Bytes	before-close	107057152	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	107057152	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 2110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110 ms/op

# Run progress: 81.32% complete, ETA 00:29:44
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1625 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1625, 1625, 1625, 1625, 1625, 1625, 1625, 1625 ms/op
# Warmup Iteration   2: n = 1, mean = 2080 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2080, 2080, 2080, 2080, 2080, 2080, 2080, 2080 ms/op
# Warmup Iteration   3: n = 1, mean = 2024 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024 ms/op
Iteration   1: n = 1, mean = 1801 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1801, 1801, 1801, 1801, 1801, 1801, 1801, 1801 ms/op
Iteration   2: n = 1, mean = 1592 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592 ms/op
Iteration   3: 
Bytes	before-close	107057152	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	107057152	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 1590 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590 ms/op


Result "readKey":
  N = 9
  mean =   1814.036 ±(99.9%) 314.290 ms/op

  Histogram, ms/op:
    [1500.000, 1550.000) = 0 
    [1550.000, 1600.000) = 2 
    [1600.000, 1650.000) = 0 
    [1650.000, 1700.000) = 1 
    [1700.000, 1750.000) = 0 
    [1750.000, 1800.000) = 2 
    [1800.000, 1850.000) = 1 
    [1850.000, 1900.000) = 0 
    [1900.000, 1950.000) = 1 
    [1950.000, 2000.000) = 0 
    [2000.000, 2050.000) = 0 
    [2050.000, 2100.000) = 1 
    [2100.000, 2150.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1589.641 ms/op
     p(50.0000) =   1782.579 ms/op
     p(90.0000) =   2109.735 ms/op
     p(95.0000) =   2109.735 ms/op
     p(99.0000) =   2109.735 ms/op
     p(99.9000) =   2109.735 ms/op
     p(99.9900) =   2109.735 ms/op
     p(99.9990) =   2109.735 ms/op
     p(99.9999) =   2109.735 ms/op
    p(100.0000) =   2109.735 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readKey
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 81.47% complete, ETA 00:29:30
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 2487 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2487, 2487, 2487, 2487, 2487, 2487, 2487, 2487 ms/op
# Warmup Iteration   2: n = 1, mean = 2164 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2164, 2164, 2164, 2164, 2164, 2164, 2164, 2164 ms/op
# Warmup Iteration   3: n = 1, mean = 2072 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2072, 2072, 2072, 2072, 2072, 2072, 2072, 2072 ms/op
Iteration   1: n = 1, mean = 2129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2129, 2129, 2129, 2129, 2129, 2129, 2129, 2129 ms/op
Iteration   2: n = 1, mean = 2294 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2294, 2294, 2294, 2294, 2294, 2294, 2294, 2294 ms/op
Iteration   3: 
Bytes	before-close	107057152	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	107057152	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 2057 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2057, 2057, 2057, 2057, 2057, 2057, 2057, 2057 ms/op

# Run progress: 81.61% complete, ETA 00:29:17
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1967 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1967, 1967, 1967, 1967, 1967, 1967, 1967, 1967 ms/op
# Warmup Iteration   2: n = 1, mean = 1665 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1665, 1665, 1665, 1665, 1665, 1665, 1665, 1665 ms/op
# Warmup Iteration   3: n = 1, mean = 2177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2177, 2177, 2177, 2177, 2177, 2177, 2177, 2177 ms/op
Iteration   1: n = 1, mean = 2189 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2189, 2189, 2189, 2189, 2189, 2189, 2189, 2189 ms/op
Iteration   2: n = 1, mean = 1642 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642 ms/op
Iteration   3: 
Bytes	before-close	107057152	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	107057152	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 2152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152 ms/op

# Run progress: 81.75% complete, ETA 00:29:04
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 2278 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2278, 2278, 2278, 2278, 2278, 2278, 2278, 2278 ms/op
# Warmup Iteration   2: n = 1, mean = 2181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2181, 2181, 2181, 2181, 2181, 2181, 2181, 2181 ms/op
# Warmup Iteration   3: n = 1, mean = 2051 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2051, 2051, 2051, 2051, 2051, 2051, 2051, 2051 ms/op
Iteration   1: n = 1, mean = 2143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2143, 2143, 2143, 2143, 2143, 2143, 2143, 2143 ms/op
Iteration   2: n = 1, mean = 1812 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812 ms/op
Iteration   3: 
Bytes	before-close	107057152	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	107057152	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 2189 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2189, 2189, 2189, 2189, 2189, 2189, 2189, 2189 ms/op


Result "readKey":
  N = 9
  mean =   2067.559 ±(99.9%) 348.530 ms/op

  Histogram, ms/op:
    [1600.000, 1650.000) = 1 
    [1650.000, 1700.000) = 0 
    [1700.000, 1750.000) = 0 
    [1750.000, 1800.000) = 0 
    [1800.000, 1850.000) = 1 
    [1850.000, 1900.000) = 0 
    [1900.000, 1950.000) = 0 
    [1950.000, 2000.000) = 0 
    [2000.000, 2050.000) = 0 
    [2050.000, 2100.000) = 1 
    [2100.000, 2150.000) = 2 
    [2150.000, 2200.000) = 3 
    [2200.000, 2250.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1642.070 ms/op
     p(50.0000) =   2143.289 ms/op
     p(90.0000) =   2294.284 ms/op
     p(95.0000) =   2294.284 ms/op
     p(99.0000) =   2294.284 ms/op
     p(99.9000) =   2294.284 ms/op
     p(99.9900) =   2294.284 ms/op
     p(99.9990) =   2294.284 ms/op
     p(99.9999) =   2294.284 ms/op
    p(100.0000) =   2294.284 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readKey
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 81.90% complete, ETA 00:28:50
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1091 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091 ms/op
# Warmup Iteration   2: n = 1, mean = 1052 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052 ms/op
# Warmup Iteration   3: n = 1, mean = 1298 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298 ms/op
Iteration   1: n = 1, mean = 1191 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191 ms/op
Iteration   2: n = 1, mean = 1046 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046 ms/op
Iteration   3: 
Bytes	before-close	119058432	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	119058432	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 1033 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033 ms/op

# Run progress: 82.04% complete, ETA 00:28:35
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1210 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210 ms/op
# Warmup Iteration   2: n = 1, mean = 1221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221 ms/op
# Warmup Iteration   3: n = 1, mean = 1216 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216 ms/op
Iteration   1: n = 1, mean = 1218 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218 ms/op
Iteration   2: n = 1, mean = 1221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221 ms/op
Iteration   3: 
Bytes	before-close	119058432	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	119058432	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 1216 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216 ms/op

# Run progress: 82.18% complete, ETA 00:28:21
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1084 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084 ms/op
# Warmup Iteration   2: n = 1, mean = 1060 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060 ms/op
# Warmup Iteration   3: n = 1, mean = 1168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168 ms/op
Iteration   1: n = 1, mean = 1181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181 ms/op
Iteration   2: n = 1, mean = 1035 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035 ms/op
Iteration   3: 
Bytes	before-close	119058432	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	119058432	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 1248 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248 ms/op


Result "readKey":
  N = 9
  mean =   1154.366 ±(99.9%) 150.038 ms/op

  Histogram, ms/op:
    [1000.000, 1025.000) = 0 
    [1025.000, 1050.000) = 3 
    [1050.000, 1075.000) = 0 
    [1075.000, 1100.000) = 0 
    [1100.000, 1125.000) = 0 
    [1125.000, 1150.000) = 0 
    [1150.000, 1175.000) = 0 
    [1175.000, 1200.000) = 2 
    [1200.000, 1225.000) = 3 
    [1225.000, 1250.000) = 1 
    [1250.000, 1275.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1032.847 ms/op
     p(50.0000) =   1191.182 ms/op
     p(90.0000) =   1247.805 ms/op
     p(95.0000) =   1247.805 ms/op
     p(99.0000) =   1247.805 ms/op
     p(99.9000) =   1247.805 ms/op
     p(99.9900) =   1247.805 ms/op
     p(99.9990) =   1247.805 ms/op
     p(99.9999) =   1247.805 ms/op
    p(100.0000) =   1247.805 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readKey
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 82.33% complete, ETA 00:28:06
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 2458 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2458, 2458, 2458, 2458, 2458, 2458, 2458, 2458 ms/op
# Warmup Iteration   2: n = 1, mean = 2374 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2374, 2374, 2374, 2374, 2374, 2374, 2374, 2374 ms/op
# Warmup Iteration   3: n = 1, mean = 2332 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2332, 2332, 2332, 2332, 2332, 2332, 2332, 2332 ms/op
Iteration   1: n = 1, mean = 2831 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2831, 2831, 2831, 2831, 2831, 2831, 2831, 2831 ms/op
Iteration   2: n = 1, mean = 2181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2181, 2181, 2181, 2181, 2181, 2181, 2181, 2181 ms/op
Iteration   3: 
Bytes	before-close	119058432	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	119058432	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 2265 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2265, 2265, 2265, 2265, 2265, 2265, 2265, 2265 ms/op

# Run progress: 82.47% complete, ETA 00:27:53
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 2399 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2399, 2399, 2399, 2399, 2399, 2399, 2399, 2399 ms/op
# Warmup Iteration   2: n = 1, mean = 2655 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2655, 2655, 2655, 2655, 2655, 2655, 2655, 2655 ms/op
# Warmup Iteration   3: n = 1, mean = 2521 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2521, 2521, 2521, 2521, 2521, 2521, 2521, 2521 ms/op
Iteration   1: n = 1, mean = 2651 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2651, 2651, 2651, 2651, 2651, 2651, 2651, 2651 ms/op
Iteration   2: n = 1, mean = 2416 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2416, 2416, 2416, 2416, 2416, 2416, 2416, 2416 ms/op
Iteration   3: 
Bytes	before-close	119058432	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	119058432	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 2177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2177, 2177, 2177, 2177, 2177, 2177, 2177, 2177 ms/op

# Run progress: 82.61% complete, ETA 00:27:40
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 2714 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2714, 2714, 2714, 2714, 2714, 2714, 2714, 2714 ms/op
# Warmup Iteration   2: n = 1, mean = 2613 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2613, 2613, 2613, 2613, 2613, 2613, 2613, 2613 ms/op
# Warmup Iteration   3: n = 1, mean = 2584 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584 ms/op
Iteration   1: n = 1, mean = 2324 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2324, 2324, 2324, 2324, 2324, 2324, 2324, 2324 ms/op
Iteration   2: n = 1, mean = 2114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2114, 2114, 2114, 2114, 2114, 2114, 2114, 2114 ms/op
Iteration   3: 
Bytes	before-close	119058432	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	119058432	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 2116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2116, 2116, 2116, 2116, 2116, 2116, 2116, 2116 ms/op


Result "readKey":
  N = 9
  mean =   2341.587 ±(99.9%) 421.215 ms/op

  Histogram, ms/op:
    [2100.000, 2150.000) = 2 
    [2150.000, 2200.000) = 2 
    [2200.000, 2250.000) = 0 
    [2250.000, 2300.000) = 1 
    [2300.000, 2350.000) = 1 
    [2350.000, 2400.000) = 0 
    [2400.000, 2450.000) = 1 
    [2450.000, 2500.000) = 0 
    [2500.000, 2550.000) = 0 
    [2550.000, 2600.000) = 0 
    [2600.000, 2650.000) = 0 
    [2650.000, 2700.000) = 1 
    [2700.000, 2750.000) = 0 
    [2750.000, 2800.000) = 0 
    [2800.000, 2850.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2113.929 ms/op
     p(50.0000) =   2264.924 ms/op
     p(90.0000) =   2831.155 ms/op
     p(95.0000) =   2831.155 ms/op
     p(99.0000) =   2831.155 ms/op
     p(99.9000) =   2831.155 ms/op
     p(99.9900) =   2831.155 ms/op
     p(99.9990) =   2831.155 ms/op
     p(99.9999) =   2831.155 ms/op
    p(100.0000) =   2831.155 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readRev
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 82.76% complete, ETA 00:27:27
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 932 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 927, 932, 936, 936, 936, 936, 936, 936 ms/op
# Warmup Iteration   2: n = 2, mean = 952 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 924, 952, 979, 979, 979, 979, 979, 979 ms/op
# Warmup Iteration   3: n = 1, mean = 1027 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027 ms/op
Iteration   1: n = 2, mean = 924 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 922, 924, 927, 927, 927, 927, 927, 927 ms/op
Iteration   2: n = 2, mean = 919 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 914, 919, 923, 923, 923, 923, 923, 923 ms/op
Iteration   3: n = 1, mean = 1103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103 ms/op

# Run progress: 82.90% complete, ETA 00:27:13
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 916 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 909, 916, 924, 924, 924, 924, 924, 924 ms/op
# Warmup Iteration   2: n = 1, mean = 1118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118 ms/op
# Warmup Iteration   3: n = 2, mean = 905 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 899, 905, 912, 912, 912, 912, 912, 912 ms/op
Iteration   1: n = 1, mean = 1168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168 ms/op
Iteration   2: n = 1, mean = 1084 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084 ms/op
Iteration   3: n = 2, mean = 944 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 898, 944, 990, 990, 990, 990, 990, 990 ms/op

# Run progress: 83.05% complete, ETA 00:26:59
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1208 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208 ms/op
# Warmup Iteration   2: n = 1, mean = 1237 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237 ms/op
# Warmup Iteration   3: n = 1, mean = 1151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151 ms/op
Iteration   1: n = 1, mean = 1103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103 ms/op
Iteration   2: n = 2, mean = 940 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 938, 940, 942, 942, 942, 942, 942, 942 ms/op
Iteration   3: n = 1, mean = 1179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179 ms/op


Result "readRev":
  N = 13
  mean =   1006.956 ±(99.9%) 124.856 ms/op

  Histogram, ms/op:
    [ 800.000,  825.000) = 0 
    [ 825.000,  850.000) = 0 
    [ 850.000,  875.000) = 0 
    [ 875.000,  900.000) = 1 
    [ 900.000,  925.000) = 3 
    [ 925.000,  950.000) = 3 
    [ 950.000,  975.000) = 0 
    [ 975.000, 1000.000) = 1 
    [1000.000, 1025.000) = 0 
    [1025.000, 1050.000) = 0 
    [1050.000, 1075.000) = 0 
    [1075.000, 1100.000) = 1 
    [1100.000, 1125.000) = 2 
    [1125.000, 1150.000) = 0 
    [1150.000, 1175.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    897.581 ms/op
     p(50.0000) =    941.621 ms/op
     p(90.0000) =   1174.405 ms/op
     p(95.0000) =   1178.599 ms/op
     p(99.0000) =   1178.599 ms/op
     p(99.9000) =   1178.599 ms/op
     p(99.9900) =   1178.599 ms/op
     p(99.9990) =   1178.599 ms/op
     p(99.9999) =   1178.599 ms/op
    p(100.0000) =   1178.599 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readRev
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 83.19% complete, ETA 00:26:45
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 1033 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 993, 1033, 1073, 1073, 1073, 1073, 1073, 1073 ms/op
# Warmup Iteration   2: n = 1, mean = 1208 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208 ms/op
# Warmup Iteration   3: n = 1, mean = 1317 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317 ms/op
Iteration   1: n = 1, mean = 1070 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070 ms/op
Iteration   2: n = 2, mean = 993 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 991, 993, 995, 995, 995, 995, 995, 995 ms/op
Iteration   3: n = 2, mean = 965 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 963, 965, 968, 968, 968, 968, 968, 968 ms/op

# Run progress: 83.33% complete, ETA 00:26:31
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1466 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466 ms/op
# Warmup Iteration   2: n = 1, mean = 1369 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369 ms/op
# Warmup Iteration   3: n = 1, mean = 1315 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315 ms/op
Iteration   1: n = 1, mean = 1432 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432 ms/op
Iteration   2: n = 1, mean = 1116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116 ms/op
Iteration   3: n = 1, mean = 1202 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202 ms/op

# Run progress: 83.48% complete, ETA 00:26:16
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1271 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271 ms/op
# Warmup Iteration   2: n = 1, mean = 1237 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237 ms/op
# Warmup Iteration   3: n = 1, mean = 1271 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271 ms/op
Iteration   1: n = 1, mean = 1221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221 ms/op
Iteration   2: n = 1, mean = 1031 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031 ms/op
Iteration   3: n = 1, mean = 1153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153 ms/op


Result "readRev":
  N = 11
  mean =   1103.674 ±(99.9%) 197.172 ms/op

  Histogram, ms/op:
    [ 900.000,  950.000) = 0 
    [ 950.000, 1000.000) = 4 
    [1000.000, 1050.000) = 1 
    [1050.000, 1100.000) = 1 
    [1100.000, 1150.000) = 1 
    [1150.000, 1200.000) = 1 
    [1200.000, 1250.000) = 2 
    [1250.000, 1300.000) = 0 
    [1300.000, 1350.000) = 0 
    [1350.000, 1400.000) = 0 
    [1400.000, 1450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    962.593 ms/op
     p(50.0000) =   1069.548 ms/op
     p(90.0000) =   1389.992 ms/op
     p(95.0000) =   1432.355 ms/op
     p(99.0000) =   1432.355 ms/op
     p(99.9000) =   1432.355 ms/op
     p(99.9900) =   1432.355 ms/op
     p(99.9990) =   1432.355 ms/op
     p(99.9999) =   1432.355 ms/op
    p(100.0000) =   1432.355 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readRev
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 83.62% complete, ETA 00:26:02
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1033 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033 ms/op
# Warmup Iteration   2: n = 1, mean = 1233 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233 ms/op
# Warmup Iteration   3: n = 1, mean = 1225 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225 ms/op
Iteration   1: n = 1, mean = 1078 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078 ms/op
Iteration   2: n = 2, mean = 823 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 820, 823, 826, 826, 826, 826, 826, 826 ms/op
Iteration   3: n = 2, mean = 803 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 793, 803, 814, 814, 814, 814, 814, 814 ms/op

# Run progress: 83.76% complete, ETA 00:25:47
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 855 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 847, 855, 862, 862, 862, 862, 862, 862 ms/op
# Warmup Iteration   2: n = 1, mean = 1168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168 ms/op
# Warmup Iteration   3: n = 1, mean = 1105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105 ms/op
Iteration   1: n = 1, mean = 1124 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124 ms/op
Iteration   2: n = 2, mean = 876 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 842, 876, 909, 909, 909, 909, 909, 909 ms/op
Iteration   3: n = 1, mean = 1074 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074 ms/op

# Run progress: 83.91% complete, ETA 00:25:33
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1091 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091 ms/op
# Warmup Iteration   2: n = 1, mean = 1017 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017 ms/op
# Warmup Iteration   3: n = 1, mean = 1064 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064 ms/op
Iteration   1: n = 2, mean = 875 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 866, 875, 884, 884, 884, 884, 884, 884 ms/op
Iteration   2: n = 2, mean = 852 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 851, 852, 854, 854, 854, 854, 854, 854 ms/op
Iteration   3: n = 1, mean = 1043 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043 ms/op


Result "readRev":
  N = 14
  mean =    912.711 ±(99.9%) 129.189 ms/op

  Histogram, ms/op:
    [ 700.000,  750.000) = 0 
    [ 750.000,  800.000) = 1 
    [ 800.000,  850.000) = 4 
    [ 850.000,  900.000) = 4 
    [ 900.000,  950.000) = 1 
    [ 950.000, 1000.000) = 0 
    [1000.000, 1050.000) = 1 
    [1050.000, 1100.000) = 2 
    [1100.000, 1150.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    792.723 ms/op
     p(50.0000) =    859.832 ms/op
     p(90.0000) =   1101.005 ms/op
     p(95.0000) =   1124.073 ms/op
     p(99.0000) =   1124.073 ms/op
     p(99.9000) =   1124.073 ms/op
     p(99.9900) =   1124.073 ms/op
     p(99.9990) =   1124.073 ms/op
     p(99.9999) =   1124.073 ms/op
    p(100.0000) =   1124.073 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readRev
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 84.05% complete, ETA 00:25:18
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1030 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030 ms/op
# Warmup Iteration   2: n = 1, mean = 1160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160 ms/op
# Warmup Iteration   3: n = 1, mean = 1008 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008 ms/op
Iteration   1: n = 1, mean = 1011 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011 ms/op
Iteration   2: n = 1, mean = 1107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107 ms/op
Iteration   3: n = 1, mean = 1074 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074 ms/op

# Run progress: 84.20% complete, ETA 00:25:03
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1223 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223 ms/op
# Warmup Iteration   2: n = 1, mean = 1260 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260 ms/op
# Warmup Iteration   3: n = 1, mean = 1043 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043 ms/op
Iteration   1: n = 1, mean = 1045 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045 ms/op
Iteration   2: n = 1, mean = 1036 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036 ms/op
Iteration   3: n = 1, mean = 1040 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040 ms/op

# Run progress: 84.34% complete, ETA 00:24:49
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 991 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 991, 991, 991, 991, 991, 991, 991, 991 ms/op
# Warmup Iteration   2: n = 2, mean = 979 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 970, 979, 989, 989, 989, 989, 989, 989 ms/op
# Warmup Iteration   3: n = 2, mean = 1017 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 980, 1017, 1054, 1054, 1054, 1054, 1054, 1054 ms/op
Iteration   1: n = 1, mean = 1252 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252 ms/op
Iteration   2: n = 1, mean = 1007 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1007, 1007, 1007, 1007, 1007, 1007, 1007, 1007 ms/op
Iteration   3: n = 1, mean = 1242 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242 ms/op


Result "readRev":
  N = 9
  mean =   1090.403 ±(99.9%) 157.600 ms/op

  Histogram, ms/op:
    [1000.000, 1025.000) = 2 
    [1025.000, 1050.000) = 3 
    [1050.000, 1075.000) = 1 
    [1075.000, 1100.000) = 0 
    [1100.000, 1125.000) = 1 
    [1125.000, 1150.000) = 0 
    [1150.000, 1175.000) = 0 
    [1175.000, 1200.000) = 0 
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 1 
    [1250.000, 1275.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1006.633 ms/op
     p(50.0000) =   1045.430 ms/op
     p(90.0000) =   1252.000 ms/op
     p(95.0000) =   1252.000 ms/op
     p(99.0000) =   1252.000 ms/op
     p(99.9000) =   1252.000 ms/op
     p(99.9900) =   1252.000 ms/op
     p(99.9990) =   1252.000 ms/op
     p(99.9999) =   1252.000 ms/op
    p(100.0000) =   1252.000 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 84.48% complete, ETA 00:24:35
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 307 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 238, 285, 418, 418, 418, 418, 418, 418 ms/op
# Warmup Iteration   2: n = 4, mean = 273 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 243, 272, 305, 305, 305, 305, 305, 305 ms/op
# Warmup Iteration   3: n = 4, mean = 340 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 271, 346, 396, 396, 396, 396, 396, 396 ms/op
Iteration   1: n = 4, mean = 282 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 256, 272, 327, 327, 327, 327, 327, 327 ms/op
Iteration   2: n = 5, mean = 242 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 231, 232, 280, 280, 280, 280, 280, 280 ms/op
Iteration   3: n = 5, mean = 234 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 230, 232, 239, 239, 239, 239, 239, 239 ms/op

# Run progress: 84.63% complete, ETA 00:24:21
# Fork: 2 of 3
# Warmup Iteration   1: n = 5, mean = 237 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 229, 236, 245, 245, 245, 245, 245, 245 ms/op
# Warmup Iteration   2: n = 4, mean = 270 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 233, 235, 376, 376, 376, 376, 376, 376 ms/op
# Warmup Iteration   3: n = 4, mean = 302 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 245, 317, 330, 330, 330, 330, 330, 330 ms/op
Iteration   1: n = 4, mean = 281 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 250, 272, 330, 330, 330, 330, 330, 330 ms/op
Iteration   2: n = 5, mean = 239 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 232, 240, 244, 244, 244, 244, 244, 244 ms/op
Iteration   3: n = 3, mean = 357 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 338, 349, 384, 384, 384, 384, 384, 384 ms/op

# Run progress: 84.77% complete, ETA 00:24:06
# Fork: 3 of 3
# Warmup Iteration   1: n = 5, mean = 265 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 225, 240, 374, 374, 374, 374, 374, 374 ms/op
# Warmup Iteration   2: n = 4, mean = 316 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 279, 323, 340, 340, 340, 340, 340, 340 ms/op
# Warmup Iteration   3: n = 4, mean = 294 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 232, 262, 418, 418, 418, 418, 418, 418 ms/op
Iteration   1: n = 4, mean = 304 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 269, 300, 346, 346, 346, 346, 346, 346 ms/op
Iteration   2: n = 4, mean = 293 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 256, 283, 351, 351, 351, 351, 351, 351 ms/op
Iteration   3: n = 5, mean = 239 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 232, 235, 256, 256, 256, 256, 256, 256 ms/op


Result "readSeq":
  N = 39
  mean =    268.879 ±(99.9%) 24.437 ms/op

  Histogram, ms/op:
    [200.000, 212.500) = 0 
    [212.500, 225.000) = 0 
    [225.000, 237.500) = 11 
    [237.500, 250.000) = 7 
    [250.000, 262.500) = 4 
    [262.500, 275.000) = 6 
    [275.000, 287.500) = 3 
    [287.500, 300.000) = 0 
    [300.000, 312.500) = 0 
    [312.500, 325.000) = 0 
    [325.000, 337.500) = 3 
    [337.500, 350.000) = 3 
    [350.000, 362.500) = 1 
    [362.500, 375.000) = 0 
    [375.000, 387.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    230.162 ms/op
     p(50.0000) =    255.853 ms/op
     p(90.0000) =    345.506 ms/op
     p(95.0000) =    350.749 ms/op
     p(99.0000) =    383.779 ms/op
     p(99.9000) =    383.779 ms/op
     p(99.9900) =    383.779 ms/op
     p(99.9990) =    383.779 ms/op
     p(99.9999) =    383.779 ms/op
    p(100.0000) =    383.779 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 84.91% complete, ETA 00:23:52
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 292 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 283, 288, 309, 309, 309, 309, 309, 309 ms/op
# Warmup Iteration   2: n = 3, mean = 346 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 293, 308, 435, 435, 435, 435, 435, 435 ms/op
# Warmup Iteration   3: n = 3, mean = 376 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 342, 387, 399, 399, 399, 399, 399, 399 ms/op
Iteration   1: n = 3, mean = 342 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 293, 338, 395, 395, 395, 395, 395, 395 ms/op
Iteration   2: n = 3, mean = 351 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 326, 337, 389, 389, 389, 389, 389, 389 ms/op
Iteration   3: n = 3, mean = 426 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 359, 406, 514, 514, 514, 514, 514, 514 ms/op

# Run progress: 85.06% complete, ETA 00:23:37
# Fork: 2 of 3
# Warmup Iteration   1: n = 3, mean = 362 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 328, 332, 426, 426, 426, 426, 426, 426 ms/op
# Warmup Iteration   2: n = 3, mean = 457 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 424, 459, 487, 487, 487, 487, 487, 487 ms/op
# Warmup Iteration   3: n = 3, mean = 405 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 349, 382, 485, 485, 485, 485, 485, 485 ms/op
Iteration   1: n = 3, mean = 413 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 390, 414, 436, 436, 436, 436, 436, 436 ms/op
Iteration   2: n = 4, mean = 330 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 289, 334, 360, 360, 360, 360, 360, 360 ms/op
Iteration   3: n = 3, mean = 361 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 336, 350, 396, 396, 396, 396, 396, 396 ms/op

# Run progress: 85.20% complete, ETA 00:23:23
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 298 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 284, 296, 318, 318, 318, 318, 318, 318 ms/op
# Warmup Iteration   2: n = 3, mean = 406 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 381, 394, 444, 444, 444, 444, 444, 444 ms/op
# Warmup Iteration   3: n = 3, mean = 360 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 341, 342, 397, 397, 397, 397, 397, 397 ms/op
Iteration   1: n = 4, mean = 308 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 292, 303, 336, 336, 336, 336, 336, 336 ms/op
Iteration   2: n = 4, mean = 295 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 290, 295, 298, 298, 298, 298, 298, 298 ms/op
Iteration   3: n = 4, mean = 293 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 291, 292, 297, 297, 297, 297, 297, 297 ms/op


Result "readSeq":
  N = 31
  mean =    341.227 ±(99.9%) 35.643 ms/op

  Histogram, ms/op:
    [200.000, 225.000) = 0 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 0 
    [275.000, 300.000) = 12 
    [300.000, 325.000) = 1 
    [325.000, 350.000) = 7 
    [350.000, 375.000) = 3 
    [375.000, 400.000) = 4 
    [400.000, 425.000) = 2 
    [425.000, 450.000) = 1 
    [450.000, 475.000) = 0 
    [475.000, 500.000) = 0 
    [500.000, 525.000) = 1 
    [525.000, 550.000) = 0 
    [550.000, 575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    288.883 ms/op
     p(50.0000) =    335.544 ms/op
     p(90.0000) =    412.615 ms/op
     p(95.0000) =    466.931 ms/op
     p(99.0000) =    513.802 ms/op
     p(99.9000) =    513.802 ms/op
     p(99.9900) =    513.802 ms/op
     p(99.9990) =    513.802 ms/op
     p(99.9999) =    513.802 ms/op
    p(100.0000) =    513.802 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 85.34% complete, ETA 00:23:09
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 127, 153, 153, 153, 153, 153, 153 ms/op
# Warmup Iteration   2: n = 8, mean = 125 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 124, 130, 130, 130, 130, 130, 130 ms/op
# Warmup Iteration   3: n = 7, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 141, 214, 214, 214, 214, 214, 214 ms/op
Iteration   1: n = 8, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 137, 168, 168, 168, 168, 168, 168 ms/op
Iteration   2: n = 7, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 139, 213, 213, 213, 213, 213, 213 ms/op
Iteration   3: n = 7, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 128, 219, 219, 219, 219, 219, 219 ms/op

# Run progress: 85.49% complete, ETA 00:22:54
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 191 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 168, 257, 257, 257, 257, 257, 257 ms/op
# Warmup Iteration   2: n = 6, mean = 186 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 200, 219, 219, 219, 219, 219, 219 ms/op
# Warmup Iteration   3: n = 7, mean = 172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 141, 224, 224, 224, 224, 224, 224 ms/op
Iteration   1: n = 7, mean = 149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 140, 211, 211, 211, 211, 211, 211 ms/op
Iteration   2: n = 9, mean = 123 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 120, 123, 128, 128, 128, 128, 128, 128 ms/op
Iteration   3: n = 9, mean = 123 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 120, 124, 127, 127, 127, 127, 127, 127 ms/op

# Run progress: 85.63% complete, ETA 00:22:40
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 128, 153, 153, 153, 153, 153, 153 ms/op
# Warmup Iteration   2: n = 7, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 142, 207, 207, 207, 207, 207, 207 ms/op
# Warmup Iteration   3: n = 6, mean = 184 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 203, 211, 211, 211, 211, 211, 211 ms/op
Iteration   1: n = 7, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 139, 147, 212, 212, 212, 212, 212, 212 ms/op
Iteration   2: n = 8, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 125, 161, 161, 161, 161, 161, 161 ms/op
Iteration   3: n = 7, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 140, 211, 211, 211, 211, 211, 211 ms/op


Result "readSeq":
  N = 69
  mean =    141.776 ±(99.9%) 10.796 ms/op

  Histogram, ms/op:
    [120.000, 130.000) = 30 
    [130.000, 140.000) = 20 
    [140.000, 150.000) = 7 
    [150.000, 160.000) = 0 
    [160.000, 170.000) = 3 
    [170.000, 180.000) = 1 
    [180.000, 190.000) = 2 
    [190.000, 200.000) = 0 
    [200.000, 210.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    120.193 ms/op
     p(50.0000) =    137.626 ms/op
     p(90.0000) =    185.074 ms/op
     p(95.0000) =    211.288 ms/op
     p(99.0000) =    218.628 ms/op
     p(99.9000) =    218.628 ms/op
     p(99.9900) =    218.628 ms/op
     p(99.9990) =    218.628 ms/op
     p(99.9999) =    218.628 ms/op
    p(100.0000) =    218.628 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 85.78% complete, ETA 00:22:25
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 320 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 314, 319, 328, 328, 328, 328, 328, 328 ms/op
# Warmup Iteration   2: n = 3, mean = 404 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 368, 373, 472, 472, 472, 472, 472, 472 ms/op
# Warmup Iteration   3: n = 3, mean = 390 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 346, 380, 445, 445, 445, 445, 445, 445 ms/op
Iteration   1: n = 3, mean = 405 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 357, 365, 492, 492, 492, 492, 492, 492 ms/op
Iteration   2: n = 4, mean = 314 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 310, 311, 326, 326, 326, 326, 326, 326 ms/op
Iteration   3: n = 4, mean = 312 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 309, 311, 317, 317, 317, 317, 317, 317 ms/op

# Run progress: 85.92% complete, ETA 00:22:11
# Fork: 2 of 3
# Warmup Iteration   1: n = 3, mean = 462 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 355, 433, 598, 598, 598, 598, 598, 598 ms/op
# Warmup Iteration   2: n = 3, mean = 352 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 315, 364, 377, 377, 377, 377, 377, 377 ms/op
# Warmup Iteration   3: n = 3, mean = 454 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 382, 478, 501, 501, 501, 501, 501, 501 ms/op
Iteration   1: n = 3, mean = 344 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 319, 331, 382, 382, 382, 382, 382, 382 ms/op
Iteration   2: n = 4, mean = 315 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 314, 315, 316, 316, 316, 316, 316, 316 ms/op
Iteration   3: n = 2, mean = 512 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 498, 512, 526, 526, 526, 526, 526, 526 ms/op

# Run progress: 86.06% complete, ETA 00:21:57
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 350 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 313, 353, 382, 382, 382, 382, 382, 382 ms/op
# Warmup Iteration   2: n = 3, mean = 348 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 328, 338, 378, 378, 378, 378, 378, 378 ms/op
# Warmup Iteration   3: n = 3, mean = 376 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 333, 377, 417, 417, 417, 417, 417, 417 ms/op
Iteration   1: n = 3, mean = 384 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 336, 368, 449, 449, 449, 449, 449, 449 ms/op
Iteration   2: n = 4, mean = 314 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 311, 313, 319, 319, 319, 319, 319, 319 ms/op
Iteration   3: n = 4, mean = 316 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 311, 315, 321, 321, 321, 321, 321, 321 ms/op


Result "readSeq":
  N = 31
  mean =    345.354 ±(99.9%) 39.911 ms/op

  Histogram, ms/op:
    [300.000, 325.000) = 20 
    [325.000, 350.000) = 3 
    [350.000, 375.000) = 3 
    [375.000, 400.000) = 1 
    [400.000, 425.000) = 0 
    [425.000, 450.000) = 1 
    [450.000, 475.000) = 0 
    [475.000, 500.000) = 2 
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 1 
    [550.000, 575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    308.806 ms/op
     p(50.0000) =    316.670 ms/op
     p(90.0000) =    483.708 ms/op
     p(95.0000) =    509.084 ms/op
     p(99.0000) =    526.385 ms/op
     p(99.9000) =    526.385 ms/op
     p(99.9900) =    526.385 ms/op
     p(99.9990) =    526.385 ms/op
     p(99.9999) =    526.385 ms/op
    p(100.0000) =    526.385 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 86.21% complete, ETA 00:21:43
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 360 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 314, 336, 457, 457, 457, 457, 457, 457 ms/op
# Warmup Iteration   2: n = 3, mean = 378 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 348, 367, 420, 420, 420, 420, 420, 420 ms/op
# Warmup Iteration   3: n = 4, mean = 320 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 317, 320, 323, 323, 323, 323, 323, 323 ms/op
Iteration   1: n = 3, mean = 355 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 334, 339, 391, 391, 391, 391, 391, 391 ms/op
Iteration   2: n = 4, mean = 319 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 316, 317, 326, 326, 326, 326, 326, 326 ms/op
Iteration   3: n = 4, mean = 319 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 316, 319, 323, 323, 323, 323, 323, 323 ms/op

# Run progress: 86.35% complete, ETA 00:21:29
# Fork: 2 of 3
# Warmup Iteration   1: n = 3, mean = 423 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 345, 377, 547, 547, 547, 547, 547, 547 ms/op
# Warmup Iteration   2: n = 3, mean = 414 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 349, 429, 465, 465, 465, 465, 465, 465 ms/op
# Warmup Iteration   3: n = 3, mean = 430 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 376, 403, 510, 510, 510, 510, 510, 510 ms/op
Iteration   1: n = 3, mean = 410 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 355, 390, 485, 485, 485, 485, 485, 485 ms/op
Iteration   2: n = 4, mean = 334 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 325, 332, 346, 346, 346, 346, 346, 346 ms/op
Iteration   3: n = 3, mean = 392 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 354, 375, 445, 445, 445, 445, 445, 445 ms/op

# Run progress: 86.49% complete, ETA 00:21:14
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 354 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 315, 334, 434, 434, 434, 434, 434, 434 ms/op
# Warmup Iteration   2: n = 3, mean = 376 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 347, 365, 415, 415, 415, 415, 415, 415 ms/op
# Warmup Iteration   3: n = 3, mean = 360 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 339, 347, 393, 393, 393, 393, 393, 393 ms/op
Iteration   1: n = 3, mean = 375 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 341, 366, 419, 419, 419, 419, 419, 419 ms/op
Iteration   2: n = 4, mean = 318 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 315, 316, 326, 326, 326, 326, 326, 326 ms/op
Iteration   3: n = 4, mean = 320 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 316, 319, 325, 325, 325, 325, 325, 325 ms/op


Result "readXxh64":
  N = 32
  mean =    344.867 ±(99.9%) 26.528 ms/op

  Histogram, ms/op:
    [300.000, 312.500) = 0 
    [312.500, 325.000) = 14 
    [325.000, 337.500) = 5 
    [337.500, 350.000) = 4 
    [350.000, 362.500) = 2 
    [362.500, 375.000) = 1 
    [375.000, 387.500) = 1 
    [387.500, 400.000) = 2 
    [400.000, 412.500) = 0 
    [412.500, 425.000) = 1 
    [425.000, 437.500) = 0 
    [437.500, 450.000) = 1 
    [450.000, 462.500) = 0 
    [462.500, 475.000) = 0 
    [475.000, 487.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    315.097 ms/op
     p(50.0000) =    325.845 ms/op
     p(90.0000) =    410.937 ms/op
     p(95.0000) =    459.067 ms/op
     p(99.0000) =    484.966 ms/op
     p(99.9000) =    484.966 ms/op
     p(99.9900) =    484.966 ms/op
     p(99.9990) =    484.966 ms/op
     p(99.9999) =    484.966 ms/op
    p(100.0000) =    484.966 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 86.64% complete, ETA 00:21:00
# Fork: 1 of 3
# Warmup Iteration   1: n = 3, mean = 376 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 367, 370, 391, 391, 391, 391, 391, 391 ms/op
# Warmup Iteration   2: n = 3, mean = 382 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 379, 383, 384, 384, 384, 384, 384, 384 ms/op
# Warmup Iteration   3: n = 3, mean = 374 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 370, 376, 376, 376, 376, 376, 376, 376 ms/op
Iteration   1: n = 3, mean = 374 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 371, 373, 379, 379, 379, 379, 379, 379 ms/op
Iteration   2: n = 3, mean = 408 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 372, 373, 479, 479, 479, 479, 479, 479 ms/op
Iteration   3: n = 3, mean = 447 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 391, 436, 513, 513, 513, 513, 513, 513 ms/op

# Run progress: 86.78% complete, ETA 00:20:46
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 582 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 454, 582, 710, 710, 710, 710, 710, 710 ms/op
# Warmup Iteration   2: n = 3, mean = 451 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 407, 455, 492, 492, 492, 492, 492, 492 ms/op
# Warmup Iteration   3: n = 3, mean = 401 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 393, 397, 411, 411, 411, 411, 411, 411 ms/op
Iteration   1: n = 3, mean = 426 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 392, 392, 493, 493, 493, 493, 493, 493 ms/op
Iteration   2: n = 3, mean = 437 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 400, 447, 463, 463, 463, 463, 463, 463 ms/op
Iteration   3: n = 3, mean = 456 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 393, 481, 494, 494, 494, 494, 494, 494 ms/op

# Run progress: 86.93% complete, ETA 00:20:32
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 611 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 567, 611, 655, 655, 655, 655, 655, 655 ms/op
# Warmup Iteration   2: n = 2, mean = 563 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 499, 563, 627, 627, 627, 627, 627, 627 ms/op
# Warmup Iteration   3: n = 3, mean = 443 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 404, 436, 488, 488, 488, 488, 488, 488 ms/op
Iteration   1: n = 2, mean = 562 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 519, 562, 605, 605, 605, 605, 605, 605 ms/op
Iteration   2: n = 3, mean = 420 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 384, 407, 470, 470, 470, 470, 470, 470 ms/op
Iteration   3: n = 2, mean = 528 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 460, 528, 597, 597, 597, 597, 597, 597 ms/op


Result "readXxh64":
  N = 25
  mean =    443.443 ±(99.9%) 50.954 ms/op

  Histogram, ms/op:
    [300.000, 325.000) = 0 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 4 
    [375.000, 400.000) = 6 
    [400.000, 425.000) = 2 
    [425.000, 450.000) = 2 
    [450.000, 475.000) = 3 
    [475.000, 500.000) = 4 
    [500.000, 525.000) = 2 
    [525.000, 550.000) = 0 
    [550.000, 575.000) = 0 
    [575.000, 600.000) = 1 
    [600.000, 625.000) = 1 
    [625.000, 650.000) = 0 
    [650.000, 675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    370.672 ms/op
     p(50.0000) =    436.208 ms/op
     p(90.0000) =    550.083 ms/op
     p(95.0000) =    602.512 ms/op
     p(99.0000) =    605.028 ms/op
     p(99.9000) =    605.028 ms/op
     p(99.9900) =    605.028 ms/op
     p(99.9990) =    605.028 ms/op
     p(99.9999) =    605.028 ms/op
    p(100.0000) =    605.028 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 87.07% complete, ETA 00:20:18
# Fork: 1 of 3
# Warmup Iteration   1: n = 5, mean = 234 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 218, 226, 271, 271, 271, 271, 271, 271 ms/op
# Warmup Iteration   2: n = 5, mean = 218 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 216, 217, 223, 223, 223, 223, 223, 223 ms/op
# Warmup Iteration   3: n = 5, mean = 233 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 214, 218, 283, 283, 283, 283, 283, 283 ms/op
Iteration   1: n = 5, mean = 216 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 215, 217, 218, 218, 218, 218, 218, 218 ms/op
Iteration   2: n = 5, mean = 221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 216, 220, 230, 230, 230, 230, 230, 230 ms/op
Iteration   3: n = 5, mean = 216 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 215, 216, 217, 217, 217, 217, 217, 217 ms/op

# Run progress: 87.21% complete, ETA 00:20:04
# Fork: 2 of 3
# Warmup Iteration   1: n = 3, mean = 333 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 303, 326, 371, 371, 371, 371, 371, 371 ms/op
# Warmup Iteration   2: n = 5, mean = 226 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 213, 215, 272, 272, 272, 272, 272, 272 ms/op
# Warmup Iteration   3: n = 4, mean = 257 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 235, 241, 309, 309, 309, 309, 309, 309 ms/op
Iteration   1: n = 4, mean = 296 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 242, 312, 318, 318, 318, 318, 318, 318 ms/op
Iteration   2: n = 5, mean = 231 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 215, 235, 248, 248, 248, 248, 248, 248 ms/op
Iteration   3: n = 5, mean = 214 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 212, 213, 218, 218, 218, 218, 218, 218 ms/op

# Run progress: 87.36% complete, ETA 00:19:49
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 275 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 244, 251, 353, 353, 353, 353, 353, 353 ms/op
# Warmup Iteration   2: n = 5, mean = 214 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 211, 211, 224, 224, 224, 224, 224, 224 ms/op
# Warmup Iteration   3: n = 4, mean = 256 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 232, 240, 311, 311, 311, 311, 311, 311 ms/op
Iteration   1: n = 4, mean = 267 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 211, 273, 312, 312, 312, 312, 312, 312 ms/op
Iteration   2: n = 5, mean = 223 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 211, 218, 240, 240, 240, 240, 240, 240 ms/op
Iteration   3: n = 4, mean = 254 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 230, 238, 310, 310, 310, 310, 310, 310 ms/op


Result "readXxh64":
  N = 42
  mean =    235.212 ±(99.9%) 18.287 ms/op

  Histogram, ms/op:
    [200.000, 212.500) = 5 
    [212.500, 225.000) = 20 
    [225.000, 237.500) = 6 
    [237.500, 250.000) = 5 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 
    [287.500, 300.000) = 0 
    [300.000, 312.500) = 4 
    [312.500, 325.000) = 2 
    [325.000, 337.500) = 0 
    [337.500, 350.000) = 0 
    [350.000, 362.500) = 0 
    [362.500, 375.000) = 0 
    [375.000, 387.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    211.026 ms/op
     p(50.0000) =    217.580 ms/op
     p(90.0000) =    310.221 ms/op
     p(95.0000) =    314.258 ms/op
     p(99.0000) =    317.719 ms/op
     p(99.9000) =    317.719 ms/op
     p(99.9900) =    317.719 ms/op
     p(99.9990) =    317.719 ms/op
     p(99.9999) =    317.719 ms/op
    p(100.0000) =    317.719 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 87.50% complete, ETA 00:19:35
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 541 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 480, 541, 602, 602, 602, 602, 602, 602 ms/op
# Warmup Iteration   2: n = 2, mean = 519 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 504, 519, 535, 535, 535, 535, 535, 535 ms/op
# Warmup Iteration   3: n = 2, mean = 503 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 473, 503, 532, 532, 532, 532, 532, 532 ms/op
Iteration   1: n = 2, mean = 508 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 472, 508, 543, 543, 543, 543, 543, 543 ms/op
Iteration   2: n = 3, mean = 409 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 406, 408, 413, 413, 413, 413, 413, 413 ms/op
Iteration   3: n = 3, mean = 409 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 408, 408, 410, 410, 410, 410, 410, 410 ms/op

# Run progress: 87.64% complete, ETA 00:19:21
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 544 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 471, 544, 617, 617, 617, 617, 617, 617 ms/op
# Warmup Iteration   2: n = 2, mean = 607 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 564, 607, 650, 650, 650, 650, 650, 650 ms/op
# Warmup Iteration   3: n = 2, mean = 590 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 540, 590, 641, 641, 641, 641, 641, 641 ms/op
Iteration   1: n = 2, mean = 522 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 470, 522, 575, 575, 575, 575, 575, 575 ms/op
Iteration   2: n = 2, mean = 582 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 523, 582, 641, 641, 641, 641, 641, 641 ms/op
Iteration   3: n = 3, mean = 434 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 402, 409, 490, 490, 490, 490, 490, 490 ms/op

# Run progress: 87.79% complete, ETA 00:19:07
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 421 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 407, 415, 441, 441, 441, 441, 441, 441 ms/op
# Warmup Iteration   2: n = 3, mean = 469 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 408, 466, 533, 533, 533, 533, 533, 533 ms/op
# Warmup Iteration   3: n = 2, mean = 510 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 502, 510, 517, 517, 517, 517, 517, 517 ms/op
Iteration   1: n = 3, mean = 432 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 412, 415, 469, 469, 469, 469, 469, 469 ms/op
Iteration   2: n = 3, mean = 403 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 401, 401, 406, 406, 406, 406, 406, 406 ms/op
Iteration   3: n = 3, mean = 408 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 404, 406, 414, 414, 414, 414, 414, 414 ms/op


Result "readXxh64":
  N = 24
  mean =    446.125 ±(99.9%) 49.963 ms/op

  Histogram, ms/op:
    [400.000, 425.000) = 16 
    [425.000, 450.000) = 0 
    [450.000, 475.000) = 3 
    [475.000, 500.000) = 1 
    [500.000, 525.000) = 1 
    [525.000, 550.000) = 1 
    [550.000, 575.000) = 1 
    [575.000, 600.000) = 0 
    [600.000, 625.000) = 0 
    [625.000, 650.000) = 1 
    [650.000, 675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    401.080 ms/op
     p(50.0000) =    410.780 ms/op
     p(90.0000) =    558.891 ms/op
     p(95.0000) =    624.165 ms/op
     p(99.0000) =    640.680 ms/op
     p(99.9000) =    640.680 ms/op
     p(99.9900) =    640.680 ms/op
     p(99.9990) =    640.680 ms/op
     p(99.9999) =    640.680 ms/op
    p(100.0000) =    640.680 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.write
# Parameters: (batchSize = 1000000, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 87.93% complete, ETA 00:18:53
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1669 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669 ms/op
# Warmup Iteration   2: n = 1, mean = 1615 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615 ms/op
# Warmup Iteration   3: n = 1, mean = 2013 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013 ms/op
Iteration   1: n = 1, mean = 1778 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778 ms/op
Iteration   2: n = 1, mean = 1996 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1996, 1996, 1996, 1996, 1996, 1996, 1996, 1996 ms/op
Iteration   3: n = 1, mean = 2009 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009 ms/op

# Run progress: 88.07% complete, ETA 00:18:39
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1768 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768 ms/op
# Warmup Iteration   2: n = 1, mean = 1837 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1837, 1837, 1837, 1837, 1837, 1837, 1837, 1837 ms/op
# Warmup Iteration   3: n = 1, mean = 2076 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076 ms/op
Iteration   1: n = 1, mean = 1812 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1812, 1812, 1812, 1812, 1812, 1812, 1812, 1812 ms/op
Iteration   2: n = 1, mean = 1615 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615 ms/op
Iteration   3: n = 1, mean = 1804 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1804, 1804, 1804, 1804, 1804, 1804, 1804, 1804 ms/op

# Run progress: 88.22% complete, ETA 00:18:25
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1724 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724 ms/op
# Warmup Iteration   2: n = 1, mean = 1774 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774 ms/op
# Warmup Iteration   3: n = 1, mean = 1866 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1866, 1866, 1866, 1866, 1866, 1866, 1866, 1866 ms/op
Iteration   1: n = 1, mean = 1806 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806 ms/op
Iteration   2: n = 1, mean = 1588 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588 ms/op
Iteration   3: n = 1, mean = 1799 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799 ms/op


Result "write":
  N = 9
  mean =   1800.755 ±(99.9%) 239.427 ms/op

  Histogram, ms/op:
    [1500.000, 1550.000) = 0 
    [1550.000, 1600.000) = 1 
    [1600.000, 1650.000) = 1 
    [1650.000, 1700.000) = 0 
    [1700.000, 1750.000) = 0 
    [1750.000, 1800.000) = 2 
    [1800.000, 1850.000) = 3 
    [1850.000, 1900.000) = 0 
    [1900.000, 1950.000) = 0 
    [1950.000, 2000.000) = 1 
    [2000.000, 2050.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1587.544 ms/op
     p(50.0000) =   1803.551 ms/op
     p(90.0000) =   2009.072 ms/op
     p(95.0000) =   2009.072 ms/op
     p(99.0000) =   2009.072 ms/op
     p(99.9000) =   2009.072 ms/op
     p(99.9900) =   2009.072 ms/op
     p(99.9990) =   2009.072 ms/op
     p(99.9999) =   2009.072 ms/op
    p(100.0000) =   2009.072 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.write
# Parameters: (batchSize = 1000000, intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 88.36% complete, ETA 00:18:12
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1768 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768 ms/op
# Warmup Iteration   2: n = 1, mean = 1661 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661 ms/op
# Warmup Iteration   3: n = 1, mean = 1875 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1875, 1875, 1875, 1875, 1875, 1875, 1875, 1875 ms/op
Iteration   1: n = 1, mean = 1757 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757 ms/op
Iteration   2: n = 1, mean = 1684 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684 ms/op
Iteration   3: n = 1, mean = 2009 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2009, 2009, 2009, 2009, 2009, 2009, 2009, 2009 ms/op

# Run progress: 88.51% complete, ETA 00:17:58
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1862 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1862, 1862, 1862, 1862, 1862, 1862, 1862, 1862 ms/op
# Warmup Iteration   2: n = 1, mean = 1688 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688 ms/op
# Warmup Iteration   3: n = 1, mean = 1833 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1833, 1833, 1833, 1833, 1833, 1833, 1833, 1833 ms/op
Iteration   1: n = 1, mean = 1856 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1856, 1856, 1856, 1856, 1856, 1856, 1856, 1856 ms/op
Iteration   2: n = 1, mean = 1866 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1866, 1866, 1866, 1866, 1866, 1866, 1866, 1866 ms/op
Iteration   3: n = 1, mean = 1701 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701 ms/op

# Run progress: 88.65% complete, ETA 00:17:44
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1749 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749 ms/op
# Warmup Iteration   2: n = 1, mean = 2210 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210 ms/op
# Warmup Iteration   3: n = 1, mean = 2078 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2078, 2078, 2078, 2078, 2078, 2078, 2078, 2078 ms/op
Iteration   1: n = 1, mean = 2152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152 ms/op
Iteration   2: n = 1, mean = 1908 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1908, 1908, 1908, 1908, 1908, 1908, 1908, 1908 ms/op
Iteration   3: n = 1, mean = 1724 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724 ms/op


Result "write":
  N = 9
  mean =   1850.853 ±(99.9%) 261.903 ms/op

  Histogram, ms/op:
    [1600.000, 1650.000) = 0 
    [1650.000, 1700.000) = 1 
    [1700.000, 1750.000) = 2 
    [1750.000, 1800.000) = 1 
    [1800.000, 1850.000) = 0 
    [1850.000, 1900.000) = 2 
    [1900.000, 1950.000) = 1 
    [1950.000, 2000.000) = 0 
    [2000.000, 2050.000) = 1 
    [2050.000, 2100.000) = 0 
    [2100.000, 2150.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1684.013 ms/op
     p(50.0000) =   1855.980 ms/op
     p(90.0000) =   2151.678 ms/op
     p(95.0000) =   2151.678 ms/op
     p(99.0000) =   2151.678 ms/op
     p(99.9000) =   2151.678 ms/op
     p(99.9900) =   2151.678 ms/op
     p(99.9990) =   2151.678 ms/op
     p(99.9999) =   2151.678 ms/op
    p(100.0000) =   2151.678 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.write
# Parameters: (batchSize = 1000000, intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 88.79% complete, ETA 00:17:31
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 906 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 906, 906, 906, 906, 906, 906, 906, 906 ms/op
# Warmup Iteration   2: n = 2, mean = 776 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 699, 776, 854, 854, 854, 854, 854, 854 ms/op
# Warmup Iteration   3: n = 2, mean = 901 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 834, 901, 969, 969, 969, 969, 969, 969 ms/op
Iteration   1: n = 2, mean = 764 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 704, 764, 824, 824, 824, 824, 824, 824 ms/op
Iteration   2: n = 2, mean = 778 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 699, 778, 857, 857, 857, 857, 857, 857 ms/op
Iteration   3: n = 2, mean = 798 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 736, 798, 861, 861, 861, 861, 861, 861 ms/op

# Run progress: 88.94% complete, ETA 00:17:17
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 980 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 980, 980, 980, 980, 980, 980, 980, 980 ms/op
# Warmup Iteration   2: n = 2, mean = 769 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 687, 769, 851, 851, 851, 851, 851, 851 ms/op
# Warmup Iteration   3: n = 2, mean = 678 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 670, 678, 686, 686, 686, 686, 686, 686 ms/op
Iteration   1: n = 2, mean = 835 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 820, 835, 849, 849, 849, 849, 849, 849 ms/op
Iteration   2: n = 2, mean = 862 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 837, 862, 888, 888, 888, 888, 888, 888 ms/op
Iteration   3: n = 2, mean = 845 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 837, 845, 852, 852, 852, 852, 852, 852 ms/op

# Run progress: 89.08% complete, ETA 00:17:03
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 894 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 894, 894, 894, 894, 894, 894, 894, 894 ms/op
# Warmup Iteration   2: n = 2, mean = 694 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 688, 694, 700, 700, 700, 700, 700, 700 ms/op
# Warmup Iteration   3: n = 2, mean = 674 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 673, 674, 675, 675, 675, 675, 675, 675 ms/op
Iteration   1: n = 2, mean = 687 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 681, 687, 694, 694, 694, 694, 694, 694 ms/op
Iteration   2: n = 2, mean = 731 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 669, 731, 794, 794, 794, 794, 794, 794 ms/op
Iteration   3: n = 2, mean = 758 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 737, 758, 779, 779, 779, 779, 779, 779 ms/op


Result "write":
  N = 18
  mean =    784.335 ±(99.9%) 67.893 ms/op

  Histogram, ms/op:
    [600.000, 625.000) = 0 
    [625.000, 650.000) = 0 
    [650.000, 675.000) = 1 
    [675.000, 700.000) = 3 
    [700.000, 725.000) = 1 
    [725.000, 750.000) = 2 
    [750.000, 775.000) = 0 
    [775.000, 800.000) = 2 
    [800.000, 825.000) = 2 
    [825.000, 850.000) = 3 
    [850.000, 875.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =    668.991 ms/op
     p(50.0000) =    806.879 ms/op
     p(90.0000) =    863.607 ms/op
     p(95.0000) =    888.144 ms/op
     p(99.0000) =    888.144 ms/op
     p(99.9000) =    888.144 ms/op
     p(99.9900) =    888.144 ms/op
     p(99.9990) =    888.144 ms/op
     p(99.9999) =    888.144 ms/op
    p(100.0000) =    888.144 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.write
# Parameters: (batchSize = 1000000, intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 89.22% complete, ETA 00:16:49
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 2282 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2282, 2282, 2282, 2282, 2282, 2282, 2282, 2282 ms/op
# Warmup Iteration   2: n = 1, mean = 2034 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034 ms/op
# Warmup Iteration   3: n = 1, mean = 2621 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621 ms/op
Iteration   1: n = 1, mean = 2017 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017 ms/op
Iteration   2: n = 1, mean = 2206 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2206, 2206, 2206, 2206, 2206, 2206, 2206, 2206 ms/op
Iteration   3: n = 1, mean = 2145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2145, 2145, 2145, 2145, 2145, 2145, 2145, 2145 ms/op

# Run progress: 89.37% complete, ETA 00:16:35
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 2194 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194 ms/op
# Warmup Iteration   2: n = 1, mean = 2152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2152, 2152, 2152, 2152, 2152, 2152, 2152, 2152 ms/op
# Warmup Iteration   3: n = 1, mean = 1984 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1984, 1984, 1984, 1984, 1984, 1984, 1984, 1984 ms/op
Iteration   1: n = 1, mean = 2013 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013 ms/op
Iteration   2: n = 1, mean = 2003 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2003, 2003, 2003, 2003, 2003, 2003, 2003, 2003 ms/op
Iteration   3: n = 1, mean = 2278 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2278, 2278, 2278, 2278, 2278, 2278, 2278, 2278 ms/op

# Run progress: 89.51% complete, ETA 00:16:22
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 2194 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194 ms/op
# Warmup Iteration   2: n = 1, mean = 2177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2177, 2177, 2177, 2177, 2177, 2177, 2177, 2177 ms/op
# Warmup Iteration   3: n = 1, mean = 2219 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2219, 2219, 2219, 2219, 2219, 2219, 2219, 2219 ms/op
Iteration   1: n = 1, mean = 2047 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2047, 2047, 2047, 2047, 2047, 2047, 2047, 2047 ms/op
Iteration   2: n = 1, mean = 2034 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034 ms/op
Iteration   3: n = 1, mean = 2032 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2032, 2032, 2032, 2032, 2032, 2032, 2032, 2032 ms/op


Result "write":
  N = 9
  mean =   2086.200 ±(99.9%) 166.650 ms/op

  Histogram, ms/op:
    [2000.000, 2025.000) = 3 
    [2025.000, 2050.000) = 3 
    [2050.000, 2075.000) = 0 
    [2075.000, 2100.000) = 0 
    [2100.000, 2125.000) = 0 
    [2125.000, 2150.000) = 1 
    [2150.000, 2175.000) = 0 
    [2175.000, 2200.000) = 0 
    [2200.000, 2225.000) = 1 
    [2225.000, 2250.000) = 0 
    [2250.000, 2275.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2002.780 ms/op
     p(50.0000) =   2034.237 ms/op
     p(90.0000) =   2277.507 ms/op
     p(95.0000) =   2277.507 ms/op
     p(99.0000) =   2277.507 ms/op
     p(99.9000) =   2277.507 ms/op
     p(99.9900) =   2277.507 ms/op
     p(99.9990) =   2277.507 ms/op
     p(99.9999) =   2277.507 ms/op
    p(100.0000) =   2277.507 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Xodus.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 89.66% complete, ETA 00:16:08
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1495 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495 ms/op
# Warmup Iteration   2: n = 1, mean = 1516 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516 ms/op
# Warmup Iteration   3: n = 1, mean = 1416 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416 ms/op
Iteration   1: n = 1, mean = 1407 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407 ms/op
Iteration   2: n = 1, mean = 1221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221 ms/op
Iteration   3: n = 1, mean = 1319 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319 ms/op

# Run progress: 89.80% complete, ETA 00:15:55
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1242 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242 ms/op
# Warmup Iteration   2: n = 1, mean = 1214 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214 ms/op
# Warmup Iteration   3: n = 1, mean = 1147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147 ms/op
Iteration   1: n = 1, mean = 1103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1103, 1103, 1103, 1103, 1103, 1103, 1103, 1103 ms/op
Iteration   2: n = 1, mean = 1168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168 ms/op
Iteration   3: n = 1, mean = 1332 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332 ms/op

# Run progress: 89.94% complete, ETA 00:15:41
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1338 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338 ms/op
# Warmup Iteration   2: n = 1, mean = 1372 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372 ms/op
# Warmup Iteration   3: n = 1, mean = 1302 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302 ms/op
Iteration   1: n = 1, mean = 1095 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095 ms/op
Iteration   2: n = 1, mean = 1143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1143, 1143, 1143, 1143, 1143, 1143, 1143, 1143 ms/op
Iteration   3: n = 1, mean = 1229 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229 ms/op


Result "readCrc":
  N = 9
  mean =   1224.038 ±(99.9%) 183.373 ms/op

  Histogram, ms/op:
    [1000.000, 1050.000) = 0 
    [1050.000, 1100.000) = 1 
    [1100.000, 1150.000) = 2 
    [1150.000, 1200.000) = 1 
    [1200.000, 1250.000) = 2 
    [1250.000, 1300.000) = 0 
    [1300.000, 1350.000) = 2 
    [1350.000, 1400.000) = 0 
    [1400.000, 1450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1094.713 ms/op
     p(50.0000) =   1220.542 ms/op
     p(90.0000) =   1407.189 ms/op
     p(95.0000) =   1407.189 ms/op
     p(99.0000) =   1407.189 ms/op
     p(99.9000) =   1407.189 ms/op
     p(99.9900) =   1407.189 ms/op
     p(99.9990) =   1407.189 ms/op
     p(99.9999) =   1407.189 ms/op
    p(100.0000) =   1407.189 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Xodus.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 90.09% complete, ETA 00:15:27
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1315 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315 ms/op
# Warmup Iteration   2: n = 1, mean = 1661 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661 ms/op
# Warmup Iteration   3: n = 1, mean = 1399 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399 ms/op
Iteration   1: n = 1, mean = 1296 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296 ms/op
Iteration   2: n = 1, mean = 1476 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476 ms/op
Iteration   3: n = 1, mean = 1294 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294 ms/op

# Run progress: 90.23% complete, ETA 00:15:15
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1476 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476 ms/op
# Warmup Iteration   2: n = 1, mean = 1743 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1743, 1743, 1743, 1743, 1743, 1743, 1743, 1743 ms/op
# Warmup Iteration   3: n = 1, mean = 1378 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378 ms/op
Iteration   1: n = 1, mean = 1353 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353 ms/op
Iteration   2: n = 1, mean = 1458 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458 ms/op
Iteration   3: n = 1, mean = 1336 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336 ms/op

# Run progress: 90.37% complete, ETA 00:15:02
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1376 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376 ms/op
# Warmup Iteration   2: n = 1, mean = 1537 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537 ms/op
# Warmup Iteration   3: n = 1, mean = 1512 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512 ms/op
Iteration   1: n = 1, mean = 1516 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516 ms/op
Iteration   2: n = 1, mean = 1476 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476 ms/op
Iteration   3: n = 1, mean = 1250 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250 ms/op


Result "readCrc":
  N = 9
  mean =   1383.887 ±(99.9%) 164.962 ms/op

  Histogram, ms/op:
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 1 
    [1250.000, 1275.000) = 0 
    [1275.000, 1300.000) = 2 
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 1 
    [1350.000, 1375.000) = 1 
    [1375.000, 1400.000) = 0 
    [1400.000, 1425.000) = 0 
    [1425.000, 1450.000) = 0 
    [1450.000, 1475.000) = 1 
    [1475.000, 1500.000) = 2 
    [1500.000, 1525.000) = 1 
    [1525.000, 1550.000) = 0 
    [1550.000, 1575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1249.903 ms/op
     p(50.0000) =   1352.663 ms/op
     p(90.0000) =   1516.241 ms/op
     p(95.0000) =   1516.241 ms/op
     p(99.0000) =   1516.241 ms/op
     p(99.9000) =   1516.241 ms/op
     p(99.9900) =   1516.241 ms/op
     p(99.9990) =   1516.241 ms/op
     p(99.9999) =   1516.241 ms/op
    p(100.0000) =   1516.241 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Xodus.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 90.52% complete, ETA 00:14:50
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1734 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1734, 1734, 1734, 1734, 1734, 1734, 1734, 1734 ms/op
# Warmup Iteration   2: n = 1, mean = 1686 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686 ms/op
# Warmup Iteration   3: n = 1, mean = 1455 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1455, 1455, 1455, 1455, 1455, 1455, 1455, 1455 ms/op
Iteration   1: n = 1, mean = 1468 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468 ms/op
Iteration   2: n = 1, mean = 1562 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562 ms/op
Iteration   3: n = 1, mean = 1453 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453 ms/op

# Run progress: 90.66% complete, ETA 00:14:36
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1596 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596 ms/op
# Warmup Iteration   2: n = 1, mean = 1489 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1489, 1489, 1489, 1489, 1489, 1489, 1489, 1489 ms/op
# Warmup Iteration   3: n = 1, mean = 1590 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590 ms/op
Iteration   1: n = 1, mean = 1294 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294 ms/op
Iteration   2: n = 1, mean = 1374 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374 ms/op
Iteration   3: n = 1, mean = 1334 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334 ms/op

# Run progress: 90.80% complete, ETA 00:14:22
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1483 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483 ms/op
# Warmup Iteration   2: n = 1, mean = 1336 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336 ms/op
# Warmup Iteration   3: n = 1, mean = 1611 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611 ms/op
Iteration   1: n = 1, mean = 1309 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309 ms/op
Iteration   2: n = 1, mean = 1554 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554 ms/op
Iteration   3: n = 1, mean = 1296 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296 ms/op


Result "readCrc":
  N = 9
  mean =   1404.859 ±(99.9%) 181.008 ms/op

  Histogram, ms/op:
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 0 
    [1275.000, 1300.000) = 2 
    [1300.000, 1325.000) = 1 
    [1325.000, 1350.000) = 1 
    [1350.000, 1375.000) = 1 
    [1375.000, 1400.000) = 0 
    [1400.000, 1425.000) = 0 
    [1425.000, 1450.000) = 0 
    [1450.000, 1475.000) = 2 
    [1475.000, 1500.000) = 0 
    [1500.000, 1525.000) = 0 
    [1525.000, 1550.000) = 0 
    [1550.000, 1575.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   1293.943 ms/op
     p(50.0000) =   1373.635 ms/op
     p(90.0000) =   1562.378 ms/op
     p(95.0000) =   1562.378 ms/op
     p(99.0000) =   1562.378 ms/op
     p(99.9000) =   1562.378 ms/op
     p(99.9900) =   1562.378 ms/op
     p(99.9990) =   1562.378 ms/op
     p(99.9999) =   1562.378 ms/op
    p(100.0000) =   1562.378 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Xodus.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 90.95% complete, ETA 00:14:09
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1760 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1760, 1760, 1760, 1760, 1760, 1760, 1760, 1760 ms/op
# Warmup Iteration   2: n = 1, mean = 1655 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1655, 1655, 1655, 1655, 1655, 1655, 1655, 1655 ms/op
# Warmup Iteration   3: n = 1, mean = 1774 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774 ms/op
Iteration   1: n = 1, mean = 1674 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674 ms/op
Iteration   2: n = 1, mean = 1644 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1644, 1644, 1644, 1644, 1644, 1644, 1644, 1644 ms/op
Iteration   3: n = 1, mean = 1869 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1869, 1869, 1869, 1869, 1869, 1869, 1869, 1869 ms/op

# Run progress: 91.09% complete, ETA 00:13:56
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 2122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2122, 2122, 2122, 2122, 2122, 2122, 2122, 2122 ms/op
# Warmup Iteration   2: n = 1, mean = 2124 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124 ms/op
# Warmup Iteration   3: n = 1, mean = 2118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2118, 2118, 2118, 2118, 2118, 2118, 2118, 2118 ms/op
Iteration   1: n = 1, mean = 2022 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022 ms/op
Iteration   2: n = 1, mean = 1955 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955 ms/op
Iteration   3: n = 1, mean = 1931 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1931, 1931, 1931, 1931, 1931, 1931, 1931, 1931 ms/op

# Run progress: 91.24% complete, ETA 00:13:45
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1575 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575 ms/op
# Warmup Iteration   2: n = 1, mean = 1722 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722 ms/op
# Warmup Iteration   3: n = 1, mean = 1678 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678 ms/op
Iteration   1: n = 1, mean = 1590 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590 ms/op
Iteration   2: n = 1, mean = 1405 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1405, 1405, 1405, 1405, 1405, 1405, 1405, 1405 ms/op
Iteration   3: n = 1, mean = 1351 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351 ms/op


Result "readCrc":
  N = 9
  mean =   1715.470 ±(99.9%) 408.681 ms/op

  Histogram, ms/op:
    [1300.000, 1350.000) = 0 
    [1350.000, 1400.000) = 1 
    [1400.000, 1450.000) = 1 
    [1450.000, 1500.000) = 0 
    [1500.000, 1550.000) = 0 
    [1550.000, 1600.000) = 1 
    [1600.000, 1650.000) = 1 
    [1650.000, 1700.000) = 1 
    [1700.000, 1750.000) = 0 
    [1750.000, 1800.000) = 0 
    [1800.000, 1850.000) = 0 
    [1850.000, 1900.000) = 1 
    [1900.000, 1950.000) = 1 
    [1950.000, 2000.000) = 1 
    [2000.000, 2050.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1350.566 ms/op
     p(50.0000) =   1673.527 ms/op
     p(90.0000) =   2021.655 ms/op
     p(95.0000) =   2021.655 ms/op
     p(99.0000) =   2021.655 ms/op
     p(99.9000) =   2021.655 ms/op
     p(99.9900) =   2021.655 ms/op
     p(99.9990) =   2021.655 ms/op
     p(99.9999) =   2021.655 ms/op
    p(100.0000) =   2021.655 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Xodus.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 91.38% complete, ETA 00:13:32
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 4387 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4387, 4387, 4387, 4387, 4387, 4387, 4387, 4387 ms/op
# Warmup Iteration   2: n = 1, mean = 3733 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3733, 3733, 3733, 3733, 3733, 3733, 3733, 3733 ms/op
# Warmup Iteration   3: n = 1, mean = 3783 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3783, 3783, 3783, 3783, 3783, 3783, 3783, 3783 ms/op
Iteration   1: n = 1, mean = 3213 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3213, 3213, 3213, 3213, 3213, 3213, 3213, 3213 ms/op
Iteration   2: n = 1, mean = 3842 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3842, 3842, 3842, 3842, 3842, 3842, 3842, 3842 ms/op
Iteration   3: 
Bytes	before-close	113188864	org.lmdbjava.bench.Xodus.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	113188864	org.lmdbjava.bench.Xodus.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 3095 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3095, 3095, 3095, 3095, 3095, 3095, 3095, 3095 ms/op

# Run progress: 91.52% complete, ETA 00:13:20
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 4245 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4245, 4245, 4245, 4245, 4245, 4245, 4245, 4245 ms/op
# Warmup Iteration   2: n = 1, mean = 3754 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3754, 3754, 3754, 3754, 3754, 3754, 3754, 3754 ms/op
# Warmup Iteration   3: n = 1, mean = 3964 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3964, 3964, 3964, 3964, 3964, 3964, 3964, 3964 ms/op
Iteration   1: n = 1, mean = 3825 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3825, 3825, 3825, 3825, 3825, 3825, 3825, 3825 ms/op
Iteration   2: n = 1, mean = 3926 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3926, 3926, 3926, 3926, 3926, 3926, 3926, 3926 ms/op
Iteration   3: 
Bytes	before-close	113188864	org.lmdbjava.bench.Xodus.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	113188864	org.lmdbjava.bench.Xodus.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 3326 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3326, 3326, 3326, 3326, 3326, 3326, 3326, 3326 ms/op

# Run progress: 91.67% complete, ETA 00:13:07
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 3938 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3938, 3938, 3938, 3938, 3938, 3938, 3938, 3938 ms/op
# Warmup Iteration   2: n = 1, mean = 3628 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3628, 3628, 3628, 3628, 3628, 3628, 3628, 3628 ms/op
# Warmup Iteration   3: n = 1, mean = 3657 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3657, 3657, 3657, 3657, 3657, 3657, 3657, 3657 ms/op
Iteration   1: n = 1, mean = 3196 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3196, 3196, 3196, 3196, 3196, 3196, 3196, 3196 ms/op
Iteration   2: n = 1, mean = 3746 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3746, 3746, 3746, 3746, 3746, 3746, 3746, 3746 ms/op
Iteration   3: 
Bytes	before-close	113188864	org.lmdbjava.bench.Xodus.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	113188864	org.lmdbjava.bench.Xodus.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 3209 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3209, 3209, 3209, 3209, 3209, 3209, 3209, 3209 ms/op


Result "readKey":
  N = 9
  mean =   3486.399 ±(99.9%) 568.738 ms/op

  Histogram, ms/op:
    [3000.000, 3100.000) = 1 
    [3100.000, 3200.000) = 1 
    [3200.000, 3300.000) = 2 
    [3300.000, 3400.000) = 1 
    [3400.000, 3500.000) = 0 
    [3500.000, 3600.000) = 0 
    [3600.000, 3700.000) = 0 
    [3700.000, 3800.000) = 1 
    [3800.000, 3900.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   3095.396 ms/op
     p(50.0000) =   3326.083 ms/op
     p(90.0000) =   3925.869 ms/op
     p(95.0000) =   3925.869 ms/op
     p(99.0000) =   3925.869 ms/op
     p(99.9000) =   3925.869 ms/op
     p(99.9900) =   3925.869 ms/op
     p(99.9990) =   3925.869 ms/op
     p(99.9999) =   3925.869 ms/op
    p(100.0000) =   3925.869 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Xodus.readKey
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 91.81% complete, ETA 00:12:54
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 5276 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276 ms/op
# Warmup Iteration   2: n = 1, mean = 5369 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5369, 5369, 5369, 5369, 5369, 5369, 5369, 5369 ms/op
# Warmup Iteration   3: n = 1, mean = 4924 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4924, 4924, 4924, 4924, 4924, 4924, 4924, 4924 ms/op
Iteration   1: n = 1, mean = 5234 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5234, 5234, 5234, 5234, 5234, 5234, 5234, 5234 ms/op
Iteration   2: n = 1, mean = 4974 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4974, 4974, 4974, 4974, 4974, 4974, 4974, 4974 ms/op
Iteration   3: 
Bytes	before-close	473030656	org.lmdbjava.bench.Xodus.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	473034752	org.lmdbjava.bench.Xodus.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 4329 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4329, 4329, 4329, 4329, 4329, 4329, 4329, 4329 ms/op

# Run progress: 91.95% complete, ETA 00:12:44
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 6182 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6182, 6182, 6182, 6182, 6182, 6182, 6182, 6182 ms/op
# Warmup Iteration   2: n = 1, mean = 5637 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5637, 5637, 5637, 5637, 5637, 5637, 5637, 5637 ms/op
# Warmup Iteration   3: n = 1, mean = 5973 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5973, 5973, 5973, 5973, 5973, 5973, 5973, 5973 ms/op
Iteration   1: n = 1, mean = 5612 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5612, 5612, 5612, 5612, 5612, 5612, 5612, 5612 ms/op
Iteration   2: n = 1, mean = 5352 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5352, 5352, 5352, 5352, 5352, 5352, 5352, 5352 ms/op
Iteration   3: 
Bytes	before-close	472776704	org.lmdbjava.bench.Xodus.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	472776704	org.lmdbjava.bench.Xodus.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 5151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5151, 5151, 5151, 5151, 5151, 5151, 5151, 5151 ms/op

# Run progress: 92.10% complete, ETA 00:12:34
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 5503 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5503, 5503, 5503, 5503, 5503, 5503, 5503, 5503 ms/op
# Warmup Iteration   2: n = 1, mean = 5209 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5209, 5209, 5209, 5209, 5209, 5209, 5209, 5209 ms/op
# Warmup Iteration   3: n = 1, mean = 5771 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5771, 5771, 5771, 5771, 5771, 5771, 5771, 5771 ms/op
Iteration   1: n = 1, mean = 4555 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4555, 4555, 4555, 4555, 4555, 4555, 4555, 4555 ms/op
Iteration   2: n = 1, mean = 4714 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4714, 4714, 4714, 4714, 4714, 4714, 4714, 4714 ms/op
Iteration   3: 
Bytes	before-close	473067520	org.lmdbjava.bench.Xodus.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	473067520	org.lmdbjava.bench.Xodus.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 4882 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4882, 4882, 4882, 4882, 4882, 4882, 4882, 4882 ms/op


Result "readKey":
  N = 9
  mean =   4978.173 ±(99.9%) 681.757 ms/op

  Histogram, ms/op:
    [4000.000, 4125.000) = 0 
    [4125.000, 4250.000) = 0 
    [4250.000, 4375.000) = 1 
    [4375.000, 4500.000) = 0 
    [4500.000, 4625.000) = 1 
    [4625.000, 4750.000) = 1 
    [4750.000, 4875.000) = 0 
    [4875.000, 5000.000) = 2 
    [5000.000, 5125.000) = 0 
    [5125.000, 5250.000) = 2 
    [5250.000, 5375.000) = 1 
    [5375.000, 5500.000) = 0 
    [5500.000, 5625.000) = 1 
    [5625.000, 5750.000) = 0 
    [5750.000, 5875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4328.522 ms/op
     p(50.0000) =   4974.445 ms/op
     p(90.0000) =   5611.979 ms/op
     p(95.0000) =   5611.979 ms/op
     p(99.0000) =   5611.979 ms/op
     p(99.9000) =   5611.979 ms/op
     p(99.9900) =   5611.979 ms/op
     p(99.9990) =   5611.979 ms/op
     p(99.9999) =   5611.979 ms/op
    p(100.0000) =   5611.979 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Xodus.readKey
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 92.24% complete, ETA 00:12:23
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 3850 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3850, 3850, 3850, 3850, 3850, 3850, 3850, 3850 ms/op
# Warmup Iteration   2: n = 1, mean = 3586 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3586, 3586, 3586, 3586, 3586, 3586, 3586, 3586 ms/op
# Warmup Iteration   3: n = 1, mean = 3427 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3427, 3427, 3427, 3427, 3427, 3427, 3427, 3427 ms/op
Iteration   1: n = 1, mean = 3603 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603 ms/op
Iteration   2: n = 1, mean = 3813 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3813, 3813, 3813, 3813, 3813, 3813, 3813, 3813 ms/op
Iteration   3: 
Bytes	before-close	126210048	org.lmdbjava.bench.Xodus.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	126210048	org.lmdbjava.bench.Xodus.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 3385 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3385, 3385, 3385, 3385, 3385, 3385, 3385, 3385 ms/op

# Run progress: 92.39% complete, ETA 00:12:10
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 4337 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4337, 4337, 4337, 4337, 4337, 4337, 4337, 4337 ms/op
# Warmup Iteration   2: n = 1, mean = 3683 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3683, 3683, 3683, 3683, 3683, 3683, 3683, 3683 ms/op
# Warmup Iteration   3: n = 1, mean = 3485 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3485, 3485, 3485, 3485, 3485, 3485, 3485, 3485 ms/op
Iteration   1: n = 1, mean = 3607 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3607, 3607, 3607, 3607, 3607, 3607, 3607, 3607 ms/op
Iteration   2: n = 1, mean = 4152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4152, 4152, 4152, 4152, 4152, 4152, 4152, 4152 ms/op
Iteration   3: 
Bytes	before-close	126210048	org.lmdbjava.bench.Xodus.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	126210048	org.lmdbjava.bench.Xodus.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 3657 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3657, 3657, 3657, 3657, 3657, 3657, 3657, 3657 ms/op

# Run progress: 92.53% complete, ETA 00:11:57
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 4102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4102, 4102, 4102, 4102, 4102, 4102, 4102, 4102 ms/op
# Warmup Iteration   2: n = 1, mean = 3746 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3746, 3746, 3746, 3746, 3746, 3746, 3746, 3746 ms/op
# Warmup Iteration   3: n = 1, mean = 3834 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3834, 3834, 3834, 3834, 3834, 3834, 3834, 3834 ms/op
Iteration   1: n = 1, mean = 3586 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3586, 3586, 3586, 3586, 3586, 3586, 3586, 3586 ms/op
Iteration   2: n = 1, mean = 4056 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056 ms/op
Iteration   3: 
Bytes	before-close	126210048	org.lmdbjava.bench.Xodus.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100

Bytes	after-close	126210048	org.lmdbjava.bench.Xodus.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 3318 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3318, 3318, 3318, 3318, 3318, 3318, 3318, 3318 ms/op


Result "readKey":
  N = 9
  mean =   3686.327 ±(99.9%) 468.052 ms/op

  Histogram, ms/op:
    [3300.000, 3350.000) = 1 
    [3350.000, 3400.000) = 1 
    [3400.000, 3450.000) = 0 
    [3450.000, 3500.000) = 0 
    [3500.000, 3550.000) = 0 
    [3550.000, 3600.000) = 1 
    [3600.000, 3650.000) = 2 
    [3650.000, 3700.000) = 1 
    [3700.000, 3750.000) = 0 
    [3750.000, 3800.000) = 0 
    [3800.000, 3850.000) = 1 
    [3850.000, 3900.000) = 0 
    [3900.000, 3950.000) = 0 
    [3950.000, 4000.000) = 0 
    [4000.000, 4050.000) = 0 
    [4050.000, 4100.000) = 1 
    [4100.000, 4150.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   3317.694 ms/op
     p(50.0000) =   3607.101 ms/op
     p(90.0000) =   4152.361 ms/op
     p(95.0000) =   4152.361 ms/op
     p(99.0000) =   4152.361 ms/op
     p(99.9000) =   4152.361 ms/op
     p(99.9900) =   4152.361 ms/op
     p(99.9990) =   4152.361 ms/op
     p(99.9999) =   4152.361 ms/op
    p(100.0000) =   4152.361 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Xodus.readKey
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 92.67% complete, ETA 00:11:44
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 5327 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5327, 5327, 5327, 5327, 5327, 5327, 5327, 5327 ms/op
# Warmup Iteration   2: n = 1, mean = 5209 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5209, 5209, 5209, 5209, 5209, 5209, 5209, 5209 ms/op
# Warmup Iteration   3: n = 1, mean = 5335 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5335, 5335, 5335, 5335, 5335, 5335, 5335, 5335 ms/op
Iteration   1: n = 1, mean = 4865 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4865, 4865, 4865, 4865, 4865, 4865, 4865, 4865 ms/op
Iteration   2: n = 1, mean = 4882 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4882, 4882, 4882, 4882, 4882, 4882, 4882, 4882 ms/op
Iteration   3: 
Bytes	before-close	486187008	org.lmdbjava.bench.Xodus.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	486187008	org.lmdbjava.bench.Xodus.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 5620 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5620, 5620, 5620, 5620, 5620, 5620, 5620, 5620 ms/op

# Run progress: 92.82% complete, ETA 00:11:33
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 5193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5193, 5193, 5193, 5193, 5193, 5193, 5193, 5193 ms/op
# Warmup Iteration   2: n = 1, mean = 4857 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4857, 4857, 4857, 4857, 4857, 4857, 4857, 4857 ms/op
# Warmup Iteration   3: n = 1, mean = 5117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5117, 5117, 5117, 5117, 5117, 5117, 5117, 5117 ms/op
Iteration   1: n = 1, mean = 4865 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4865, 4865, 4865, 4865, 4865, 4865, 4865, 4865 ms/op
Iteration   2: n = 1, mean = 4748 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4748, 4748, 4748, 4748, 4748, 4748, 4748, 4748 ms/op
Iteration   3: 
Bytes	before-close	485842944	org.lmdbjava.bench.Xodus.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	485842944	org.lmdbjava.bench.Xodus.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 5511 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5511, 5511, 5511, 5511, 5511, 5511, 5511, 5511 ms/op

# Run progress: 92.96% complete, ETA 00:11:21
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 5344 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5344, 5344, 5344, 5344, 5344, 5344, 5344, 5344 ms/op
# Warmup Iteration   2: n = 1, mean = 5503 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5503, 5503, 5503, 5503, 5503, 5503, 5503, 5503 ms/op
# Warmup Iteration   3: n = 1, mean = 5453 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5453, 5453, 5453, 5453, 5453, 5453, 5453, 5453 ms/op
Iteration   1: n = 1, mean = 4631 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4631, 4631, 4631, 4631, 4631, 4631, 4631, 4631 ms/op
Iteration   2: n = 1, mean = 4597 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4597, 4597, 4597, 4597, 4597, 4597, 4597, 4597 ms/op
Iteration   3: 
Bytes	before-close	486256640	org.lmdbjava.bench.Xodus.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100

Bytes	after-close	486260736	org.lmdbjava.bench.Xodus.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 4639 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4639, 4639, 4639, 4639, 4639, 4639, 4639, 4639 ms/op


Result "readKey":
  N = 9
  mean =   4928.773 ±(99.9%) 635.365 ms/op

  Histogram, ms/op:
    [4000.000, 4125.000) = 0 
    [4125.000, 4250.000) = 0 
    [4250.000, 4375.000) = 0 
    [4375.000, 4500.000) = 0 
    [4500.000, 4625.000) = 1 
    [4625.000, 4750.000) = 3 
    [4750.000, 4875.000) = 2 
    [4875.000, 5000.000) = 1 
    [5000.000, 5125.000) = 0 
    [5125.000, 5250.000) = 0 
    [5250.000, 5375.000) = 0 
    [5375.000, 5500.000) = 0 
    [5500.000, 5625.000) = 2 
    [5625.000, 5750.000) = 0 
    [5750.000, 5875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4596.957 ms/op
     p(50.0000) =   4865.393 ms/op
     p(90.0000) =   5620.367 ms/op
     p(95.0000) =   5620.367 ms/op
     p(99.0000) =   5620.367 ms/op
     p(99.9000) =   5620.367 ms/op
     p(99.9900) =   5620.367 ms/op
     p(99.9990) =   5620.367 ms/op
     p(99.9999) =   5620.367 ms/op
    p(100.0000) =   5620.367 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Xodus.readRev
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 93.10% complete, ETA 00:11:10
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1269 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269 ms/op
# Warmup Iteration   2: n = 1, mean = 1378 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378 ms/op
# Warmup Iteration   3: n = 1, mean = 1052 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052 ms/op
Iteration   1: n = 1, mean = 1296 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296 ms/op
Iteration   2: n = 1, mean = 1054 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054 ms/op
Iteration   3: n = 1, mean = 1037 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037 ms/op

# Run progress: 93.25% complete, ETA 00:10:56
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135 ms/op
# Warmup Iteration   2: n = 1, mean = 1355 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355 ms/op
# Warmup Iteration   3: n = 1, mean = 1248 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248 ms/op
Iteration   1: n = 1, mean = 1271 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271 ms/op
Iteration   2: n = 1, mean = 1044 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044 ms/op
Iteration   3: n = 1, mean = 1093 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093 ms/op

# Run progress: 93.39% complete, ETA 00:10:41
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1395 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395 ms/op
# Warmup Iteration   2: n = 1, mean = 1669 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669 ms/op
# Warmup Iteration   3: n = 1, mean = 1458 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458 ms/op
Iteration   1: n = 1, mean = 1411 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411 ms/op
Iteration   2: n = 1, mean = 1181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181 ms/op
Iteration   3: n = 1, mean = 1187 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187 ms/op


Result "readRev":
  N = 9
  mean =   1174.871 ±(99.9%) 220.276 ms/op

  Histogram, ms/op:
    [1000.000, 1050.000) = 2 
    [1050.000, 1100.000) = 2 
    [1100.000, 1150.000) = 0 
    [1150.000, 1200.000) = 2 
    [1200.000, 1250.000) = 0 
    [1250.000, 1300.000) = 2 
    [1300.000, 1350.000) = 0 
    [1350.000, 1400.000) = 0 
    [1400.000, 1450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1037.042 ms/op
     p(50.0000) =   1180.697 ms/op
     p(90.0000) =   1411.383 ms/op
     p(95.0000) =   1411.383 ms/op
     p(99.0000) =   1411.383 ms/op
     p(99.9000) =   1411.383 ms/op
     p(99.9900) =   1411.383 ms/op
     p(99.9990) =   1411.383 ms/op
     p(99.9999) =   1411.383 ms/op
    p(100.0000) =   1411.383 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Xodus.readRev
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 93.53% complete, ETA 00:10:27
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1441 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441 ms/op
# Warmup Iteration   2: n = 1, mean = 1214 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214 ms/op
# Warmup Iteration   3: n = 1, mean = 1229 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229 ms/op
Iteration   1: n = 1, mean = 1208 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208 ms/op
Iteration   2: n = 1, mean = 1258 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258 ms/op
Iteration   3: n = 1, mean = 1283 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283 ms/op

# Run progress: 93.68% complete, ETA 00:10:14
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1520 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1520, 1520, 1520, 1520, 1520, 1520, 1520, 1520 ms/op
# Warmup Iteration   2: n = 1, mean = 1223 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223 ms/op
# Warmup Iteration   3: n = 1, mean = 1099 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099 ms/op
Iteration   1: n = 1, mean = 1147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147 ms/op
Iteration   2: n = 1, mean = 1271 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271 ms/op
Iteration   3: n = 1, mean = 1460 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460 ms/op

# Run progress: 93.82% complete, ETA 00:10:00
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1346 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346 ms/op
# Warmup Iteration   2: n = 1, mean = 1218 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218 ms/op
# Warmup Iteration   3: n = 1, mean = 1189 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189 ms/op
Iteration   1: n = 1, mean = 1323 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323 ms/op
Iteration   2: n = 1, mean = 1237 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237 ms/op
Iteration   3: n = 1, mean = 1260 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260 ms/op


Result "readRev":
  N = 9
  mean =   1272.039 ±(99.9%) 144.533 ms/op

  Histogram, ms/op:
    [1100.000, 1125.000) = 0 
    [1125.000, 1150.000) = 1 
    [1150.000, 1175.000) = 0 
    [1175.000, 1200.000) = 0 
    [1200.000, 1225.000) = 1 
    [1225.000, 1250.000) = 1 
    [1250.000, 1275.000) = 3 
    [1275.000, 1300.000) = 1 
    [1300.000, 1325.000) = 1 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 0 
    [1375.000, 1400.000) = 0 
    [1400.000, 1425.000) = 0 
    [1425.000, 1450.000) = 0 
    [1450.000, 1475.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1147.142 ms/op
     p(50.0000) =   1260.388 ms/op
     p(90.0000) =   1459.618 ms/op
     p(95.0000) =   1459.618 ms/op
     p(99.0000) =   1459.618 ms/op
     p(99.9000) =   1459.618 ms/op
     p(99.9900) =   1459.618 ms/op
     p(99.9990) =   1459.618 ms/op
     p(99.9999) =   1459.618 ms/op
    p(100.0000) =   1459.618 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Xodus.readRev
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 93.97% complete, ETA 00:09:47
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1279 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279 ms/op
# Warmup Iteration   2: n = 1, mean = 1258 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258 ms/op
# Warmup Iteration   3: n = 1, mean = 1093 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093 ms/op
Iteration   1: n = 1, mean = 1168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168 ms/op
Iteration   2: n = 1, mean = 1084 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084 ms/op
Iteration   3: n = 1, mean = 1084 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084 ms/op

# Run progress: 94.11% complete, ETA 00:09:33
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1359 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359 ms/op
# Warmup Iteration   2: n = 1, mean = 1422 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422 ms/op
# Warmup Iteration   3: n = 1, mean = 1202 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202 ms/op
Iteration   1: n = 1, mean = 1367 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367 ms/op
Iteration   2: n = 1, mean = 1037 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037 ms/op
Iteration   3: n = 1, mean = 1086 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086 ms/op

# Run progress: 94.25% complete, ETA 00:09:18
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1187 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187 ms/op
# Warmup Iteration   2: n = 1, mean = 1208 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208 ms/op
# Warmup Iteration   3: n = 1, mean = 1041 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041 ms/op
Iteration   1: n = 1, mean = 1271 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271 ms/op
Iteration   2: n = 1, mean = 1114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114 ms/op
Iteration   3: n = 1, mean = 1202 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202 ms/op


Result "readRev":
  N = 9
  mean =   1157.045 ±(99.9%) 179.413 ms/op

  Histogram, ms/op:
    [1000.000, 1025.000) = 0 
    [1025.000, 1050.000) = 1 
    [1050.000, 1075.000) = 0 
    [1075.000, 1100.000) = 3 
    [1100.000, 1125.000) = 1 
    [1125.000, 1150.000) = 0 
    [1150.000, 1175.000) = 1 
    [1175.000, 1200.000) = 0 
    [1200.000, 1225.000) = 1 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 1 
    [1275.000, 1300.000) = 0 
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1037.042 ms/op
     p(50.0000) =   1113.588 ms/op
     p(90.0000) =   1367.343 ms/op
     p(95.0000) =   1367.343 ms/op
     p(99.0000) =   1367.343 ms/op
     p(99.9000) =   1367.343 ms/op
     p(99.9900) =   1367.343 ms/op
     p(99.9990) =   1367.343 ms/op
     p(99.9999) =   1367.343 ms/op
    p(100.0000) =   1367.343 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Xodus.readRev
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 94.40% complete, ETA 00:09:04
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1491 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491 ms/op
# Warmup Iteration   2: n = 1, mean = 1512 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512 ms/op
# Warmup Iteration   3: n = 1, mean = 1344 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344 ms/op
Iteration   1: n = 1, mean = 1233 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233 ms/op
Iteration   2: n = 1, mean = 1258 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258 ms/op
Iteration   3: n = 1, mean = 1323 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323 ms/op

# Run progress: 94.54% complete, ETA 00:08:51
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1378 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378 ms/op
# Warmup Iteration   2: n = 1, mean = 1516 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516 ms/op
# Warmup Iteration   3: n = 1, mean = 1367 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1367, 1367, 1367, 1367, 1367, 1367, 1367, 1367 ms/op
Iteration   1: n = 1, mean = 1315 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315 ms/op
Iteration   2: n = 1, mean = 1298 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298 ms/op
Iteration   3: n = 1, mean = 1216 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216 ms/op

# Run progress: 94.68% complete, ETA 00:08:37
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1187 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187 ms/op
# Warmup Iteration   2: n = 1, mean = 1321 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321 ms/op
# Warmup Iteration   3: n = 1, mean = 1506 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506 ms/op
Iteration   1: n = 1, mean = 1384 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384 ms/op
Iteration   2: n = 1, mean = 1321 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321 ms/op
Iteration   3: n = 1, mean = 1095 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1095, 1095, 1095, 1095, 1095, 1095, 1095, 1095 ms/op


Result "readRev":
  N = 9
  mean =   1271.573 ±(99.9%) 141.064 ms/op

  Histogram, ms/op:
    [1000.000, 1025.000) = 0 
    [1025.000, 1050.000) = 0 
    [1050.000, 1075.000) = 0 
    [1075.000, 1100.000) = 1 
    [1100.000, 1125.000) = 0 
    [1125.000, 1150.000) = 0 
    [1150.000, 1175.000) = 0 
    [1175.000, 1200.000) = 0 
    [1200.000, 1225.000) = 1 
    [1225.000, 1250.000) = 1 
    [1250.000, 1275.000) = 1 
    [1275.000, 1300.000) = 1 
    [1300.000, 1325.000) = 3 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1094.713 ms/op
     p(50.0000) =   1298.137 ms/op
     p(90.0000) =   1384.120 ms/op
     p(95.0000) =   1384.120 ms/op
     p(99.0000) =   1384.120 ms/op
     p(99.9000) =   1384.120 ms/op
     p(99.9900) =   1384.120 ms/op
     p(99.9990) =   1384.120 ms/op
     p(99.9999) =   1384.120 ms/op
    p(100.0000) =   1384.120 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Xodus.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 94.83% complete, ETA 00:08:24
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1382 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382 ms/op
# Warmup Iteration   2: n = 1, mean = 1183 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183 ms/op
# Warmup Iteration   3: n = 1, mean = 1147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147 ms/op
Iteration   1: n = 1, mean = 1181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181 ms/op
Iteration   2: n = 2, mean = 992 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 977, 992, 1008, 1008, 1008, 1008, 1008, 1008 ms/op
Iteration   3: n = 1, mean = 1073 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073 ms/op

# Run progress: 94.97% complete, ETA 00:08:10
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1279 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279 ms/op
# Warmup Iteration   2: n = 1, mean = 1183 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183 ms/op
# Warmup Iteration   3: n = 1, mean = 1109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109 ms/op
Iteration   1: n = 1, mean = 1355 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355 ms/op
Iteration   2: n = 1, mean = 1235 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235 ms/op
Iteration   3: n = 1, mean = 1086 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086 ms/op

# Run progress: 95.11% complete, ETA 00:07:55
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1319 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319 ms/op
# Warmup Iteration   2: n = 1, mean = 1195 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195 ms/op
# Warmup Iteration   3: n = 2, mean = 1028 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 963, 1028, 1093, 1093, 1093, 1093, 1093, 1093 ms/op
Iteration   1: n = 1, mean = 1141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141 ms/op
Iteration   2: n = 2, mean = 1024 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 995, 1024, 1053, 1053, 1053, 1053, 1053, 1053 ms/op
Iteration   3: n = 1, mean = 1052 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052 ms/op


Result "readSeq":
  N = 11
  mean =   1105.008 ±(99.9%) 158.398 ms/op

  Histogram, ms/op:
    [ 900.000,  950.000) = 0 
    [ 950.000, 1000.000) = 2 
    [1000.000, 1050.000) = 1 
    [1050.000, 1100.000) = 4 
    [1100.000, 1150.000) = 1 
    [1150.000, 1200.000) = 1 
    [1200.000, 1250.000) = 1 
    [1250.000, 1300.000) = 0 
    [1300.000, 1350.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    977.273 ms/op
     p(50.0000) =   1072.693 ms/op
     p(90.0000) =   1330.853 ms/op
     p(95.0000) =   1354.760 ms/op
     p(99.0000) =   1354.760 ms/op
     p(99.9000) =   1354.760 ms/op
     p(99.9900) =   1354.760 ms/op
     p(99.9990) =   1354.760 ms/op
     p(99.9999) =   1354.760 ms/op
    p(100.0000) =   1354.760 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Xodus.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 95.26% complete, ETA 00:07:41
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1497 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497 ms/op
# Warmup Iteration   2: n = 1, mean = 1439 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439 ms/op
# Warmup Iteration   3: n = 1, mean = 1344 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344 ms/op
Iteration   1: n = 1, mean = 1397 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397 ms/op
Iteration   2: n = 1, mean = 1073 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073 ms/op
Iteration   3: n = 1, mean = 1279 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279 ms/op

# Run progress: 95.40% complete, ETA 00:07:28
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172 ms/op
# Warmup Iteration   2: n = 1, mean = 1145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1145, 1145, 1145, 1145, 1145, 1145, 1145, 1145 ms/op
# Warmup Iteration   3: n = 1, mean = 1151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151 ms/op
Iteration   1: n = 1, mean = 1323 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323 ms/op
Iteration   2: n = 1, mean = 1323 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323 ms/op
Iteration   3: n = 1, mean = 1351 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351 ms/op

# Run progress: 95.55% complete, ETA 00:07:14
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1338 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338 ms/op
# Warmup Iteration   2: n = 1, mean = 1393 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393 ms/op
# Warmup Iteration   3: n = 1, mean = 1353 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353 ms/op
Iteration   1: n = 1, mean = 1267 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267 ms/op
Iteration   2: n = 1, mean = 1311 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311 ms/op
Iteration   3: n = 1, mean = 1153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153 ms/op


Result "readSeq":
  N = 9
  mean =   1275.185 ±(99.9%) 170.398 ms/op

  Histogram, ms/op:
    [1000.000, 1025.000) = 0 
    [1025.000, 1050.000) = 0 
    [1050.000, 1075.000) = 1 
    [1075.000, 1100.000) = 0 
    [1100.000, 1125.000) = 0 
    [1125.000, 1150.000) = 0 
    [1150.000, 1175.000) = 1 
    [1175.000, 1200.000) = 0 
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 1 
    [1275.000, 1300.000) = 1 
    [1300.000, 1325.000) = 3 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1072.693 ms/op
     p(50.0000) =   1310.720 ms/op
     p(90.0000) =   1396.703 ms/op
     p(95.0000) =   1396.703 ms/op
     p(99.0000) =   1396.703 ms/op
     p(99.9000) =   1396.703 ms/op
     p(99.9900) =   1396.703 ms/op
     p(99.9990) =   1396.703 ms/op
     p(99.9999) =   1396.703 ms/op
    p(100.0000) =   1396.703 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Xodus.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 95.69% complete, ETA 00:07:00
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221 ms/op
# Warmup Iteration   2: n = 1, mean = 1216 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216 ms/op
# Warmup Iteration   3: n = 2, mean = 983 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 976, 983, 989, 989, 989, 989, 989, 989 ms/op
Iteration   1: n = 2, mean = 1016 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 976, 1016, 1056, 1056, 1056, 1056, 1056, 1056 ms/op
Iteration   2: n = 1, mean = 1070 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070 ms/op
Iteration   3: n = 2, mean = 993 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 992, 993, 994, 994, 994, 994, 994, 994 ms/op

# Run progress: 95.83% complete, ETA 00:06:46
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1286 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286 ms/op
# Warmup Iteration   2: n = 1, mean = 1351 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351 ms/op
# Warmup Iteration   3: n = 1, mean = 1151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1151, 1151, 1151, 1151, 1151, 1151, 1151, 1151 ms/op
Iteration   1: n = 2, mean = 983 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 977, 983, 988, 988, 988, 988, 988, 988 ms/op
Iteration   2: n = 1, mean = 1072 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072 ms/op
Iteration   3: n = 1, mean = 1052 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052 ms/op

# Run progress: 95.98% complete, ETA 00:06:32
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181 ms/op
# Warmup Iteration   2: n = 1, mean = 1046 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1046, 1046, 1046, 1046, 1046, 1046, 1046, 1046 ms/op
# Warmup Iteration   3: n = 2, mean = 984 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 983, 984, 985, 985, 985, 985, 985, 985 ms/op
Iteration   1: n = 1, mean = 1170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170 ms/op
Iteration   2: n = 1, mean = 1060 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060 ms/op
Iteration   3: n = 1, mean = 1048 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048 ms/op


Result "readSeq":
  N = 12
  mean =   1037.828 ±(99.9%) 72.017 ms/op

  Histogram, ms/op:
    [ 900.000,  925.000) = 0 
    [ 925.000,  950.000) = 0 
    [ 950.000,  975.000) = 0 
    [ 975.000, 1000.000) = 5 
    [1000.000, 1025.000) = 0 
    [1025.000, 1050.000) = 1 
    [1050.000, 1075.000) = 5 
    [1075.000, 1100.000) = 0 
    [1100.000, 1125.000) = 0 
    [1125.000, 1150.000) = 0 
    [1150.000, 1175.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    976.224 ms/op
     p(50.0000) =   1049.625 ms/op
     p(90.0000) =   1140.641 ms/op
     p(95.0000) =   1170.211 ms/op
     p(99.0000) =   1170.211 ms/op
     p(99.9000) =   1170.211 ms/op
     p(99.9900) =   1170.211 ms/op
     p(99.9990) =   1170.211 ms/op
     p(99.9999) =   1170.211 ms/op
    p(100.0000) =   1170.211 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Xodus.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 96.12% complete, ETA 00:06:18
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1567 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567 ms/op
# Warmup Iteration   2: n = 1, mean = 1499 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499 ms/op
# Warmup Iteration   3: n = 1, mean = 1437 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437 ms/op
Iteration   1: n = 1, mean = 1420 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420 ms/op
Iteration   2: n = 1, mean = 1374 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374 ms/op
Iteration   3: n = 1, mean = 1277 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277 ms/op

# Run progress: 96.26% complete, ETA 00:06:04
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1648 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648 ms/op
# Warmup Iteration   2: n = 1, mean = 1468 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468 ms/op
# Warmup Iteration   3: n = 1, mean = 1351 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351 ms/op
Iteration   1: n = 1, mean = 1319 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319 ms/op
Iteration   2: n = 1, mean = 1141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141 ms/op
Iteration   3: n = 1, mean = 1130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130 ms/op

# Run progress: 96.41% complete, ETA 00:05:51
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1585 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585 ms/op
# Warmup Iteration   2: n = 1, mean = 1478 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478 ms/op
# Warmup Iteration   3: n = 1, mean = 1227 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227 ms/op
Iteration   1: n = 1, mean = 1407 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407 ms/op
Iteration   2: n = 1, mean = 1288 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288 ms/op
Iteration   3: n = 1, mean = 1611 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611 ms/op


Result "readSeq":
  N = 9
  mean =   1329.594 ±(99.9%) 248.538 ms/op

  Histogram, ms/op:
    [1100.000, 1150.000) = 2 
    [1150.000, 1200.000) = 0 
    [1200.000, 1250.000) = 0 
    [1250.000, 1300.000) = 2 
    [1300.000, 1350.000) = 1 
    [1350.000, 1400.000) = 1 
    [1400.000, 1450.000) = 2 
    [1450.000, 1500.000) = 0 
    [1500.000, 1550.000) = 0 
    [1550.000, 1600.000) = 0 
    [1600.000, 1650.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1130.365 ms/op
     p(50.0000) =   1319.109 ms/op
     p(90.0000) =   1610.613 ms/op
     p(95.0000) =   1610.613 ms/op
     p(99.0000) =   1610.613 ms/op
     p(99.9000) =   1610.613 ms/op
     p(99.9900) =   1610.613 ms/op
     p(99.9990) =   1610.613 ms/op
     p(99.9999) =   1610.613 ms/op
    p(100.0000) =   1610.613 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Xodus.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 96.55% complete, ETA 00:05:37
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1399 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399 ms/op
# Warmup Iteration   2: n = 1, mean = 1311 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311 ms/op
# Warmup Iteration   3: n = 1, mean = 1229 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229 ms/op
Iteration   1: n = 1, mean = 1374 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374 ms/op
Iteration   2: n = 1, mean = 1126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126 ms/op
Iteration   3: n = 1, mean = 1307 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307 ms/op

# Run progress: 96.70% complete, ETA 00:05:23
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1200 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200 ms/op
# Warmup Iteration   2: n = 1, mean = 1340 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340 ms/op
# Warmup Iteration   3: n = 1, mean = 1088 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088 ms/op
Iteration   1: n = 1, mean = 1149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149 ms/op
Iteration   2: n = 1, mean = 1292 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292 ms/op
Iteration   3: n = 1, mean = 1237 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1237, 1237, 1237, 1237, 1237, 1237, 1237, 1237 ms/op

# Run progress: 96.84% complete, ETA 00:05:08
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1355 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355 ms/op
# Warmup Iteration   2: n = 1, mean = 1267 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267 ms/op
# Warmup Iteration   3: n = 1, mean = 1319 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319 ms/op
Iteration   1: n = 1, mean = 1206 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206 ms/op
Iteration   2: n = 1, mean = 1340 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340 ms/op
Iteration   3: n = 1, mean = 1449 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449 ms/op


Result "readXxh64":
  N = 9
  mean =   1275.534 ±(99.9%) 177.967 ms/op

  Histogram, ms/op:
    [1100.000, 1125.000) = 0 
    [1125.000, 1150.000) = 2 
    [1150.000, 1175.000) = 0 
    [1175.000, 1200.000) = 0 
    [1200.000, 1225.000) = 1 
    [1225.000, 1250.000) = 1 
    [1250.000, 1275.000) = 0 
    [1275.000, 1300.000) = 1 
    [1300.000, 1325.000) = 1 
    [1325.000, 1350.000) = 1 
    [1350.000, 1375.000) = 1 
    [1375.000, 1400.000) = 0 
    [1400.000, 1425.000) = 0 
    [1425.000, 1450.000) = 1 
    [1450.000, 1475.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1126.171 ms/op
     p(50.0000) =   1291.846 ms/op
     p(90.0000) =   1449.132 ms/op
     p(95.0000) =   1449.132 ms/op
     p(99.0000) =   1449.132 ms/op
     p(99.9000) =   1449.132 ms/op
     p(99.9900) =   1449.132 ms/op
     p(99.9990) =   1449.132 ms/op
     p(99.9999) =   1449.132 ms/op
    p(100.0000) =   1449.132 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Xodus.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 96.98% complete, ETA 00:04:54
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1411 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411 ms/op
# Warmup Iteration   2: n = 1, mean = 1372 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372 ms/op
# Warmup Iteration   3: n = 1, mean = 1181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181 ms/op
Iteration   1: n = 1, mean = 1340 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340 ms/op
Iteration   2: n = 1, mean = 1428 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428 ms/op
Iteration   3: n = 1, mean = 1334 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334 ms/op

# Run progress: 97.13% complete, ETA 00:04:40
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1319 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319 ms/op
# Warmup Iteration   2: n = 1, mean = 1634 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634 ms/op
# Warmup Iteration   3: n = 1, mean = 1315 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315 ms/op
Iteration   1: n = 1, mean = 1476 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476 ms/op
Iteration   2: n = 1, mean = 1413 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413 ms/op
Iteration   3: n = 1, mean = 1390 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390 ms/op

# Run progress: 97.27% complete, ETA 00:04:27
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1516 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516 ms/op
# Warmup Iteration   2: n = 1, mean = 1393 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393 ms/op
# Warmup Iteration   3: n = 1, mean = 1399 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399 ms/op
Iteration   1: n = 1, mean = 1327 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327 ms/op
Iteration   2: n = 1, mean = 1445 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445 ms/op
Iteration   3: n = 1, mean = 1288 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288 ms/op


Result "readXxh64":
  N = 9
  mean =   1382.489 ±(99.9%) 106.306 ms/op

  Histogram, ms/op:
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 0 
    [1275.000, 1300.000) = 1 
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 3 
    [1350.000, 1375.000) = 0 
    [1375.000, 1400.000) = 1 
    [1400.000, 1425.000) = 1 
    [1425.000, 1450.000) = 2 
    [1450.000, 1475.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1287.651 ms/op
     p(50.0000) =   1390.412 ms/op
     p(90.0000) =   1476.395 ms/op
     p(95.0000) =   1476.395 ms/op
     p(99.0000) =   1476.395 ms/op
     p(99.9000) =   1476.395 ms/op
     p(99.9900) =   1476.395 ms/op
     p(99.9990) =   1476.395 ms/op
     p(99.9999) =   1476.395 ms/op
    p(100.0000) =   1476.395 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Xodus.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 97.41% complete, ETA 00:04:13
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1518 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518 ms/op
# Warmup Iteration   2: n = 1, mean = 1235 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1235, 1235, 1235, 1235, 1235, 1235, 1235, 1235 ms/op
# Warmup Iteration   3: n = 1, mean = 1508 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508 ms/op
Iteration   1: n = 1, mean = 1401 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401 ms/op
Iteration   2: n = 1, mean = 1290 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290 ms/op
Iteration   3: n = 1, mean = 1208 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208 ms/op

# Run progress: 97.56% complete, ETA 00:03:59
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1699 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699 ms/op
# Warmup Iteration   2: n = 1, mean = 1409 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409 ms/op
# Warmup Iteration   3: n = 1, mean = 1562 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562 ms/op
Iteration   1: n = 1, mean = 1348 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348 ms/op
Iteration   2: n = 1, mean = 1357 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357 ms/op
Iteration   3: n = 1, mean = 1439 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439 ms/op

# Run progress: 97.70% complete, ETA 00:03:45
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1764 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764 ms/op
# Warmup Iteration   2: n = 1, mean = 1720 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720 ms/op
# Warmup Iteration   3: n = 1, mean = 1472 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472 ms/op
Iteration   1: n = 1, mean = 1527 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527 ms/op
Iteration   2: n = 1, mean = 1590 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590 ms/op
Iteration   3: n = 1, mean = 1682 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682 ms/op


Result "readXxh64":
  N = 9
  mean =   1426.762 ±(99.9%) 252.135 ms/op

  Histogram, ms/op:
    [1200.000, 1250.000) = 1 
    [1250.000, 1300.000) = 1 
    [1300.000, 1350.000) = 1 
    [1350.000, 1400.000) = 1 
    [1400.000, 1450.000) = 2 
    [1450.000, 1500.000) = 0 
    [1500.000, 1550.000) = 1 
    [1550.000, 1600.000) = 1 
    [1600.000, 1650.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1207.960 ms/op
     p(50.0000) =   1400.898 ms/op
     p(90.0000) =   1681.916 ms/op
     p(95.0000) =   1681.916 ms/op
     p(99.0000) =   1681.916 ms/op
     p(99.9000) =   1681.916 ms/op
     p(99.9900) =   1681.916 ms/op
     p(99.9990) =   1681.916 ms/op
     p(99.9999) =   1681.916 ms/op
    p(100.0000) =   1681.916 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Xodus.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 97.84% complete, ETA 00:03:30
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1659 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659 ms/op
# Warmup Iteration   2: n = 1, mean = 1451 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451 ms/op
# Warmup Iteration   3: n = 1, mean = 1351 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351 ms/op
Iteration   1: n = 1, mean = 1585 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585 ms/op
Iteration   2: n = 1, mean = 1476 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476 ms/op
Iteration   3: n = 1, mean = 1432 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432 ms/op

# Run progress: 97.99% complete, ETA 00:03:17
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1577 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577 ms/op
# Warmup Iteration   2: n = 1, mean = 1634 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634 ms/op
# Warmup Iteration   3: n = 1, mean = 1441 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441 ms/op
Iteration   1: n = 1, mean = 1757 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757 ms/op
Iteration   2: n = 1, mean = 1462 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462 ms/op
Iteration   3: n = 1, mean = 1445 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445 ms/op

# Run progress: 98.13% complete, ETA 00:03:03
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 2449 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2449, 2449, 2449, 2449, 2449, 2449, 2449, 2449 ms/op
# Warmup Iteration   2: n = 1, mean = 2097 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097 ms/op
# Warmup Iteration   3: n = 1, mean = 2017 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2017, 2017, 2017, 2017, 2017, 2017, 2017, 2017 ms/op
Iteration   1: n = 1, mean = 2223 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2223, 2223, 2223, 2223, 2223, 2223, 2223, 2223 ms/op
Iteration   2: n = 1, mean = 2038 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2038, 2038, 2038, 2038, 2038, 2038, 2038, 2038 ms/op
Iteration   3: n = 1, mean = 2049 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2049, 2049, 2049, 2049, 2049, 2049, 2049, 2049 ms/op


Result "readXxh64":
  N = 9
  mean =   1718.733 ±(99.9%) 520.161 ms/op

  Histogram, ms/op:
    [1400.000, 1450.000) = 2 
    [1450.000, 1500.000) = 2 
    [1500.000, 1550.000) = 0 
    [1550.000, 1600.000) = 1 
    [1600.000, 1650.000) = 0 
    [1650.000, 1700.000) = 0 
    [1700.000, 1750.000) = 0 
    [1750.000, 1800.000) = 1 
    [1800.000, 1850.000) = 0 
    [1850.000, 1900.000) = 0 
    [1900.000, 1950.000) = 0 
    [1950.000, 2000.000) = 0 
    [2000.000, 2050.000) = 2 
    [2050.000, 2100.000) = 0 
    [2100.000, 2150.000) = 0 
    [2150.000, 2200.000) = 0 
    [2200.000, 2250.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1432.355 ms/op
     p(50.0000) =   1585.447 ms/op
     p(90.0000) =   2222.981 ms/op
     p(95.0000) =   2222.981 ms/op
     p(99.0000) =   2222.981 ms/op
     p(99.9000) =   2222.981 ms/op
     p(99.9900) =   2222.981 ms/op
     p(99.9990) =   2222.981 ms/op
     p(99.9999) =   2222.981 ms/op
    p(100.0000) =   2222.981 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Xodus.write
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 98.28% complete, ETA 00:02:49
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 890 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 890, 890, 890, 890, 890, 890, 890, 890 ms/op
# Warmup Iteration   2: n = 1, mean = 1027 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027 ms/op
# Warmup Iteration   3: n = 2, mean = 731 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 711, 731, 751, 751, 751, 751, 751, 751 ms/op
Iteration   1: n = 2, mean = 701 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 651, 701, 751, 751, 751, 751, 751, 751 ms/op
Iteration   2: n = 2, mean = 666 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 625, 666, 708, 708, 708, 708, 708, 708 ms/op
Iteration   3: n = 2, mean = 548 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 509, 548, 587, 587, 587, 587, 587, 587 ms/op

# Run progress: 98.42% complete, ETA 00:02:35
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 983 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 983, 983, 983, 983, 983, 983, 983, 983 ms/op
# Warmup Iteration   2: n = 2, mean = 598 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 590, 598, 605, 605, 605, 605, 605, 605 ms/op
# Warmup Iteration   3: n = 2, mean = 715 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 633, 715, 796, 796, 796, 796, 796, 796 ms/op
Iteration   1: n = 2, mean = 751 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 749, 751, 754, 754, 754, 754, 754, 754 ms/op
Iteration   2: n = 2, mean = 725 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 699, 725, 750, 750, 750, 750, 750, 750 ms/op
Iteration   3: n = 2, mean = 574 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 554, 574, 595, 595, 595, 595, 595, 595 ms/op

# Run progress: 98.56% complete, ETA 00:02:21
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 859 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 859, 859, 859, 859, 859, 859, 859, 859 ms/op
# Warmup Iteration   2: n = 2, mean = 780 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 748, 780, 812, 812, 812, 812, 812, 812 ms/op
# Warmup Iteration   3: n = 2, mean = 677 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 663, 677, 692, 692, 692, 692, 692, 692 ms/op
Iteration   1: n = 2, mean = 760 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 681, 760, 840, 840, 840, 840, 840, 840 ms/op
Iteration   2: n = 2, mean = 660 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 645, 660, 675, 675, 675, 675, 675, 675 ms/op
Iteration   3: n = 2, mean = 682 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 662, 682, 703, 703, 703, 703, 703, 703 ms/op


Result "write":
  N = 18
  mean =    674.205 ±(99.9%) 76.272 ms/op

  Histogram, ms/op:
    [500.000, 525.000) = 1 
    [525.000, 550.000) = 0 
    [550.000, 575.000) = 1 
    [575.000, 600.000) = 2 
    [600.000, 625.000) = 1 
    [625.000, 650.000) = 1 
    [650.000, 675.000) = 2 
    [675.000, 700.000) = 3 
    [700.000, 725.000) = 2 
    [725.000, 750.000) = 2 
    [750.000, 775.000) = 2 
    [775.000, 800.000) = 0 
    [800.000, 825.000) = 0 
    [825.000, 850.000) = 1 
    [850.000, 875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    509.084 ms/op
     p(50.0000) =    677.904 ms/op
     p(90.0000) =    762.524 ms/op
     p(95.0000) =    839.909 ms/op
     p(99.0000) =    839.909 ms/op
     p(99.9000) =    839.909 ms/op
     p(99.9900) =    839.909 ms/op
     p(99.9990) =    839.909 ms/op
     p(99.9999) =    839.909 ms/op
    p(100.0000) =    839.909 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Xodus.write
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 98.71% complete, ETA 00:02:06
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 15938 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 15938, 15938, 15938, 15938, 15938, 15938, 15938, 15938 ms/op
# Warmup Iteration   2: n = 1, mean = 15116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 15116, 15116, 15116, 15116, 15116, 15116, 15116, 15116 ms/op
# Warmup Iteration   3: n = 1, mean = 14294 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 14294, 14294, 14294, 14294, 14294, 14294, 14294, 14294 ms/op
Iteration   1: n = 1, mean = 14596 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 14596, 14596, 14596, 14596, 14596, 14596, 14596, 14596 ms/op
Iteration   2: n = 1, mean = 14529 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 14529, 14529, 14529, 14529, 14529, 14529, 14529, 14529 ms/op
Iteration   3: n = 1, mean = 14395 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 14395, 14395, 14395, 14395, 14395, 14395, 14395, 14395 ms/op

# Run progress: 98.85% complete, ETA 00:01:53
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 14345 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 14345, 14345, 14345, 14345, 14345, 14345, 14345, 14345 ms/op
# Warmup Iteration   2: n = 1, mean = 15150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 15150, 15150, 15150, 15150, 15150, 15150, 15150, 15150 ms/op
# Warmup Iteration   3: n = 1, mean = 14428 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 14428, 14428, 14428, 14428, 14428, 14428, 14428, 14428 ms/op
Iteration   1: n = 1, mean = 13858 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 13858, 13858, 13858, 13858, 13858, 13858, 13858, 13858 ms/op
Iteration   2: n = 1, mean = 13657 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 13657, 13657, 13657, 13657, 13657, 13657, 13657, 13657 ms/op
Iteration   3: n = 1, mean = 13741 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 13741, 13741, 13741, 13741, 13741, 13741, 13741, 13741 ms/op

# Run progress: 98.99% complete, ETA 00:01:40
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 15016 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 15016, 15016, 15016, 15016, 15016, 15016, 15016, 15016 ms/op
# Warmup Iteration   2: n = 1, mean = 14076 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 14076, 14076, 14076, 14076, 14076, 14076, 14076, 14076 ms/op
# Warmup Iteration   3: n = 1, mean = 13757 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 13757, 13757, 13757, 13757, 13757, 13757, 13757, 13757 ms/op
Iteration   1: n = 1, mean = 13774 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 13774, 13774, 13774, 13774, 13774, 13774, 13774, 13774 ms/op
Iteration   2: n = 1, mean = 13690 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 13690, 13690, 13690, 13690, 13690, 13690, 13690, 13690 ms/op
Iteration   3: n = 1, mean = 13590 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 13590, 13590, 13590, 13590, 13590, 13590, 13590, 13590 ms/op


Result "write":
  N = 9
  mean =  13981.013 ±(99.9%) 679.709 ms/op

  Histogram, ms/op:
    [13000.000, 13125.000) = 0 
    [13125.000, 13250.000) = 0 
    [13250.000, 13375.000) = 0 
    [13375.000, 13500.000) = 0 
    [13500.000, 13625.000) = 1 
    [13625.000, 13750.000) = 3 
    [13750.000, 13875.000) = 2 
    [13875.000, 14000.000) = 0 
    [14000.000, 14125.000) = 0 
    [14125.000, 14250.000) = 0 
    [14250.000, 14375.000) = 0 
    [14375.000, 14500.000) = 1 
    [14500.000, 14625.000) = 2 
    [14625.000, 14750.000) = 0 
    [14750.000, 14875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  13589.545 ms/op
     p(50.0000) =  13774.094 ms/op
     p(90.0000) =  14596.178 ms/op
     p(95.0000) =  14596.178 ms/op
     p(99.0000) =  14596.178 ms/op
     p(99.9000) =  14596.178 ms/op
     p(99.9900) =  14596.178 ms/op
     p(99.9990) =  14596.178 ms/op
     p(99.9999) =  14596.178 ms/op
    p(100.0000) =  14596.178 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Xodus.write
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 99.14% complete, ETA 00:01:26
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126 ms/op
# Warmup Iteration   2: n = 1, mean = 985 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 985, 985, 985, 985, 985, 985, 985, 985 ms/op
# Warmup Iteration   3: n = 2, mean = 924 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 911, 924, 937, 937, 937, 937, 937, 937 ms/op
Iteration   1: n = 1, mean = 1014 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014 ms/op
Iteration   2: n = 2, mean = 829 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 810, 829, 849, 849, 849, 849, 849, 849 ms/op
Iteration   3: n = 2, mean = 846 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 727, 846, 966, 966, 966, 966, 966, 966 ms/op

# Run progress: 99.28% complete, ETA 00:01:12
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1091 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1091, 1091, 1091, 1091, 1091, 1091, 1091, 1091 ms/op
# Warmup Iteration   2: n = 1, mean = 1034 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034 ms/op
# Warmup Iteration   3: n = 2, mean = 828 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 742, 828, 914, 914, 914, 914, 914, 914 ms/op
Iteration   1: n = 2, mean = 867 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 804, 867, 929, 929, 929, 929, 929, 929 ms/op
Iteration   2: n = 2, mean = 782 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 670, 782, 893, 893, 893, 893, 893, 893 ms/op
Iteration   3: n = 2, mean = 726 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 673, 726, 778, 778, 778, 778, 778, 778 ms/op

# Run progress: 99.43% complete, ETA 00:00:57
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128 ms/op
# Warmup Iteration   2: n = 1, mean = 1076 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076 ms/op
# Warmup Iteration   3: n = 2, mean = 755 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 686, 755, 824, 824, 824, 824, 824, 824 ms/op
Iteration   1: n = 2, mean = 895 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 866, 895, 924, 924, 924, 924, 924, 924 ms/op
Iteration   2: n = 2, mean = 800 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 705, 800, 895, 895, 895, 895, 895, 895 ms/op
Iteration   3: n = 2, mean = 822 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 802, 822, 842, 842, 842, 842, 842, 842 ms/op


Result "write":
  N = 17
  mean =    832.199 ±(99.9%) 98.001 ms/op

  Histogram, ms/op:
    [ 600.000,  650.000) = 0 
    [ 650.000,  700.000) = 2 
    [ 700.000,  750.000) = 2 
    [ 750.000,  800.000) = 1 
    [ 800.000,  850.000) = 5 
    [ 850.000,  900.000) = 3 
    [ 900.000,  950.000) = 2 
    [ 950.000, 1000.000) = 1 
    [1000.000, 1050.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    670.040 ms/op
     p(50.0000) =    842.007 ms/op
     p(90.0000) =    975.385 ms/op
     p(95.0000) =   1013.973 ms/op
     p(99.0000) =   1013.973 ms/op
     p(99.9000) =   1013.973 ms/op
     p(99.9900) =   1013.973 ms/op
     p(99.9990) =   1013.973 ms/op
     p(99.9999) =   1013.973 ms/op
    p(100.0000) =   1013.973 ms/op


# JMH 1.12 (released 100 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 60 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Xodus.write
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 99.57% complete, ETA 00:00:43
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 14227 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 14227, 14227, 14227, 14227, 14227, 14227, 14227, 14227 ms/op
# Warmup Iteration   2: n = 1, mean = 14848 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 14848, 14848, 14848, 14848, 14848, 14848, 14848, 14848 ms/op
# Warmup Iteration   3: n = 1, mean = 14781 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 14781, 14781, 14781, 14781, 14781, 14781, 14781, 14781 ms/op
Iteration   1: n = 1, mean = 13992 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 13992, 13992, 13992, 13992, 13992, 13992, 13992, 13992 ms/op
Iteration   2: n = 1, mean = 13271 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 13271, 13271, 13271, 13271, 13271, 13271, 13271, 13271 ms/op
Iteration   3: n = 1, mean = 13623 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 13623, 13623, 13623, 13623, 13623, 13623, 13623, 13623 ms/op

# Run progress: 99.71% complete, ETA 00:00:28
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 18321 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 18321, 18321, 18321, 18321, 18321, 18321, 18321, 18321 ms/op
# Warmup Iteration   2: n = 1, mean = 17549 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 17549, 17549, 17549, 17549, 17549, 17549, 17549, 17549 ms/op
# Warmup Iteration   3: n = 1, mean = 17163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 17163, 17163, 17163, 17163, 17163, 17163, 17163, 17163 ms/op
Iteration   1: n = 1, mean = 17012 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 17012, 17012, 17012, 17012, 17012, 17012, 17012, 17012 ms/op
Iteration   2: n = 1, mean = 16425 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 16425, 16425, 16425, 16425, 16425, 16425, 16425, 16425 ms/op
Iteration   3: n = 1, mean = 16677 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 16677, 16677, 16677, 16677, 16677, 16677, 16677, 16677 ms/op

# Run progress: 99.86% complete, ETA 00:00:14
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 19327 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 19327, 19327, 19327, 19327, 19327, 19327, 19327, 19327 ms/op
# Warmup Iteration   2: n = 1, mean = 18589 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 18589, 18589, 18589, 18589, 18589, 18589, 18589, 18589 ms/op
# Warmup Iteration   3: n = 1, mean = 18220 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 18220, 18220, 18220, 18220, 18220, 18220, 18220, 18220 ms/op
Iteration   1: n = 1, mean = 18153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 18153, 18153, 18153, 18153, 18153, 18153, 18153, 18153 ms/op
Iteration   2: n = 1, mean = 18052 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 18052, 18052, 18052, 18052, 18052, 18052, 18052, 18052 ms/op
Iteration   3: n = 1, mean = 17952 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 17952, 17952, 17952, 17952, 17952, 17952, 17952, 17952 ms/op


Result "write":
  N = 9
  mean =  16128.497 ±(99.9%) 3323.879 ms/op

  Histogram, ms/op:
    [13000.000, 13500.000) = 1 
    [13500.000, 14000.000) = 2 
    [14000.000, 14500.000) = 0 
    [14500.000, 15000.000) = 0 
    [15000.000, 15500.000) = 0 
    [15500.000, 16000.000) = 0 
    [16000.000, 16500.000) = 1 
    [16500.000, 17000.000) = 1 
    [17000.000, 17500.000) = 1 
    [17500.000, 18000.000) = 1 
    [18000.000, 18500.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =  13270.778 ms/op
     p(50.0000) =  16676.553 ms/op
     p(90.0000) =  18152.948 ms/op
     p(95.0000) =  18152.948 ms/op
     p(99.0000) =  18152.948 ms/op
     p(99.9000) =  18152.948 ms/op
     p(99.9900) =  18152.948 ms/op
     p(99.9990) =  18152.948 ms/op
     p(99.9999) =  18152.948 ms/op
    p(100.0000) =  18152.948 ms/op


# Run complete. Total time: 02:51:18

Benchmark                      (batchSize)  (forceSafe)  (intKey)  (metaSync)    (num)  (sequential)  (sync)  (valRandom)  (valSize)  (writeMap)    Mode   Cnt      Score      Error  Units
Chronicle.readKey                      N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    18    613.912 ±   83.947  ms/op
Chronicle.readKey                      N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    18    634.505 ±   73.808  ms/op
Chronicle.readKey                      N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    17    833.495 ±   91.540  ms/op
Chronicle.readKey                      N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    13    942.589 ±  136.266  ms/op
Chronicle.write                        N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    18    836.705 ±   98.397  ms/op
Chronicle.write                        N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    14    894.510 ±  156.581  ms/op
Chronicle.write                        N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    10   1115.265 ±  139.822  ms/op
Chronicle.write                        N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample     9   1186.988 ±  164.958  ms/op
LevelDb.readCrc                        N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample     9   1379.227 ±  196.318  ms/op
LevelDb.readCrc                        N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample     9   1383.887 ±  252.335  ms/op
LevelDb.readCrc                        N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample     9   1189.551 ±  179.019  ms/op
LevelDb.readCrc                        N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample     9   1521.134 ±  207.131  ms/op
LevelDb.readKey                        N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample     9   2223.447 ±  232.391  ms/op
LevelDb.readKey                        N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample     9   2476.037 ±  288.548  ms/op
LevelDb.readKey                        N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample     9   1371.537 ±  220.244  ms/op
LevelDb.readKey                        N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample     9   3212.371 ±  591.324  ms/op
LevelDb.readRev                        N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample     9   6265.358 ±  191.920  ms/op
LevelDb.readRev                        N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample     9   6442.451 ±  277.132  ms/op
LevelDb.readRev                        N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample     9   6064.032 ±  229.306  ms/op
LevelDb.readRev                        N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample     9   6483.462 ±  252.013  ms/op
LevelDb.readSeq                        N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample     9   1272.272 ±  245.737  ms/op
LevelDb.readSeq                        N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample     9   1232.659 ±  210.895  ms/op
LevelDb.readSeq                        N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    10   1106.143 ±  129.403  ms/op
LevelDb.readSeq                        N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample     9   1270.408 ±  229.960  ms/op
LevelDb.readXxh64                      N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample     9   1311.186 ±  263.196  ms/op
LevelDb.readXxh64                      N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample     9   1279.263 ±  195.859  ms/op
LevelDb.readXxh64                      N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample     9   1211.338 ±  189.767  ms/op
LevelDb.readXxh64                      N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample     9   1334.255 ±  177.206  ms/op
LevelDb.write                      1000000          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample     9   1962.701 ±  222.093  ms/op
LevelDb.write                      1000000          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample     9   2089.462 ±  274.158  ms/op
LevelDb.write                      1000000          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample     9   1188.619 ±  198.424  ms/op
LevelDb.write                      1000000          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample     9   2494.679 ±  380.765  ms/op
LmdbJavaAgrona.readCrc                 N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample    66    147.742 ±   11.075  ms/op
LmdbJavaAgrona.readCrc                 N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample    60    167.241 ±   15.094  ms/op
LmdbJavaAgrona.readCrc                 N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample    69    138.874 ±   11.686  ms/op
LmdbJavaAgrona.readCrc                 N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample    59    164.702 ±   16.591  ms/op
LmdbJavaAgrona.readKey                 N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample    85    109.746 ±    6.896  ms/op
LmdbJavaAgrona.readKey                 N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample    18    648.020 ±   62.474  ms/op
LmdbJavaAgrona.readKey                 N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample    30    361.444 ±   38.191  ms/op
LmdbJavaAgrona.readKey                 N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample    13   1062.933 ±  173.726  ms/op
LmdbJavaAgrona.readRev                 N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample   253     36.182 ±    1.522  ms/op
LmdbJavaAgrona.readRev                 N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample   150     61.485 ±    2.842  ms/op
LmdbJavaAgrona.readRev                 N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample   244     37.502 ±    1.560  ms/op
LmdbJavaAgrona.readRev                 N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample   141     65.782 ±    3.771  ms/op
LmdbJavaAgrona.readSeq                 N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample   214     43.377 ±    1.931  ms/op
LmdbJavaAgrona.readSeq                 N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample   137     67.850 ±    3.296  ms/op
LmdbJavaAgrona.readSeq                 N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample   219     42.019 ±    1.764  ms/op
LmdbJavaAgrona.readSeq                 N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample   124     75.032 ±    4.331  ms/op
LmdbJavaAgrona.readXxh64               N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample   134     70.499 ±    4.020  ms/op
LmdbJavaAgrona.readXxh64               N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample    96     97.094 ±    5.666  ms/op
LmdbJavaAgrona.readXxh64               N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample   126     73.445 ±    4.342  ms/op
LmdbJavaAgrona.readXxh64               N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample    89    106.239 ±    8.394  ms/op
LmdbJavaAgrona.write                   N/A          N/A      true       false  1000000          true   false        false        100        true  sample    55    165.403 ±   13.727  ms/op
LmdbJavaAgrona.write                   N/A          N/A      true       false  1000000         false   false        false        100        true  sample    16    807.076 ±   81.868  ms/op
LmdbJavaAgrona.write                   N/A          N/A     false       false  1000000          true   false        false        100        true  sample    27    387.740 ±   41.396  ms/op
LmdbJavaAgrona.write                   N/A          N/A     false       false  1000000         false   false        false        100        true  sample     9   1288.117 ±  219.112  ms/op
LmdbJavaByteBuffer.readCrc             N/A        false      true         N/A  1000000          true     N/A        false        100        true  sample    92    103.875 ±    7.277  ms/op
LmdbJavaByteBuffer.readCrc             N/A        false      true         N/A  1000000         false     N/A        false        100        true  sample    79    120.100 ±    7.418  ms/op
LmdbJavaByteBuffer.readCrc             N/A        false     false         N/A  1000000          true     N/A        false        100        true  sample    62    150.200 ±   12.741  ms/op
LmdbJavaByteBuffer.readCrc             N/A        false     false         N/A  1000000         false     N/A        false        100        true  sample    56    172.318 ±   13.287  ms/op
LmdbJavaByteBuffer.readKey             N/A        false      true         N/A  1000000          true     N/A        false        100        true  sample    88    108.204 ±    6.524  ms/op
LmdbJavaByteBuffer.readKey             N/A        false      true         N/A  1000000         false     N/A        false        100        true  sample    18    634.796 ±   46.781  ms/op
LmdbJavaByteBuffer.readKey             N/A        false     false         N/A  1000000          true     N/A        false        100        true  sample    29    359.282 ±   33.050  ms/op
LmdbJavaByteBuffer.readKey             N/A        false     false         N/A  1000000         false     N/A        false        100        true  sample    13   1038.816 ±  147.477  ms/op
LmdbJavaByteBuffer.readRev             N/A        false      true         N/A  1000000          true     N/A        false        100        true  sample   252     36.474 ±    1.518  ms/op
LmdbJavaByteBuffer.readRev             N/A        false      true         N/A  1000000         false     N/A        false        100        true  sample   130     72.387 ±    3.220  ms/op
LmdbJavaByteBuffer.readRev             N/A        false     false         N/A  1000000          true     N/A        false        100        true  sample   239     38.474 ±    1.787  ms/op
LmdbJavaByteBuffer.readRev             N/A        false     false         N/A  1000000         false     N/A        false        100        true  sample   145     63.825 ±    3.029  ms/op
LmdbJavaByteBuffer.readSeq             N/A        false      true         N/A  1000000          true     N/A        false        100        true  sample   198     46.572 ±    2.567  ms/op
LmdbJavaByteBuffer.readSeq             N/A        false      true         N/A  1000000         false     N/A        false        100        true  sample   142     66.459 ±    2.891  ms/op
LmdbJavaByteBuffer.readSeq             N/A        false     false         N/A  1000000          true     N/A        false        100        true  sample   207     44.351 ±    2.182  ms/op
LmdbJavaByteBuffer.readSeq             N/A        false     false         N/A  1000000         false     N/A        false        100        true  sample   115     81.325 ±    4.359  ms/op
LmdbJavaByteBuffer.readXxh64           N/A        false      true         N/A  1000000          true     N/A        false        100        true  sample   134     68.740 ±    3.767  ms/op
LmdbJavaByteBuffer.readXxh64           N/A        false      true         N/A  1000000         false     N/A        false        100        true  sample    93    100.575 ±    6.689  ms/op
LmdbJavaByteBuffer.readXxh64           N/A        false     false         N/A  1000000          true     N/A        false        100        true  sample   123     75.046 ±    4.102  ms/op
LmdbJavaByteBuffer.readXxh64           N/A        false     false         N/A  1000000         false     N/A        false        100        true  sample    85    112.668 ±    7.050  ms/op
LmdbJavaByteBuffer.write               N/A          N/A      true       false  1000000          true   false        false        100        true  sample    62    144.027 ±   10.279  ms/op
LmdbJavaByteBuffer.write               N/A          N/A      true       false  1000000         false   false        false        100        true  sample    13    896.452 ±  109.399  ms/op
LmdbJavaByteBuffer.write               N/A          N/A     false       false  1000000          true   false        false        100        true  sample    28    368.612 ±   30.287  ms/op
LmdbJavaByteBuffer.write               N/A          N/A     false       false  1000000         false   false        false        100        true  sample     9   1215.649 ±  172.772  ms/op
LmdbJni.readCrc                        N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample    99     95.412 ±    4.632  ms/op
LmdbJni.readCrc                        N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample    75    129.330 ±    9.879  ms/op
LmdbJni.readCrc                        N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample    80    120.829 ±    6.799  ms/op
LmdbJni.readCrc                        N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample    54    177.930 ±   13.988  ms/op
LmdbJni.readKey                        N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample    92    102.074 ±    6.305  ms/op
LmdbJni.readKey                        N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample    18    679.652 ±   95.652  ms/op
LmdbJni.readKey                        N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample    27    382.808 ±   43.223  ms/op
LmdbJni.readKey                        N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample    10   1154.797 ±  186.560  ms/op
LmdbJni.readRev                        N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample   288     31.765 ±    1.273  ms/op
LmdbJni.readRev                        N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample   155     59.147 ±    2.868  ms/op
LmdbJni.readRev                        N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample   285     31.928 ±    1.181  ms/op
LmdbJni.readRev                        N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample   163     57.158 ±    2.256  ms/op
LmdbJni.readSeq                        N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample   248     36.629 ±    1.798  ms/op
LmdbJni.readSeq                        N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample   143     65.363 ±    3.185  ms/op
LmdbJni.readSeq                        N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample   219     41.801 ±    1.760  ms/op
LmdbJni.readSeq                        N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample   133     69.870 ±    4.475  ms/op
LmdbJni.readXxh64                      N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample   131     70.743 ±    4.222  ms/op
LmdbJni.readXxh64                      N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample   112     84.683 ±    4.870  ms/op
LmdbJni.readXxh64                      N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample   137     67.082 ±    3.711  ms/op
LmdbJni.readXxh64                      N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample    92    102.135 ±    6.468  ms/op
LmdbJni.write                          N/A          N/A      true       false  1000000          true   false        false        100        true  sample    55    160.928 ±   13.947  ms/op
LmdbJni.write                          N/A          N/A      true       false  1000000         false   false        false        100        true  sample    14    859.757 ±  112.928  ms/op
LmdbJni.write                          N/A          N/A     false       false  1000000          true   false        false        100        true  sample    27    385.157 ±   36.414  ms/op
LmdbJni.write                          N/A          N/A     false       false  1000000         false   false        false        100        true  sample     9   1374.800 ±  125.826  ms/op
LmdbLwjgl.readCrc                      N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample   100     95.170 ±    6.627  ms/op
LmdbLwjgl.readCrc                      N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample    78    122.556 ±    7.802  ms/op
LmdbLwjgl.readCrc                      N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample    72    134.824 ±    8.895  ms/op
LmdbLwjgl.readCrc                      N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample    63    153.492 ±   10.915  ms/op
LmdbLwjgl.readKey                      N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample    98     96.654 ±    6.970  ms/op
LmdbLwjgl.readKey                      N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample    18    665.321 ±   52.101  ms/op
LmdbLwjgl.readKey                      N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample    37    280.395 ±   24.616  ms/op
LmdbLwjgl.readKey                      N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample    11   1011.209 ±  190.732  ms/op
LmdbLwjgl.readRev                      N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample   275     33.422 ±    1.644  ms/op
LmdbLwjgl.readRev                      N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample   156     59.483 ±    3.119  ms/op
LmdbLwjgl.readRev                      N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample   283     32.194 ±    1.429  ms/op
LmdbLwjgl.readRev                      N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample   142     65.542 ±    3.329  ms/op
LmdbLwjgl.readSeq                      N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample   209     43.902 ±    2.911  ms/op
LmdbLwjgl.readSeq                      N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample   121     76.904 ±    4.297  ms/op
LmdbLwjgl.readSeq                      N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample   196     46.896 ±    2.546  ms/op
LmdbLwjgl.readSeq                      N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample   140     66.721 ±    3.499  ms/op
LmdbLwjgl.readXxh64                    N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample   162     56.837 ±    1.842  ms/op
LmdbLwjgl.readXxh64                    N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample   109     86.545 ±    6.150  ms/op
LmdbLwjgl.readXxh64                    N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample   143     66.003 ±    3.814  ms/op
LmdbLwjgl.readXxh64                    N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample   103     91.741 ±    5.736  ms/op
LmdbLwjgl.write                        N/A          N/A      true       false  1000000          true   false        false        100        true  sample    63    142.733 ±   11.712  ms/op
LmdbLwjgl.write                        N/A          N/A      true       false  1000000         false   false        false        100        true  sample    16    827.654 ±   94.973  ms/op
LmdbLwjgl.write                        N/A          N/A     false       false  1000000          true   false        false        100        true  sample    34    293.108 ±   27.277  ms/op
LmdbLwjgl.write                        N/A          N/A     false       false  1000000         false   false        false        100        true  sample     9   1167.182 ±  143.444  ms/op
MapDb.readCrc                          N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    52    192.242 ±   15.268  ms/op
MapDb.readCrc                          N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    51    190.707 ±   13.625  ms/op
MapDb.readCrc                          N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    43    223.993 ±   20.315  ms/op
MapDb.readCrc                          N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    43    227.858 ±   20.600  ms/op
MapDb.readKey                          N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample     9   9676.725 ±  576.886  ms/op
MapDb.readKey                          N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample     9   9707.484 ± 1917.460  ms/op
MapDb.readKey                          N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample     9   8309.382 ±  652.606  ms/op
MapDb.readKey                          N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample     9  11151.256 ± 1210.496  ms/op
MapDb.readRev                          N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    83    117.103 ±    8.215  ms/op
MapDb.readRev                          N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    88    106.559 ±    6.795  ms/op
MapDb.readRev                          N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    81    117.491 ±    7.963  ms/op
MapDb.readRev                          N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    79    119.835 ±    8.289  ms/op
MapDb.readSeq                          N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    99     96.878 ±    7.740  ms/op
MapDb.readSeq                          N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    89    107.379 ±    7.717  ms/op
MapDb.readSeq                          N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    86    109.457 ±    6.202  ms/op
MapDb.readSeq                          N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    84    113.742 ±    8.010  ms/op
MapDb.readXxh64                        N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    71    132.575 ±    7.857  ms/op
MapDb.readXxh64                        N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    68    140.494 ±    9.427  ms/op
MapDb.readXxh64                        N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    62    154.862 ±   11.606  ms/op
MapDb.readXxh64                        N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    60    159.403 ±   15.085  ms/op
MapDb.write                            N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample     9   8876.079 ±  817.672  ms/op
MapDb.write                            N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample     9   9304.830 ±  973.368  ms/op
MapDb.write                            N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample     9  11361.904 ±  577.403  ms/op
MapDb.write                            N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample     9  11266.833 ± 1720.705  ms/op
MvStore.readCrc                        N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    18    583.241 ±   68.399  ms/op
MvStore.readCrc                        N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    18    581.465 ±   44.701  ms/op
MvStore.readCrc                        N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    18    721.129 ±   81.916  ms/op
MvStore.readCrc                        N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    18    705.925 ±   71.553  ms/op
MvStore.readKey                        N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample     9   7757.598 ±  420.172  ms/op
MvStore.readKey                        N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample     9   8420.298 ±  301.496  ms/op
MvStore.readKey                        N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    15    863.188 ±  107.275  ms/op
MvStore.readKey                        N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample     9   9646.899 ±  341.531  ms/op
MvStore.readRev                        N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    18    580.678 ±   41.024  ms/op
MvStore.readRev                        N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    18    574.591 ±   39.655  ms/op
MvStore.readRev                        N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    17    720.495 ±   93.142  ms/op
MvStore.readRev                        N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    18    733.945 ±   85.697  ms/op
MvStore.readSeq                        N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    24    479.330 ±   37.980  ms/op
MvStore.readSeq                        N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    24    485.381 ±   40.520  ms/op
MvStore.readSeq                        N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    18    625.301 ±   69.835  ms/op
MvStore.readSeq                        N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    18    592.678 ±   45.800  ms/op
MvStore.readXxh64                      N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    21    529.431 ±   51.785  ms/op
MvStore.readXxh64                      N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    21    517.472 ±   39.054  ms/op
MvStore.readXxh64                      N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    18    632.408 ±   34.693  ms/op
MvStore.readXxh64                      N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    18    632.000 ±   51.821  ms/op
MvStore.write                          N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample     9   1328.662 ±  252.284  ms/op
MvStore.write                          N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample     9   1675.391 ±  271.606  ms/op
MvStore.write                          N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    11   1107.773 ±  253.764  ms/op
MvStore.write                          N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample     9   2113.929 ±  260.744  ms/op
RocksDb.readCrc                        N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    27    388.789 ±   38.008  ms/op
RocksDb.readCrc                        N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    22    477.650 ±   58.558  ms/op
RocksDb.readCrc                        N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    31    320.281 ±   31.077  ms/op
RocksDb.readCrc                        N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    21    530.929 ±   68.783  ms/op
RocksDb.readKey                        N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample     9   1814.036 ±  314.290  ms/op
RocksDb.readKey                        N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample     9   2067.559 ±  348.530  ms/op
RocksDb.readKey                        N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample     9   1154.366 ±  150.038  ms/op
RocksDb.readKey                        N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample     9   2341.587 ±  421.215  ms/op
RocksDb.readRev                        N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    13   1006.956 ±  124.856  ms/op
RocksDb.readRev                        N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    11   1103.674 ±  197.172  ms/op
RocksDb.readRev                        N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    14    912.711 ±  129.189  ms/op
RocksDb.readRev                        N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample     9   1090.403 ±  157.600  ms/op
RocksDb.readSeq                        N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    39    268.879 ±   24.437  ms/op
RocksDb.readSeq                        N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    31    341.227 ±   35.643  ms/op
RocksDb.readSeq                        N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    69    141.776 ±   10.796  ms/op
RocksDb.readSeq                        N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    31    345.354 ±   39.911  ms/op
RocksDb.readXxh64                      N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    32    344.867 ±   26.528  ms/op
RocksDb.readXxh64                      N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    25    443.443 ±   50.954  ms/op
RocksDb.readXxh64                      N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    42    235.212 ±   18.287  ms/op
RocksDb.readXxh64                      N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    24    446.125 ±   49.963  ms/op
RocksDb.write                      1000000          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample     9   1800.755 ±  239.427  ms/op
RocksDb.write                      1000000          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample     9   1850.853 ±  261.903  ms/op
RocksDb.write                      1000000          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    18    784.335 ±   67.893  ms/op
RocksDb.write                      1000000          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample     9   2086.200 ±  166.650  ms/op
Xodus.readCrc                          N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample     9   1224.038 ±  183.373  ms/op
Xodus.readCrc                          N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample     9   1383.887 ±  164.962  ms/op
Xodus.readCrc                          N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample     9   1404.859 ±  181.008  ms/op
Xodus.readCrc                          N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample     9   1715.470 ±  408.681  ms/op
Xodus.readKey                          N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample     9   3486.399 ±  568.738  ms/op
Xodus.readKey                          N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample     9   4978.173 ±  681.757  ms/op
Xodus.readKey                          N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample     9   3686.327 ±  468.052  ms/op
Xodus.readKey                          N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample     9   4928.773 ±  635.365  ms/op
Xodus.readRev                          N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample     9   1174.871 ±  220.276  ms/op
Xodus.readRev                          N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample     9   1272.039 ±  144.533  ms/op
Xodus.readRev                          N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample     9   1157.045 ±  179.413  ms/op
Xodus.readRev                          N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample     9   1271.573 ±  141.064  ms/op
Xodus.readSeq                          N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    11   1105.008 ±  158.398  ms/op
Xodus.readSeq                          N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample     9   1275.185 ±  170.398  ms/op
Xodus.readSeq                          N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    12   1037.828 ±   72.017  ms/op
Xodus.readSeq                          N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample     9   1329.594 ±  248.538  ms/op
Xodus.readXxh64                        N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample     9   1275.534 ±  177.967  ms/op
Xodus.readXxh64                        N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample     9   1382.489 ±  106.306  ms/op
Xodus.readXxh64                        N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample     9   1426.762 ±  252.135  ms/op
Xodus.readXxh64                        N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample     9   1718.733 ±  520.161  ms/op
Xodus.write                            N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    18    674.205 ±   76.272  ms/op
Xodus.write                            N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample     9  13981.013 ±  679.709  ms/op
Xodus.write                            N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    17    832.199 ±   98.001  ms/op
Xodus.write                            N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample     9  16128.497 ± 3323.879  ms/op

Benchmark result is saved to out-4.csv
