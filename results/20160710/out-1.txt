# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 0.00% complete, ETA 00:25:48
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 141, 157, 157, 157, 157, 157, 157 ms/op
# Warmup Iteration   2: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 129, 131, 131, 131, 131, 131, 131 ms/op
# Warmup Iteration   3: n = 7, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 144, 215, 215, 215, 215, 215, 215 ms/op
Iteration   1: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 144, 182, 182, 182, 182, 182, 182 ms/op
Iteration   2: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 129, 132, 132, 132, 132, 132, 132 ms/op
Iteration   3: n = 8, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 132, 136, 136, 136, 136, 136, 136 ms/op

# Run progress: 0.39% complete, ETA 00:30:59
# Fork: 2 of 3
# Warmup Iteration   1: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 108, 116, 190, 190, 190, 190, 190, 190 ms/op
# Warmup Iteration   2: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 108, 116, 169, 169, 169, 169, 169, 169 ms/op
# Warmup Iteration   3: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 108, 113, 178, 178, 178, 178, 178, 178 ms/op
Iteration   1: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 112, 112, 179, 179, 179, 179, 179, 179 ms/op
Iteration   2: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 112, 114, 192, 192, 192, 192, 192, 192 ms/op
Iteration   3: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 108, 164, 164, 164, 164, 164, 164 ms/op

# Run progress: 0.78% complete, ETA 00:30:23
# Fork: 3 of 3
# Warmup Iteration   1: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 110, 174, 174, 174, 174, 174, 174 ms/op
# Warmup Iteration   2: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 98, 111, 111, 111, 111, 111, 111 ms/op
# Warmup Iteration   3: n = 11, mean = 98 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 98, 99, 100, 100, 100, 100, 100 ms/op
Iteration   1: n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 108, 176, 176, 176, 176, 176, 176 ms/op
Iteration   2: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 106, 169, 169, 169, 169, 169, 169 ms/op
Iteration   3: n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 109, 177, 177, 177, 177, 177, 177 ms/op


Result "readCrc":
  N = 75
  mean =    124.048 ±(99.9%) 8.834 ms/op

  Histogram, ms/op:
    [ 90.000, 100.000) = 2 
    [100.000, 110.000) = 26 
    [110.000, 120.000) = 15 
    [120.000, 130.000) = 10 
    [130.000, 140.000) = 9 
    [140.000, 150.000) = 4 
    [150.000, 160.000) = 0 
    [160.000, 170.000) = 3 
    [170.000, 180.000) = 4 
    [180.000, 190.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     95.945 ms/op
     p(50.0000) =    112.853 ms/op
     p(90.0000) =    165.937 ms/op
     p(95.0000) =    177.314 ms/op
     p(99.0000) =    192.152 ms/op
     p(99.9000) =    192.152 ms/op
     p(99.9900) =    192.152 ms/op
     p(99.9990) =    192.152 ms/op
     p(99.9999) =    192.152 ms/op
    p(100.0000) =    192.152 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 1.16% complete, ETA 00:30:32
# Fork: 1 of 3
# Warmup Iteration   1: n = 7, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 146, 234, 234, 234, 234, 234, 234 ms/op
# Warmup Iteration   2: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 129, 131, 131, 131, 131, 131, 131 ms/op
# Warmup Iteration   3: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 129, 130, 130, 130, 130, 130, 130 ms/op
Iteration   1: n = 7, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 146, 213, 213, 213, 213, 213, 213 ms/op
Iteration   2: n = 7, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 145, 209, 209, 209, 209, 209, 209 ms/op
Iteration   3: n = 7, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 145, 218, 218, 218, 218, 218, 218 ms/op

# Run progress: 1.55% complete, ETA 00:30:54
# Fork: 2 of 3
# Warmup Iteration   1: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 112, 196, 196, 196, 196, 196, 196 ms/op
# Warmup Iteration   2: n = 11, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 100, 100, 100, 100, 100, 100, 100 ms/op
# Warmup Iteration   3: n = 11, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 100, 100, 101, 101, 101, 101, 101 ms/op
Iteration   1: n = 11, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 100, 101, 101, 101, 101, 101, 101 ms/op
Iteration   2: n = 11, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 100, 100, 100, 100, 100, 100, 100 ms/op
Iteration   3: n = 10, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 100, 102, 103, 103, 103, 103, 103 ms/op

# Run progress: 1.94% complete, ETA 00:30:59
# Fork: 3 of 3
# Warmup Iteration   1: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 104, 125, 126, 126, 126, 126, 126 ms/op
# Warmup Iteration   2: n = 8, mean = 125 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 110, 172, 172, 172, 172, 172, 172 ms/op
# Warmup Iteration   3: n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 110, 161, 161, 161, 161, 161, 161 ms/op
Iteration   1: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 106, 176, 176, 176, 176, 176, 176 ms/op
Iteration   2: n = 11, mean = 99 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 94, 135, 144, 144, 144, 144, 144 ms/op
Iteration   3: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 94, 94, 94, 94, 94, 94, 94 ms/op


Result "readCrc":
  N = 84
  mean =    114.223 ±(99.9%) 10.542 ms/op

  Histogram, ms/op:
    [  0.000,  25.000) = 0 
    [ 25.000,  50.000) = 0 
    [ 50.000,  75.000) = 0 
    [ 75.000, 100.000) = 48 
    [100.000, 125.000) = 12 
    [125.000, 150.000) = 20 
    [150.000, 175.000) = 0 
    [175.000, 200.000) = 1 
    [200.000, 225.000) = 3 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     93.192 ms/op
     p(50.0000) =     99.811 ms/op
     p(90.0000) =    145.883 ms/op
     p(95.0000) =    168.559 ms/op
     p(99.0000) =    218.104 ms/op
     p(99.9000) =    218.104 ms/op
     p(99.9900) =    218.104 ms/op
     p(99.9990) =    218.104 ms/op
     p(99.9999) =    218.104 ms/op
    p(100.0000) =    218.104 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 2.33% complete, ETA 00:30:51
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	compacted	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 9, mean = 120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 113, 179, 179, 179, 179, 179, 179 ms/op
# Warmup Iteration   2: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 101, 104, 104, 104, 104, 104, 104 ms/op
# Warmup Iteration   3: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 102, 103, 103, 103, 103, 103, 103 ms/op
Iteration   1: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 103, 157, 162, 162, 162, 162, 162 ms/op
Iteration   2: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 114, 171, 171, 171, 171, 171, 171 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 103, 160, 165, 165, 165, 165, 165 ms/op

# Run progress: 2.71% complete, ETA 00:30:58
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	compacted	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 116, 148, 148, 148, 148, 148, 148 ms/op
# Warmup Iteration   2: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 104, 106, 106, 106, 106, 106, 106 ms/op
# Warmup Iteration   3: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 104, 106, 106, 106, 106, 106, 106 ms/op
Iteration   1: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 105, 172, 172, 172, 172, 172, 172 ms/op
Iteration   2: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 93, 95, 95, 95, 95, 95, 95 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 94, 149, 153, 153, 153, 153, 153 ms/op

# Run progress: 3.10% complete, ETA 00:30:48
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	compacted	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 104, 204, 204, 204, 204, 204, 204 ms/op
# Warmup Iteration   2: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 102, 155, 161, 161, 161, 161, 161 ms/op
# Warmup Iteration   3: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 118, 175, 175, 175, 175, 175, 175 ms/op
Iteration   1: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 106, 161, 161, 161, 161, 161, 161 ms/op
Iteration   2: n = 11, mean = 98 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 94, 126, 132, 132, 132, 132, 132 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 94, 96, 96, 96, 96, 96, 96 ms/op


Result "readKey":
  N = 90
  mean =    104.750 ±(99.9%) 6.409 ms/op

  Histogram, ms/op:
    [ 90.000,  95.000) = 33 
    [ 95.000, 100.000) = 10 
    [100.000, 105.000) = 20 
    [105.000, 110.000) = 10 
    [110.000, 115.000) = 8 
    [115.000, 120.000) = 2 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 1 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 0 
    [150.000, 155.000) = 1 
    [155.000, 160.000) = 0 
    [160.000, 165.000) = 2 
    [165.000, 170.000) = 1 
    [170.000, 175.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     90.571 ms/op
     p(50.0000) =    101.908 ms/op
     p(90.0000) =    118.227 ms/op
     p(95.0000) =    161.546 ms/op
     p(99.0000) =    172.229 ms/op
     p(99.9000) =    172.229 ms/op
     p(99.9900) =    172.229 ms/op
     p(99.9990) =    172.229 ms/op
     p(99.9999) =    172.229 ms/op
    p(100.0000) =    172.229 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 3.49% complete, ETA 00:30:44
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	compacted	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false-compacted
n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 116, 144, 144, 144, 144, 144, 144 ms/op
# Warmup Iteration   2: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 97, 107, 159, 159, 159, 159, 159, 159 ms/op
# Warmup Iteration   3: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 116, 118, 167, 167, 167, 167, 167, 167 ms/op
Iteration   1: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 115, 176, 176, 176, 176, 176, 176 ms/op
Iteration   2: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 104, 109, 109, 109, 109, 109, 109 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 115, 169, 169, 169, 169, 169, 169 ms/op

# Run progress: 3.88% complete, ETA 00:30:45
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	compacted	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false-compacted
n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 107, 187, 187, 187, 187, 187, 187 ms/op
# Warmup Iteration   2: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 94, 96, 96, 96, 96, 96, 96 ms/op
# Warmup Iteration   3: n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 97, 176, 176, 176, 176, 176, 176 ms/op
Iteration   1: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 108, 161, 161, 161, 161, 161, 161 ms/op
Iteration   2: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 93, 96, 96, 96, 96, 96, 96 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 11, mean = 95 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 96, 96, 96, 96, 96, 96, 96 ms/op

# Run progress: 4.26% complete, ETA 00:30:38
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	compacted	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false-compacted
n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 114, 147, 147, 147, 147, 147, 147 ms/op
# Warmup Iteration   2: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 103, 109, 109, 109, 109, 109, 109 ms/op
# Warmup Iteration   3: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 103, 160, 165, 165, 165, 165, 165 ms/op
Iteration   1: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 111, 174, 174, 174, 174, 174, 174 ms/op
Iteration   2: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 104, 168, 168, 168, 168, 168, 168 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 9, mean = 120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 114, 174, 174, 174, 174, 174, 174 ms/op


Result "readKey":
  N = 86
  mean =    110.175 ±(99.9%) 6.767 ms/op

  Histogram, ms/op:
    [ 90.000,  95.000) = 12 
    [ 95.000, 100.000) = 10 
    [100.000, 105.000) = 16 
    [105.000, 110.000) = 13 
    [110.000, 115.000) = 18 
    [115.000, 120.000) = 10 
    [120.000, 125.000) = 1 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 0 
    [150.000, 155.000) = 0 
    [155.000, 160.000) = 0 
    [160.000, 165.000) = 1 
    [165.000, 170.000) = 2 
    [170.000, 175.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     91.881 ms/op
     p(50.0000) =    106.103 ms/op
     p(90.0000) =    118.922 ms/op
     p(95.0000) =    168.362 ms/op
     p(99.0000) =    176.423 ms/op
     p(99.9000) =    176.423 ms/op
     p(99.9900) =    176.423 ms/op
     p(99.9990) =    176.423 ms/op
     p(99.9999) =    176.423 ms/op
    p(100.0000) =    176.423 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readRev
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 4.65% complete, ETA 00:30:33
# Fork: 1 of 3
# Warmup Iteration   1: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 34, 35, 39, 44, 44, 44, 44 ms/op
# Warmup Iteration   2: n = 33, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 31, 31, 32, 32, 32, 32 ms/op
# Warmup Iteration   3: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 31, 32, 32, 32, 32, 32 ms/op
Iteration   1: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 36, 47, 59, 64, 64, 64, 64 ms/op
Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 32, 36, 37, 37, 37, 37, 37 ms/op
Iteration   3: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 34, 59, 67, 69, 69, 69, 69 ms/op

# Run progress: 5.04% complete, ETA 00:30:20
# Fork: 2 of 3
# Warmup Iteration   1: n = 30, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 33, 35, 40, 44, 44, 44, 44 ms/op
# Warmup Iteration   2: n = 32, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 31, 32, 32, 32, 32, 32 ms/op
# Warmup Iteration   3: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 33, 33, 33, 33, 33, 33 ms/op
Iteration   1: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 31, 32, 34, 34, 34, 34 ms/op
Iteration   2: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 31, 32, 32, 32, 32, 32 ms/op
Iteration   3: n = 32, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 33, 33, 33, 33, 33, 33 ms/op

# Run progress: 5.43% complete, ETA 00:30:05
# Fork: 3 of 3
# Warmup Iteration   1: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 35, 36, 40, 44, 44, 44, 44 ms/op
# Warmup Iteration   2: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 36, 47, 62, 68, 68, 68, 68 ms/op
# Warmup Iteration   3: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 36, 60, 70, 70, 70, 70, 70 ms/op
Iteration   1: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 36, 48, 65, 71, 71, 71, 71 ms/op
Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 32, 33, 33, 34, 34, 34, 34 ms/op
Iteration   3: n = 28, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 34, 45, 63, 71, 71, 71, 71 ms/op


Result "readRev":
  N = 266
  mean =     34.486 ±(99.9%) 1.261 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 198 
    [35.000, 40.000) = 48 
    [40.000, 45.000) = 5 
    [45.000, 50.000) = 4 
    [50.000, 55.000) = 5 
    [55.000, 60.000) = 1 
    [60.000, 65.000) = 2 
    [65.000, 70.000) = 1 
    [70.000, 75.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     30.245 ms/op
     p(50.0000) =     32.473 ms/op
     p(90.0000) =     36.589 ms/op
     p(95.0000) =     46.311 ms/op
     p(99.0000) =     69.637 ms/op
     p(99.9000) =     71.434 ms/op
     p(99.9900) =     71.434 ms/op
     p(99.9990) =     71.434 ms/op
     p(99.9999) =     71.434 ms/op
    p(100.0000) =     71.434 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readRev
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 5.81% complete, ETA 00:29:51
# Fork: 1 of 3
# Warmup Iteration   1: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 34, 34, 43, 52, 52, 52, 52 ms/op
# Warmup Iteration   2: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 32, 32, 32, 32, 32, 32 ms/op
# Warmup Iteration   3: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 36, 58, 69, 72, 72, 72, 72 ms/op
Iteration   1: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 34, 63, 71, 72, 72, 72, 72 ms/op
Iteration   2: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 32, 34, 34, 34, 34, 34 ms/op
Iteration   3: n = 33, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 30, 31, 31, 31, 31, 31 ms/op

# Run progress: 6.20% complete, ETA 00:29:41
# Fork: 2 of 3
# Warmup Iteration   1: n = 30, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 33, 34, 42, 50, 50, 50, 50 ms/op
# Warmup Iteration   2: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 31, 32, 32, 32, 32, 32, 32 ms/op
# Warmup Iteration   3: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 34, 45, 59, 66, 66, 66, 66 ms/op
Iteration   1: n = 33, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 31, 31, 32, 32, 32, 32 ms/op
Iteration   2: n = 28, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 34, 45, 62, 69, 69, 69, 69 ms/op
Iteration   3: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 36, 46, 63, 69, 69, 69, 69 ms/op

# Run progress: 6.59% complete, ETA 00:29:28
# Fork: 3 of 3
# Warmup Iteration   1: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 33, 35, 43, 51, 51, 51, 51 ms/op
# Warmup Iteration   2: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 31, 32, 32, 32, 32, 32, 32 ms/op
# Warmup Iteration   3: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 34, 44, 59, 66, 66, 66, 66 ms/op
Iteration   1: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 31, 32, 32, 32, 32, 32 ms/op
Iteration   2: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 31, 32, 32, 32, 32, 32, 32 ms/op
Iteration   3: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 34, 44, 62, 69, 69, 69, 69 ms/op


Result "readRev":
  N = 274
  mean =     33.285 ±(99.9%) 1.262 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 236 
    [35.000, 40.000) = 24 
    [40.000, 45.000) = 4 
    [45.000, 50.000) = 1 
    [50.000, 55.000) = 3 
    [55.000, 60.000) = 0 
    [60.000, 65.000) = 1 
    [65.000, 70.000) = 4 
    [70.000, 75.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     30.212 ms/op
     p(50.0000) =     30.671 ms/op
     p(90.0000) =     36.176 ms/op
     p(95.0000) =     41.943 ms/op
     p(99.0000) =     69.566 ms/op
     p(99.9000) =     71.696 ms/op
     p(99.9900) =     71.696 ms/op
     p(99.9990) =     71.696 ms/op
     p(99.9999) =     71.696 ms/op
    p(100.0000) =     71.696 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 6.98% complete, ETA 00:29:17
# Fork: 1 of 3
# Warmup Iteration   1: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 39, 40, 47, 50, 50, 50, 50 ms/op
# Warmup Iteration   2: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 35, 35, 36, 37, 37, 37, 37 ms/op
# Warmup Iteration   3: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 35, 36, 36, 36, 36, 36, 36 ms/op
Iteration   1: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 36, 46, 64, 74, 74, 74, 74 ms/op
Iteration   2: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 35, 35, 35, 36, 36, 36, 36 ms/op
Iteration   3: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 34, 35, 41, 47, 47, 47, 47 ms/op

# Run progress: 7.36% complete, ETA 00:29:09
# Fork: 2 of 3
# Warmup Iteration   1: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 44, 45, 60, 90, 93, 93, 93, 93 ms/op
# Warmup Iteration   2: n = 25, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 40, 41, 42, 42, 42, 42, 42 ms/op
# Warmup Iteration   3: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 44, 54, 71, 74, 74, 74, 74 ms/op
Iteration   1: n = 26, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 40, 40, 41, 41, 41, 41, 41 ms/op
Iteration   2: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 41, 41, 42, 42, 42, 42, 42 ms/op
Iteration   3: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 40, 54, 70, 73, 73, 73, 73 ms/op

# Run progress: 7.75% complete, ETA 00:28:58
# Fork: 3 of 3
# Warmup Iteration   1: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 36, 40, 46, 49, 49, 49, 49 ms/op
# Warmup Iteration   2: n = 26, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 34, 56, 67, 70, 70, 70, 70 ms/op
# Warmup Iteration   3: n = 22, mean = 47 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 44, 45, 60, 71, 73, 73, 73, 73 ms/op
Iteration   1: n = 20, mean = 50 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 45, 71, 74, 74, 74, 74, 74 ms/op
Iteration   2: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 39, 52, 69, 74, 74, 74, 74 ms/op
Iteration   3: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 34, 34, 34, 35, 35, 35, 35 ms/op


Result "readSeq":
  N = 235
  mean =     39.021 ±(99.9%) 1.504 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 99 
    [35.000, 40.000) = 88 
    [40.000, 45.000) = 31 
    [45.000, 50.000) = 6 
    [50.000, 55.000) = 1 
    [55.000, 60.000) = 5 
    [60.000, 65.000) = 0 
    [65.000, 70.000) = 0 
    [70.000, 75.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =     34.144 ms/op
     p(50.0000) =     38.863 ms/op
     p(90.0000) =     44.630 ms/op
     p(95.0000) =     50.017 ms/op
     p(99.0000) =     73.998 ms/op
     p(99.9000) =     74.318 ms/op
     p(99.9900) =     74.318 ms/op
     p(99.9990) =     74.318 ms/op
     p(99.9999) =     74.318 ms/op
    p(100.0000) =     74.318 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 8.14% complete, ETA 00:28:47
# Fork: 1 of 3
# Warmup Iteration   1: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 42, 43, 54, 58, 58, 58, 58 ms/op
# Warmup Iteration   2: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 51, 69, 79, 79, 79, 79, 79 ms/op
# Warmup Iteration   3: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 51, 67, 80, 80, 80, 80, 80 ms/op
Iteration   1: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 49, 51, 66, 81, 81, 81, 81, 81 ms/op
Iteration   2: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 46, 46, 46, 48, 48, 48, 48, 48 ms/op
Iteration   3: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 48, 51, 62, 79, 79, 79, 79, 79 ms/op

# Run progress: 8.53% complete, ETA 00:28:40
# Fork: 2 of 3
# Warmup Iteration   1: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 39, 41, 50, 54, 54, 54, 54 ms/op
# Warmup Iteration   2: n = 28, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 35, 46, 56, 59, 59, 59, 59 ms/op
# Warmup Iteration   3: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 39, 53, 69, 73, 73, 73, 73 ms/op
Iteration   1: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 35, 35, 36, 36, 36, 36, 36 ms/op
Iteration   2: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 35, 35, 35, 36, 36, 36, 36 ms/op
Iteration   3: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 35, 35, 35, 35, 35, 35, 35 ms/op

# Run progress: 8.91% complete, ETA 00:28:31
# Fork: 3 of 3
# Warmup Iteration   1: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 45, 59, 98, 102, 102, 102, 102 ms/op
# Warmup Iteration   2: n = 26, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 40, 40, 41, 42, 42, 42, 42 ms/op
# Warmup Iteration   3: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 44, 69, 77, 78, 78, 78, 78 ms/op
Iteration   1: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 42, 59, 76, 79, 79, 79, 79 ms/op
Iteration   2: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 37, 39, 39, 39, 39, 39, 39 ms/op
Iteration   3: n = 22, mean = 47 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 44, 58, 74, 77, 77, 77, 77 ms/op


Result "readSeq":
  N = 219
  mean =     41.640 ±(99.9%) 1.956 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 85 
    [35.000, 40.000) = 30 
    [40.000, 45.000) = 36 
    [45.000, 50.000) = 27 
    [50.000, 55.000) = 31 
    [55.000, 60.000) = 2 
    [60.000, 65.000) = 3 
    [65.000, 70.000) = 1 
    [70.000, 75.000) = 0 
    [75.000, 80.000) = 3 
    [80.000, 85.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     34.472 ms/op
     p(50.0000) =     37.421 ms/op
     p(90.0000) =     51.184 ms/op
     p(95.0000) =     53.150 ms/op
     p(99.0000) =     79.036 ms/op
     p(99.9000) =     81.002 ms/op
     p(99.9900) =     81.002 ms/op
     p(99.9990) =     81.002 ms/op
     p(99.9999) =     81.002 ms/op
    p(100.0000) =     81.002 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 9.30% complete, ETA 00:28:23
# Fork: 1 of 3
# Warmup Iteration   1: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 66, 123, 164, 164, 164, 164, 164 ms/op
# Warmup Iteration   2: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 59, 60, 60, 60, 60, 60, 60 ms/op
# Warmup Iteration   3: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 59, 59, 59, 59, 59, 59, 59 ms/op
Iteration   1: n = 13, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 66, 125, 125, 125, 125, 125, 125 ms/op
Iteration   2: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 62, 65, 66, 66, 66, 66, 66 ms/op
Iteration   3: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 69, 101, 121, 121, 121, 121, 121 ms/op

# Run progress: 9.69% complete, ETA 00:28:15
# Fork: 2 of 3
# Warmup Iteration   1: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 61, 82, 99, 99, 99, 99, 99 ms/op
# Warmup Iteration   2: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 59, 61, 62, 62, 62, 62, 62 ms/op
# Warmup Iteration   3: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 59, 61, 62, 62, 62, 62, 62 ms/op
Iteration   1: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 59, 62, 62, 62, 62, 62, 62 ms/op
Iteration   2: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 67, 104, 125, 125, 125, 125, 125 ms/op
Iteration   3: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 67, 95, 117, 117, 117, 117, 117 ms/op

# Run progress: 10.08% complete, ETA 00:28:07
# Fork: 3 of 3
# Warmup Iteration   1: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 79, 134, 154, 154, 154, 154, 154 ms/op
# Warmup Iteration   2: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 70, 99, 116, 116, 116, 116, 116 ms/op
# Warmup Iteration   3: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 71, 109, 131, 131, 131, 131, 131 ms/op
Iteration   1: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 71, 126, 127, 127, 127, 127, 127 ms/op
Iteration   2: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 71, 128, 143, 143, 143, 143, 143 ms/op
Iteration   3: n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 74, 79, 117, 129, 129, 129, 129, 129 ms/op


Result "readXxh64":
  N = 128
  mean =     72.285 ±(99.9%) 4.975 ms/op

  Histogram, ms/op:
    [ 50.000,  60.000) = 16 
    [ 60.000,  70.000) = 65 
    [ 70.000,  80.000) = 31 
    [ 80.000,  90.000) = 4 
    [ 90.000, 100.000) = 2 
    [100.000, 110.000) = 1 
    [110.000, 120.000) = 1 
    [120.000, 130.000) = 7 
    [130.000, 140.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     58.982 ms/op
     p(50.0000) =     66.945 ms/op
     p(90.0000) =     86.875 ms/op
     p(95.0000) =    123.680 ms/op
     p(99.0000) =    138.725 ms/op
     p(99.9000) =    142.868 ms/op
     p(99.9900) =    142.868 ms/op
     p(99.9990) =    142.868 ms/op
     p(99.9999) =    142.868 ms/op
    p(100.0000) =    142.868 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 10.47% complete, ETA 00:27:58
# Fork: 1 of 3
# Warmup Iteration   1: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 68, 77, 102, 102, 102, 102, 102, 102 ms/op
# Warmup Iteration   2: n = 14, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 69, 115, 116, 116, 116, 116, 116 ms/op
# Warmup Iteration   3: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 77, 121, 121, 121, 121, 121, 121 ms/op
Iteration   1: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 76, 97, 108, 108, 108, 108, 108 ms/op
Iteration   2: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 67, 68, 69, 69, 69, 69, 69 ms/op
Iteration   3: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 77, 128, 129, 129, 129, 129, 129 ms/op

# Run progress: 10.85% complete, ETA 00:27:51
# Fork: 2 of 3
# Warmup Iteration   1: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 66, 118, 155, 155, 155, 155, 155 ms/op
# Warmup Iteration   2: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 61, 62, 62, 62, 62, 62, 62 ms/op
# Warmup Iteration   3: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 66, 97, 119, 119, 119, 119, 119 ms/op
Iteration   1: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 58, 59, 59, 59, 59, 59, 59 ms/op
Iteration   2: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 66, 96, 120, 120, 120, 120, 120 ms/op
Iteration   3: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 58, 61, 61, 61, 61, 61, 61 ms/op

# Run progress: 11.24% complete, ETA 00:27:43
# Fork: 3 of 3
# Warmup Iteration   1: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 68, 123, 163, 163, 163, 163, 163 ms/op
# Warmup Iteration   2: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 60, 61, 62, 62, 62, 62, 62 ms/op
# Warmup Iteration   3: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 60, 62, 63, 63, 63, 63, 63 ms/op
Iteration   1: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 73, 104, 121, 121, 121, 121, 121 ms/op
Iteration   2: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 68, 102, 123, 123, 123, 123, 123 ms/op
Iteration   3: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 60, 60, 60, 60, 60, 60, 60 ms/op


Result "readXxh64":
  N = 135
  mean =     68.405 ±(99.9%) 3.918 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 48 
    [ 60.000,  65.000) = 9 
    [ 65.000,  70.000) = 40 
    [ 70.000,  75.000) = 12 
    [ 75.000,  80.000) = 15 
    [ 80.000,  85.000) = 3 
    [ 85.000,  90.000) = 1 
    [ 90.000,  95.000) = 1 
    [ 95.000, 100.000) = 0 
    [100.000, 105.000) = 0 
    [105.000, 110.000) = 1 
    [110.000, 115.000) = 0 
    [115.000, 120.000) = 1 
    [120.000, 125.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =     57.803 ms/op
     p(50.0000) =     67.109 ms/op
     p(90.0000) =     77.149 ms/op
     p(95.0000) =     94.660 ms/op
     p(99.0000) =    127.266 ms/op
     p(99.9000) =    129.106 ms/op
     p(99.9900) =    129.106 ms/op
     p(99.9990) =    129.106 ms/op
     p(99.9999) =    129.106 ms/op
    p(100.0000) =    129.106 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 11.63% complete, ETA 00:27:34
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 204 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 162, 197, 260, 260, 260, 260, 260, 260 ms/op
# Warmup Iteration   2: n = 5, mean = 193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 158, 168, 239, 239, 239, 239, 239, 239 ms/op
# Warmup Iteration   3: n = 5, mean = 193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 167, 176, 235, 235, 235, 235, 235, 235 ms/op
Iteration   1: n = 5, mean = 190 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 164, 169, 228, 228, 228, 228, 228, 228 ms/op
Iteration   2: n = 5, mean = 189 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 160, 169, 229, 229, 229, 229, 229, 229 ms/op
Iteration   3: n = 6, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 157, 165, 165, 165, 165, 165, 165 ms/op

# Run progress: 12.02% complete, ETA 00:27:24
# Fork: 2 of 3
# Warmup Iteration   1: n = 5, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 150, 236, 236, 236, 236, 236, 236 ms/op
# Warmup Iteration   2: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 177, 217, 217, 217, 217, 217, 217 ms/op
# Warmup Iteration   3: n = 7, mean = 140 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 144, 149, 149, 149, 149, 149, 149 ms/op
Iteration   1: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 153, 213, 213, 213, 213, 213, 213 ms/op
Iteration   2: n = 6, mean = 155 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 146, 180, 180, 180, 180, 180, 180 ms/op
Iteration   3: n = 6, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 152, 218, 218, 218, 218, 218, 218 ms/op

# Run progress: 12.40% complete, ETA 00:27:14
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 173 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 152, 237, 237, 237, 237, 237, 237 ms/op
# Warmup Iteration   2: n = 6, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 148, 208, 208, 208, 208, 208, 208 ms/op
# Warmup Iteration   3: n = 6, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 151, 217, 217, 217, 217, 217, 217 ms/op
Iteration   1: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 152, 214, 214, 214, 214, 214, 214 ms/op
Iteration   2: n = 6, mean = 168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 153, 214, 214, 214, 214, 214, 214 ms/op
Iteration   3: n = 6, mean = 171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 148, 229, 229, 229, 229, 229, 229 ms/op


Result "write":
  N = 52
  mean =    168.551 ±(99.9%) 14.307 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 2 
    [137.500, 150.000) = 14 
    [150.000, 162.500) = 14 
    [162.500, 175.000) = 8 
    [175.000, 187.500) = 1 
    [187.500, 200.000) = 0 
    [200.000, 212.500) = 4 
    [212.500, 225.000) = 6 
    [225.000, 237.500) = 3 
    [237.500, 250.000) = 0 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    128.451 ms/op
     p(50.0000) =    154.403 ms/op
     p(90.0000) =    219.572 ms/op
     p(95.0000) =    228.078 ms/op
     p(99.0000) =    228.852 ms/op
     p(99.9000) =    228.852 ms/op
     p(99.9900) =    228.852 ms/op
     p(99.9990) =    228.852 ms/op
     p(99.9999) =    228.852 ms/op
    p(100.0000) =    228.852 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 12.79% complete, ETA 00:27:04
# Fork: 1 of 3
# Warmup Iteration   1: n = 3, mean = 210 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 182, 198, 249, 249, 249, 249, 249, 249 ms/op
# Warmup Iteration   2: n = 6, mean = 182 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 159, 162, 268, 268, 268, 268, 268, 268 ms/op
# Warmup Iteration   3: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 185, 188, 188, 188, 188, 188, 188 ms/op
Iteration   1: n = 6, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 159, 161, 164, 164, 164, 164, 164, 164 ms/op
Iteration   2: n = 5, mean = 198 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 162, 182, 251, 251, 251, 251, 251, 251 ms/op
Iteration   3: n = 5, mean = 216 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 182, 204, 259, 259, 259, 259, 259, 259 ms/op

# Run progress: 13.18% complete, ETA 00:26:57
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 200 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 181, 191, 237, 237, 237, 237, 237, 237 ms/op
# Warmup Iteration   2: n = 6, mean = 180 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 162, 169, 224, 224, 224, 224, 224, 224 ms/op
# Warmup Iteration   3: n = 5, mean = 215 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 186, 186, 262, 262, 262, 262, 262, 262 ms/op
Iteration   1: n = 5, mean = 200 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 179, 189, 256, 256, 256, 256, 256, 256 ms/op
Iteration   2: n = 5, mean = 209 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 185, 186, 255, 255, 255, 255, 255, 255 ms/op
Iteration   3: n = 5, mean = 203 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 181, 195, 252, 252, 252, 252, 252, 252 ms/op

# Run progress: 13.57% complete, ETA 00:26:50
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 232 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 189, 198, 308, 308, 308, 308, 308, 308 ms/op
# Warmup Iteration   2: n = 5, mean = 198 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 182, 187, 247, 247, 247, 247, 247, 247 ms/op
# Warmup Iteration   3: n = 6, mean = 164 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 162, 164, 165, 165, 165, 165, 165, 165 ms/op
Iteration   1: n = 6, mean = 165 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 164, 164, 170, 170, 170, 170, 170, 170 ms/op
Iteration   2: n = 5, mean = 190 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 164, 196, 223, 223, 223, 223, 223, 223 ms/op
Iteration   3: n = 5, mean = 198 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 173, 187, 253, 253, 253, 253, 253, 253 ms/op


Result "write":
  N = 47
  mean =    192.062 ±(99.9%) 15.660 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 0 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 6 
    [162.500, 175.000) = 10 
    [175.000, 187.500) = 11 
    [187.500, 200.000) = 8 
    [200.000, 212.500) = 2 
    [212.500, 225.000) = 2 
    [225.000, 237.500) = 1 
    [237.500, 250.000) = 1 
    [250.000, 262.500) = 6 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    158.859 ms/op
     p(50.0000) =    185.860 ms/op
     p(90.0000) =    252.287 ms/op
     p(95.0000) =    255.486 ms/op
     p(99.0000) =    259.260 ms/op
     p(99.9000) =    259.260 ms/op
     p(99.9900) =    259.260 ms/op
     p(99.9990) =    259.260 ms/op
     p(99.9999) =    259.260 ms/op
    p(100.0000) =    259.260 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 13.95% complete, ETA 00:26:40
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 198 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 190, 267, 267, 267, 267, 267, 267 ms/op
# Warmup Iteration   2: n = 6, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 149, 211, 211, 211, 211, 211, 211 ms/op
# Warmup Iteration   3: n = 6, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 152, 219, 219, 219, 219, 219, 219 ms/op
Iteration   1: n = 8, mean = 125 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 125, 126, 126, 126, 126, 126, 126 ms/op
Iteration   2: n = 7, mean = 149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 135, 213, 213, 213, 213, 213, 213 ms/op
Iteration   3: n = 6, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 142, 243, 243, 243, 243, 243, 243 ms/op

# Run progress: 14.34% complete, ETA 00:26:32
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 149, 243, 243, 243, 243, 243, 243 ms/op
# Warmup Iteration   2: n = 7, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 128, 145, 145, 145, 145, 145, 145 ms/op
# Warmup Iteration   3: n = 6, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 153, 236, 236, 236, 236, 236, 236 ms/op
Iteration   1: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 177, 214, 214, 214, 214, 214, 214 ms/op
Iteration   2: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 152, 212, 212, 212, 212, 212, 212 ms/op
Iteration   3: n = 6, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 145, 239, 239, 239, 239, 239, 239 ms/op

# Run progress: 14.73% complete, ETA 00:26:23
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 174 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 168, 215, 215, 215, 215, 215, 215 ms/op
# Warmup Iteration   2: n = 7, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 128, 147, 147, 147, 147, 147, 147 ms/op
# Warmup Iteration   3: n = 6, mean = 155 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 144, 209, 209, 209, 209, 209, 209 ms/op
Iteration   1: n = 7, mean = 148 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 133, 202, 202, 202, 202, 202, 202 ms/op
Iteration   2: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 151, 199, 199, 199, 199, 199, 199 ms/op
Iteration   3: n = 7, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 126, 143, 143, 143, 143, 143, 143 ms/op


Result "write":
  N = 59
  mean =    152.808 ±(99.9%) 14.069 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 3 
    [125.000, 137.500) = 17 
    [137.500, 150.000) = 20 
    [150.000, 162.500) = 8 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 0 
    [187.500, 200.000) = 2 
    [200.000, 212.500) = 5 
    [212.500, 225.000) = 2 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 2 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    124.649 ms/op
     p(50.0000) =    143.655 ms/op
     p(90.0000) =    211.026 ms/op
     p(95.0000) =    213.910 ms/op
     p(99.0000) =    243.007 ms/op
     p(99.9000) =    243.007 ms/op
     p(99.9900) =    243.007 ms/op
     p(99.9990) =    243.007 ms/op
     p(99.9999) =    243.007 ms/op
    p(100.0000) =    243.007 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 15.12% complete, ETA 00:26:13
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 200 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 195, 234, 234, 234, 234, 234, 234 ms/op
# Warmup Iteration   2: n = 5, mean = 203 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 166, 199, 263, 263, 263, 263, 263, 263 ms/op
# Warmup Iteration   3: n = 5, mean = 192 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 164, 173, 261, 261, 261, 261, 261, 261 ms/op
Iteration   1: n = 5, mean = 213 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 180, 189, 257, 257, 257, 257, 257, 257 ms/op
Iteration   2: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 163, 170, 204, 204, 204, 204, 204, 204 ms/op
Iteration   3: n = 5, mean = 200 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 175, 190, 254, 254, 254, 254, 254, 254 ms/op

# Run progress: 15.50% complete, ETA 00:26:06
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 229 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 196, 226, 269, 269, 269, 269, 269, 269 ms/op
# Warmup Iteration   2: n = 5, mean = 213 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 187, 199, 245, 245, 245, 245, 245, 245 ms/op
# Warmup Iteration   3: n = 5, mean = 185 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 171, 194, 196, 196, 196, 196, 196, 196 ms/op
Iteration   1: n = 5, mean = 218 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 195, 198, 256, 256, 256, 256, 256, 256 ms/op
Iteration   2: n = 6, mean = 168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 167, 186, 186, 186, 186, 186, 186 ms/op
Iteration   3: n = 5, mean = 214 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 185, 189, 255, 255, 255, 255, 255, 255 ms/op

# Run progress: 15.89% complete, ETA 00:25:59
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 213 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 187, 191, 284, 284, 284, 284, 284, 284 ms/op
# Warmup Iteration   2: n = 6, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 163, 166, 176, 176, 176, 176, 176, 176 ms/op
# Warmup Iteration   3: n = 6, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 166, 167, 168, 168, 168, 168, 168, 168 ms/op
Iteration   1: n = 4, mean = 243 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 194, 256, 267, 267, 267, 267, 267, 267 ms/op
Iteration   2: n = 5, mean = 200 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 186, 188, 250, 250, 250, 250, 250, 250 ms/op
Iteration   3: n = 6, mean = 172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 166, 168, 189, 189, 189, 189, 189, 189 ms/op


Result "write":
  N = 47
  mean =    198.248 ±(99.9%) 17.299 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 0 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 2 
    [162.500, 175.000) = 11 
    [175.000, 187.500) = 8 
    [187.500, 200.000) = 14 
    [200.000, 212.500) = 1 
    [212.500, 225.000) = 0 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 3 
    [250.000, 262.500) = 6 
    [262.500, 275.000) = 2 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    161.219 ms/op
     p(50.0000) =    188.744 ms/op
     p(90.0000) =    255.171 ms/op
     p(95.0000) =    260.938 ms/op
     p(99.0000) =    267.125 ms/op
     p(99.9000) =    267.125 ms/op
     p(99.9900) =    267.125 ms/op
     p(99.9990) =    267.125 ms/op
     p(99.9999) =    267.125 ms/op
    p(100.0000) =    267.125 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 16.28% complete, ETA 00:25:51
# Fork: 1 of 3
# Warmup Iteration   1: n = 5, mean = 166 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 149, 237, 237, 237, 237, 237, 237 ms/op
# Warmup Iteration   2: n = 6, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 148, 215, 215, 215, 215, 215, 215 ms/op
# Warmup Iteration   3: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 153, 153, 225, 225, 225, 225, 225, 225 ms/op
Iteration   1: n = 6, mean = 155 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 145, 210, 210, 210, 210, 210, 210 ms/op
Iteration   2: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 129, 130, 130, 130, 130, 130, 130 ms/op
Iteration   3: n = 6, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 152, 216, 216, 216, 216, 216, 216 ms/op

# Run progress: 16.67% complete, ETA 00:25:43
# Fork: 2 of 3
# Warmup Iteration   1: n = 5, mean = 155 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 144, 191, 191, 191, 191, 191, 191 ms/op
# Warmup Iteration   2: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 154, 208, 208, 208, 208, 208, 208 ms/op
# Warmup Iteration   3: n = 6, mean = 168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 155, 213, 213, 213, 213, 213, 213 ms/op
Iteration   1: n = 6, mean = 184 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 198, 212, 212, 212, 212, 212, 212 ms/op
Iteration   2: n = 7, mean = 141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 143, 150, 150, 150, 150, 150, 150 ms/op
Iteration   3: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 154, 217, 217, 217, 217, 217, 217 ms/op

# Run progress: 17.05% complete, ETA 00:25:35
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 152, 232, 232, 232, 232, 232, 232 ms/op
# Warmup Iteration   2: n = 6, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 148, 205, 205, 205, 205, 205, 205 ms/op
# Warmup Iteration   3: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 130, 131, 131, 131, 131, 131, 131 ms/op
Iteration   1: n = 5, mean = 201 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 213, 220, 220, 220, 220, 220, 220 ms/op
Iteration   2: n = 7, mean = 139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 142, 147, 147, 147, 147, 147, 147 ms/op
Iteration   3: n = 5, mean = 209 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 219, 275, 275, 275, 275, 275, 275 ms/op


Result "write":
  N = 56
  mean =    161.890 ±(99.9%) 16.621 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 13 
    [137.500, 150.000) = 21 
    [150.000, 162.500) = 7 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 0 
    [187.500, 200.000) = 3 
    [200.000, 212.500) = 3 
    [212.500, 225.000) = 7 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 1 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 1 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    128.713 ms/op
     p(50.0000) =    146.407 ms/op
     p(90.0000) =    216.583 ms/op
     p(95.0000) =    223.124 ms/op
     p(99.0000) =    274.727 ms/op
     p(99.9000) =    274.727 ms/op
     p(99.9900) =    274.727 ms/op
     p(99.9990) =    274.727 ms/op
     p(99.9999) =    274.727 ms/op
    p(100.0000) =    274.727 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 17.44% complete, ETA 00:25:27
# Fork: 1 of 3
# Warmup Iteration   1: n = 3, mean = 233 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 180, 199, 319, 319, 319, 319, 319, 319 ms/op
# Warmup Iteration   2: n = 5, mean = 224 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 190, 191, 299, 299, 299, 299, 299, 299 ms/op
# Warmup Iteration   3: n = 5, mean = 210 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 182, 192, 252, 252, 252, 252, 252, 252 ms/op
Iteration   1: n = 5, mean = 212 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 183, 190, 306, 306, 306, 306, 306, 306 ms/op
Iteration   2: n = 4, mean = 248 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 180, 253, 308, 308, 308, 308, 308, 308 ms/op
Iteration   3: n = 5, mean = 228 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 185, 253, 260, 260, 260, 260, 260, 260 ms/op

# Run progress: 17.83% complete, ETA 00:25:20
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 201 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 183, 190, 239, 239, 239, 239, 239, 239 ms/op
# Warmup Iteration   2: n = 6, mean = 182 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 159, 167, 226, 226, 226, 226, 226, 226 ms/op
# Warmup Iteration   3: n = 6, mean = 173 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 176, 184, 184, 184, 184, 184, 184 ms/op
Iteration   1: n = 5, mean = 195 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 175, 184, 251, 251, 251, 251, 251, 251 ms/op
Iteration   2: n = 5, mean = 191 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 160, 182, 249, 249, 249, 249, 249, 249 ms/op
Iteration   3: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 159, 160, 175, 175, 175, 175, 175, 175 ms/op

# Run progress: 18.22% complete, ETA 00:25:13
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 255 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 200, 234, 330, 330, 330, 330, 330, 330 ms/op
# Warmup Iteration   2: n = 5, mean = 204 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 170, 190, 246, 246, 246, 246, 246, 246 ms/op
# Warmup Iteration   3: n = 6, mean = 164 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 162, 163, 169, 169, 169, 169, 169, 169 ms/op
Iteration   1: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 162, 164, 164, 164, 164, 164, 164, 164 ms/op
Iteration   2: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 163, 163, 163, 163, 163, 163, 163 ms/op
Iteration   3: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 162, 163, 164, 164, 164, 164, 164, 164 ms/op


Result "write":
  N = 48
  mean =    188.263 ±(99.9%) 20.227 ms/op

  Histogram, ms/op:
    [100.000, 125.000) = 0 
    [125.000, 150.000) = 0 
    [150.000, 175.000) = 26 
    [175.000, 200.000) = 13 
    [200.000, 225.000) = 0 
    [225.000, 250.000) = 1 
    [250.000, 275.000) = 6 
    [275.000, 300.000) = 0 
    [300.000, 325.000) = 2 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    158.597 ms/op
     p(50.0000) =    169.869 ms/op
     p(90.0000) =    255.905 ms/op
     p(95.0000) =    285.016 ms/op
     p(99.0000) =    308.281 ms/op
     p(99.9000) =    308.281 ms/op
     p(99.9900) =    308.281 ms/op
     p(99.9990) =    308.281 ms/op
     p(99.9999) =    308.281 ms/op
    p(100.0000) =    308.281 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 18.60% complete, ETA 00:25:04
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 151, 268, 268, 268, 268, 268, 268 ms/op
# Warmup Iteration   2: n = 6, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 147, 204, 204, 204, 204, 204, 204 ms/op
# Warmup Iteration   3: n = 6, mean = 174 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 150, 152, 219, 219, 219, 219, 219, 219 ms/op
Iteration   1: n = 6, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 150, 218, 218, 218, 218, 218, 218 ms/op
Iteration   2: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 130, 133, 133, 133, 133, 133, 133 ms/op
Iteration   3: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 128, 133, 133, 133, 133, 133, 133 ms/op

# Run progress: 18.99% complete, ETA 00:24:57
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 150, 227, 227, 227, 227, 227, 227 ms/op
# Warmup Iteration   2: n = 7, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 129, 145, 145, 145, 145, 145, 145 ms/op
# Warmup Iteration   3: n = 7, mean = 149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 143, 203, 203, 203, 203, 203, 203 ms/op
Iteration   1: n = 6, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 146, 209, 209, 209, 209, 209, 209 ms/op
Iteration   2: n = 8, mean = 126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 126, 129, 129, 129, 129, 129, 129 ms/op
Iteration   3: n = 6, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 145, 206, 206, 206, 206, 206, 206 ms/op

# Run progress: 19.38% complete, ETA 00:24:47
# Fork: 3 of 3
# Warmup Iteration   1: n = 5, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 145, 195, 195, 195, 195, 195, 195 ms/op
# Warmup Iteration   2: n = 6, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 160, 213, 213, 213, 213, 213, 213 ms/op
# Warmup Iteration   3: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 153, 219, 219, 219, 219, 219, 219 ms/op
Iteration   1: n = 7, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 136, 136, 136, 136, 136, 136, 136 ms/op
Iteration   2: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 128, 136, 136, 136, 136, 136, 136 ms/op
Iteration   3: n = 6, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 158, 214, 214, 214, 214, 214, 214 ms/op


Result "write":
  N = 63
  mean =    141.296 ±(99.9%) 9.448 ms/op

  Histogram, ms/op:
    [120.000, 130.000) = 24 
    [130.000, 140.000) = 16 
    [140.000, 150.000) = 11 
    [150.000, 160.000) = 6 
    [160.000, 170.000) = 1 
    [170.000, 180.000) = 0 
    [180.000, 190.000) = 1 
    [190.000, 200.000) = 0 
    [200.000, 210.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    125.567 ms/op
     p(50.0000) =    134.480 ms/op
     p(90.0000) =    158.702 ms/op
     p(95.0000) =    208.824 ms/op
     p(99.0000) =    218.104 ms/op
     p(99.9000) =    218.104 ms/op
     p(99.9900) =    218.104 ms/op
     p(99.9990) =    218.104 ms/op
     p(99.9999) =    218.104 ms/op
    p(100.0000) =    218.104 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 19.77% complete, ETA 00:24:39
# Fork: 1 of 3
# Warmup Iteration   1: n = 3, mean = 243 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 196, 219, 316, 316, 316, 316, 316, 316 ms/op
# Warmup Iteration   2: n = 5, mean = 192 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 187, 188, 208, 208, 208, 208, 208, 208 ms/op
# Warmup Iteration   3: n = 6, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 165, 170, 171, 171, 171, 171, 171, 171 ms/op
Iteration   1: n = 5, mean = 201 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 173, 195, 251, 251, 251, 251, 251, 251 ms/op
Iteration   2: n = 6, mean = 172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 170, 171, 177, 177, 177, 177, 177, 177 ms/op
Iteration   3: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 170, 170, 171, 171, 171, 171, 171, 171 ms/op

# Run progress: 20.16% complete, ETA 00:24:32
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 198 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 185, 192, 225, 225, 225, 225, 225, 225 ms/op
# Warmup Iteration   2: n = 6, mean = 165 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 163, 164, 175, 175, 175, 175, 175, 175 ms/op
# Warmup Iteration   3: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 162, 163, 164, 164, 164, 164, 164, 164 ms/op
Iteration   1: n = 5, mean = 195 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 175, 187, 245, 245, 245, 245, 245, 245 ms/op
Iteration   2: n = 6, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 162, 162, 164, 164, 164, 164, 164, 164 ms/op
Iteration   3: n = 6, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 162, 163, 163, 163, 163, 163, 163 ms/op

# Run progress: 20.54% complete, ETA 00:24:24
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 194 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 179, 182, 233, 233, 233, 233, 233, 233 ms/op
# Warmup Iteration   2: n = 5, mean = 211 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 181, 182, 271, 271, 271, 271, 271, 271 ms/op
# Warmup Iteration   3: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 159, 182, 186, 186, 186, 186, 186, 186 ms/op
Iteration   1: n = 6, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 159, 161, 166, 166, 166, 166, 166, 166 ms/op
Iteration   2: n = 5, mean = 223 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 180, 247, 257, 257, 257, 257, 257, 257 ms/op
Iteration   3: n = 5, mean = 215 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 177, 196, 274, 274, 274, 274, 274, 274 ms/op


Result "write":
  N = 50
  mean =    182.940 ±(99.9%) 14.968 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 0 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 10 
    [162.500, 175.000) = 20 
    [175.000, 187.500) = 9 
    [187.500, 200.000) = 4 
    [200.000, 212.500) = 0 
    [212.500, 225.000) = 0 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 3 
    [250.000, 262.500) = 3 
    [262.500, 275.000) = 1 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    159.384 ms/op
     p(50.0000) =    170.787 ms/op
     p(90.0000) =    246.704 ms/op
     p(95.0000) =    253.991 ms/op
     p(99.0000) =    273.678 ms/op
     p(99.9000) =    273.678 ms/op
     p(99.9900) =    273.678 ms/op
     p(99.9990) =    273.678 ms/op
     p(99.9999) =    273.678 ms/op
    p(100.0000) =    273.678 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readCrc
# Parameters: (forceSafe = true, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 20.93% complete, ETA 00:24:17
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 117, 128, 143, 143, 143, 143, 143, 143 ms/op
# Warmup Iteration   2: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 111, 111, 132, 132, 132, 132, 132, 132 ms/op
# Warmup Iteration   3: n = 10, mean = 110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 108, 109, 119, 120, 120, 120, 120, 120 ms/op
Iteration   1: n = 9, mean = 120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 109, 111, 190, 190, 190, 190, 190, 190 ms/op
Iteration   2: n = 10, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 109, 110, 115, 116, 116, 116, 116, 116 ms/op
Iteration   3: n = 7, mean = 145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 133, 192, 192, 192, 192, 192, 192 ms/op

# Run progress: 21.32% complete, ETA 00:24:11
# Fork: 2 of 3
# Warmup Iteration   1: n = 7, mean = 143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 131, 211, 211, 211, 211, 211, 211 ms/op
# Warmup Iteration   2: n = 8, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 123, 194, 194, 194, 194, 194, 194 ms/op
# Warmup Iteration   3: n = 8, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 112, 123, 193, 193, 193, 193, 193, 193 ms/op
Iteration   1: n = 7, mean = 143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 128, 190, 190, 190, 190, 190, 190 ms/op
Iteration   2: n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 111, 129, 129, 129, 129, 129, 129 ms/op
Iteration   3: n = 8, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 116, 123, 197, 197, 197, 197, 197, 197 ms/op

# Run progress: 21.71% complete, ETA 00:24:04
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 117, 132, 142, 142, 142, 142, 142, 142 ms/op
# Warmup Iteration   2: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 109, 123, 197, 197, 197, 197, 197, 197 ms/op
# Warmup Iteration   3: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 108, 109, 181, 181, 181, 181, 181, 181 ms/op
Iteration   1: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 127, 193, 193, 193, 193, 193, 193 ms/op
Iteration   2: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 108, 109, 122, 122, 122, 122, 122, 122 ms/op
Iteration   3: n = 8, mean = 138 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 119, 123, 238, 238, 238, 238, 238, 238 ms/op


Result "readCrc":
  N = 74
  mean =    127.579 ±(99.9%) 10.725 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 26 
    [112.500, 125.000) = 26 
    [125.000, 137.500) = 13 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 2 
    [187.500, 200.000) = 6 
    [200.000, 212.500) = 0 
    [212.500, 225.000) = 0 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 1 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    108.397 ms/op
     p(50.0000) =    122.552 ms/op
     p(90.0000) =    188.088 ms/op
     p(95.0000) =    192.086 ms/op
     p(99.0000) =    237.765 ms/op
     p(99.9000) =    237.765 ms/op
     p(99.9900) =    237.765 ms/op
     p(99.9990) =    237.765 ms/op
     p(99.9999) =    237.765 ms/op
    p(100.0000) =    237.765 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readCrc
# Parameters: (forceSafe = true, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 22.09% complete, ETA 00:23:57
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 115, 127, 146, 146, 146, 146, 146, 146 ms/op
# Warmup Iteration   2: n = 9, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 109, 109, 127, 127, 127, 127, 127, 127 ms/op
# Warmup Iteration   3: n = 10, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 109, 109, 147, 151, 151, 151, 151, 151 ms/op
Iteration   1: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 125, 195, 195, 195, 195, 195, 195 ms/op
Iteration   2: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 120, 122, 191, 191, 191, 191, 191, 191 ms/op
Iteration   3: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 108, 108, 109, 109, 109, 109, 109, 109 ms/op

# Run progress: 22.48% complete, ETA 00:23:51
# Fork: 2 of 3
# Warmup Iteration   1: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 131, 217, 217, 217, 217, 217, 217 ms/op
# Warmup Iteration   2: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 109, 109, 127, 127, 127, 127, 127, 127 ms/op
# Warmup Iteration   3: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 109, 127, 212, 212, 212, 212, 212, 212 ms/op
Iteration   1: n = 7, mean = 143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 125, 193, 193, 193, 193, 193, 193 ms/op
Iteration   2: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 118, 129, 129, 129, 129, 129, 129 ms/op
Iteration   3: n = 10, mean = 110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 108, 110, 113, 113, 113, 113, 113, 113 ms/op

# Run progress: 22.87% complete, ETA 00:23:45
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 138 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 118, 130, 206, 206, 206, 206, 206, 206 ms/op
# Warmup Iteration   2: n = 10, mean = 110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 108, 108, 121, 122, 122, 122, 122, 122 ms/op
# Warmup Iteration   3: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 137, 191, 191, 191, 191, 191, 191 ms/op
Iteration   1: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 121, 130, 198, 198, 198, 198, 198, 198 ms/op
Iteration   2: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 108, 126, 126, 126, 126, 126, 126 ms/op
Iteration   3: n = 9, mean = 120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 108, 109, 202, 202, 202, 202, 202, 202 ms/op


Result "readCrc":
  N = 76
  mean =    124.120 ±(99.9%) 9.784 ms/op

  Histogram, ms/op:
    [100.000, 110.000) = 26 
    [110.000, 120.000) = 14 
    [120.000, 130.000) = 25 
    [130.000, 140.000) = 2 
    [140.000, 150.000) = 0 
    [150.000, 160.000) = 1 
    [160.000, 170.000) = 0 
    [170.000, 180.000) = 1 
    [180.000, 190.000) = 1 
    [190.000, 200.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =    107.479 ms/op
     p(50.0000) =    117.572 ms/op
     p(90.0000) =    176.737 ms/op
     p(95.0000) =    193.738 ms/op
     p(99.0000) =    201.589 ms/op
     p(99.9000) =    201.589 ms/op
     p(99.9900) =    201.589 ms/op
     p(99.9990) =    201.589 ms/op
     p(99.9999) =    201.589 ms/op
    p(100.0000) =    201.589 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readCrc
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 23.26% complete, ETA 00:23:38
# Fork: 1 of 3
# Warmup Iteration   1: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 102, 172, 179, 179, 179, 179, 179 ms/op
# Warmup Iteration   2: n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 91, 93, 93, 93, 93, 93, 93 ms/op
# Warmup Iteration   3: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 101, 158, 164, 164, 164, 164, 164 ms/op
Iteration   1: n = 9, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 100, 190, 190, 190, 190, 190, 190 ms/op
Iteration   2: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 102, 158, 164, 164, 164, 164, 164 ms/op
Iteration   3: n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 91, 92, 93, 93, 93, 93, 93 ms/op

# Run progress: 23.64% complete, ETA 00:23:31
# Fork: 2 of 3
# Warmup Iteration   1: n = 9, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 102, 179, 179, 179, 179, 179, 179 ms/op
# Warmup Iteration   2: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 102, 155, 161, 161, 161, 161, 161 ms/op
# Warmup Iteration   3: n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 91, 92, 93, 93, 93, 93, 93 ms/op
Iteration   1: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 97, 100, 136, 136, 136, 136, 136, 136 ms/op
Iteration   2: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 104, 160, 165, 165, 165, 165, 165 ms/op
Iteration   3: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 92, 93, 93, 93, 93, 93, 93 ms/op

# Run progress: 24.03% complete, ETA 00:23:25
# Fork: 3 of 3
# Warmup Iteration   1: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 102, 171, 179, 179, 179, 179, 179 ms/op
# Warmup Iteration   2: n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 91, 92, 92, 92, 92, 92, 92 ms/op
# Warmup Iteration   3: n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 102, 166, 166, 166, 166, 166, 166 ms/op
Iteration   1: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 91, 103, 103, 103, 103, 103, 103 ms/op
Iteration   2: n = 12, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 91, 91, 92, 92, 92, 92, 92 ms/op
Iteration   3: n = 10, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 99, 166, 168, 168, 168, 168, 168 ms/op


Result "readCrc":
  N = 94
  mean =    101.158 ±(99.9%) 6.266 ms/op

  Histogram, ms/op:
    [ 90.000, 100.000) = 57 
    [100.000, 110.000) = 28 
    [110.000, 120.000) = 1 
    [120.000, 130.000) = 1 
    [130.000, 140.000) = 2 
    [140.000, 150.000) = 1 
    [150.000, 160.000) = 0 
    [160.000, 170.000) = 3 
    [170.000, 180.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     90.440 ms/op
     p(50.0000) =     99.156 ms/op
     p(90.0000) =    109.773 ms/op
     p(95.0000) =    150.471 ms/op
     p(99.0000) =    189.792 ms/op
     p(99.9000) =    189.792 ms/op
     p(99.9900) =    189.792 ms/op
     p(99.9990) =    189.792 ms/op
     p(99.9999) =    189.792 ms/op
    p(100.0000) =    189.792 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readCrc
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 24.42% complete, ETA 00:23:18
# Fork: 1 of 3
# Warmup Iteration   1: n = 11, mean = 95 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 86, 97, 109, 112, 112, 112, 112, 112 ms/op
# Warmup Iteration   2: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 86, 87, 87, 88, 88, 88, 88, 88 ms/op
# Warmup Iteration   3: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 97, 158, 164, 164, 164, 164, 164 ms/op
Iteration   1: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 97, 155, 161, 161, 161, 161, 161 ms/op
Iteration   2: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 86, 86, 87, 88, 88, 88, 88, 88 ms/op
Iteration   3: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 97, 161, 168, 168, 168, 168, 168 ms/op

# Run progress: 24.81% complete, ETA 00:23:11
# Fork: 2 of 3
# Warmup Iteration   1: n = 11, mean = 98 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 99, 111, 114, 114, 114, 114, 114 ms/op
# Warmup Iteration   2: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 89, 90, 90, 90, 90, 90, 90 ms/op
# Warmup Iteration   3: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 99, 162, 168, 168, 168, 168, 168 ms/op
Iteration   1: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 104, 149, 154, 154, 154, 154, 154 ms/op
Iteration   2: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 100, 158, 164, 164, 164, 164, 164 ms/op
Iteration   3: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 99, 154, 159, 159, 159, 159, 159 ms/op

# Run progress: 25.19% complete, ETA 00:23:04
# Fork: 3 of 3
# Warmup Iteration   1: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 98, 173, 181, 181, 181, 181, 181 ms/op
# Warmup Iteration   2: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 87, 88, 88, 88, 88, 88, 88 ms/op
# Warmup Iteration   3: n = 11, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 87, 162, 163, 163, 163, 163, 163 ms/op
Iteration   1: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 102, 157, 163, 163, 163, 163, 163 ms/op
Iteration   2: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 102, 159, 165, 165, 165, 165, 165 ms/op
Iteration   3: n = 10, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 100, 165, 165, 165, 165, 165, 165 ms/op


Result "readCrc":
  N = 92
  mean =    104.162 ±(99.9%) 7.160 ms/op

  Histogram, ms/op:
    [ 80.000,  85.000) = 0 
    [ 85.000,  90.000) = 15 
    [ 90.000,  95.000) = 4 
    [ 95.000, 100.000) = 31 
    [100.000, 105.000) = 27 
    [105.000, 110.000) = 6 
    [110.000, 115.000) = 0 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 0 
    [150.000, 155.000) = 1 
    [155.000, 160.000) = 1 
    [160.000, 165.000) = 6 

  Percentiles, ms/op:
      p(0.0000) =     86.114 ms/op
     p(50.0000) =     99.615 ms/op
     p(90.0000) =    140.195 ms/op
     p(95.0000) =    164.364 ms/op
     p(99.0000) =    167.510 ms/op
     p(99.9000) =    167.510 ms/op
     p(99.9900) =    167.510 ms/op
     p(99.9990) =    167.510 ms/op
     p(99.9999) =    167.510 ms/op
    p(100.0000) =    167.510 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readKey
# Parameters: (forceSafe = true, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 25.58% complete, ETA 00:22:59
# Fork: 1 of 3
# Warmup Iteration   1: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 160, 166, 250, 250, 250, 250, 250, 250 ms/op
# Warmup Iteration   2: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 167, 227, 227, 227, 227, 227, 227 ms/op
# Warmup Iteration   3: n = 8, mean = 141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 139, 140, 145, 145, 145, 145, 145, 145 ms/op
Iteration   1: n = 6, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 153, 157, 224, 224, 224, 224, 224, 224 ms/op
Iteration   2: n = 8, mean = 140 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 139, 140, 144, 144, 144, 144, 144, 144 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-true-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-true-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 8, mean = 141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 140, 140, 146, 146, 146, 146, 146, 146 ms/op

# Run progress: 25.97% complete, ETA 00:22:53
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 184 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 171, 256, 256, 256, 256, 256, 256 ms/op
# Warmup Iteration   2: n = 6, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 170, 230, 230, 230, 230, 230, 230 ms/op
# Warmup Iteration   3: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 159, 159, 248, 248, 248, 248, 248, 248 ms/op
Iteration   1: n = 7, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 152, 222, 222, 222, 222, 222, 222 ms/op
Iteration   2: n = 8, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 135, 143, 143, 143, 143, 143, 143 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-true-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-true-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 154, 160, 227, 227, 227, 227, 227, 227 ms/op

# Run progress: 26.36% complete, ETA 00:22:47
# Fork: 3 of 3
# Warmup Iteration   1: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 157, 166, 249, 249, 249, 249, 249, 249 ms/op
# Warmup Iteration   2: n = 7, mean = 148 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 147, 158, 158, 158, 158, 158, 158 ms/op
# Warmup Iteration   3: n = 6, mean = 198 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 158, 210, 225, 225, 225, 225, 225, 225 ms/op
Iteration   1: n = 7, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 158, 212, 212, 212, 212, 212, 212 ms/op
Iteration   2: n = 8, mean = 141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 141, 145, 145, 145, 145, 145, 145 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-true-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-true-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 8, mean = 140 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 139, 139, 148, 148, 148, 148, 148, 148 ms/op


Result "readKey":
  N = 66
  mean =    149.502 ±(99.9%) 8.523 ms/op

  Histogram, ms/op:
    [130.000, 140.000) = 29 
    [140.000, 150.000) = 14 
    [150.000, 160.000) = 18 
    [160.000, 170.000) = 1 
    [170.000, 180.000) = 0 
    [180.000, 190.000) = 0 
    [190.000, 200.000) = 0 
    [200.000, 210.000) = 0 
    [210.000, 220.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    134.742 ms/op
     p(50.0000) =    140.902 ms/op
     p(90.0000) =    159.724 ms/op
     p(95.0000) =    218.117 ms/op
     p(99.0000) =    227.017 ms/op
     p(99.9000) =    227.017 ms/op
     p(99.9900) =    227.017 ms/op
     p(99.9990) =    227.017 ms/op
     p(99.9999) =    227.017 ms/op
    p(100.0000) =    227.017 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readKey
# Parameters: (forceSafe = true, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 26.74% complete, ETA 00:22:41
# Fork: 1 of 3
# Warmup Iteration   1: n = 7, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 158, 183, 183, 183, 183, 183, 183 ms/op
# Warmup Iteration   2: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 156, 168, 232, 232, 232, 232, 232, 232 ms/op
# Warmup Iteration   3: n = 6, mean = 183 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 176, 232, 232, 232, 232, 232, 232 ms/op
Iteration   1: n = 6, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 158, 160, 260, 260, 260, 260, 260, 260 ms/op
Iteration   2: n = 7, mean = 143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 142, 147, 147, 147, 147, 147, 147 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-true-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-true-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 7, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 150, 214, 214, 214, 214, 214, 214 ms/op

# Run progress: 27.13% complete, ETA 00:22:36
# Fork: 2 of 3
# Warmup Iteration   1: n = 7, mean = 151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 153, 176, 176, 176, 176, 176, 176 ms/op
# Warmup Iteration   2: n = 7, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 147, 211, 211, 211, 211, 211, 211 ms/op
# Warmup Iteration   3: n = 8, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 131, 225, 225, 225, 225, 225, 225 ms/op
Iteration   1: n = 7, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 147, 217, 217, 217, 217, 217, 217 ms/op
Iteration   2: n = 7, mean = 155 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 147, 210, 210, 210, 210, 210, 210 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-true-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-true-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 130, 136, 136, 136, 136, 136, 136 ms/op

# Run progress: 27.52% complete, ETA 00:22:30
# Fork: 3 of 3
# Warmup Iteration   1: n = 6, mean = 182 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 156, 168, 256, 256, 256, 256, 256, 256 ms/op
# Warmup Iteration   2: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 169, 224, 224, 224, 224, 224, 224 ms/op
# Warmup Iteration   3: n = 7, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 148, 177, 177, 177, 177, 177, 177 ms/op
Iteration   1: n = 6, mean = 171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 155, 158, 238, 238, 238, 238, 238, 238 ms/op
Iteration   2: n = 7, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 140, 141, 199, 199, 199, 199, 199, 199 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-true-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-true-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 6, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 153, 158, 228, 228, 228, 228, 228, 228 ms/op


Result "readKey":
  N = 61
  mean =    156.057 ±(99.9%) 12.077 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 10 
    [137.500, 150.000) = 22 
    [150.000, 162.500) = 20 
    [162.500, 175.000) = 2 
    [175.000, 187.500) = 0 
    [187.500, 200.000) = 1 
    [200.000, 212.500) = 1 
    [212.500, 225.000) = 2 
    [225.000, 237.500) = 1 
    [237.500, 250.000) = 1 
    [250.000, 262.500) = 1 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    129.499 ms/op
     p(50.0000) =    147.587 ms/op
     p(90.0000) =    207.985 ms/op
     p(95.0000) =    226.990 ms/op
     p(99.0000) =    260.047 ms/op
     p(99.9000) =    260.047 ms/op
     p(99.9900) =    260.047 ms/op
     p(99.9990) =    260.047 ms/op
     p(99.9999) =    260.047 ms/op
    p(100.0000) =    260.047 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readKey
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 27.91% complete, ETA 00:22:24
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 116, 121, 204, 204, 204, 204, 204, 204 ms/op
# Warmup Iteration   2: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 108, 110, 110, 110, 110, 110, 110 ms/op
# Warmup Iteration   3: n = 8, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 115, 122, 180, 180, 180, 180, 180, 180 ms/op
Iteration   1: n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 109, 174, 174, 174, 174, 174, 174 ms/op
Iteration   2: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 116, 120, 180, 180, 180, 180, 180, 180 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 110, 174, 174, 174, 174, 174, 174 ms/op

# Run progress: 28.29% complete, ETA 00:22:18
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 104, 125, 127, 127, 127, 127, 127 ms/op
# Warmup Iteration   2: n = 11, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 93, 95, 96, 96, 96, 96, 96 ms/op
# Warmup Iteration   3: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 107, 170, 170, 170, 170, 170, 170 ms/op
Iteration   1: n = 9, mean = 123 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 116, 185, 185, 185, 185, 185, 185 ms/op
Iteration   2: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 106, 150, 150, 150, 150, 150, 150 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 94, 150, 155, 155, 155, 155, 155 ms/op

# Run progress: 28.68% complete, ETA 00:22:11
# Fork: 3 of 3
# Warmup Iteration   1: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 99, 128, 130, 130, 130, 130, 130 ms/op
# Warmup Iteration   2: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 112, 118, 167, 167, 167, 167, 167, 167 ms/op
# Warmup Iteration   3: n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 108, 161, 161, 161, 161, 161, 161 ms/op
Iteration   1: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 115, 165, 165, 165, 165, 165, 165 ms/op
Iteration   2: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 107, 168, 168, 168, 168, 168, 168 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 11, mean = 95 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 95, 95, 95, 95, 95, 95, 95 ms/op


Result "readKey":
  N = 83
  mean =    113.387 ±(99.9%) 7.706 ms/op

  Histogram, ms/op:
    [ 90.000, 100.000) = 20 
    [100.000, 110.000) = 30 
    [110.000, 120.000) = 20 
    [120.000, 130.000) = 5 
    [130.000, 140.000) = 0 
    [140.000, 150.000) = 0 
    [150.000, 160.000) = 2 
    [160.000, 170.000) = 2 
    [170.000, 180.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =     92.144 ms/op
     p(50.0000) =    109.052 ms/op
     p(90.0000) =    142.134 ms/op
     p(95.0000) =    172.858 ms/op
     p(99.0000) =    184.812 ms/op
     p(99.9000) =    184.812 ms/op
     p(99.9900) =    184.812 ms/op
     p(99.9990) =    184.812 ms/op
     p(99.9999) =    184.812 ms/op
    p(100.0000) =    184.812 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readKey
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 29.07% complete, ETA 00:22:04
# Fork: 1 of 3
# Warmup Iteration   1: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 108, 130, 131, 131, 131, 131, 131 ms/op
# Warmup Iteration   2: n = 8, mean = 137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 108, 116, 193, 193, 193, 193, 193, 193 ms/op
# Warmup Iteration   3: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 97, 109, 109, 109, 109, 109, 109 ms/op
Iteration   1: n = 11, mean = 96 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 96, 96, 96, 96, 96, 96, 96 ms/op
Iteration   2: n = 11, mean = 97 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 97, 97, 98, 98, 98, 98, 98 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 11, mean = 95 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 96, 96, 96, 96, 96, 96, 96 ms/op

# Run progress: 29.46% complete, ETA 00:21:58
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 107, 130, 133, 133, 133, 133, 133 ms/op
# Warmup Iteration   2: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 99, 139, 143, 143, 143, 143, 143 ms/op
# Warmup Iteration   3: n = 8, mean = 125 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 114, 118, 177, 177, 177, 177, 177, 177 ms/op
Iteration   1: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 106, 106, 106, 106, 106, 106, 106 ms/op
Iteration   2: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 107, 168, 168, 168, 168, 168, 168 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 11, mean = 95 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 95, 96, 96, 96, 96, 96, 96 ms/op

# Run progress: 29.84% complete, ETA 00:21:51
# Fork: 3 of 3
# Warmup Iteration   1: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 108, 131, 133, 133, 133, 133, 133 ms/op
# Warmup Iteration   2: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 108, 172, 172, 172, 172, 172, 172 ms/op
# Warmup Iteration   3: n = 11, mean = 95 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 95, 96, 96, 96, 96, 96, 96 ms/op
Iteration   1: n = 11, mean = 96 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 95, 99, 100, 100, 100, 100, 100 ms/op
Iteration   2: n = 11, mean = 97 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 96, 100, 100, 100, 100, 100, 100 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 11, mean = 96 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 95, 102, 104, 104, 104, 104, 104 ms/op


Result "readKey":
  N = 96
  mean =     98.525 ±(99.9%) 2.894 ms/op

  Histogram, ms/op:
    [ 90.000,  95.000) = 26 
    [ 95.000, 100.000) = 49 
    [100.000, 105.000) = 3 
    [105.000, 110.000) = 16 
    [110.000, 115.000) = 1 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 0 
    [150.000, 155.000) = 0 
    [155.000, 160.000) = 0 
    [160.000, 165.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     94.241 ms/op
     p(50.0000) =     95.814 ms/op
     p(90.0000) =    106.208 ms/op
     p(95.0000) =    107.105 ms/op
     p(99.0000) =    167.772 ms/op
     p(99.9000) =    167.772 ms/op
     p(99.9900) =    167.772 ms/op
     p(99.9990) =    167.772 ms/op
     p(99.9999) =    167.772 ms/op
    p(100.0000) =    167.772 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readRev
# Parameters: (forceSafe = true, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 30.23% complete, ETA 00:21:45
# Fork: 1 of 3
# Warmup Iteration   1: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 67, 74, 75, 75, 75, 75, 75 ms/op
# Warmup Iteration   2: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 50, 51, 56, 57, 57, 57, 57, 57 ms/op
# Warmup Iteration   3: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 53, 58, 59, 59, 59, 59, 59 ms/op
Iteration   1: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 59, 88, 98, 98, 98, 98, 98 ms/op
Iteration   2: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 52, 79, 98, 98, 98, 98, 98 ms/op
Iteration   3: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 57, 82, 108, 108, 108, 108, 108 ms/op

# Run progress: 30.62% complete, ETA 00:21:38
# Fork: 2 of 3
# Warmup Iteration   1: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 66, 70, 75, 75, 75, 75, 75 ms/op
# Warmup Iteration   2: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 58, 78, 103, 103, 103, 103, 103 ms/op
# Warmup Iteration   3: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 57, 82, 109, 109, 109, 109, 109 ms/op
Iteration   1: n = 18, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 50, 51, 101, 107, 107, 107, 107, 107 ms/op
Iteration   2: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 58, 85, 108, 108, 108, 108, 108 ms/op
Iteration   3: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 57, 81, 105, 105, 105, 105, 105 ms/op

# Run progress: 31.01% complete, ETA 00:21:30
# Fork: 3 of 3
# Warmup Iteration   1: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 67, 76, 78, 78, 78, 78, 78 ms/op
# Warmup Iteration   2: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 65, 102, 112, 112, 112, 112, 112 ms/op
# Warmup Iteration   3: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 52, 58, 59, 59, 59, 59, 59 ms/op
Iteration   1: n = 15, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 60, 108, 109, 109, 109, 109, 109 ms/op
Iteration   2: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 60, 111, 114, 114, 114, 114, 114 ms/op
Iteration   3: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 58, 63, 69, 69, 69, 69, 69 ms/op


Result "readRev":
  N = 149
  mean =     63.164 ±(99.9%) 4.010 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 29 
    [ 55.000,  60.000) = 79 
    [ 60.000,  65.000) = 7 
    [ 65.000,  70.000) = 9 
    [ 70.000,  75.000) = 6 
    [ 75.000,  80.000) = 3 
    [ 80.000,  85.000) = 1 
    [ 85.000,  90.000) = 1 
    [ 90.000,  95.000) = 2 
    [ 95.000, 100.000) = 2 
    [100.000, 105.000) = 2 
    [105.000, 110.000) = 7 
    [110.000, 115.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     50.266 ms/op
     p(50.0000) =     58.130 ms/op
     p(90.0000) =     87.818 ms/op
     p(95.0000) =    106.037 ms/op
     p(99.0000) =    111.280 ms/op
     p(99.9000) =    113.508 ms/op
     p(99.9900) =    113.508 ms/op
     p(99.9990) =    113.508 ms/op
     p(99.9999) =    113.508 ms/op
    p(100.0000) =    113.508 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readRev
# Parameters: (forceSafe = true, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 31.40% complete, ETA 00:21:23
# Fork: 1 of 3
# Warmup Iteration   1: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 70, 111, 141, 141, 141, 141, 141 ms/op
# Warmup Iteration   2: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 59, 82, 104, 104, 104, 104, 104 ms/op
# Warmup Iteration   3: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 52, 57, 58, 58, 58, 58, 58 ms/op
Iteration   1: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 57, 95, 101, 101, 101, 101, 101 ms/op
Iteration   2: n = 16, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 60, 113, 119, 119, 119, 119, 119 ms/op
Iteration   3: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 59, 99, 123, 123, 123, 123, 123 ms/op

# Run progress: 31.78% complete, ETA 00:21:16
# Fork: 2 of 3
# Warmup Iteration   1: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 62, 78, 82, 82, 82, 82, 82 ms/op
# Warmup Iteration   2: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 53, 58, 59, 59, 59, 59, 59 ms/op
# Warmup Iteration   3: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 60, 89, 114, 114, 114, 114, 114 ms/op
Iteration   1: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 60, 112, 130, 130, 130, 130, 130 ms/op
Iteration   2: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 60, 91, 115, 115, 115, 115, 115 ms/op
Iteration   3: n = 15, mean = 71 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 62, 97, 98, 98, 98, 98, 98 ms/op

# Run progress: 32.17% complete, ETA 00:21:09
# Fork: 3 of 3
# Warmup Iteration   1: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 68, 111, 139, 139, 139, 139, 139 ms/op
# Warmup Iteration   2: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 58, 90, 94, 94, 94, 94, 94 ms/op
# Warmup Iteration   3: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 52, 59, 66, 66, 66, 66, 66 ms/op
Iteration   1: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 58, 102, 105, 105, 105, 105, 105 ms/op
Iteration   2: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 61, 86, 111, 111, 111, 111, 111 ms/op
Iteration   3: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 69, 113, 121, 121, 121, 121, 121 ms/op


Result "readRev":
  N = 137
  mean =     68.077 ±(99.9%) 4.719 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 6 
    [ 55.000,  60.000) = 57 
    [ 60.000,  65.000) = 23 
    [ 65.000,  70.000) = 15 
    [ 70.000,  75.000) = 13 
    [ 75.000,  80.000) = 0 
    [ 80.000,  85.000) = 3 
    [ 85.000,  90.000) = 4 
    [ 90.000,  95.000) = 2 
    [ 95.000, 100.000) = 4 
    [100.000, 105.000) = 1 
    [105.000, 110.000) = 2 
    [110.000, 115.000) = 3 
    [115.000, 120.000) = 1 
    [120.000, 125.000) = 2 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     52.888 ms/op
     p(50.0000) =     61.407 ms/op
     p(90.0000) =     96.495 ms/op
     p(95.0000) =    110.402 ms/op
     p(99.0000) =    127.384 ms/op
     p(99.9000) =    130.023 ms/op
     p(99.9900) =    130.023 ms/op
     p(99.9990) =    130.023 ms/op
     p(99.9999) =    130.023 ms/op
    p(100.0000) =    130.023 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readRev
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 32.56% complete, ETA 00:21:02
# Fork: 1 of 3
# Warmup Iteration   1: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 37, 50, 76, 85, 85, 85, 85 ms/op
# Warmup Iteration   2: n = 30, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 34, 35, 36, 36, 36, 36 ms/op
# Warmup Iteration   3: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 35, 35, 35, 35, 35, 35 ms/op
Iteration   1: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 33, 34, 34, 34, 34, 34 ms/op
Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 33, 33, 33, 33, 33, 33 ms/op
Iteration   3: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 36, 46, 64, 72, 72, 72, 72 ms/op

# Run progress: 32.95% complete, ETA 00:20:54
# Fork: 2 of 3
# Warmup Iteration   1: n = 25, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 37, 49, 77, 86, 86, 86, 86 ms/op
# Warmup Iteration   2: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 34, 51, 61, 62, 62, 62, 62 ms/op
# Warmup Iteration   3: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 37, 63, 73, 73, 73, 73, 73 ms/op
Iteration   1: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 36, 48, 66, 72, 72, 72, 72 ms/op
Iteration   2: n = 26, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 37, 50, 67, 73, 73, 73, 73 ms/op
Iteration   3: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 33, 34, 35, 35, 35, 35 ms/op

# Run progress: 33.33% complete, ETA 00:20:47
# Fork: 3 of 3
# Warmup Iteration   1: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 35, 36, 40, 45, 45, 45, 45 ms/op
# Warmup Iteration   2: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 35, 46, 62, 69, 69, 69, 69 ms/op
# Warmup Iteration   3: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 37, 61, 69, 72, 72, 72, 72 ms/op
Iteration   1: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 35, 63, 71, 71, 71, 71, 71 ms/op
Iteration   2: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 35, 35, 35, 35, 35, 35 ms/op
Iteration   3: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 31, 31, 32, 32, 32, 32 ms/op


Result "readRev":
  N = 262
  mean =     35.140 ±(99.9%) 1.327 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 171 
    [35.000, 40.000) = 73 
    [40.000, 45.000) = 4 
    [45.000, 50.000) = 4 
    [50.000, 55.000) = 3 
    [55.000, 60.000) = 2 
    [60.000, 65.000) = 0 
    [65.000, 70.000) = 1 
    [70.000, 75.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =     30.900 ms/op
     p(50.0000) =     33.161 ms/op
     p(90.0000) =     37.159 ms/op
     p(95.0000) =     45.882 ms/op
     p(99.0000) =     72.007 ms/op
     p(99.9000) =     72.745 ms/op
     p(99.9900) =     72.745 ms/op
     p(99.9990) =     72.745 ms/op
     p(99.9999) =     72.745 ms/op
    p(100.0000) =     72.745 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readRev
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 33.72% complete, ETA 00:20:39
# Fork: 1 of 3
# Warmup Iteration   1: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 36, 38, 47, 53, 53, 53, 53 ms/op
# Warmup Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 33, 34, 34, 34, 34, 34, 34 ms/op
# Warmup Iteration   3: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 36, 48, 66, 73, 73, 73, 73 ms/op
Iteration   1: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 32, 33, 34, 34, 34, 34, 34 ms/op
Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 33, 34, 34, 34, 34, 34, 34 ms/op
Iteration   3: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 36, 50, 69, 76, 76, 76, 76 ms/op

# Run progress: 34.11% complete, ETA 00:20:32
# Fork: 2 of 3
# Warmup Iteration   1: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 35, 37, 45, 53, 53, 53, 53 ms/op
# Warmup Iteration   2: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 31, 32, 32, 32, 32, 32 ms/op
# Warmup Iteration   3: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 31, 32, 32, 32, 32, 32 ms/op
Iteration   1: n = 25, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 37, 54, 67, 72, 72, 72, 72 ms/op
Iteration   2: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 35, 47, 65, 72, 72, 72, 72 ms/op
Iteration   3: n = 32, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 32, 33, 33, 33, 33, 33 ms/op

# Run progress: 34.50% complete, ETA 00:20:24
# Fork: 3 of 3
# Warmup Iteration   1: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 32, 35, 44, 52, 52, 52, 52 ms/op
# Warmup Iteration   2: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 35, 45, 61, 67, 67, 67, 67 ms/op
# Warmup Iteration   3: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 31, 31, 32, 32, 32, 32 ms/op
Iteration   1: n = 32, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 32, 33, 33, 33, 33, 33 ms/op
Iteration   2: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 35, 47, 64, 71, 71, 71, 71 ms/op
Iteration   3: n = 32, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 32, 33, 33, 33, 33, 33 ms/op


Result "readRev":
  N = 263
  mean =     34.527 ±(99.9%) 1.270 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 188 
    [35.000, 40.000) = 59 
    [40.000, 45.000) = 3 
    [45.000, 50.000) = 4 
    [50.000, 55.000) = 4 
    [55.000, 60.000) = 1 
    [60.000, 65.000) = 0 
    [65.000, 70.000) = 0 
    [70.000, 75.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =     30.999 ms/op
     p(50.0000) =     32.473 ms/op
     p(90.0000) =     36.700 ms/op
     p(95.0000) =     44.748 ms/op
     p(99.0000) =     72.053 ms/op
     p(99.9000) =     75.891 ms/op
     p(99.9900) =     75.891 ms/op
     p(99.9990) =     75.891 ms/op
     p(99.9999) =     75.891 ms/op
    p(100.0000) =     75.891 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readSeq
# Parameters: (forceSafe = true, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 34.88% complete, ETA 00:20:17
# Fork: 1 of 3
# Warmup Iteration   1: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 71, 77, 81, 81, 81, 81, 81 ms/op
# Warmup Iteration   2: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 65, 90, 107, 107, 107, 107, 107 ms/op
# Warmup Iteration   3: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 64, 96, 112, 112, 112, 112, 112 ms/op
Iteration   1: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 70, 98, 108, 108, 108, 108, 108 ms/op
Iteration   2: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 64, 94, 113, 113, 113, 113, 113 ms/op
Iteration   3: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 64, 65, 65, 65, 65, 65, 65 ms/op

# Run progress: 35.27% complete, ETA 00:20:09
# Fork: 2 of 3
# Warmup Iteration   1: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 71, 80, 81, 81, 81, 81, 81 ms/op
# Warmup Iteration   2: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 55, 62, 69, 69, 69, 69, 69 ms/op
# Warmup Iteration   3: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 58, 90, 98, 98, 98, 98, 98 ms/op
Iteration   1: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 62, 105, 112, 112, 112, 112, 112 ms/op
Iteration   2: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 62, 109, 123, 123, 123, 123, 123 ms/op
Iteration   3: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 62, 78, 91, 91, 91, 91, 91 ms/op

# Run progress: 35.66% complete, ETA 00:20:02
# Fork: 3 of 3
# Warmup Iteration   1: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 77, 85, 85, 85, 85, 85, 85 ms/op
# Warmup Iteration   2: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 61, 83, 98, 98, 98, 98, 98 ms/op
# Warmup Iteration   3: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 67, 110, 139, 139, 139, 139, 139 ms/op
Iteration   1: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 77, 116, 127, 127, 127, 127, 127 ms/op
Iteration   2: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 74, 77, 77, 77, 77, 77, 77 ms/op
Iteration   3: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 67, 108, 118, 118, 118, 118, 118 ms/op


Result "readSeq":
  N = 133
  mean =     70.069 ±(99.9%) 3.984 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 11 
    [ 60.000,  65.000) = 57 
    [ 65.000,  70.000) = 24 
    [ 70.000,  75.000) = 12 
    [ 75.000,  80.000) = 11 
    [ 80.000,  85.000) = 3 
    [ 85.000,  90.000) = 3 
    [ 90.000,  95.000) = 2 
    [ 95.000, 100.000) = 3 
    [100.000, 105.000) = 1 
    [105.000, 110.000) = 1 
    [110.000, 115.000) = 2 
    [115.000, 120.000) = 1 
    [120.000, 125.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     55.968 ms/op
     p(50.0000) =     64.553 ms/op
     p(90.0000) =     88.526 ms/op
     p(95.0000) =    102.760 ms/op
     p(99.0000) =    125.543 ms/op
     p(99.9000) =    126.747 ms/op
     p(99.9900) =    126.747 ms/op
     p(99.9990) =    126.747 ms/op
     p(99.9999) =    126.747 ms/op
    p(100.0000) =    126.747 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readSeq
# Parameters: (forceSafe = true, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 36.05% complete, ETA 00:19:55
# Fork: 1 of 3
# Warmup Iteration   1: n = 13, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 73, 120, 143, 143, 143, 143, 143 ms/op
# Warmup Iteration   2: n = 17, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 57, 89, 112, 112, 112, 112, 112 ms/op
# Warmup Iteration   3: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 64, 99, 102, 102, 102, 102, 102 ms/op
Iteration   1: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 71, 100, 116, 116, 116, 116, 116 ms/op
Iteration   2: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 63, 93, 113, 113, 113, 113, 113 ms/op
Iteration   3: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 56, 60, 63, 63, 63, 63, 63 ms/op

# Run progress: 36.43% complete, ETA 00:19:47
# Fork: 2 of 3
# Warmup Iteration   1: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 75, 82, 88, 88, 88, 88, 88 ms/op
# Warmup Iteration   2: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 66, 116, 123, 123, 123, 123, 123 ms/op
# Warmup Iteration   3: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 71, 100, 118, 118, 118, 118, 118 ms/op
Iteration   1: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 66, 95, 115, 115, 115, 115, 115 ms/op
Iteration   2: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 65, 97, 107, 107, 107, 107, 107 ms/op
Iteration   3: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 66, 110, 116, 116, 116, 116, 116 ms/op

# Run progress: 36.82% complete, ETA 00:19:40
# Fork: 3 of 3
# Warmup Iteration   1: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 67, 79, 86, 86, 86, 86, 86 ms/op
# Warmup Iteration   2: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 58, 66, 72, 72, 72, 72, 72 ms/op
# Warmup Iteration   3: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 56, 57, 62, 62, 62, 62, 62 ms/op
Iteration   1: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 71, 100, 116, 116, 116, 116, 116 ms/op
Iteration   2: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 68, 71, 111, 116, 116, 116, 116, 116 ms/op
Iteration   3: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 69, 98, 114, 114, 114, 114, 114 ms/op


Result "readSeq":
  N = 132
  mean =     70.220 ±(99.9%) 4.124 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 25 
    [ 60.000,  65.000) = 30 
    [ 65.000,  70.000) = 20 
    [ 70.000,  75.000) = 34 
    [ 75.000,  80.000) = 4 
    [ 80.000,  85.000) = 7 
    [ 85.000,  90.000) = 0 
    [ 90.000,  95.000) = 2 
    [ 95.000, 100.000) = 0 
    [100.000, 105.000) = 2 
    [105.000, 110.000) = 1 
    [110.000, 115.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     55.837 ms/op
     p(50.0000) =     65.831 ms/op
     p(90.0000) =     84.017 ms/op
     p(95.0000) =    113.050 ms/op
     p(99.0000) =    116.218 ms/op
     p(99.9000) =    116.261 ms/op
     p(99.9900) =    116.261 ms/op
     p(99.9990) =    116.261 ms/op
     p(99.9999) =    116.261 ms/op
    p(100.0000) =    116.261 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readSeq
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 37.21% complete, ETA 00:19:33
# Fork: 1 of 3
# Warmup Iteration   1: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 42, 43, 48, 50, 50, 50, 50 ms/op
# Warmup Iteration   2: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 51, 71, 73, 73, 73, 73, 73 ms/op
# Warmup Iteration   3: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 46, 46, 51, 51, 51, 51, 51, 51 ms/op
Iteration   1: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 46, 47, 58, 73, 74, 74, 74, 74 ms/op
Iteration   2: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 42, 55, 71, 75, 75, 75, 75 ms/op
Iteration   3: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 37, 37, 50, 58, 58, 58, 58 ms/op

# Run progress: 37.60% complete, ETA 00:19:26
# Fork: 2 of 3
# Warmup Iteration   1: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 43, 44, 50, 52, 52, 52, 52 ms/op
# Warmup Iteration   2: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 43, 57, 72, 75, 75, 75, 75 ms/op
# Warmup Iteration   3: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 37, 38, 38, 39, 39, 39, 39 ms/op
Iteration   1: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 43, 59, 75, 77, 77, 77, 77 ms/op
Iteration   2: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 37, 38, 39, 39, 39, 39, 39 ms/op
Iteration   3: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 43, 54, 72, 76, 76, 76, 76 ms/op

# Run progress: 37.98% complete, ETA 00:19:18
# Fork: 3 of 3
# Warmup Iteration   1: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 40, 42, 49, 51, 51, 51, 51 ms/op
# Warmup Iteration   2: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 36, 37, 38, 38, 38, 38 ms/op
# Warmup Iteration   3: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 45, 70, 78, 79, 79, 79, 79 ms/op
Iteration   1: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 38, 40, 41, 41, 41, 41, 41 ms/op
Iteration   2: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 38, 38, 38, 38, 38, 38 ms/op
Iteration   3: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 46, 59, 77, 78, 78, 78, 78 ms/op


Result "readSeq":
  N = 219
  mean =     41.947 ±(99.9%) 1.635 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 99 
    [40.000, 45.000) = 67 
    [45.000, 50.000) = 38 
    [50.000, 55.000) = 4 
    [55.000, 60.000) = 4 
    [60.000, 65.000) = 2 
    [65.000, 70.000) = 0 
    [70.000, 75.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     35.783 ms/op
     p(50.0000) =     40.632 ms/op
     p(90.0000) =     47.120 ms/op
     p(95.0000) =     57.082 ms/op
     p(99.0000) =     76.730 ms/op
     p(99.9000) =     78.381 ms/op
     p(99.9900) =     78.381 ms/op
     p(99.9990) =     78.381 ms/op
     p(99.9999) =     78.381 ms/op
    p(100.0000) =     78.381 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readSeq
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 38.37% complete, ETA 00:19:11
# Fork: 1 of 3
# Warmup Iteration   1: n = 25, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 39, 43, 52, 55, 55, 55, 55 ms/op
# Warmup Iteration   2: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 37, 37, 38, 38, 38, 38, 38 ms/op
# Warmup Iteration   3: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 42, 56, 71, 74, 74, 74, 74 ms/op
Iteration   1: n = 21, mean = 50 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 50, 66, 68, 68, 68, 68, 68 ms/op
Iteration   2: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 42, 56, 59, 59, 59, 59, 59 ms/op
Iteration   3: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 37, 46, 55, 59, 59, 59, 59 ms/op

# Run progress: 38.76% complete, ETA 00:19:03
# Fork: 2 of 3
# Warmup Iteration   1: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 45, 61, 100, 104, 104, 104, 104 ms/op
# Warmup Iteration   2: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 48, 69, 71, 71, 71, 71, 71 ms/op
# Warmup Iteration   3: n = 22, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 42, 60, 75, 78, 78, 78, 78 ms/op
Iteration   1: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 38, 38, 39, 39, 39, 39, 39 ms/op
Iteration   2: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 45, 63, 73, 75, 75, 75, 75 ms/op
Iteration   3: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 45, 50, 58, 59, 59, 59, 59 ms/op

# Run progress: 39.15% complete, ETA 00:18:56
# Fork: 3 of 3
# Warmup Iteration   1: n = 22, mean = 47 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 43, 58, 96, 102, 102, 102, 102 ms/op
# Warmup Iteration   2: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 46, 70, 75, 75, 75, 75, 75 ms/op
# Warmup Iteration   3: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 37, 42, 42, 42, 42, 42, 42 ms/op
Iteration   1: n = 22, mean = 47 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 43, 68, 84, 87, 87, 87, 87 ms/op
Iteration   2: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 43, 78, 83, 83, 83, 83, 83 ms/op
Iteration   3: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 37, 43, 43, 43, 43, 43, 43 ms/op


Result "readSeq":
  N = 210
  mean =     44.054 ±(99.9%) 1.982 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 78 
    [40.000, 45.000) = 65 
    [45.000, 50.000) = 27 
    [50.000, 55.000) = 22 
    [55.000, 60.000) = 6 
    [60.000, 65.000) = 4 
    [65.000, 70.000) = 3 
    [70.000, 75.000) = 2 
    [75.000, 80.000) = 1 
    [80.000, 85.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     36.831 ms/op
     p(50.0000) =     42.435 ms/op
     p(90.0000) =     52.966 ms/op
     p(95.0000) =     62.747 ms/op
     p(99.0000) =     82.900 ms/op
     p(99.9000) =     86.770 ms/op
     p(99.9900) =     86.770 ms/op
     p(99.9990) =     86.770 ms/op
     p(99.9999) =     86.770 ms/op
    p(100.0000) =     86.770 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readXxh64
# Parameters: (forceSafe = true, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 39.53% complete, ETA 00:18:49
# Fork: 1 of 3
# Warmup Iteration   1: n = 10, mean = 110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 105, 148, 150, 150, 150, 150, 150 ms/op
# Warmup Iteration   2: n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 111, 165, 165, 165, 165, 165, 165 ms/op
# Warmup Iteration   3: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 99, 162, 168, 168, 168, 168, 168 ms/op
Iteration   1: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 94, 152, 157, 157, 157, 157, 157 ms/op
Iteration   2: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 101, 159, 159, 159, 159, 159, 159 ms/op
Iteration   3: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 100, 156, 162, 162, 162, 162, 162 ms/op

# Run progress: 39.92% complete, ETA 00:18:42
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 84, 101, 128, 130, 130, 130, 130, 130 ms/op
# Warmup Iteration   2: n = 11, mean = 97 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 92, 137, 147, 147, 147, 147, 147 ms/op
# Warmup Iteration   3: n = 13, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 80, 82, 113, 130, 130, 130, 130, 130 ms/op
Iteration   1: n = 11, mean = 97 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 91, 144, 156, 156, 156, 156, 156 ms/op
Iteration   2: n = 12, mean = 88 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 82, 123, 129, 129, 129, 129, 129 ms/op
Iteration   3: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 92, 154, 155, 155, 155, 155, 155 ms/op

# Run progress: 40.31% complete, ETA 00:18:35
# Fork: 3 of 3
# Warmup Iteration   1: n = 9, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 112, 112, 195, 195, 195, 195, 195, 195 ms/op
# Warmup Iteration   2: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 102, 159, 164, 164, 164, 164, 164 ms/op
# Warmup Iteration   3: n = 11, mean = 99 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 91, 140, 146, 146, 146, 146, 146 ms/op
Iteration   1: n = 11, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 86, 96, 105, 107, 107, 107, 107, 107 ms/op
Iteration   2: n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 103, 202, 202, 202, 202, 202, 202 ms/op
Iteration   3: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 97, 154, 160, 160, 160, 160, 160 ms/op


Result "readXxh64":
  N = 92
  mean =    102.307 ±(99.9%) 7.718 ms/op

  Histogram, ms/op:
    [  0.000,  25.000) = 0 
    [ 25.000,  50.000) = 0 
    [ 50.000,  75.000) = 0 
    [ 75.000, 100.000) = 61 
    [100.000, 125.000) = 20 
    [125.000, 150.000) = 3 
    [150.000, 175.000) = 7 
    [175.000, 200.000) = 0 
    [200.000, 225.000) = 1 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     81.527 ms/op
     p(50.0000) =     96.731 ms/op
     p(90.0000) =    134.768 ms/op
     p(95.0000) =    157.404 ms/op
     p(99.0000) =    202.375 ms/op
     p(99.9000) =    202.375 ms/op
     p(99.9900) =    202.375 ms/op
     p(99.9990) =    202.375 ms/op
     p(99.9999) =    202.375 ms/op
    p(100.0000) =    202.375 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readXxh64
# Parameters: (forceSafe = true, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 40.70% complete, ETA 00:18:28
# Fork: 1 of 3
# Warmup Iteration   1: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 102, 129, 131, 131, 131, 131, 131 ms/op
# Warmup Iteration   2: n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 83, 89, 91, 91, 91, 91, 91 ms/op
# Warmup Iteration   3: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 93, 155, 160, 160, 160, 160, 160 ms/op
Iteration   1: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 96, 162, 169, 169, 169, 169, 169 ms/op
Iteration   2: n = 11, mean = 99 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 93, 144, 155, 155, 155, 155, 155 ms/op
Iteration   3: n = 13, mean = 83 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 83, 86, 88, 88, 88, 88, 88 ms/op

# Run progress: 41.09% complete, ETA 00:18:21
# Fork: 2 of 3
# Warmup Iteration   1: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 101, 202, 202, 202, 202, 202, 202 ms/op
# Warmup Iteration   2: n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 110, 155, 155, 155, 155, 155, 155 ms/op
# Warmup Iteration   3: n = 12, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 88, 126, 139, 139, 139, 139, 139 ms/op
Iteration   1: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 98, 163, 169, 169, 169, 169, 169 ms/op
Iteration   2: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 100, 158, 158, 158, 158, 158, 158 ms/op
Iteration   3: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 99, 154, 160, 160, 160, 160, 160 ms/op

# Run progress: 41.47% complete, ETA 00:18:14
# Fork: 3 of 3
# Warmup Iteration   1: n = 9, mean = 120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 108, 109, 201, 201, 201, 201, 201, 201 ms/op
# Warmup Iteration   2: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 97, 150, 154, 154, 154, 154, 154 ms/op
# Warmup Iteration   3: n = 12, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 88, 130, 145, 145, 145, 145, 145 ms/op
Iteration   1: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 97, 154, 160, 160, 160, 160, 160 ms/op
Iteration   2: n = 12, mean = 88 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 87, 95, 99, 99, 99, 99, 99 ms/op
Iteration   3: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 97, 151, 156, 156, 156, 156, 156 ms/op


Result "readXxh64":
  N = 95
  mean =     99.415 ±(99.9%) 6.917 ms/op

  Histogram, ms/op:
    [ 80.000,  85.000) = 12 
    [ 85.000,  90.000) = 16 
    [ 90.000,  95.000) = 10 
    [ 95.000, 100.000) = 40 
    [100.000, 105.000) = 5 
    [105.000, 110.000) = 3 
    [110.000, 115.000) = 0 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 1 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 0 
    [150.000, 155.000) = 0 
    [155.000, 160.000) = 6 
    [160.000, 165.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     82.313 ms/op
     p(50.0000) =     95.945 ms/op
     p(90.0000) =    111.752 ms/op
     p(95.0000) =    158.178 ms/op
     p(99.0000) =    169.083 ms/op
     p(99.9000) =    169.083 ms/op
     p(99.9900) =    169.083 ms/op
     p(99.9990) =    169.083 ms/op
     p(99.9999) =    169.083 ms/op
    p(100.0000) =    169.083 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readXxh64
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 41.86% complete, ETA 00:18:07
# Fork: 1 of 3
# Warmup Iteration   1: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 73, 138, 167, 167, 167, 167, 167 ms/op
# Warmup Iteration   2: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 66, 101, 109, 109, 109, 109, 109 ms/op
# Warmup Iteration   3: n = 13, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 73, 107, 122, 122, 122, 122, 122 ms/op
Iteration   1: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 71, 104, 107, 107, 107, 107, 107 ms/op
Iteration   2: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 74, 132, 134, 134, 134, 134, 134 ms/op
Iteration   3: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 68, 73, 73, 73, 73, 73, 73 ms/op

# Run progress: 42.25% complete, ETA 00:18:00
# Fork: 2 of 3
# Warmup Iteration   1: n = 13, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 70, 126, 153, 153, 153, 153, 153 ms/op
# Warmup Iteration   2: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 60, 63, 63, 63, 63, 63, 63 ms/op
# Warmup Iteration   3: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 60, 63, 63, 63, 63, 63, 63 ms/op
Iteration   1: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 78, 108, 119, 119, 119, 119, 119 ms/op
Iteration   2: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 70, 103, 123, 123, 123, 123, 123 ms/op
Iteration   3: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 60, 61, 61, 61, 61, 61, 61 ms/op

# Run progress: 42.64% complete, ETA 00:17:52
# Fork: 3 of 3
# Warmup Iteration   1: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 71, 145, 177, 177, 177, 177, 177 ms/op
# Warmup Iteration   2: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 69, 108, 114, 114, 114, 114, 114 ms/op
# Warmup Iteration   3: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 68, 71, 103, 116, 116, 116, 116, 116 ms/op
Iteration   1: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 71, 128, 129, 129, 129, 129, 129 ms/op
Iteration   2: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 63, 66, 68, 68, 68, 68, 68 ms/op
Iteration   3: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 68, 104, 125, 125, 125, 125, 125 ms/op


Result "readXxh64":
  N = 128
  mean =     73.089 ±(99.9%) 4.651 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 1 
    [ 60.000,  65.000) = 36 
    [ 65.000,  70.000) = 30 
    [ 70.000,  75.000) = 34 
    [ 75.000,  80.000) = 11 
    [ 80.000,  85.000) = 3 
    [ 85.000,  90.000) = 1 
    [ 90.000,  95.000) = 2 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 0 
    [105.000, 110.000) = 1 
    [110.000, 115.000) = 0 
    [115.000, 120.000) = 1 
    [120.000, 125.000) = 3 
    [125.000, 130.000) = 3 
    [130.000, 135.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     59.965 ms/op
     p(50.0000) =     69.599 ms/op
     p(90.0000) =     86.678 ms/op
     p(95.0000) =    122.749 ms/op
     p(99.0000) =    132.773 ms/op
     p(99.9000) =    134.218 ms/op
     p(99.9900) =    134.218 ms/op
     p(99.9990) =    134.218 ms/op
     p(99.9999) =    134.218 ms/op
    p(100.0000) =    134.218 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readXxh64
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 43.02% complete, ETA 00:17:45
# Fork: 1 of 3
# Warmup Iteration   1: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 68, 124, 164, 164, 164, 164, 164 ms/op
# Warmup Iteration   2: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 68, 99, 116, 116, 116, 116, 116 ms/op
# Warmup Iteration   3: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 60, 60, 60, 60, 60, 60, 60 ms/op
Iteration   1: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 73, 99, 108, 108, 108, 108, 108 ms/op
Iteration   2: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 66, 72, 77, 77, 77, 77, 77 ms/op
Iteration   3: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 68, 102, 122, 122, 122, 122, 122 ms/op

# Run progress: 43.41% complete, ETA 00:17:38
# Fork: 2 of 3
# Warmup Iteration   1: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 62, 88, 105, 105, 105, 105, 105 ms/op
# Warmup Iteration   2: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 69, 100, 118, 118, 118, 118, 118 ms/op
# Warmup Iteration   3: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 61, 61, 61, 61, 61, 61, 61 ms/op
Iteration   1: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 69, 112, 134, 134, 134, 134, 134 ms/op
Iteration   2: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 61, 69, 69, 69, 69, 69, 69 ms/op
Iteration   3: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 61, 61, 61, 61, 61, 61, 61 ms/op

# Run progress: 43.80% complete, ETA 00:17:30
# Fork: 3 of 3
# Warmup Iteration   1: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 71, 91, 103, 103, 103, 103, 103 ms/op
# Warmup Iteration   2: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 62, 62, 63, 63, 63, 63, 63 ms/op
# Warmup Iteration   3: n = 11, mean = 98 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 73, 85, 129, 130, 130, 130, 130, 130 ms/op
Iteration   1: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 71, 105, 125, 125, 125, 125, 125 ms/op
Iteration   2: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 62, 63, 66, 66, 66, 66, 66 ms/op
Iteration   3: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 63, 66, 66, 66, 66, 66, 66 ms/op


Result "readXxh64":
  N = 138
  mean =     67.816 ±(99.9%) 3.175 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 1 
    [ 60.000,  65.000) = 61 
    [ 65.000,  70.000) = 41 
    [ 70.000,  75.000) = 25 
    [ 75.000,  80.000) = 2 
    [ 80.000,  85.000) = 2 
    [ 85.000,  90.000) = 2 
    [ 90.000,  95.000) = 0 
    [ 95.000, 100.000) = 0 
    [100.000, 105.000) = 0 
    [105.000, 110.000) = 1 
    [110.000, 115.000) = 0 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 1 
    [125.000, 130.000) = 1 
    [130.000, 135.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     59.900 ms/op
     p(50.0000) =     65.405 ms/op
     p(90.0000) =     73.531 ms/op
     p(95.0000) =     84.292 ms/op
     p(99.0000) =    130.633 ms/op
     p(99.9000) =    133.956 ms/op
     p(99.9900) =    133.956 ms/op
     p(99.9990) =    133.956 ms/op
     p(99.9999) =    133.956 ms/op
    p(100.0000) =    133.956 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 44.19% complete, ETA 00:17:23
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 186 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 153, 186, 219, 219, 219, 219, 219, 219 ms/op
# Warmup Iteration   2: n = 7, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 138, 216, 216, 216, 216, 216, 216 ms/op
# Warmup Iteration   3: n = 6, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 152, 217, 217, 217, 217, 217, 217 ms/op
Iteration   1: n = 7, mean = 137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 137, 140, 140, 140, 140, 140, 140 ms/op
Iteration   2: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 145, 217, 217, 217, 217, 217, 217 ms/op
Iteration   3: n = 6, mean = 189 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 159, 188, 222, 222, 222, 222, 222, 222 ms/op

# Run progress: 44.57% complete, ETA 00:17:16
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 195 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 152, 188, 254, 254, 254, 254, 254, 254 ms/op
# Warmup Iteration   2: n = 7, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 154, 187, 187, 187, 187, 187, 187 ms/op
# Warmup Iteration   3: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 150, 220, 220, 220, 220, 220, 220 ms/op
Iteration   1: n = 6, mean = 165 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 158, 218, 218, 218, 218, 218, 218 ms/op
Iteration   2: n = 6, mean = 172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 168, 215, 215, 215, 215, 215, 215 ms/op
Iteration   3: n = 5, mean = 188 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 183, 269, 269, 269, 269, 269, 269 ms/op

# Run progress: 44.96% complete, ETA 00:17:08
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 174 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 150, 155, 234, 234, 234, 234, 234, 234 ms/op
# Warmup Iteration   2: n = 6, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 149, 211, 211, 211, 211, 211, 211 ms/op
# Warmup Iteration   3: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 132, 133, 133, 133, 133, 133, 133 ms/op
Iteration   1: n = 6, mean = 174 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 157, 223, 223, 223, 223, 223, 223 ms/op
Iteration   2: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 148, 235, 235, 235, 235, 235, 235 ms/op
Iteration   3: n = 6, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 150, 229, 229, 229, 229, 229, 229 ms/op


Result "write":
  N = 54
  mean =    167.127 ±(99.9%) 15.721 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 9 
    [137.500, 150.000) = 15 
    [150.000, 162.500) = 13 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 4 
    [187.500, 200.000) = 2 
    [200.000, 212.500) = 1 
    [212.500, 225.000) = 7 
    [225.000, 237.500) = 2 
    [237.500, 250.000) = 0 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 1 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    130.548 ms/op
     p(50.0000) =    155.058 ms/op
     p(90.0000) =    220.332 ms/op
     p(95.0000) =    230.490 ms/op
     p(99.0000) =    268.960 ms/op
     p(99.9000) =    268.960 ms/op
     p(99.9900) =    268.960 ms/op
     p(99.9990) =    268.960 ms/op
     p(99.9999) =    268.960 ms/op
    p(100.0000) =    268.960 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 45.35% complete, ETA 00:17:01
# Fork: 1 of 3
# Warmup Iteration   1: n = 3, mean = 234 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 191, 208, 303, 303, 303, 303, 303, 303 ms/op
# Warmup Iteration   2: n = 6, mean = 173 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 169, 189, 189, 189, 189, 189, 189 ms/op
# Warmup Iteration   3: n = 6, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 160, 160, 161, 161, 161, 161, 161, 161 ms/op
Iteration   1: n = 6, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 166, 167, 168, 168, 168, 168, 168, 168 ms/op
Iteration   2: n = 6, mean = 166 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 164, 166, 169, 169, 169, 169, 169, 169 ms/op
Iteration   3: n = 6, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 159, 160, 166, 166, 166, 166, 166, 166 ms/op

# Run progress: 45.74% complete, ETA 00:16:53
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 211 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 186, 195, 269, 269, 269, 269, 269, 269 ms/op
# Warmup Iteration   2: n = 5, mean = 197 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 172, 186, 241, 241, 241, 241, 241, 241 ms/op
# Warmup Iteration   3: n = 6, mean = 177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 162, 163, 224, 224, 224, 224, 224, 224 ms/op
Iteration   1: n = 5, mean = 198 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 178, 186, 253, 253, 253, 253, 253, 253 ms/op
Iteration   2: n = 6, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 162, 163, 163, 163, 163, 163, 163 ms/op
Iteration   3: n = 5, mean = 194 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 174, 186, 246, 246, 246, 246, 246, 246 ms/op

# Run progress: 46.12% complete, ETA 00:16:45
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 213 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 188, 205, 247, 247, 247, 247, 247, 247 ms/op
# Warmup Iteration   2: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 168, 189, 189, 189, 189, 189, 189 ms/op
# Warmup Iteration   3: n = 5, mean = 205 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 181, 194, 261, 261, 261, 261, 261, 261 ms/op
Iteration   1: n = 5, mean = 205 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 181, 195, 262, 262, 262, 262, 262, 262 ms/op
Iteration   2: n = 5, mean = 193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 184, 255, 255, 255, 255, 255, 255 ms/op
Iteration   3: n = 5, mean = 205 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 179, 195, 262, 262, 262, 262, 262, 262 ms/op


Result "write":
  N = 49
  mean =    181.896 ±(99.9%) 13.847 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 0 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 8 
    [162.500, 175.000) = 19 
    [175.000, 187.500) = 10 
    [187.500, 200.000) = 7 
    [200.000, 212.500) = 0 
    [212.500, 225.000) = 0 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 1 
    [250.000, 262.500) = 4 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    159.384 ms/op
     p(50.0000) =    169.083 ms/op
     p(90.0000) =    245.629 ms/op
     p(95.0000) =    258.474 ms/op
     p(99.0000) =    262.144 ms/op
     p(99.9000) =    262.144 ms/op
     p(99.9900) =    262.144 ms/op
     p(99.9990) =    262.144 ms/op
     p(99.9999) =    262.144 ms/op
    p(100.0000) =    262.144 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 46.51% complete, ETA 00:16:38
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 155, 254, 254, 254, 254, 254, 254 ms/op
# Warmup Iteration   2: n = 7, mean = 137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 133, 150, 150, 150, 150, 150, 150 ms/op
# Warmup Iteration   3: n = 7, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 132, 135, 135, 135, 135, 135, 135 ms/op
Iteration   1: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 134, 217, 217, 217, 217, 217, 217 ms/op
Iteration   2: n = 6, mean = 171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 163, 217, 217, 217, 217, 217, 217 ms/op
Iteration   3: n = 7, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 139, 155, 157, 157, 157, 157, 157, 157 ms/op

# Run progress: 46.90% complete, ETA 00:16:30
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 184 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 153, 283, 283, 283, 283, 283, 283 ms/op
# Warmup Iteration   2: n = 7, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 132, 148, 148, 148, 148, 148, 148 ms/op
# Warmup Iteration   3: n = 6, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 149, 200, 200, 200, 200, 200, 200 ms/op
Iteration   1: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 149, 212, 212, 212, 212, 212, 212 ms/op
Iteration   2: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 132, 197, 197, 197, 197, 197, 197 ms/op
Iteration   3: n = 6, mean = 165 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 156, 223, 223, 223, 223, 223, 223 ms/op

# Run progress: 47.29% complete, ETA 00:16:22
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 151, 158, 246, 246, 246, 246, 246, 246 ms/op
# Warmup Iteration   2: n = 7, mean = 139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 134, 151, 151, 151, 151, 151, 151 ms/op
# Warmup Iteration   3: n = 7, mean = 134 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 134, 136, 136, 136, 136, 136, 136 ms/op
Iteration   1: n = 6, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 141, 221, 221, 221, 221, 221, 221 ms/op
Iteration   2: n = 7, mean = 140 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 138, 150, 150, 150, 150, 150, 150 ms/op
Iteration   3: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 157, 157, 228, 228, 228, 228, 228, 228 ms/op


Result "write":
  N = 57
  mean =    158.186 ±(99.9%) 13.043 ms/op

  Histogram, ms/op:
    [120.000, 130.000) = 1 
    [130.000, 140.000) = 16 
    [140.000, 150.000) = 13 
    [150.000, 160.000) = 15 
    [160.000, 170.000) = 0 
    [170.000, 180.000) = 1 
    [180.000, 190.000) = 1 
    [190.000, 200.000) = 1 
    [200.000, 210.000) = 2 
    [210.000, 220.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =    128.057 ms/op
     p(50.0000) =    149.684 ms/op
     p(90.0000) =    216.688 ms/op
     p(95.0000) =    221.381 ms/op
     p(99.0000) =    227.541 ms/op
     p(99.9000) =    227.541 ms/op
     p(99.9900) =    227.541 ms/op
     p(99.9990) =    227.541 ms/op
     p(99.9999) =    227.541 ms/op
    p(100.0000) =    227.541 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 47.67% complete, ETA 00:16:14
# Fork: 1 of 3
# Warmup Iteration   1: n = 3, mean = 262 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 201, 265, 319, 319, 319, 319, 319, 319 ms/op
# Warmup Iteration   2: n = 5, mean = 198 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 166, 190, 262, 262, 262, 262, 262, 262 ms/op
# Warmup Iteration   3: n = 5, mean = 224 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 194, 200, 274, 274, 274, 274, 274, 274 ms/op
Iteration   1: n = 5, mean = 188 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 173, 188, 202, 202, 202, 202, 202, 202 ms/op
Iteration   2: n = 5, mean = 216 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 167, 199, 263, 263, 263, 263, 263, 263 ms/op
Iteration   3: n = 4, mean = 234 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 202, 235, 264, 264, 264, 264, 264, 264 ms/op

# Run progress: 48.06% complete, ETA 00:16:07
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 190, 198, 298, 298, 298, 298, 298, 298 ms/op
# Warmup Iteration   2: n = 5, mean = 215 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 201, 306, 306, 306, 306, 306, 306 ms/op
# Warmup Iteration   3: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 175, 176, 186, 186, 186, 186, 186, 186 ms/op
Iteration   1: n = 5, mean = 220 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 189, 199, 261, 261, 261, 261, 261, 261 ms/op
Iteration   2: n = 5, mean = 226 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 200, 201, 326, 326, 326, 326, 326, 326 ms/op
Iteration   3: n = 5, mean = 204 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 195, 261, 261, 261, 261, 261, 261 ms/op

# Run progress: 48.45% complete, ETA 00:16:00
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 234 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 188, 203, 312, 312, 312, 312, 312, 312 ms/op
# Warmup Iteration   2: n = 5, mean = 213 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 175, 197, 271, 271, 271, 271, 271, 271 ms/op
# Warmup Iteration   3: n = 4, mean = 231 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 194, 225, 278, 278, 278, 278, 278, 278 ms/op
Iteration   1: n = 5, mean = 200 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 171, 195, 242, 242, 242, 242, 242, 242 ms/op
Iteration   2: n = 5, mean = 221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 191, 195, 265, 265, 265, 265, 265, 265 ms/op
Iteration   3: n = 5, mean = 224 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 195, 196, 277, 277, 277, 277, 277, 277 ms/op


Result "write":
  N = 44
  mean =    214.315 ±(99.9%) 19.151 ms/op

  Histogram, ms/op:
    [100.000, 125.000) = 0 
    [125.000, 150.000) = 0 
    [150.000, 175.000) = 3 
    [175.000, 200.000) = 21 
    [200.000, 225.000) = 7 
    [225.000, 250.000) = 1 
    [250.000, 275.000) = 10 
    [275.000, 300.000) = 1 
    [300.000, 325.000) = 0 
    [325.000, 350.000) = 1 
    [350.000, 375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    166.724 ms/op
     p(50.0000) =    198.967 ms/op
     p(90.0000) =    263.324 ms/op
     p(95.0000) =    274.137 ms/op
     p(99.0000) =    326.107 ms/op
     p(99.9000) =    326.107 ms/op
     p(99.9900) =    326.107 ms/op
     p(99.9990) =    326.107 ms/op
     p(99.9999) =    326.107 ms/op
    p(100.0000) =    326.107 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 48.84% complete, ETA 00:15:53
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 150, 157, 249, 249, 249, 249, 249, 249 ms/op
# Warmup Iteration   2: n = 7, mean = 137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 133, 150, 150, 150, 150, 150, 150 ms/op
# Warmup Iteration   3: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 151, 210, 210, 210, 210, 210, 210 ms/op
Iteration   1: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 130, 132, 132, 132, 132, 132, 132 ms/op
Iteration   2: n = 6, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 147, 215, 215, 215, 215, 215, 215 ms/op
Iteration   3: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 129, 131, 131, 131, 131, 131, 131 ms/op

# Run progress: 49.22% complete, ETA 00:15:45
# Fork: 2 of 3
# Warmup Iteration   1: n = 5, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 150, 185, 185, 185, 185, 185, 185 ms/op
# Warmup Iteration   2: n = 7, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 133, 133, 133, 133, 133, 133, 133 ms/op
# Warmup Iteration   3: n = 7, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 132, 133, 133, 133, 133, 133, 133 ms/op
Iteration   1: n = 6, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 150, 211, 211, 211, 211, 211, 211 ms/op
Iteration   2: n = 7, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 132, 133, 133, 133, 133, 133, 133 ms/op
Iteration   3: n = 7, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 150, 214, 214, 214, 214, 214, 214 ms/op

# Run progress: 49.61% complete, ETA 00:15:37
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 154, 254, 254, 254, 254, 254, 254 ms/op
# Warmup Iteration   2: n = 7, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 131, 149, 149, 149, 149, 149, 149 ms/op
# Warmup Iteration   3: n = 6, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 146, 212, 212, 212, 212, 212, 212 ms/op
Iteration   1: n = 5, mean = 188 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 214, 216, 216, 216, 216, 216, 216 ms/op
Iteration   2: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 156, 214, 214, 214, 214, 214, 214 ms/op
Iteration   3: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 150, 155, 188, 188, 188, 188, 188, 188 ms/op


Result "write":
  N = 59
  mean =    150.884 ±(99.9%) 12.469 ms/op

  Histogram, ms/op:
    [120.000, 130.000) = 12 
    [130.000, 140.000) = 14 
    [140.000, 150.000) = 13 
    [150.000, 160.000) = 9 
    [160.000, 170.000) = 1 
    [170.000, 180.000) = 0 
    [180.000, 190.000) = 2 
    [190.000, 200.000) = 0 
    [200.000, 210.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    128.451 ms/op
     p(50.0000) =    146.538 ms/op
     p(90.0000) =    213.910 ms/op
     p(95.0000) =    214.434 ms/op
     p(99.0000) =    216.007 ms/op
     p(99.9000) =    216.007 ms/op
     p(99.9900) =    216.007 ms/op
     p(99.9990) =    216.007 ms/op
     p(99.9999) =    216.007 ms/op
    p(100.0000) =    216.007 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 50.00% complete, ETA 00:15:30
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 219 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 186, 195, 298, 298, 298, 298, 298, 298 ms/op
# Warmup Iteration   2: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 170, 214, 214, 214, 214, 214, 214 ms/op
# Warmup Iteration   3: n = 5, mean = 214 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 186, 189, 256, 256, 256, 256, 256, 256 ms/op
Iteration   1: n = 4, mean = 237 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 185, 229, 307, 307, 307, 307, 307, 307 ms/op
Iteration   2: n = 5, mean = 201 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 184, 186, 254, 254, 254, 254, 254, 254 ms/op
Iteration   3: n = 5, mean = 199 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 171, 183, 271, 271, 271, 271, 271, 271 ms/op

# Run progress: 50.39% complete, ETA 00:15:22
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 190, 198, 298, 298, 298, 298, 298, 298 ms/op
# Warmup Iteration   2: n = 5, mean = 201 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 175, 192, 253, 253, 253, 253, 253, 253 ms/op
# Warmup Iteration   3: n = 5, mean = 197 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 179, 186, 250, 250, 250, 250, 250, 250 ms/op
Iteration   1: n = 5, mean = 198 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 179, 187, 253, 253, 253, 253, 253, 253 ms/op
Iteration   2: n = 6, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 168, 171, 171, 171, 171, 171, 171 ms/op
Iteration   3: n = 6, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 161, 163, 163, 163, 163, 163, 163 ms/op

# Run progress: 50.78% complete, ETA 00:15:15
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 240 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 195, 208, 317, 317, 317, 317, 317, 317 ms/op
# Warmup Iteration   2: n = 5, mean = 224 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 192, 199, 282, 282, 282, 282, 282, 282 ms/op
# Warmup Iteration   3: n = 5, mean = 219 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 198, 219, 259, 259, 259, 259, 259, 259 ms/op
Iteration   1: n = 5, mean = 209 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 180, 199, 265, 265, 265, 265, 265, 265 ms/op
Iteration   2: n = 5, mean = 211 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 181, 201, 271, 271, 271, 271, 271, 271 ms/op
Iteration   3: n = 5, mean = 220 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 197, 199, 259, 259, 259, 259, 259, 259 ms/op


Result "write":
  N = 46
  mean =    198.084 ±(99.9%) 19.071 ms/op

  Histogram, ms/op:
    [100.000, 125.000) = 0 
    [125.000, 150.000) = 0 
    [150.000, 175.000) = 13 
    [175.000, 200.000) = 21 
    [200.000, 225.000) = 3 
    [225.000, 250.000) = 1 
    [250.000, 275.000) = 7 
    [275.000, 300.000) = 0 
    [300.000, 325.000) = 1 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    160.956 ms/op
     p(50.0000) =    185.860 ms/op
     p(90.0000) =    263.455 ms/op
     p(95.0000) =    270.873 ms/op
     p(99.0000) =    306.708 ms/op
     p(99.9000) =    306.708 ms/op
     p(99.9900) =    306.708 ms/op
     p(99.9990) =    306.708 ms/op
     p(99.9999) =    306.708 ms/op
    p(100.0000) =    306.708 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 51.16% complete, ETA 00:15:08
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 152, 156, 252, 252, 252, 252, 252, 252 ms/op
# Warmup Iteration   2: n = 7, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 133, 150, 150, 150, 150, 150, 150 ms/op
# Warmup Iteration   3: n = 7, mean = 134 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 134, 138, 138, 138, 138, 138, 138 ms/op
Iteration   1: n = 6, mean = 185 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 186, 218, 218, 218, 218, 218, 218 ms/op
Iteration   2: n = 5, mean = 192 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 152, 209, 227, 227, 227, 227, 227, 227 ms/op
Iteration   3: n = 7, mean = 145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 150, 154, 154, 154, 154, 154, 154 ms/op

# Run progress: 51.55% complete, ETA 00:15:00
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 185 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 152, 159, 272, 272, 272, 272, 272, 272 ms/op
# Warmup Iteration   2: n = 6, mean = 172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 150, 150, 218, 218, 218, 218, 218, 218 ms/op
# Warmup Iteration   3: n = 6, mean = 183 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 181, 219, 219, 219, 219, 219, 219 ms/op
Iteration   1: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 147, 215, 215, 215, 215, 215, 215 ms/op
Iteration   2: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 156, 220, 220, 220, 220, 220, 220 ms/op
Iteration   3: n = 6, mean = 172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 153, 218, 218, 218, 218, 218, 218 ms/op

# Run progress: 51.94% complete, ETA 00:14:53
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 157, 247, 247, 247, 247, 247, 247 ms/op
# Warmup Iteration   2: n = 7, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 133, 150, 150, 150, 150, 150, 150 ms/op
# Warmup Iteration   3: n = 7, mean = 134 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 135, 138, 138, 138, 138, 138, 138 ms/op
Iteration   1: n = 7, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 134, 211, 211, 211, 211, 211, 211 ms/op
Iteration   2: n = 6, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 146, 206, 206, 206, 206, 206, 206 ms/op
Iteration   3: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 142, 180, 180, 180, 180, 180, 180 ms/op


Result "write":
  N = 56
  mean =    161.043 ±(99.9%) 14.071 ms/op

  Histogram, ms/op:
    [120.000, 130.000) = 2 
    [130.000, 140.000) = 10 
    [140.000, 150.000) = 17 
    [150.000, 160.000) = 12 
    [160.000, 170.000) = 2 
    [170.000, 180.000) = 0 
    [180.000, 190.000) = 1 
    [190.000, 200.000) = 0 
    [200.000, 210.000) = 2 
    [210.000, 220.000) = 9 

  Percentiles, ms/op:
      p(0.0000) =    129.368 ms/op
     p(50.0000) =    149.291 ms/op
     p(90.0000) =    217.291 ms/op
     p(95.0000) =    218.602 ms/op
     p(99.0000) =    227.279 ms/op
     p(99.9000) =    227.279 ms/op
     p(99.9900) =    227.279 ms/op
     p(99.9990) =    227.279 ms/op
     p(99.9999) =    227.279 ms/op
    p(100.0000) =    227.279 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 52.33% complete, ETA 00:14:45
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 217 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 187, 195, 293, 293, 293, 293, 293, 293 ms/op
# Warmup Iteration   2: n = 6, mean = 166 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 163, 163, 175, 175, 175, 175, 175, 175 ms/op
# Warmup Iteration   3: n = 5, mean = 198 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 180, 186, 252, 252, 252, 252, 252, 252 ms/op
Iteration   1: n = 6, mean = 164 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 162, 163, 169, 169, 169, 169, 169, 169 ms/op
Iteration   2: n = 5, mean = 195 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 170, 186, 242, 242, 242, 242, 242, 242 ms/op
Iteration   3: n = 6, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 162, 162, 162, 162, 162, 162, 162 ms/op

# Run progress: 52.71% complete, ETA 00:14:38
# Fork: 2 of 3
# Warmup Iteration   1: n = 3, mean = 255 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 196, 273, 296, 296, 296, 296, 296, 296 ms/op
# Warmup Iteration   2: n = 6, mean = 180 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 178, 195, 195, 195, 195, 195, 195 ms/op
# Warmup Iteration   3: n = 6, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 169, 170, 170, 170, 170, 170, 170 ms/op
Iteration   1: n = 5, mean = 204 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 177, 194, 258, 258, 258, 258, 258, 258 ms/op
Iteration   2: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 168, 169, 175, 175, 175, 175, 175, 175 ms/op
Iteration   3: n = 6, mean = 172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 172, 176, 176, 176, 176, 176, 176 ms/op

# Run progress: 53.10% complete, ETA 00:14:31
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 236 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 189, 204, 314, 314, 314, 314, 314, 314 ms/op
# Warmup Iteration   2: n = 6, mean = 174 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 164, 172, 189, 189, 189, 189, 189, 189 ms/op
# Warmup Iteration   3: n = 6, mean = 165 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 164, 164, 171, 171, 171, 171, 171, 171 ms/op
Iteration   1: n = 4, mean = 232 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 218, 228, 252, 252, 252, 252, 252, 252 ms/op
Iteration   2: n = 6, mean = 177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 163, 179, 188, 188, 188, 188, 188, 188 ms/op
Iteration   3: n = 5, mean = 228 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 165, 230, 327, 327, 327, 327, 327, 327 ms/op


Result "write":
  N = 49
  mean =    186.342 ±(99.9%) 16.567 ms/op

  Histogram, ms/op:
    [100.000, 125.000) = 0 
    [125.000, 150.000) = 0 
    [150.000, 175.000) = 28 
    [175.000, 200.000) = 12 
    [200.000, 225.000) = 2 
    [225.000, 250.000) = 4 
    [250.000, 275.000) = 2 
    [275.000, 300.000) = 0 
    [300.000, 325.000) = 0 
    [325.000, 350.000) = 1 
    [350.000, 375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    161.481 ms/op
     p(50.0000) =    171.180 ms/op
     p(90.0000) =    235.930 ms/op
     p(95.0000) =    255.328 ms/op
     p(99.0000) =    326.631 ms/op
     p(99.9000) =    326.631 ms/op
     p(99.9900) =    326.631 ms/op
     p(99.9990) =    326.631 ms/op
     p(99.9999) =    326.631 ms/op
    p(100.0000) =    326.631 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 53.49% complete, ETA 00:14:23
# Fork: 1 of 3
# Warmup Iteration   1: n = 9, mean = 120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 102, 187, 187, 187, 187, 187, 187 ms/op
# Warmup Iteration   2: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 102, 155, 161, 161, 161, 161, 161 ms/op
# Warmup Iteration   3: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 101, 152, 158, 158, 158, 158, 158 ms/op
Iteration   1: n = 12, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 90, 91, 92, 92, 92, 92, 92 ms/op
Iteration   2: n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 102, 163, 163, 163, 163, 163, 163 ms/op
Iteration   3: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 91, 102, 102, 102, 102, 102, 102 ms/op

# Run progress: 53.88% complete, ETA 00:14:16
# Fork: 2 of 3
# Warmup Iteration   1: n = 11, mean = 98 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 100, 117, 119, 119, 119, 119, 119 ms/op
# Warmup Iteration   2: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 90, 92, 93, 93, 93, 93, 93 ms/op
# Warmup Iteration   3: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 89, 92, 93, 93, 93, 93, 93 ms/op
Iteration   1: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 89, 92, 92, 92, 92, 92, 92 ms/op
Iteration   2: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 89, 92, 92, 92, 92, 92, 92 ms/op
Iteration   3: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 89, 89, 89, 89, 89, 89, 89 ms/op

# Run progress: 54.26% complete, ETA 00:14:09
# Fork: 3 of 3
# Warmup Iteration   1: n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 104, 192, 192, 192, 192, 192, 192 ms/op
# Warmup Iteration   2: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 92, 94, 94, 94, 94, 94, 94 ms/op
# Warmup Iteration   3: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 92, 156, 160, 160, 160, 160, 160 ms/op
Iteration   1: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 123, 169, 169, 169, 169, 169, 169 ms/op
Iteration   2: n = 11, mean = 99 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 104, 104, 104, 104, 104, 104, 104 ms/op
Iteration   3: n = 9, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 104, 168, 168, 168, 168, 168, 168 ms/op


Result "readCrc":
  N = 96
  mean =     98.872 ±(99.9%) 6.346 ms/op

  Histogram, ms/op:
    [ 80.000,  85.000) = 0 
    [ 85.000,  90.000) = 30 
    [ 90.000,  95.000) = 32 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 21 
    [105.000, 110.000) = 3 
    [110.000, 115.000) = 2 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 1 
    [140.000, 145.000) = 1 
    [145.000, 150.000) = 0 
    [150.000, 155.000) = 0 
    [155.000, 160.000) = 0 
    [160.000, 165.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     88.474 ms/op
     p(50.0000) =     90.702 ms/op
     p(90.0000) =    109.629 ms/op
     p(95.0000) =    161.900 ms/op
     p(99.0000) =    168.821 ms/op
     p(99.9000) =    168.821 ms/op
     p(99.9900) =    168.821 ms/op
     p(99.9990) =    168.821 ms/op
     p(99.9999) =    168.821 ms/op
    p(100.0000) =    168.821 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 54.65% complete, ETA 00:14:02
# Fork: 1 of 3
# Warmup Iteration   1: n = 7, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 136, 231, 231, 231, 231, 231, 231 ms/op
# Warmup Iteration   2: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 137, 204, 204, 204, 204, 204, 204 ms/op
# Warmup Iteration   3: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 122, 123, 123, 123, 123, 123, 123 ms/op
Iteration   1: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 136, 212, 212, 212, 212, 212, 212 ms/op
Iteration   2: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 121, 121, 122, 122, 122, 122, 122, 122 ms/op
Iteration   3: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 122, 122, 122, 122, 122, 122, 122 ms/op

# Run progress: 55.04% complete, ETA 00:13:54
# Fork: 2 of 3
# Warmup Iteration   1: n = 7, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 141, 235, 235, 235, 235, 235, 235 ms/op
# Warmup Iteration   2: n = 8, mean = 125 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 125, 128, 128, 128, 128, 128, 128 ms/op
# Warmup Iteration   3: n = 8, mean = 126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 125, 131, 131, 131, 131, 131, 131 ms/op
Iteration   1: n = 7, mean = 148 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 140, 208, 208, 208, 208, 208, 208 ms/op
Iteration   2: n = 9, mean = 125 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 125, 126, 126, 126, 126, 126, 126 ms/op
Iteration   3: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 139, 169, 169, 169, 169, 169, 169 ms/op

# Run progress: 55.43% complete, ETA 00:13:47
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 135, 160, 160, 160, 160, 160, 160 ms/op
# Warmup Iteration   2: n = 8, mean = 126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 126, 130, 130, 130, 130, 130, 130 ms/op
# Warmup Iteration   3: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 122, 125, 125, 125, 125, 125, 125 ms/op
Iteration   1: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 140, 205, 205, 205, 205, 205, 205 ms/op
Iteration   2: n = 8, mean = 126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 125, 134, 134, 134, 134, 134, 134 ms/op
Iteration   3: n = 7, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 137, 218, 218, 218, 218, 218, 218 ms/op


Result "readCrc":
  N = 70
  mean =    136.425 ±(99.9%) 9.305 ms/op

  Histogram, ms/op:
    [120.000, 130.000) = 36 
    [130.000, 140.000) = 25 
    [140.000, 150.000) = 2 
    [150.000, 160.000) = 0 
    [160.000, 170.000) = 2 
    [170.000, 180.000) = 0 
    [180.000, 190.000) = 0 
    [190.000, 200.000) = 0 
    [200.000, 210.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =    120.979 ms/op
     p(50.0000) =    127.599 ms/op
     p(90.0000) =    164.076 ms/op
     p(95.0000) =    206.556 ms/op
     p(99.0000) =    217.842 ms/op
     p(99.9000) =    217.842 ms/op
     p(99.9900) =    217.842 ms/op
     p(99.9990) =    217.842 ms/op
     p(99.9999) =    217.842 ms/op
    p(100.0000) =    217.842 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 55.81% complete, ETA 00:13:40
# Fork: 1 of 3
# Warmup Iteration   1: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 104, 128, 130, 130, 130, 130, 130 ms/op
# Warmup Iteration   2: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 105, 154, 159, 159, 159, 159, 159 ms/op
# Warmup Iteration   3: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 93, 99, 100, 100, 100, 100, 100 ms/op
Iteration   1: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 116, 160, 160, 160, 160, 160, 160 ms/op
Iteration   2: n = 9, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 104, 165, 165, 165, 165, 165, 165 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 91, 92, 92, 92, 92, 92, 92 ms/op

# Run progress: 56.20% complete, ETA 00:13:33
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 102, 125, 127, 127, 127, 127, 127 ms/op
# Warmup Iteration   2: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 92, 95, 95, 95, 95, 95, 95 ms/op
# Warmup Iteration   3: n = 11, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 93, 96, 96, 96, 96, 96, 96 ms/op
Iteration   1: n = 12, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 91, 92, 92, 92, 92, 92, 92 ms/op
Iteration   2: n = 11, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 93, 93, 93, 93, 93, 93, 93 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 103, 156, 161, 161, 161, 161, 161 ms/op

# Run progress: 56.59% complete, ETA 00:13:26
# Fork: 3 of 3
# Warmup Iteration   1: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 110, 187, 187, 187, 187, 187, 187 ms/op
# Warmup Iteration   2: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 109, 163, 163, 163, 163, 163, 163 ms/op
# Warmup Iteration   3: n = 8, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 123, 172, 172, 172, 172, 172, 172 ms/op
Iteration   1: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 114, 123, 175, 175, 175, 175, 175, 175 ms/op
Iteration   2: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 109, 164, 164, 164, 164, 164, 164 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 11, mean = 96 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 96, 96, 96, 96, 96, 96, 96 ms/op


Result "readKey":
  N = 90
  mean =    103.704 ±(99.9%) 6.457 ms/op

  Histogram, ms/op:
    [ 90.000,  95.000) = 38 
    [ 95.000, 100.000) = 13 
    [100.000, 105.000) = 12 
    [105.000, 110.000) = 9 
    [110.000, 115.000) = 2 
    [115.000, 120.000) = 4 
    [120.000, 125.000) = 6 
    [125.000, 130.000) = 1 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 0 
    [150.000, 155.000) = 0 
    [155.000, 160.000) = 1 
    [160.000, 165.000) = 3 
    [165.000, 170.000) = 0 
    [170.000, 175.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     90.309 ms/op
     p(50.0000) =     96.207 ms/op
     p(90.0000) =    123.195 ms/op
     p(95.0000) =    160.353 ms/op
     p(99.0000) =    174.850 ms/op
     p(99.9000) =    174.850 ms/op
     p(99.9900) =    174.850 ms/op
     p(99.9990) =    174.850 ms/op
     p(99.9999) =    174.850 ms/op
    p(100.0000) =    174.850 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 56.98% complete, ETA 00:13:19
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 118, 205, 205, 205, 205, 205, 205 ms/op
# Warmup Iteration   2: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 105, 172, 172, 172, 172, 172, 172 ms/op
# Warmup Iteration   3: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 110, 115, 115, 115, 115, 115, 115 ms/op
Iteration   1: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 114, 116, 172, 172, 172, 172, 172, 172 ms/op
Iteration   2: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 103, 112, 113, 113, 113, 113, 113 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 103, 104, 104, 104, 104, 104, 104 ms/op

# Run progress: 57.36% complete, ETA 00:13:12
# Fork: 2 of 3
# Warmup Iteration   1: n = 8, mean = 134 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 118, 125, 203, 203, 203, 203, 203, 203 ms/op
# Warmup Iteration   2: n = 10, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 110, 114, 114, 114, 114, 114, 114 ms/op
# Warmup Iteration   3: n = 9, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 110, 115, 115, 115, 115, 115, 115 ms/op
Iteration   1: n = 8, mean = 126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 110, 168, 168, 168, 168, 168, 168 ms/op
Iteration   2: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 123, 151, 151, 151, 151, 151, 151 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 110, 174, 174, 174, 174, 174, 174 ms/op

# Run progress: 57.75% complete, ETA 00:13:05
# Fork: 3 of 3
# Warmup Iteration   1: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 106, 131, 132, 132, 132, 132, 132 ms/op
# Warmup Iteration   2: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 103, 169, 169, 169, 169, 169, 169 ms/op
# Warmup Iteration   3: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 116, 169, 169, 169, 169, 169, 169 ms/op
Iteration   1: n = 8, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 117, 120, 166, 166, 166, 166, 166, 166 ms/op
Iteration   2: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 106, 169, 169, 169, 169, 169, 169 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 93, 94, 95, 95, 95, 95, 95 ms/op


Result "readKey":
  N = 82
  mean =    113.854 ±(99.9%) 7.678 ms/op

  Histogram, ms/op:
    [ 90.000,  95.000) = 11 
    [ 95.000, 100.000) = 3 
    [100.000, 105.000) = 21 
    [105.000, 110.000) = 8 
    [110.000, 115.000) = 17 
    [115.000, 120.000) = 6 
    [120.000, 125.000) = 5 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 1 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 2 
    [150.000, 155.000) = 1 
    [155.000, 160.000) = 0 
    [160.000, 165.000) = 1 
    [165.000, 170.000) = 4 
    [170.000, 175.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     93.323 ms/op
     p(50.0000) =    108.331 ms/op
     p(90.0000) =    150.418 ms/op
     p(95.0000) =    167.654 ms/op
     p(99.0000) =    173.801 ms/op
     p(99.9000) =    173.801 ms/op
     p(99.9900) =    173.801 ms/op
     p(99.9990) =    173.801 ms/op
     p(99.9999) =    173.801 ms/op
    p(100.0000) =    173.801 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readRev
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 58.14% complete, ETA 00:12:58
# Fork: 1 of 3
# Warmup Iteration   1: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 51, 69, 76, 76, 76, 76 ms/op
# Warmup Iteration   2: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 31, 48, 59, 60, 60, 60, 60 ms/op
# Warmup Iteration   3: n = 35, mean = 29 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 30, 30, 30, 30, 30, 30, 30 ms/op
Iteration   1: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 30, 46, 58, 61, 61, 61, 61 ms/op
Iteration   2: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 29, 40, 52, 62, 62, 62, 62 ms/op
Iteration   3: n = 34, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 31, 31, 31, 31, 31, 31, 31 ms/op

# Run progress: 58.53% complete, ETA 00:12:50
# Fork: 2 of 3
# Warmup Iteration   1: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 29, 37, 59, 77, 77, 77, 77 ms/op
# Warmup Iteration   2: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 29, 49, 55, 55, 55, 55, 55 ms/op
# Warmup Iteration   3: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 29, 38, 51, 60, 60, 60, 60 ms/op
Iteration   1: n = 33, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 31, 41, 47, 53, 53, 53, 53 ms/op
Iteration   2: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 31, 38, 51, 59, 59, 59, 59 ms/op
Iteration   3: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 29, 38, 51, 61, 61, 61, 61 ms/op

# Run progress: 58.91% complete, ETA 00:12:43
# Fork: 3 of 3
# Warmup Iteration   1: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 29, 37, 59, 76, 76, 76, 76 ms/op
# Warmup Iteration   2: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 32, 48, 57, 58, 58, 58, 58 ms/op
# Warmup Iteration   3: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 31, 50, 61, 62, 62, 62, 62 ms/op
Iteration   1: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 32, 50, 60, 63, 63, 63, 63 ms/op
Iteration   2: n = 37, mean = 27 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 26, 29, 29, 30, 30, 30, 30 ms/op
Iteration   3: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 32, 51, 60, 61, 61, 61, 61 ms/op


Result "readRev":
  N = 289
  mean =     31.560 ±(99.9%) 1.363 ms/op

  Histogram, ms/op:
    [20.000, 25.000) = 0 
    [25.000, 30.000) = 164 
    [30.000, 35.000) = 84 
    [35.000, 40.000) = 13 
    [40.000, 45.000) = 9 
    [45.000, 50.000) = 8 
    [50.000, 55.000) = 2 
    [55.000, 60.000) = 3 
    [60.000, 65.000) = 6 

  Percentiles, ms/op:
      p(0.0000) =     25.592 ms/op
     p(50.0000) =     29.426 ms/op
     p(90.0000) =     39.911 ms/op
     p(95.0000) =     47.677 ms/op
     p(99.0000) =     61.066 ms/op
     p(99.9000) =     63.439 ms/op
     p(99.9900) =     63.439 ms/op
     p(99.9990) =     63.439 ms/op
     p(99.9999) =     63.439 ms/op
    p(100.0000) =     63.439 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readRev
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 59.30% complete, ETA 00:12:35
# Fork: 1 of 3
# Warmup Iteration   1: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 32, 38, 70, 92, 92, 92, 92 ms/op
# Warmup Iteration   2: n = 36, mean = 28 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 28, 29, 30, 30, 30, 30, 30 ms/op
# Warmup Iteration   3: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 32, 41, 55, 63, 63, 63, 63 ms/op
Iteration   1: n = 35, mean = 29 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 28, 29, 30, 30, 30, 30, 30 ms/op
Iteration   2: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 32, 51, 63, 63, 63, 63, 63 ms/op
Iteration   3: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 32, 42, 56, 64, 64, 64, 64 ms/op

# Run progress: 59.69% complete, ETA 00:12:28
# Fork: 2 of 3
# Warmup Iteration   1: n = 34, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 30, 32, 38, 49, 49, 49, 49 ms/op
# Warmup Iteration   2: n = 37, mean = 28 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 28, 28, 28, 29, 29, 29, 29 ms/op
# Warmup Iteration   3: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 31, 39, 52, 60, 60, 60, 60 ms/op
Iteration   1: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 32, 42, 54, 57, 57, 57, 57 ms/op
Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 31, 41, 54, 62, 62, 62, 62 ms/op
Iteration   3: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 31, 40, 55, 64, 64, 64, 64 ms/op

# Run progress: 60.08% complete, ETA 00:12:21
# Fork: 3 of 3
# Warmup Iteration   1: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 31, 39, 66, 87, 87, 87, 87 ms/op
# Warmup Iteration   2: n = 36, mean = 28 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 28, 29, 30, 30, 30, 30, 30 ms/op
# Warmup Iteration   3: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 31, 39, 53, 62, 62, 62, 62 ms/op
Iteration   1: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 29, 51, 58, 61, 61, 61, 61 ms/op
Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 31, 43, 50, 56, 56, 56, 56 ms/op
Iteration   3: n = 34, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 28, 32, 32, 32, 32, 32, 32 ms/op


Result "readRev":
  N = 281
  mean =     32.489 ±(99.9%) 1.349 ms/op

  Histogram, ms/op:
    [20.000, 25.000) = 0 
    [25.000, 30.000) = 110 
    [30.000, 35.000) = 132 
    [35.000, 40.000) = 11 
    [40.000, 45.000) = 9 
    [45.000, 50.000) = 7 
    [50.000, 55.000) = 4 
    [55.000, 60.000) = 2 
    [60.000, 65.000) = 6 

  Percentiles, ms/op:
      p(0.0000) =     27.427 ms/op
     p(50.0000) =     30.900 ms/op
     p(90.0000) =     40.501 ms/op
     p(95.0000) =     48.785 ms/op
     p(99.0000) =     63.110 ms/op
     p(99.9000) =     63.832 ms/op
     p(99.9900) =     63.832 ms/op
     p(99.9990) =     63.832 ms/op
     p(99.9999) =     63.832 ms/op
    p(100.0000) =     63.832 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 60.47% complete, ETA 00:12:13
# Fork: 1 of 3
# Warmup Iteration   1: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 49, 50, 68, 86, 86, 86, 86, 86 ms/op
# Warmup Iteration   2: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 46, 50, 61, 70, 71, 71, 71, 71 ms/op
# Warmup Iteration   3: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 43, 67, 72, 73, 73, 73, 73 ms/op
Iteration   1: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 50, 50, 51, 51, 51, 51, 51 ms/op
Iteration   2: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 45, 45, 45, 45, 45, 45, 45 ms/op
Iteration   3: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 45, 45, 45, 45, 45, 45, 45 ms/op

# Run progress: 60.85% complete, ETA 00:12:06
# Fork: 2 of 3
# Warmup Iteration   1: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 49, 50, 67, 89, 89, 89, 89, 89 ms/op
# Warmup Iteration   2: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 44, 52, 61, 62, 62, 62, 62 ms/op
# Warmup Iteration   3: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 50, 66, 74, 74, 74, 74, 74 ms/op
Iteration   1: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 43, 63, 67, 67, 67, 67, 67 ms/op
Iteration   2: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 47, 50, 65, 73, 74, 74, 74, 74 ms/op
Iteration   3: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 44, 45, 45, 46, 46, 46, 46, 46 ms/op

# Run progress: 61.24% complete, ETA 00:11:59
# Fork: 3 of 3
# Warmup Iteration   1: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 50, 50, 67, 88, 88, 88, 88, 88 ms/op
# Warmup Iteration   2: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 44, 45, 46, 48, 48, 48, 48, 48 ms/op
# Warmup Iteration   3: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 44, 45, 45, 45, 45, 45, 45, 45 ms/op
Iteration   1: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 50, 60, 65, 65, 65, 65, 65 ms/op
Iteration   2: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 44, 45, 50, 50, 50, 50, 50, 50 ms/op
Iteration   3: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 40, 52, 63, 66, 66, 66, 66 ms/op


Result "readSeq":
  N = 200
  mean =     46.148 ±(99.9%) 1.337 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 34 
    [40.000, 45.000) = 92 
    [45.000, 50.000) = 46 
    [50.000, 55.000) = 17 
    [55.000, 60.000) = 2 
    [60.000, 65.000) = 4 
    [65.000, 70.000) = 4 
    [70.000, 75.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     37.618 ms/op
     p(50.0000) =     44.761 ms/op
     p(90.0000) =     50.201 ms/op
     p(95.0000) =     57.229 ms/op
     p(99.0000) =     67.228 ms/op
     p(99.9000) =     73.531 ms/op
     p(99.9900) =     73.531 ms/op
     p(99.9990) =     73.531 ms/op
     p(99.9999) =     73.531 ms/op
    p(100.0000) =     73.531 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 61.63% complete, ETA 00:11:51
# Fork: 1 of 3
# Warmup Iteration   1: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 42, 60, 95, 100, 100, 100, 100 ms/op
# Warmup Iteration   2: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 42, 55, 65, 67, 67, 67, 67 ms/op
# Warmup Iteration   3: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 38, 39, 39, 39, 39, 39, 39 ms/op
Iteration   1: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 38, 38, 38, 38, 38, 38, 38 ms/op
Iteration   2: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 42, 55, 67, 70, 70, 70, 70 ms/op
Iteration   3: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 37, 37, 38, 39, 39, 39, 39 ms/op

# Run progress: 62.02% complete, ETA 00:11:44
# Fork: 2 of 3
# Warmup Iteration   1: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 49, 50, 65, 100, 100, 100, 100, 100 ms/op
# Warmup Iteration   2: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 50, 62, 70, 70, 70, 70, 70 ms/op
# Warmup Iteration   3: n = 22, mean = 47 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 46, 58, 69, 71, 71, 71, 71 ms/op
Iteration   1: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 46, 50, 65, 74, 74, 74, 74, 74 ms/op
Iteration   2: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 52, 71, 72, 72, 72, 72, 72 ms/op
Iteration   3: n = 22, mean = 47 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 46, 50, 50, 50, 50, 50, 50 ms/op

# Run progress: 62.40% complete, ETA 00:11:37
# Fork: 3 of 3
# Warmup Iteration   1: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 39, 39, 51, 56, 56, 56, 56 ms/op
# Warmup Iteration   2: n = 30, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 34, 34, 35, 35, 35, 35 ms/op
# Warmup Iteration   3: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 33, 34, 34, 34, 34, 34 ms/op
Iteration   1: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 33, 34, 34, 34, 34, 34 ms/op
Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 33, 34, 34, 34, 34, 34 ms/op
Iteration   3: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 33, 34, 34, 34, 34, 34 ms/op


Result "readSeq":
  N = 230
  mean =     40.074 ±(99.9%) 1.871 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 93 
    [35.000, 40.000) = 55 
    [40.000, 45.000) = 29 
    [45.000, 50.000) = 32 
    [50.000, 55.000) = 8 
    [55.000, 60.000) = 4 
    [60.000, 65.000) = 3 
    [65.000, 70.000) = 3 
    [70.000, 75.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =     33.030 ms/op
     p(50.0000) =     37.487 ms/op
     p(90.0000) =     49.873 ms/op
     p(95.0000) =     56.944 ms/op
     p(99.0000) =     71.453 ms/op
     p(99.9000) =     73.925 ms/op
     p(99.9900) =     73.925 ms/op
     p(99.9990) =     73.925 ms/op
     p(99.9999) =     73.925 ms/op
    p(100.0000) =     73.925 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 62.79% complete, ETA 00:11:29
# Fork: 1 of 3
# Warmup Iteration   1: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 72, 140, 152, 152, 152, 152, 152 ms/op
# Warmup Iteration   2: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 71, 99, 114, 114, 114, 114, 114 ms/op
# Warmup Iteration   3: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 61, 62, 62, 62, 62, 62, 62 ms/op
Iteration   1: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 87, 109, 117, 117, 117, 117, 117 ms/op
Iteration   2: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 70, 100, 116, 116, 116, 116, 116 ms/op
Iteration   3: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 61, 61, 61, 61, 61, 61, 61 ms/op

# Run progress: 63.18% complete, ETA 00:11:22
# Fork: 2 of 3
# Warmup Iteration   1: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 62, 104, 145, 145, 145, 145, 145 ms/op
# Warmup Iteration   2: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 54, 54, 56, 56, 56, 56, 56 ms/op
# Warmup Iteration   3: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 54, 54, 54, 54, 54, 54, 54 ms/op
Iteration   1: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 67, 92, 112, 112, 112, 112, 112 ms/op
Iteration   2: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 61, 88, 112, 112, 112, 112, 112 ms/op
Iteration   3: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 61, 87, 111, 111, 111, 111, 111 ms/op

# Run progress: 63.57% complete, ETA 00:11:15
# Fork: 3 of 3
# Warmup Iteration   1: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 65, 76, 93, 93, 93, 93, 93 ms/op
# Warmup Iteration   2: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 65, 91, 107, 107, 107, 107, 107 ms/op
# Warmup Iteration   3: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 65, 93, 112, 112, 112, 112, 112 ms/op
Iteration   1: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 75, 107, 118, 118, 118, 118, 118 ms/op
Iteration   2: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 66, 94, 96, 96, 96, 96, 96 ms/op
Iteration   3: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 57, 66, 66, 66, 66, 66, 66 ms/op


Result "readXxh64":
  N = 137
  mean =     68.085 ±(99.9%) 3.876 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 9 
    [ 55.000,  60.000) = 15 
    [ 60.000,  65.000) = 47 
    [ 65.000,  70.000) = 25 
    [ 70.000,  75.000) = 12 
    [ 75.000,  80.000) = 11 
    [ 80.000,  85.000) = 2 
    [ 85.000,  90.000) = 7 
    [ 90.000,  95.000) = 1 
    [ 95.000, 100.000) = 2 
    [100.000, 105.000) = 0 
    [105.000, 110.000) = 0 
    [110.000, 115.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =     53.740 ms/op
     p(50.0000) =     63.570 ms/op
     p(90.0000) =     86.639 ms/op
     p(95.0000) =     98.134 ms/op
     p(99.0000) =    117.779 ms/op
     p(99.9000) =    118.227 ms/op
     p(99.9900) =    118.227 ms/op
     p(99.9990) =    118.227 ms/op
     p(99.9999) =    118.227 ms/op
    p(100.0000) =    118.227 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 63.95% complete, ETA 00:11:07
# Fork: 1 of 3
# Warmup Iteration   1: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 62, 112, 152, 152, 152, 152, 152 ms/op
# Warmup Iteration   2: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 55, 75, 96, 96, 96, 96, 96 ms/op
# Warmup Iteration   3: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 55, 55, 55, 55, 55, 55, 55 ms/op
Iteration   1: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 68, 95, 96, 96, 96, 96, 96 ms/op
Iteration   2: n = 13, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 71, 110, 111, 111, 111, 111, 111 ms/op
Iteration   3: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 55, 62, 62, 62, 62, 62, 62 ms/op

# Run progress: 64.34% complete, ETA 00:11:00
# Fork: 2 of 3
# Warmup Iteration   1: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 61, 79, 106, 106, 106, 106, 106 ms/op
# Warmup Iteration   2: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 54, 55, 56, 56, 56, 56, 56 ms/op
# Warmup Iteration   3: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 54, 56, 56, 56, 56, 56, 56 ms/op
Iteration   1: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 66, 84, 102, 102, 102, 102, 102 ms/op
Iteration   2: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 64, 87, 104, 104, 104, 104, 104 ms/op
Iteration   3: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 68, 91, 106, 106, 106, 106, 106 ms/op

# Run progress: 64.73% complete, ETA 00:10:53
# Fork: 3 of 3
# Warmup Iteration   1: n = 13, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 71, 126, 156, 156, 156, 156, 156 ms/op
# Warmup Iteration   2: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 63, 64, 65, 65, 65, 65, 65 ms/op
# Warmup Iteration   3: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 63, 64, 64, 64, 64, 64, 64 ms/op
Iteration   1: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 68, 71, 108, 114, 114, 114, 114, 114 ms/op
Iteration   2: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 64, 71, 71, 71, 71, 71, 71 ms/op
Iteration   3: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 69, 101, 118, 118, 118, 118, 118 ms/op


Result "readXxh64":
  N = 135
  mean =     69.055 ±(99.9%) 3.697 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 15 
    [ 55.000,  60.000) = 4 
    [ 60.000,  65.000) = 34 
    [ 65.000,  70.000) = 43 
    [ 70.000,  75.000) = 18 
    [ 75.000,  80.000) = 5 
    [ 80.000,  85.000) = 3 
    [ 85.000,  90.000) = 1 
    [ 90.000,  95.000) = 2 
    [ 95.000, 100.000) = 2 
    [100.000, 105.000) = 3 
    [105.000, 110.000) = 2 
    [110.000, 115.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     53.805 ms/op
     p(50.0000) =     67.633 ms/op
     p(90.0000) =     84.725 ms/op
     p(95.0000) =    102.131 ms/op
     p(99.0000) =    116.240 ms/op
     p(99.9000) =    117.703 ms/op
     p(99.9900) =    117.703 ms/op
     p(99.9990) =    117.703 ms/op
     p(99.9999) =    117.703 ms/op
    p(100.0000) =    117.703 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 65.12% complete, ETA 00:10:45
# Fork: 1 of 3
# Warmup Iteration   1: n = 6, mean = 164 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 156, 211, 211, 211, 211, 211, 211 ms/op
# Warmup Iteration   2: n = 6, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 166, 220, 220, 220, 220, 220, 220 ms/op
# Warmup Iteration   3: n = 5, mean = 193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 155, 183, 248, 248, 248, 248, 248, 248 ms/op
Iteration   1: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 153, 153, 221, 221, 221, 221, 221, 221 ms/op
Iteration   2: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 156, 169, 210, 210, 210, 210, 210, 210 ms/op
Iteration   3: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 152, 157, 234, 234, 234, 234, 234, 234 ms/op

# Run progress: 65.50% complete, ETA 00:10:38
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 150, 202, 202, 202, 202, 202, 202 ms/op
# Warmup Iteration   2: n = 6, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 150, 212, 212, 212, 212, 212, 212 ms/op
# Warmup Iteration   3: n = 6, mean = 165 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 146, 210, 210, 210, 210, 210, 210 ms/op
Iteration   1: n = 5, mean = 193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 153, 210, 226, 226, 226, 226, 226, 226 ms/op
Iteration   2: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 150, 158, 228, 228, 228, 228, 228, 228 ms/op
Iteration   3: n = 7, mean = 143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 137, 153, 153, 153, 153, 153, 153 ms/op

# Run progress: 65.89% complete, ETA 00:10:31
# Fork: 3 of 3
# Warmup Iteration   1: n = 6, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 140, 150, 202, 202, 202, 202, 202, 202 ms/op
# Warmup Iteration   2: n = 7, mean = 138 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 131, 177, 177, 177, 177, 177, 177 ms/op
# Warmup Iteration   3: n = 6, mean = 171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 151, 215, 215, 215, 215, 215, 215 ms/op
Iteration   1: n = 5, mean = 190 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 151, 213, 218, 218, 218, 218, 218, 218 ms/op
Iteration   2: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 149, 154, 154, 154, 154, 154, 154 ms/op
Iteration   3: n = 7, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 136, 138, 138, 138, 138, 138, 138 ms/op


Result "write":
  N = 55
  mean =    165.937 ±(99.9%) 14.910 ms/op

  Histogram, ms/op:
    [130.000, 140.000) = 13 
    [140.000, 150.000) = 2 
    [150.000, 160.000) = 24 
    [160.000, 170.000) = 1 
    [170.000, 180.000) = 0 
    [180.000, 190.000) = 1 
    [190.000, 200.000) = 1 
    [200.000, 210.000) = 2 
    [210.000, 220.000) = 6 
    [220.000, 230.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =    134.480 ms/op
     p(50.0000) =    153.092 ms/op
     p(90.0000) =    219.310 ms/op
     p(95.0000) =    226.807 ms/op
     p(99.0000) =    233.570 ms/op
     p(99.9000) =    233.570 ms/op
     p(99.9900) =    233.570 ms/op
     p(99.9990) =    233.570 ms/op
     p(99.9999) =    233.570 ms/op
    p(100.0000) =    233.570 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 66.28% complete, ETA 00:10:24
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 226 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 187, 198, 321, 321, 321, 321, 321, 321 ms/op
# Warmup Iteration   2: n = 6, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 163, 164, 230, 230, 230, 230, 230, 230 ms/op
# Warmup Iteration   3: n = 4, mean = 234 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 192, 236, 272, 272, 272, 272, 272, 272 ms/op
Iteration   1: n = 5, mean = 224 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 200, 202, 258, 258, 258, 258, 258, 258 ms/op
Iteration   2: n = 5, mean = 214 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 200, 201, 263, 263, 263, 263, 263, 263 ms/op
Iteration   3: n = 5, mean = 210 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 181, 200, 268, 268, 268, 268, 268, 268 ms/op

# Run progress: 66.67% complete, ETA 00:10:16
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 226 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 196, 197, 315, 315, 315, 315, 315, 315 ms/op
# Warmup Iteration   2: n = 6, mean = 171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 163, 169, 186, 186, 186, 186, 186, 186 ms/op
# Warmup Iteration   3: n = 5, mean = 232 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 199, 241, 260, 260, 260, 260, 260, 260 ms/op
Iteration   1: n = 5, mean = 206 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 177, 199, 256, 256, 256, 256, 256, 256 ms/op
Iteration   2: n = 5, mean = 191 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 174, 174, 260, 260, 260, 260, 260, 260 ms/op
Iteration   3: n = 5, mean = 215 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 192, 198, 256, 256, 256, 256, 256, 256 ms/op

# Run progress: 67.05% complete, ETA 00:10:09
# Fork: 3 of 3
# Warmup Iteration   1: n = 5, mean = 211 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 186, 194, 285, 285, 285, 285, 285, 285 ms/op
# Warmup Iteration   2: n = 4, mean = 239 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 195, 220, 319, 319, 319, 319, 319, 319 ms/op
# Warmup Iteration   3: n = 4, mean = 232 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 191, 224, 290, 290, 290, 290, 290, 290 ms/op
Iteration   1: n = 5, mean = 202 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 173, 192, 262, 262, 262, 262, 262, 262 ms/op
Iteration   2: n = 5, mean = 192 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 165, 193, 241, 241, 241, 241, 241, 241 ms/op
Iteration   3: n = 5, mean = 210 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 179, 203, 262, 262, 262, 262, 262, 262 ms/op


Result "write":
  N = 45
  mean =    207.070 ±(99.9%) 16.055 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 0 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 7 
    [175.000, 187.500) = 3 
    [187.500, 200.000) = 12 
    [200.000, 212.500) = 12 
    [212.500, 225.000) = 0 
    [225.000, 237.500) = 1 
    [237.500, 250.000) = 1 
    [250.000, 262.500) = 7 
    [262.500, 275.000) = 2 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    165.413 ms/op
     p(50.0000) =    200.016 ms/op
     p(90.0000) =    260.361 ms/op
     p(95.0000) =    262.616 ms/op
     p(99.0000) =    268.435 ms/op
     p(99.9000) =    268.435 ms/op
     p(99.9900) =    268.435 ms/op
     p(99.9990) =    268.435 ms/op
     p(99.9999) =    268.435 ms/op
    p(100.0000) =    268.435 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 67.44% complete, ETA 00:10:02
# Fork: 1 of 3
# Warmup Iteration   1: n = 6, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 151, 195, 195, 195, 195, 195, 195 ms/op
# Warmup Iteration   2: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 149, 207, 207, 207, 207, 207, 207 ms/op
# Warmup Iteration   3: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 131, 132, 132, 132, 132, 132, 132 ms/op
Iteration   1: n = 6, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 152, 214, 214, 214, 214, 214, 214 ms/op
Iteration   2: n = 6, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 147, 211, 211, 211, 211, 211, 211 ms/op
Iteration   3: n = 5, mean = 186 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 190, 212, 212, 212, 212, 212, 212 ms/op

# Run progress: 67.83% complete, ETA 00:09:55
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 149, 232, 232, 232, 232, 232, 232 ms/op
# Warmup Iteration   2: n = 6, mean = 166 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 147, 207, 207, 207, 207, 207, 207 ms/op
# Warmup Iteration   3: n = 7, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 147, 197, 197, 197, 197, 197, 197 ms/op
Iteration   1: n = 6, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 149, 212, 212, 212, 212, 212, 212 ms/op
Iteration   2: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 128, 131, 131, 131, 131, 131, 131 ms/op
Iteration   3: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 131, 136, 136, 136, 136, 136, 136 ms/op

# Run progress: 68.22% complete, ETA 00:09:47
# Fork: 3 of 3
# Warmup Iteration   1: n = 6, mean = 166 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 150, 240, 240, 240, 240, 240, 240 ms/op
# Warmup Iteration   2: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 131, 134, 134, 134, 134, 134, 134 ms/op
# Warmup Iteration   3: n = 7, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 132, 134, 134, 134, 134, 134, 134 ms/op
Iteration   1: n = 7, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 151, 214, 214, 214, 214, 214, 214 ms/op
Iteration   2: n = 6, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 147, 217, 217, 217, 217, 217, 217 ms/op
Iteration   3: n = 5, mean = 199 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 156, 158, 307, 307, 307, 307, 307, 307 ms/op


Result "write":
  N = 57
  mean =    157.512 ±(99.9%) 16.245 ms/op

  Histogram, ms/op:
    [100.000, 125.000) = 0 
    [125.000, 150.000) = 34 
    [150.000, 175.000) = 11 
    [175.000, 200.000) = 2 
    [200.000, 225.000) = 9 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 0 
    [275.000, 300.000) = 0 
    [300.000, 325.000) = 1 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    127.795 ms/op
     p(50.0000) =    147.325 ms/op
     p(90.0000) =    212.441 ms/op
     p(95.0000) =    216.819 ms/op
     p(99.0000) =    307.233 ms/op
     p(99.9000) =    307.233 ms/op
     p(99.9900) =    307.233 ms/op
     p(99.9990) =    307.233 ms/op
     p(99.9999) =    307.233 ms/op
    p(100.0000) =    307.233 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 68.60% complete, ETA 00:09:40
# Fork: 1 of 3
# Warmup Iteration   1: n = 5, mean = 204 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 174, 196, 253, 253, 253, 253, 253, 253 ms/op
# Warmup Iteration   2: n = 6, mean = 172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 171, 179, 179, 179, 179, 179, 179 ms/op
# Warmup Iteration   3: n = 4, mean = 229 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 198, 231, 256, 256, 256, 256, 256, 256 ms/op
Iteration   1: n = 5, mean = 220 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 190, 195, 266, 266, 266, 266, 266, 266 ms/op
Iteration   2: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 170, 171, 195, 195, 195, 195, 195, 195 ms/op
Iteration   3: n = 5, mean = 221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 198, 213, 261, 261, 261, 261, 261, 261 ms/op

# Run progress: 68.99% complete, ETA 00:09:33
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 232 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 195, 202, 327, 327, 327, 327, 327, 327 ms/op
# Warmup Iteration   2: n = 5, mean = 217 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 197, 197, 250, 250, 250, 250, 250, 250 ms/op
# Warmup Iteration   3: n = 5, mean = 215 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 197, 202, 256, 256, 256, 256, 256, 256 ms/op
Iteration   1: n = 5, mean = 221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 196, 198, 262, 262, 262, 262, 262, 262 ms/op
Iteration   2: n = 5, mean = 184 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 173, 179, 198, 198, 198, 198, 198, 198 ms/op
Iteration   3: n = 4, mean = 233 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 198, 230, 275, 275, 275, 275, 275, 275 ms/op

# Run progress: 69.38% complete, ETA 00:09:26
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 218 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 190, 197, 288, 288, 288, 288, 288, 288 ms/op
# Warmup Iteration   2: n = 5, mean = 207 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 181, 198, 259, 259, 259, 259, 259, 259 ms/op
# Warmup Iteration   3: n = 5, mean = 182 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 178, 199, 199, 199, 199, 199, 199 ms/op
Iteration   1: n = 5, mean = 204 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 175, 199, 249, 249, 249, 249, 249, 249 ms/op
Iteration   2: n = 6, mean = 173 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 172, 173, 175, 175, 175, 175, 175, 175 ms/op
Iteration   3: n = 5, mean = 208 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 184, 198, 260, 260, 260, 260, 260, 260 ms/op


Result "write":
  N = 46
  mean =    202.369 ±(99.9%) 16.503 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 0 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 14 
    [175.000, 187.500) = 2 
    [187.500, 200.000) = 19 
    [200.000, 212.500) = 0 
    [212.500, 225.000) = 1 
    [225.000, 237.500) = 1 
    [237.500, 250.000) = 1 
    [250.000, 262.500) = 6 
    [262.500, 275.000) = 1 
    [275.000, 287.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    169.869 ms/op
     p(50.0000) =    197.657 ms/op
     p(90.0000) =    260.912 ms/op
     p(95.0000) =    264.516 ms/op
     p(99.0000) =    275.251 ms/op
     p(99.9000) =    275.251 ms/op
     p(99.9900) =    275.251 ms/op
     p(99.9990) =    275.251 ms/op
     p(99.9999) =    275.251 ms/op
    p(100.0000) =    275.251 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 69.77% complete, ETA 00:09:18
# Fork: 1 of 3
# Warmup Iteration   1: n = 6, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 149, 246, 246, 246, 246, 246, 246 ms/op
# Warmup Iteration   2: n = 7, mean = 143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 131, 213, 213, 213, 213, 213, 213 ms/op
# Warmup Iteration   3: n = 7, mean = 141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 145, 147, 147, 147, 147, 147, 147 ms/op
Iteration   1: n = 6, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 147, 213, 213, 213, 213, 213, 213 ms/op
Iteration   2: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 160, 201, 201, 201, 201, 201, 201 ms/op
Iteration   3: n = 6, mean = 171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 162, 219, 219, 219, 219, 219, 219 ms/op

# Run progress: 70.16% complete, ETA 00:09:11
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 147, 229, 229, 229, 229, 229, 229 ms/op
# Warmup Iteration   2: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 150, 254, 254, 254, 254, 254, 254 ms/op
# Warmup Iteration   3: n = 5, mean = 203 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 214, 269, 269, 269, 269, 269, 269 ms/op
Iteration   1: n = 6, mean = 185 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 158, 185, 215, 215, 215, 215, 215, 215 ms/op
Iteration   2: n = 7, mean = 142 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 147, 149, 149, 149, 149, 149, 149 ms/op
Iteration   3: n = 6, mean = 155 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 140, 145, 209, 209, 209, 209, 209, 209 ms/op

# Run progress: 70.54% complete, ETA 00:09:04
# Fork: 3 of 3
# Warmup Iteration   1: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 150, 226, 226, 226, 226, 226, 226 ms/op
# Warmup Iteration   2: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 134, 218, 218, 218, 218, 218, 218 ms/op
# Warmup Iteration   3: n = 5, mean = 190 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 153, 155, 261, 261, 261, 261, 261, 261 ms/op
Iteration   1: n = 6, mean = 164 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 153, 155, 211, 211, 211, 211, 211, 211 ms/op
Iteration   2: n = 7, mean = 141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 136, 153, 153, 153, 153, 153, 153 ms/op
Iteration   3: n = 6, mean = 172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 153, 155, 215, 215, 215, 215, 215, 215 ms/op


Result "write":
  N = 56
  mean =    160.559 ±(99.9%) 12.408 ms/op

  Histogram, ms/op:
    [120.000, 130.000) = 3 
    [130.000, 140.000) = 5 
    [140.000, 150.000) = 20 
    [150.000, 160.000) = 13 
    [160.000, 170.000) = 1 
    [170.000, 180.000) = 2 
    [180.000, 190.000) = 0 
    [190.000, 200.000) = 2 
    [200.000, 210.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =    128.713 ms/op
     p(50.0000) =    150.602 ms/op
     p(90.0000) =    211.000 ms/op
     p(95.0000) =    215.260 ms/op
     p(99.0000) =    219.152 ms/op
     p(99.9000) =    219.152 ms/op
     p(99.9900) =    219.152 ms/op
     p(99.9990) =    219.152 ms/op
     p(99.9999) =    219.152 ms/op
    p(100.0000) =    219.152 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 70.93% complete, ETA 00:08:57
# Fork: 1 of 3
# Warmup Iteration   1: n = 5, mean = 202 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 184, 285, 285, 285, 285, 285, 285 ms/op
# Warmup Iteration   2: n = 5, mean = 199 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 175, 184, 242, 242, 242, 242, 242, 242 ms/op
# Warmup Iteration   3: n = 6, mean = 168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 168, 168, 169, 169, 169, 169, 169, 169 ms/op
Iteration   1: n = 5, mean = 203 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 179, 193, 256, 256, 256, 256, 256, 256 ms/op
Iteration   2: n = 6, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 168, 168, 173, 173, 173, 173, 173, 173 ms/op
Iteration   3: n = 6, mean = 168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 167, 168, 169, 169, 169, 169, 169, 169 ms/op

# Run progress: 71.32% complete, ETA 00:08:50
# Fork: 2 of 3
# Warmup Iteration   1: n = 5, mean = 208 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 172, 195, 289, 289, 289, 289, 289, 289 ms/op
# Warmup Iteration   2: n = 5, mean = 189 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 167, 170, 262, 262, 262, 262, 262, 262 ms/op
# Warmup Iteration   3: n = 4, mean = 235 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 201, 232, 275, 275, 275, 275, 275, 275 ms/op
Iteration   1: n = 5, mean = 211 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 184, 203, 265, 265, 265, 265, 265, 265 ms/op
Iteration   2: n = 5, mean = 221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 193, 198, 261, 261, 261, 261, 261, 261 ms/op
Iteration   3: n = 5, mean = 220 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 194, 195, 260, 260, 260, 260, 260, 260 ms/op

# Run progress: 71.71% complete, ETA 00:08:42
# Fork: 3 of 3
# Warmup Iteration   1: n = 5, mean = 190 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 168, 192, 218, 218, 218, 218, 218, 218 ms/op
# Warmup Iteration   2: n = 5, mean = 221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 193, 194, 274, 274, 274, 274, 274, 274 ms/op
# Warmup Iteration   3: n = 4, mean = 238 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 192, 228, 302, 302, 302, 302, 302, 302 ms/op
Iteration   1: n = 5, mean = 192 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 166, 193, 213, 213, 213, 213, 213, 213 ms/op
Iteration   2: n = 6, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 164, 164, 180, 180, 180, 180, 180, 180 ms/op
Iteration   3: n = 6, mean = 165 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 164, 164, 168, 168, 168, 168, 168, 168 ms/op


Result "write":
  N = 49
  mean =    188.605 ±(99.9%) 15.023 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 0 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 24 
    [175.000, 187.500) = 3 
    [187.500, 200.000) = 12 
    [200.000, 212.500) = 3 
    [212.500, 225.000) = 1 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 0 
    [250.000, 262.500) = 5 
    [262.500, 275.000) = 1 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    163.578 ms/op
     p(50.0000) =    178.782 ms/op
     p(90.0000) =    255.590 ms/op
     p(95.0000) =    260.047 ms/op
     p(99.0000) =    265.028 ms/op
     p(99.9000) =    265.028 ms/op
     p(99.9900) =    265.028 ms/op
     p(99.9990) =    265.028 ms/op
     p(99.9999) =    265.028 ms/op
    p(100.0000) =    265.028 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 72.09% complete, ETA 00:08:35
# Fork: 1 of 3
# Warmup Iteration   1: n = 5, mean = 188 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 199, 225, 225, 225, 225, 225, 225 ms/op
# Warmup Iteration   2: n = 7, mean = 140 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 136, 156, 156, 156, 156, 156, 156 ms/op
# Warmup Iteration   3: n = 7, mean = 141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 130, 198, 198, 198, 198, 198, 198 ms/op
Iteration   1: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 159, 206, 206, 206, 206, 206, 206 ms/op
Iteration   2: n = 6, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 161, 217, 217, 217, 217, 217, 217 ms/op
Iteration   3: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 158, 170, 215, 215, 215, 215, 215, 215 ms/op

# Run progress: 72.48% complete, ETA 00:08:28
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 139, 149, 235, 235, 235, 235, 235, 235 ms/op
# Warmup Iteration   2: n = 7, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 132, 133, 133, 133, 133, 133, 133 ms/op
# Warmup Iteration   3: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 149, 212, 212, 212, 212, 212, 212 ms/op
Iteration   1: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 131, 133, 133, 133, 133, 133, 133 ms/op
Iteration   2: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 131, 132, 132, 132, 132, 132, 132 ms/op
Iteration   3: n = 7, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 131, 137, 137, 137, 137, 137, 137 ms/op

# Run progress: 72.87% complete, ETA 00:08:21
# Fork: 3 of 3
# Warmup Iteration   1: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 140, 150, 200, 200, 200, 200, 200, 200 ms/op
# Warmup Iteration   2: n = 6, mean = 171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 149, 225, 225, 225, 225, 225, 225 ms/op
# Warmup Iteration   3: n = 6, mean = 181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 152, 177, 219, 219, 219, 219, 219, 219 ms/op
Iteration   1: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 151, 157, 187, 187, 187, 187, 187, 187 ms/op
Iteration   2: n = 6, mean = 164 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 151, 152, 219, 219, 219, 219, 219, 219 ms/op
Iteration   3: n = 6, mean = 172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 164, 227, 227, 227, 227, 227, 227 ms/op


Result "write":
  N = 59
  mean =    154.669 ±(99.9%) 12.464 ms/op

  Histogram, ms/op:
    [120.000, 130.000) = 2 
    [130.000, 140.000) = 23 
    [140.000, 150.000) = 3 
    [150.000, 160.000) = 15 
    [160.000, 170.000) = 3 
    [170.000, 180.000) = 4 
    [180.000, 190.000) = 1 
    [190.000, 200.000) = 1 
    [200.000, 210.000) = 2 
    [210.000, 220.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =    128.975 ms/op
     p(50.0000) =    151.257 ms/op
     p(90.0000) =    206.307 ms/op
     p(95.0000) =    217.317 ms/op
     p(99.0000) =    226.755 ms/op
     p(99.9000) =    226.755 ms/op
     p(99.9900) =    226.755 ms/op
     p(99.9990) =    226.755 ms/op
     p(99.9999) =    226.755 ms/op
    p(100.0000) =    226.755 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 73.26% complete, ETA 00:08:13
# Fork: 1 of 3
# Warmup Iteration   1: n = 5, mean = 210 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 192, 206, 236, 236, 236, 236, 236, 236 ms/op
# Warmup Iteration   2: n = 5, mean = 194 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 164, 198, 211, 211, 211, 211, 211, 211 ms/op
# Warmup Iteration   3: n = 6, mean = 164 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 163, 164, 165, 165, 165, 165, 165, 165 ms/op
Iteration   1: n = 5, mean = 223 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 197, 206, 261, 261, 261, 261, 261, 261 ms/op
Iteration   2: n = 5, mean = 211 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 195, 199, 265, 265, 265, 265, 265, 265 ms/op
Iteration   3: n = 6, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 164, 176, 202, 202, 202, 202, 202, 202 ms/op

# Run progress: 73.64% complete, ETA 00:08:06
# Fork: 2 of 3
# Warmup Iteration   1: n = 5, mean = 200 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 172, 195, 244, 244, 244, 244, 244, 244 ms/op
# Warmup Iteration   2: n = 5, mean = 197 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 170, 171, 301, 301, 301, 301, 301, 301 ms/op
# Warmup Iteration   3: n = 5, mean = 189 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 173, 192, 198, 198, 198, 198, 198, 198 ms/op
Iteration   1: n = 5, mean = 219 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 188, 197, 260, 260, 260, 260, 260, 260 ms/op
Iteration   2: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 166, 176, 178, 178, 178, 178, 178, 178 ms/op
Iteration   3: n = 5, mean = 201 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 177, 193, 252, 252, 252, 252, 252, 252 ms/op

# Run progress: 74.03% complete, ETA 00:07:59
# Fork: 3 of 3
# Warmup Iteration   1: n = 5, mean = 207 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 208, 235, 235, 235, 235, 235, 235 ms/op
# Warmup Iteration   2: n = 5, mean = 202 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 200, 201, 208, 208, 208, 208, 208, 208 ms/op
# Warmup Iteration   3: n = 4, mean = 234 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 193, 226, 292, 292, 292, 292, 292, 292 ms/op
Iteration   1: n = 5, mean = 193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 200, 203, 203, 203, 203, 203, 203 ms/op
Iteration   2: n = 6, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 172, 176, 177, 177, 177, 177, 177, 177 ms/op
Iteration   3: n = 5, mean = 221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 193, 214, 258, 258, 258, 258, 258, 258 ms/op


Result "write":
  N = 48
  mean =    197.804 ±(99.9%) 14.546 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 0 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 5 
    [175.000, 187.500) = 15 
    [187.500, 200.000) = 13 
    [200.000, 212.500) = 6 
    [212.500, 225.000) = 1 
    [225.000, 237.500) = 1 
    [237.500, 250.000) = 0 
    [250.000, 262.500) = 6 
    [262.500, 275.000) = 1 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    163.840 ms/op
     p(50.0000) =    193.462 ms/op
     p(90.0000) =    254.673 ms/op
     p(95.0000) =    260.886 ms/op
     p(99.0000) =    264.503 ms/op
     p(99.9000) =    264.503 ms/op
     p(99.9900) =    264.503 ms/op
     p(99.9990) =    264.503 ms/op
     p(99.9999) =    264.503 ms/op
    p(100.0000) =    264.503 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.byteBufferByte2BH
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 74.42% complete, ETA 00:07:52
# Fork: 1 of 3
# Warmup Iteration   1: n = 253, mean = 4 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 4, 5, 6, 9, 11, 11, 11 ms/op
# Warmup Iteration   2: n = 238, mean = 4 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4, 4, 6, 7, 9, 10, 10, 10 ms/op
# Warmup Iteration   3: n = 286, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 4, 4, 4, 4, 4, 4, 4 ms/op
Iteration   1: n = 233, mean = 4 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4, 4, 6, 7, 9, 10, 10, 10 ms/op
Iteration   2: n = 234, mean = 4 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4, 4, 6, 7, 9, 10, 10, 10 ms/op
Iteration   3: n = 233, mean = 4 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4, 4, 6, 7, 10, 10, 10, 10 ms/op

# Run progress: 74.81% complete, ETA 00:07:45
# Fork: 2 of 3
# Warmup Iteration   1: n = 282, mean = 4 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 4, 4, 4, 5, 11, 11, 11 ms/op
# Warmup Iteration   2: n = 260, mean = 4 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 4, 4, 6, 8, 8, 8, 8 ms/op
# Warmup Iteration   3: n = 306, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 4, 4, 4 ms/op
Iteration   1: n = 234, mean = 4 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4, 4, 6, 7, 9, 10, 10, 10 ms/op
Iteration   2: n = 241, mean = 4 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4, 4, 6, 7, 9, 9, 9, 9 ms/op
Iteration   3: n = 252, mean = 4 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 4, 5, 6, 9, 10, 10, 10 ms/op

# Run progress: 75.19% complete, ETA 00:07:37
# Fork: 3 of 3
# Warmup Iteration   1: n = 281, mean = 4 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 4, 4, 4, 4, 11, 11, 11 ms/op
# Warmup Iteration   2: n = 256, mean = 4 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 4, 5, 6, 8, 9, 9, 9 ms/op
# Warmup Iteration   3: n = 307, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 4, 4, 4 ms/op
Iteration   1: n = 266, mean = 4 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 4, 5, 6, 9, 10, 10, 10 ms/op
Iteration   2: n = 264, mean = 4 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 4, 5, 6, 9, 9, 9, 9 ms/op
Iteration   3: n = 287, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 4, 4, 4, 4, 4, 4, 4 ms/op


Result "byteBufferByte2BH":
  N = 2244
  mean =      4.018 ±(99.9%) 0.075 ms/op

  Histogram, ms/op:
    [ 3.000,  3.500) = 339 
    [ 3.500,  4.000) = 1455 
    [ 4.000,  4.500) = 106 
    [ 4.500,  5.000) = 86 
    [ 5.000,  5.500) = 60 
    [ 5.500,  6.000) = 47 
    [ 6.000,  6.500) = 31 
    [ 6.500,  7.000) = 34 
    [ 7.000,  7.500) = 22 
    [ 7.500,  8.000) = 21 
    [ 8.000,  8.500) = 12 
    [ 8.500,  9.000) = 10 
    [ 9.000,  9.500) = 14 
    [ 9.500, 10.000) = 6 
    [10.000, 10.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =      3.244 ms/op
     p(50.0000) =      3.666 ms/op
     p(90.0000) =      5.292 ms/op
     p(95.0000) =      6.550 ms/op
     p(99.0000) =      8.938 ms/op
     p(99.9000) =      9.884 ms/op
     p(99.9900) =     10.158 ms/op
     p(99.9990) =     10.158 ms/op
     p(99.9999) =     10.158 ms/op
    p(100.0000) =     10.158 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.byteBufferByte2BH
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 75.58% complete, ETA 00:07:30
# Fork: 1 of 3
# Warmup Iteration   1: n = 252, mean = 4 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 4, 4, 6, 10, 20, 20, 20 ms/op
# Warmup Iteration   2: n = 305, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 5, 5, 5 ms/op
# Warmup Iteration   3: n = 306, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 4, 4, 4 ms/op
Iteration   1: n = 266, mean = 4 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 4, 4, 6, 9, 10, 10, 10 ms/op
Iteration   2: n = 294, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 4, 4, 4, 4, 4, 4 ms/op
Iteration   3: n = 255, mean = 4 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 4, 5, 6, 9, 10, 10, 10 ms/op

# Run progress: 75.97% complete, ETA 00:07:23
# Fork: 2 of 3
# Warmup Iteration   1: n = 251, mean = 4 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 4, 4, 6, 10, 21, 21, 21 ms/op
# Warmup Iteration   2: n = 305, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 6, 6, 6 ms/op
# Warmup Iteration   3: n = 254, mean = 4 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 4, 5, 6, 9, 10, 10, 10 ms/op
Iteration   1: n = 260, mean = 4 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 4, 4, 6, 9, 10, 10, 10 ms/op
Iteration   2: n = 257, mean = 4 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 4, 5, 6, 9, 10, 10, 10 ms/op
Iteration   3: n = 307, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 3, 3, 3 ms/op

# Run progress: 76.36% complete, ETA 00:07:16
# Fork: 3 of 3
# Warmup Iteration   1: n = 285, mean = 4 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 4, 4, 4, 4, 11, 11, 11 ms/op
# Warmup Iteration   2: n = 306, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 5, 5, 5 ms/op
# Warmup Iteration   3: n = 307, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 4, 4, 4, 4 ms/op
Iteration   1: n = 305, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 4, 4, 4 ms/op
Iteration   2: n = 307, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 3, 3, 3 ms/op
Iteration   3: n = 307, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 3, 3, 3 ms/op


Result "byteBufferByte2BH":
  N = 2558
  mean =      3.523 ±(99.9%) 0.043 ms/op

  Histogram, ms/op:
    [ 3.000,  3.500) = 1667 
    [ 3.500,  4.000) = 757 
    [ 4.000,  4.500) = 29 
    [ 4.500,  5.000) = 26 
    [ 5.000,  5.500) = 18 
    [ 5.500,  6.000) = 14 
    [ 6.000,  6.500) = 8 
    [ 6.500,  7.000) = 12 
    [ 7.000,  7.500) = 6 
    [ 7.500,  8.000) = 6 
    [ 8.000,  8.500) = 4 
    [ 8.500,  9.000) = 4 
    [ 9.000,  9.500) = 3 

  Percentiles, ms/op:
      p(0.0000) =      3.244 ms/op
     p(50.0000) =      3.277 ms/op
     p(90.0000) =      3.670 ms/op
     p(95.0000) =      4.043 ms/op
     p(99.0000) =      7.317 ms/op
     p(99.9000) =      9.562 ms/op
     p(99.9900) =      9.814 ms/op
     p(99.9990) =      9.814 ms/op
     p(99.9999) =      9.814 ms/op
    p(100.0000) =      9.814 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.byteBufferObject2BH
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 76.74% complete, ETA 00:07:08
# Fork: 1 of 3
# Warmup Iteration   1: n = 326, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 5, 6, 15, 15, 15 ms/op
# Warmup Iteration   2: n = 360, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 4, 7, 7, 7, 7 ms/op
# Warmup Iteration   3: n = 328, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 5, 7, 8, 8, 8 ms/op
Iteration   1: n = 303, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 5, 6, 7, 8, 8, 8 ms/op
Iteration   2: n = 364, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 3, 3, 3 ms/op
Iteration   3: n = 331, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 5, 7, 8, 8, 8 ms/op

# Run progress: 77.13% complete, ETA 00:07:01
# Fork: 2 of 3
# Warmup Iteration   1: n = 369, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 7, 7, 7 ms/op
# Warmup Iteration   2: n = 395, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 3, 3, 3 ms/op
# Warmup Iteration   3: n = 331, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 4, 7, 8, 8, 8 ms/op
Iteration   1: n = 388, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 4, 4, 4 ms/op
Iteration   2: n = 396, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 3, 3, 3 ms/op
Iteration   3: n = 333, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 5, 7, 8, 8, 8 ms/op

# Run progress: 77.52% complete, ETA 00:06:54
# Fork: 3 of 3
# Warmup Iteration   1: n = 330, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 4, 6, 15, 15, 15 ms/op
# Warmup Iteration   2: n = 305, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 5, 5, 7, 8, 8, 8 ms/op
# Warmup Iteration   3: n = 368, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 3, 3, 3 ms/op
Iteration   1: n = 315, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 4, 5, 7, 7, 7, 7 ms/op
Iteration   2: n = 332, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 4, 7, 8, 8, 8 ms/op
Iteration   3: n = 398, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 3, 3, 3 ms/op


Result "byteBufferObject2BH":
  N = 3160
  mean =      2.851 ±(99.9%) 0.036 ms/op

  Histogram, ms/op:
    [2.000, 2.500) = 0 
    [2.500, 3.000) = 2833 
    [3.000, 3.500) = 114 
    [3.500, 4.000) = 64 
    [4.000, 4.500) = 39 
    [4.500, 5.000) = 33 
    [5.000, 5.500) = 26 
    [5.500, 6.000) = 15 
    [6.000, 6.500) = 18 
    [6.500, 7.000) = 9 
    [7.000, 7.500) = 5 

  Percentiles, ms/op:
      p(0.0000) =      2.511 ms/op
     p(50.0000) =      2.826 ms/op
     p(90.0000) =      3.015 ms/op
     p(95.0000) =      3.949 ms/op
     p(99.0000) =      6.055 ms/op
     p(99.9000) =      7.581 ms/op
     p(99.9900) =      7.815 ms/op
     p(99.9990) =      7.815 ms/op
     p(99.9999) =      7.815 ms/op
    p(100.0000) =      7.815 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.byteBufferObject2BH
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 77.91% complete, ETA 00:06:47
# Fork: 1 of 3
# Warmup Iteration   1: n = 325, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 4, 4, 6, 15, 15, 15 ms/op
# Warmup Iteration   2: n = 396, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 5, 5, 5 ms/op
# Warmup Iteration   3: n = 397, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 4, 4, 4 ms/op
Iteration   1: n = 333, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 4, 5, 7, 8, 8, 8 ms/op
Iteration   2: n = 387, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 3, 3, 3 ms/op
Iteration   3: n = 329, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 4, 5, 7, 8, 8, 8 ms/op

# Run progress: 78.29% complete, ETA 00:06:39
# Fork: 2 of 3
# Warmup Iteration   1: n = 366, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 8, 8, 8 ms/op
# Warmup Iteration   2: n = 396, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 4, 4, 4 ms/op
# Warmup Iteration   3: n = 330, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 4, 5, 7, 8, 8, 8 ms/op
Iteration   1: n = 397, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 3, 3, 3 ms/op
Iteration   2: n = 396, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 3, 3, 3 ms/op
Iteration   3: n = 328, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 4, 5, 7, 8, 8, 8 ms/op

# Run progress: 78.68% complete, ETA 00:06:32
# Fork: 3 of 3
# Warmup Iteration   1: n = 368, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 3, 3, 7, 7, 7 ms/op
# Warmup Iteration   2: n = 334, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 5, 6, 7, 7, 7 ms/op
# Warmup Iteration   3: n = 334, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 4, 6, 7, 7, 7 ms/op
Iteration   1: n = 314, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 5, 6, 7, 8, 8, 8 ms/op
Iteration   2: n = 326, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 4, 5, 7, 8, 8, 8 ms/op
Iteration   3: n = 329, mean = 3 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3, 3, 3, 5, 7, 8, 8, 8 ms/op


Result "byteBufferObject2BH":
  N = 3139
  mean =      2.868 ±(99.9%) 0.040 ms/op

  Histogram, ms/op:
    [2.000, 2.500) = 0 
    [2.500, 3.000) = 2792 
    [3.000, 3.500) = 115 
    [3.500, 4.000) = 68 
    [4.000, 4.500) = 40 
    [4.500, 5.000) = 30 
    [5.000, 5.500) = 30 
    [5.500, 6.000) = 17 
    [6.000, 6.500) = 23 
    [6.500, 7.000) = 9 
    [7.000, 7.500) = 8 

  Percentiles, ms/op:
      p(0.0000) =      2.511 ms/op
     p(50.0000) =      2.826 ms/op
     p(90.0000) =      3.117 ms/op
     p(95.0000) =      4.112 ms/op
     p(99.0000) =      6.468 ms/op
     p(99.9000) =      7.576 ms/op
     p(99.9900) =      7.782 ms/op
     p(99.9990) =      7.782 ms/op
     p(99.9999) =      7.782 ms/op
    p(100.0000) =      7.782 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 79.07% complete, ETA 00:06:25
# Fork: 1 of 3
# Warmup Iteration   1: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 95, 174, 180, 180, 180, 180, 180 ms/op
# Warmup Iteration   2: n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 85, 128, 136, 136, 136, 136, 136 ms/op
# Warmup Iteration   3: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 85, 143, 155, 155, 155, 155, 155 ms/op
Iteration   1: n = 10, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 88, 142, 143, 143, 143, 143, 143 ms/op
Iteration   2: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 75, 85, 85, 85, 85, 85, 85 ms/op
Iteration   3: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 98, 144, 149, 149, 149, 149, 149 ms/op

# Run progress: 79.46% complete, ETA 00:06:18
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 95, 171, 177, 177, 177, 177, 177 ms/op
# Warmup Iteration   2: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 84, 97, 140, 140, 140, 140, 140, 140 ms/op
# Warmup Iteration   3: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 86, 96, 143, 145, 145, 145, 145, 145 ms/op
Iteration   1: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 86, 149, 150, 150, 150, 150, 150 ms/op
Iteration   2: n = 11, mean = 95 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 86, 141, 149, 149, 149, 149, 149 ms/op
Iteration   3: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 92, 100, 100, 100, 100, 100, 100 ms/op

# Run progress: 79.84% complete, ETA 00:06:11
# Fork: 3 of 3
# Warmup Iteration   1: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 85, 109, 111, 111, 111, 111, 111 ms/op
# Warmup Iteration   2: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 79, 124, 129, 129, 129, 129, 129 ms/op
# Warmup Iteration   3: n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 81, 85, 137, 147, 147, 147, 147, 147 ms/op
Iteration   1: n = 11, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 98, 129, 130, 130, 130, 130, 130 ms/op
Iteration   2: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 85, 110, 119, 119, 119, 119, 119 ms/op
Iteration   3: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 75, 79, 79, 79, 79, 79, 79 ms/op


Result "readCrc":
  N = 102
  mean =     91.541 ±(99.9%) 5.986 ms/op

  Histogram, ms/op:
    [ 70.000,  75.000) = 12 
    [ 75.000,  80.000) = 20 
    [ 80.000,  85.000) = 14 
    [ 85.000,  90.000) = 14 
    [ 90.000,  95.000) = 7 
    [ 95.000, 100.000) = 15 
    [100.000, 105.000) = 6 
    [105.000, 110.000) = 2 
    [110.000, 115.000) = 1 
    [115.000, 120.000) = 3 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 3 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 2 
    [145.000, 150.000) = 2 
    [150.000, 155.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     74.580 ms/op
     p(50.0000) =     85.459 ms/op
     p(90.0000) =    116.890 ms/op
     p(95.0000) =    139.139 ms/op
     p(99.0000) =    150.177 ms/op
     p(99.9000) =    150.209 ms/op
     p(99.9900) =    150.209 ms/op
     p(99.9990) =    150.209 ms/op
     p(99.9999) =    150.209 ms/op
    p(100.0000) =    150.209 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 80.23% complete, ETA 00:06:03
# Fork: 1 of 3
# Warmup Iteration   1: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 86, 103, 136, 139, 139, 139, 139, 139 ms/op
# Warmup Iteration   2: n = 9, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 102, 156, 156, 156, 156, 156, 156 ms/op
# Warmup Iteration   3: n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 87, 88, 89, 89, 89, 89, 89 ms/op
Iteration   1: n = 10, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 102, 144, 148, 148, 148, 148, 148 ms/op
Iteration   2: n = 11, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 81, 87, 136, 145, 145, 145, 145, 145 ms/op
Iteration   3: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 78, 81, 81, 81, 81, 81, 81 ms/op

# Run progress: 80.62% complete, ETA 00:05:56
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 94, 173, 176, 176, 176, 176, 176 ms/op
# Warmup Iteration   2: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 84, 98, 142, 142, 142, 142, 142, 142 ms/op
# Warmup Iteration   3: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 95, 142, 147, 147, 147, 147, 147 ms/op
Iteration   1: n = 11, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 86, 128, 135, 135, 135, 135, 135 ms/op
Iteration   2: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 102, 149, 149, 149, 149, 149, 149 ms/op
Iteration   3: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 86, 86, 97, 97, 97, 97, 97, 97 ms/op

# Run progress: 81.01% complete, ETA 00:05:49
# Fork: 3 of 3
# Warmup Iteration   1: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 84, 112, 115, 115, 115, 115, 115 ms/op
# Warmup Iteration   2: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 84, 90, 146, 147, 147, 147, 147, 147 ms/op
# Warmup Iteration   3: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 84, 95, 146, 146, 146, 146, 146, 146 ms/op
Iteration   1: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 97, 142, 145, 145, 145, 145, 145 ms/op
Iteration   2: n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 84, 84, 136, 146, 146, 146, 146, 146 ms/op
Iteration   3: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 75, 77, 77, 77, 77, 77, 77 ms/op


Result "readCrc":
  N = 101
  mean =     91.818 ±(99.9%) 6.045 ms/op

  Histogram, ms/op:
    [ 70.000,  75.000) = 5 
    [ 75.000,  80.000) = 22 
    [ 80.000,  85.000) = 12 
    [ 85.000,  90.000) = 25 
    [ 90.000,  95.000) = 2 
    [ 95.000, 100.000) = 16 
    [100.000, 105.000) = 7 
    [105.000, 110.000) = 1 
    [110.000, 115.000) = 0 
    [115.000, 120.000) = 3 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 1 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 1 
    [140.000, 145.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     74.842 ms/op
     p(50.0000) =     85.983 ms/op
     p(90.0000) =    117.074 ms/op
     p(95.0000) =    144.677 ms/op
     p(99.0000) =    149.385 ms/op
     p(99.9000) =    149.422 ms/op
     p(99.9900) =    149.422 ms/op
     p(99.9990) =    149.422 ms/op
     p(99.9999) =    149.422 ms/op
    p(100.0000) =    149.422 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 81.40% complete, ETA 00:05:42
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 128, 210, 210, 210, 210, 210, 210 ms/op
# Warmup Iteration   2: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 80, 100, 148, 152, 152, 152, 152, 152 ms/op
# Warmup Iteration   3: n = 14, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 74, 76, 81, 83, 83, 83, 83, 83 ms/op
Iteration   1: n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 76, 125, 137, 137, 137, 137, 137 ms/op
Iteration   2: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 91, 142, 142, 142, 142, 142, 142 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 85, 92, 93, 93, 93, 93, 93 ms/op

# Run progress: 81.78% complete, ETA 00:05:35
# Fork: 2 of 3
# Warmup Iteration   1: n = 8, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 116, 220, 220, 220, 220, 220, 220 ms/op
# Warmup Iteration   2: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 93, 135, 138, 138, 138, 138, 138 ms/op
# Warmup Iteration   3: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 103, 154, 154, 154, 154, 154, 154 ms/op
Iteration   1: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 103, 147, 147, 147, 147, 147, 147 ms/op
Iteration   2: n = 11, mean = 98 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 92, 127, 133, 133, 133, 133, 133 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 102, 168, 168, 168, 168, 168, 168 ms/op

# Run progress: 82.17% complete, ETA 00:05:28
# Fork: 3 of 3
# Warmup Iteration   1: n = 10, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 99, 142, 143, 143, 143, 143, 143 ms/op
# Warmup Iteration   2: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 78, 84, 87, 87, 87, 87, 87 ms/op
# Warmup Iteration   3: n = 11, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 88, 130, 139, 139, 139, 139, 139 ms/op
Iteration   1: n = 11, mean = 97 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 89, 161, 165, 165, 165, 165, 165 ms/op
Iteration   2: n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 83, 91, 92, 92, 92, 92, 92 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 80, 101, 146, 150, 150, 150, 150, 150 ms/op


Result "readKey":
  N = 96
  mean =     96.869 ±(99.9%) 7.454 ms/op

  Histogram, ms/op:
    [ 70.000,  80.000) = 20 
    [ 80.000,  90.000) = 26 
    [ 90.000, 100.000) = 15 
    [100.000, 110.000) = 22 
    [110.000, 120.000) = 2 
    [120.000, 130.000) = 0 
    [130.000, 140.000) = 3 
    [140.000, 150.000) = 4 
    [150.000, 160.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     75.104 ms/op
     p(50.0000) =     92.013 ms/op
     p(90.0000) =    137.966 ms/op
     p(95.0000) =    147.312 ms/op
     p(99.0000) =    168.296 ms/op
     p(99.9000) =    168.296 ms/op
     p(99.9900) =    168.296 ms/op
     p(99.9990) =    168.296 ms/op
     p(99.9999) =    168.296 ms/op
    p(100.0000) =    168.296 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 82.56% complete, ETA 00:05:21
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 120, 226, 226, 226, 226, 226, 226 ms/op
# Warmup Iteration   2: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 108, 147, 147, 147, 147, 147, 147 ms/op
# Warmup Iteration   3: n = 11, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 93, 98, 99, 99, 99, 99, 99 ms/op
Iteration   1: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 103, 150, 153, 153, 153, 153, 153 ms/op
Iteration   2: n = 11, mean = 98 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 94, 113, 114, 114, 114, 114, 114 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 89, 94, 95, 95, 95, 95, 95 ms/op

# Run progress: 82.95% complete, ETA 00:05:14
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 96, 149, 150, 150, 150, 150, 150 ms/op
# Warmup Iteration   2: n = 11, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 78, 89, 130, 137, 137, 137, 137, 137 ms/op
# Warmup Iteration   3: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 80, 84, 85, 85, 85, 85, 85 ms/op
Iteration   1: n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 110, 148, 148, 148, 148, 148, 148 ms/op
Iteration   2: n = 13, mean = 83 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 83, 90, 91, 91, 91, 91, 91 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 81, 83, 84, 84, 84, 84, 84 ms/op

# Run progress: 83.33% complete, ETA 00:05:06
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 113, 218, 218, 218, 218, 218, 218 ms/op
# Warmup Iteration   2: n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 91, 97, 98, 98, 98, 98, 98 ms/op
# Warmup Iteration   3: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 90, 93, 95, 95, 95, 95, 95 ms/op
Iteration   1: n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 101, 152, 152, 152, 152, 152, 152 ms/op
Iteration   2: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 102, 149, 149, 149, 149, 149, 149 ms/op
Iteration   3: 
Bytes	before-close	117465088	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false

Bytes	after-close	117465088	org.lmdbjava.bench.LmdbLwjgl.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 90, 101, 101, 101, 101, 101, 101 ms/op


Result "readKey":
  N = 97
  mean =     97.643 ±(99.9%) 6.386 ms/op

  Histogram, ms/op:
    [ 70.000,  75.000) = 0 
    [ 75.000,  80.000) = 10 
    [ 80.000,  85.000) = 11 
    [ 85.000,  90.000) = 18 
    [ 90.000,  95.000) = 18 
    [ 95.000, 100.000) = 3 
    [100.000, 105.000) = 18 
    [105.000, 110.000) = 5 
    [110.000, 115.000) = 3 
    [115.000, 120.000) = 1 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 1 
    [130.000, 135.000) = 1 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 3 
    [145.000, 150.000) = 2 
    [150.000, 155.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =     75.891 ms/op
     p(50.0000) =     91.881 ms/op
     p(90.0000) =    127.690 ms/op
     p(95.0000) =    148.216 ms/op
     p(99.0000) =    152.568 ms/op
     p(99.9000) =    152.568 ms/op
     p(99.9900) =    152.568 ms/op
     p(99.9990) =    152.568 ms/op
     p(99.9999) =    152.568 ms/op
    p(100.0000) =    152.568 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readRev
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 83.72% complete, ETA 00:04:59
# Fork: 1 of 3
# Warmup Iteration   1: n = 34, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 23, 26, 42, 51, 56, 56, 56, 56 ms/op
# Warmup Iteration   2: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 25, 28, 40, 44, 49, 49, 49, 49 ms/op
# Warmup Iteration   3: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 37, 39, 47, 52, 52, 52, 52 ms/op
Iteration   1: n = 30, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 27, 45, 57, 64, 64, 64, 64 ms/op
Iteration   2: n = 31, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 27, 48, 51, 51, 51, 51, 51 ms/op
Iteration   3: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 39, 40, 49, 52, 52, 52, 52 ms/op

# Run progress: 84.11% complete, ETA 00:04:52
# Fork: 2 of 3
# Warmup Iteration   1: n = 28, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 38, 51, 59, 63, 63, 63, 63 ms/op
# Warmup Iteration   2: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 38, 50, 58, 60, 60, 60, 60 ms/op
# Warmup Iteration   3: n = 29, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 25, 37, 43, 48, 52, 52, 52, 52 ms/op
Iteration   1: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 23, 37, 49, 55, 56, 56, 56, 56 ms/op
Iteration   2: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 26, 44, 50, 52, 52, 52, 52 ms/op
Iteration   3: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 37, 42, 50, 53, 53, 53, 53 ms/op

# Run progress: 84.50% complete, ETA 00:04:45
# Fork: 3 of 3
# Warmup Iteration   1: n = 34, mean = 29 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 23, 26, 42, 52, 56, 56, 56, 56 ms/op
# Warmup Iteration   2: n = 39, mean = 26 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 23, 24, 34, 34, 43, 43, 43, 43 ms/op
# Warmup Iteration   3: n = 36, mean = 28 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 23, 25, 34, 35, 39, 39, 39, 39 ms/op
Iteration   1: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 28, 49, 52, 54, 54, 54, 54 ms/op
Iteration   2: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 27, 39, 46, 52, 52, 52, 52 ms/op
Iteration   3: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 23, 33, 34, 35, 36, 36, 36, 36 ms/op


Result "readRev":
  N = 273
  mean =     33.422 ±(99.9%) 1.532 ms/op

  Histogram, ms/op:
    [20.000, 25.000) = 10 
    [25.000, 30.000) = 113 
    [30.000, 35.000) = 38 
    [35.000, 40.000) = 69 
    [40.000, 45.000) = 23 
    [45.000, 50.000) = 8 
    [50.000, 55.000) = 10 
    [55.000, 60.000) = 1 
    [60.000, 65.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     22.708 ms/op
     p(50.0000) =     33.096 ms/op
     p(90.0000) =     42.782 ms/op
     p(95.0000) =     49.676 ms/op
     p(99.0000) =     54.841 ms/op
     p(99.9000) =     64.356 ms/op
     p(99.9900) =     64.356 ms/op
     p(99.9990) =     64.356 ms/op
     p(99.9999) =     64.356 ms/op
    p(100.0000) =     64.356 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readRev
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 84.88% complete, ETA 00:04:38
# Fork: 1 of 3
# Warmup Iteration   1: n = 34, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 23, 26, 42, 53, 61, 61, 61, 61 ms/op
# Warmup Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 29, 42, 51, 54, 54, 54, 54 ms/op
# Warmup Iteration   3: n = 31, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 33, 39, 42, 46, 46, 46, 46 ms/op
Iteration   1: n = 42, mean = 24 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 23, 23, 27, 34, 44, 44, 44, 44 ms/op
Iteration   2: n = 38, mean = 28 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 23, 23, 40, 54, 63, 63, 63, 63 ms/op
Iteration   3: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 25, 39, 52, 66, 70, 70, 70, 70 ms/op

# Run progress: 85.27% complete, ETA 00:04:31
# Fork: 2 of 3
# Warmup Iteration   1: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 23, 32, 50, 56, 59, 59, 59, 59 ms/op
# Warmup Iteration   2: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 24, 27, 42, 47, 49, 49, 49, 49 ms/op
# Warmup Iteration   3: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 23, 31, 38, 46, 49, 49, 49, 49 ms/op
Iteration   1: n = 40, mean = 25 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 22, 23, 36, 41, 47, 47, 47, 47 ms/op
Iteration   2: n = 38, mean = 27 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 23, 25, 33, 42, 52, 52, 52, 52 ms/op
Iteration   3: n = 39, mean = 26 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 22, 23, 34, 39, 46, 46, 46, 46 ms/op

# Run progress: 85.66% complete, ETA 00:04:24
# Fork: 3 of 3
# Warmup Iteration   1: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 38, 56, 68, 70, 70, 70, 70 ms/op
# Warmup Iteration   2: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 36, 51, 55, 57, 57, 57, 57 ms/op
# Warmup Iteration   3: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 24, 27, 39, 39, 40, 40, 40, 40 ms/op
Iteration   1: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 23, 27, 49, 56, 56, 56, 56, 56 ms/op
Iteration   2: n = 31, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 27, 45, 52, 56, 56, 56, 56 ms/op
Iteration   3: n = 32, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 27, 44, 57, 74, 74, 74, 74 ms/op


Result "readRev":
  N = 317
  mean =     28.773 ±(99.9%) 1.623 ms/op

  Histogram, ms/op:
    [20.000, 25.000) = 160 
    [25.000, 30.000) = 71 
    [30.000, 35.000) = 21 
    [35.000, 40.000) = 34 
    [40.000, 45.000) = 11 
    [45.000, 50.000) = 11 
    [50.000, 55.000) = 2 
    [55.000, 60.000) = 4 
    [60.000, 65.000) = 1 
    [65.000, 70.000) = 1 
    [70.000, 75.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     22.282 ms/op
     p(50.0000) =     24.871 ms/op
     p(90.0000) =     39.741 ms/op
     p(95.0000) =     48.064 ms/op
     p(99.0000) =     61.589 ms/op
     p(99.9000) =     73.794 ms/op
     p(99.9900) =     73.794 ms/op
     p(99.9990) =     73.794 ms/op
     p(99.9999) =     73.794 ms/op
    p(100.0000) =     73.794 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 86.05% complete, ETA 00:04:16
# Fork: 1 of 3
# Warmup Iteration   1: n = 25, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 34, 59, 64, 64, 64, 64, 64 ms/op
# Warmup Iteration   2: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 45, 64, 69, 69, 69, 69, 69 ms/op
# Warmup Iteration   3: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 43, 59, 77, 80, 80, 80, 80 ms/op
Iteration   1: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 46, 56, 59, 60, 60, 60, 60 ms/op
Iteration   2: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 42, 60, 68, 70, 70, 70, 70 ms/op
Iteration   3: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 52, 55, 65, 66, 66, 66, 66 ms/op

# Run progress: 86.43% complete, ETA 00:04:09
# Fork: 2 of 3
# Warmup Iteration   1: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 39, 57, 64, 67, 67, 67, 67 ms/op
# Warmup Iteration   2: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 36, 40, 42, 42, 42, 42 ms/op
# Warmup Iteration   3: n = 29, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 44, 46, 48, 48, 48, 48 ms/op
Iteration   1: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 44, 44, 44, 44, 44, 44 ms/op
Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 33, 36, 36, 36, 36, 36 ms/op
Iteration   3: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 39, 49, 58, 62, 62, 62, 62 ms/op

# Run progress: 86.82% complete, ETA 00:04:02
# Fork: 3 of 3
# Warmup Iteration   1: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 49, 54, 82, 108, 108, 108, 108, 108 ms/op
# Warmup Iteration   2: n = 20, mean = 50 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 50, 66, 67, 68, 68, 68, 68 ms/op
# Warmup Iteration   3: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 38, 53, 66, 70, 70, 70, 70 ms/op
Iteration   1: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 57, 70, 70, 70, 70, 70, 70 ms/op
Iteration   2: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 39, 57, 58, 59, 59, 59, 59 ms/op
Iteration   3: n = 22, mean = 47 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 39, 75, 84, 85, 85, 85, 85 ms/op


Result "readSeq":
  N = 217
  mean =     42.342 ±(99.9%) 2.261 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 55 
    [35.000, 40.000) = 80 
    [40.000, 45.000) = 20 
    [45.000, 50.000) = 15 
    [50.000, 55.000) = 21 
    [55.000, 60.000) = 10 
    [60.000, 65.000) = 5 
    [65.000, 70.000) = 7 
    [70.000, 75.000) = 2 
    [75.000, 80.000) = 1 
    [80.000, 85.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     32.571 ms/op
     p(50.0000) =     38.797 ms/op
     p(90.0000) =     57.082 ms/op
     p(95.0000) =     65.706 ms/op
     p(99.0000) =     76.619 ms/op
     p(99.9000) =     85.459 ms/op
     p(99.9900) =     85.459 ms/op
     p(99.9990) =     85.459 ms/op
     p(99.9999) =     85.459 ms/op
    p(100.0000) =     85.459 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 87.21% complete, ETA 00:03:55
# Fork: 1 of 3
# Warmup Iteration   1: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 51, 76, 82, 82, 82, 82, 82 ms/op
# Warmup Iteration   2: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 39, 53, 61, 62, 62, 62, 62 ms/op
# Warmup Iteration   3: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 34, 51, 65, 66, 66, 66, 66 ms/op
Iteration   1: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 51, 70, 71, 71, 71, 71, 71 ms/op
Iteration   2: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 39, 39, 39, 39, 39, 39 ms/op
Iteration   3: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 39, 66, 74, 75, 75, 75, 75 ms/op

# Run progress: 87.60% complete, ETA 00:03:48
# Fork: 2 of 3
# Warmup Iteration   1: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 39, 55, 68, 72, 72, 72, 72 ms/op
# Warmup Iteration   2: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 39, 48, 54, 57, 57, 57, 57 ms/op
# Warmup Iteration   3: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 50, 68, 71, 71, 71, 71, 71 ms/op
Iteration   1: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 53, 65, 67, 67, 67, 67, 67 ms/op
Iteration   2: n = 21, mean = 50 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 49, 72, 82, 82, 82, 82, 82 ms/op
Iteration   3: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 39, 66, 78, 79, 79, 79, 79 ms/op

# Run progress: 87.98% complete, ETA 00:03:41
# Fork: 3 of 3
# Warmup Iteration   1: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 38, 57, 69, 72, 72, 72, 72 ms/op
# Warmup Iteration   2: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 40, 63, 67, 67, 67, 67, 67 ms/op
# Warmup Iteration   3: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 38, 51, 53, 54, 54, 54, 54 ms/op
Iteration   1: n = 20, mean = 50 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 49, 69, 73, 73, 73, 73, 73 ms/op
Iteration   2: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 43, 50, 51, 51, 51, 51, 51 ms/op
Iteration   3: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 34, 40, 46, 46, 46, 46 ms/op


Result "readSeq":
  N = 209
  mean =     43.948 ±(99.9%) 2.511 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 46 
    [35.000, 40.000) = 72 
    [40.000, 45.000) = 20 
    [45.000, 50.000) = 14 
    [50.000, 55.000) = 26 
    [55.000, 60.000) = 8 
    [60.000, 65.000) = 11 
    [65.000, 70.000) = 4 
    [70.000, 75.000) = 6 
    [75.000, 80.000) = 1 
    [80.000, 85.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     32.702 ms/op
     p(50.0000) =     38.928 ms/op
     p(90.0000) =     61.473 ms/op
     p(95.0000) =     67.305 ms/op
     p(99.0000) =     78.945 ms/op
     p(99.9000) =     82.444 ms/op
     p(99.9900) =     82.444 ms/op
     p(99.9990) =     82.444 ms/op
     p(99.9999) =     82.444 ms/op
    p(100.0000) =     82.444 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 88.37% complete, ETA 00:03:33
# Fork: 1 of 3
# Warmup Iteration   1: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 67, 137, 156, 156, 156, 156, 156 ms/op
# Warmup Iteration   2: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 60, 88, 97, 97, 97, 97, 97 ms/op
# Warmup Iteration   3: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 68, 96, 108, 108, 108, 108, 108 ms/op
Iteration   1: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 60, 85, 87, 87, 87, 87, 87 ms/op
Iteration   2: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 60, 89, 103, 103, 103, 103, 103 ms/op
Iteration   3: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 63, 68, 68, 68, 68, 68, 68 ms/op

# Run progress: 88.76% complete, ETA 00:03:26
# Fork: 2 of 3
# Warmup Iteration   1: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 65, 122, 156, 156, 156, 156, 156 ms/op
# Warmup Iteration   2: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 57, 59, 59, 59, 59, 59, 59 ms/op
# Warmup Iteration   3: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 57, 57, 58, 58, 58, 58, 58 ms/op
Iteration   1: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 70, 98, 101, 101, 101, 101, 101 ms/op
Iteration   2: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 59, 71, 80, 80, 80, 80, 80 ms/op
Iteration   3: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 69, 103, 106, 106, 106, 106, 106 ms/op

# Run progress: 89.15% complete, ETA 00:03:19
# Fork: 3 of 3
# Warmup Iteration   1: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 47, 48, 76, 99, 99, 99, 99, 99 ms/op
# Warmup Iteration   2: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 50, 56, 78, 98, 98, 98, 98, 98 ms/op
# Warmup Iteration   3: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 47, 53, 74, 100, 100, 100, 100, 100 ms/op
Iteration   1: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 56, 93, 101, 101, 101, 101, 101 ms/op
Iteration   2: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 61, 91, 98, 98, 98, 98, 98 ms/op
Iteration   3: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 47, 53, 54, 54, 54, 54, 54, 54 ms/op


Result "readXxh64":
  N = 144
  mean =     64.214 ±(99.9%) 3.439 ms/op

  Histogram, ms/op:
    [ 40.000,  45.000) = 0 
    [ 45.000,  50.000) = 8 
    [ 50.000,  55.000) = 25 
    [ 55.000,  60.000) = 31 
    [ 60.000,  65.000) = 25 
    [ 65.000,  70.000) = 23 
    [ 70.000,  75.000) = 11 
    [ 75.000,  80.000) = 5 
    [ 80.000,  85.000) = 4 
    [ 85.000,  90.000) = 4 
    [ 90.000,  95.000) = 2 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =     46.727 ms/op
     p(50.0000) =     60.293 ms/op
     p(90.0000) =     82.510 ms/op
     p(95.0000) =     93.127 ms/op
     p(99.0000) =    104.713 ms/op
     p(99.9000) =    105.775 ms/op
     p(99.9900) =    105.775 ms/op
     p(99.9990) =    105.775 ms/op
     p(99.9999) =    105.775 ms/op
    p(100.0000) =    105.775 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 89.53% complete, ETA 00:03:12
# Fork: 1 of 3
# Warmup Iteration   1: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 66, 121, 158, 158, 158, 158, 158 ms/op
# Warmup Iteration   2: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 57, 58, 60, 60, 60, 60, 60 ms/op
# Warmup Iteration   3: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 59, 64, 76, 76, 76, 76, 76 ms/op
Iteration   1: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 59, 65, 76, 76, 76, 76, 76 ms/op
Iteration   2: n = 18, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 57, 62, 77, 77, 77, 77, 77 ms/op
Iteration   3: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 57, 59, 59, 59, 59, 59, 59 ms/op

# Run progress: 89.92% complete, ETA 00:03:05
# Fork: 2 of 3
# Warmup Iteration   1: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 67, 148, 179, 179, 179, 179, 179 ms/op
# Warmup Iteration   2: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 67, 97, 103, 103, 103, 103, 103 ms/op
# Warmup Iteration   3: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 68, 93, 109, 109, 109, 109, 109 ms/op
Iteration   1: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 63, 100, 108, 108, 108, 108, 108 ms/op
Iteration   2: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 69, 94, 106, 106, 106, 106, 106 ms/op
Iteration   3: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 62, 69, 69, 69, 69, 69, 69 ms/op

# Run progress: 90.31% complete, ETA 00:02:58
# Fork: 3 of 3
# Warmup Iteration   1: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 65, 124, 163, 163, 163, 163, 163 ms/op
# Warmup Iteration   2: n = 16, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 58, 100, 110, 110, 110, 110, 110 ms/op
# Warmup Iteration   3: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 68, 69, 69, 69, 69, 69, 69 ms/op
Iteration   1: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 60, 86, 89, 89, 89, 89, 89 ms/op
Iteration   2: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 68, 95, 107, 107, 107, 107, 107 ms/op
Iteration   3: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 59, 60, 60, 60, 60, 60, 60 ms/op


Result "readXxh64":
  N = 145
  mean =     63.659 ±(99.9%) 2.721 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 2 
    [ 55.000,  60.000) = 68 
    [ 60.000,  65.000) = 36 
    [ 65.000,  70.000) = 21 
    [ 70.000,  75.000) = 4 
    [ 75.000,  80.000) = 3 
    [ 80.000,  85.000) = 3 
    [ 85.000,  90.000) = 3 
    [ 90.000,  95.000) = 2 
    [ 95.000, 100.000) = 0 
    [100.000, 105.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     53.543 ms/op
     p(50.0000) =     60.031 ms/op
     p(90.0000) =     74.134 ms/op
     p(95.0000) =     85.289 ms/op
     p(99.0000) =    107.500 ms/op
     p(99.9000) =    107.741 ms/op
     p(99.9900) =    107.741 ms/op
     p(99.9990) =    107.741 ms/op
     p(99.9999) =    107.741 ms/op
    p(100.0000) =    107.741 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 90.70% complete, ETA 00:02:51
# Fork: 1 of 3
# Warmup Iteration   1: n = 6, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 137, 204, 204, 204, 204, 204, 204 ms/op
# Warmup Iteration   2: n = 6, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 139, 142, 195, 195, 195, 195, 195, 195 ms/op
# Warmup Iteration   3: n = 7, mean = 148 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 141, 198, 198, 198, 198, 198, 198 ms/op
Iteration   1: n = 6, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 139, 201, 201, 201, 201, 201, 201 ms/op
Iteration   2: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 139, 199, 199, 199, 199, 199, 199 ms/op
Iteration   3: n = 7, mean = 143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 136, 200, 200, 200, 200, 200, 200 ms/op

# Run progress: 91.09% complete, ETA 00:02:43
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 134, 225, 225, 225, 225, 225, 225 ms/op
# Warmup Iteration   2: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 119, 122, 202, 202, 202, 202, 202, 202 ms/op
# Warmup Iteration   3: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 137, 203, 203, 203, 203, 203, 203 ms/op
Iteration   1: n = 6, mean = 168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 167, 201, 201, 201, 201, 201, 201 ms/op
Iteration   2: n = 8, mean = 126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 119, 124, 137, 137, 137, 137, 137, 137 ms/op
Iteration   3: n = 6, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 138, 197, 197, 197, 197, 197, 197 ms/op

# Run progress: 91.47% complete, ETA 00:02:36
# Fork: 3 of 3
# Warmup Iteration   1: n = 5, mean = 171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 163, 205, 205, 205, 205, 205, 205 ms/op
# Warmup Iteration   2: n = 7, mean = 142 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 137, 192, 192, 192, 192, 192, 192 ms/op
# Warmup Iteration   3: n = 7, mean = 155 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 139, 199, 199, 199, 199, 199, 199 ms/op
Iteration   1: n = 6, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 140, 217, 217, 217, 217, 217, 217 ms/op
Iteration   2: n = 7, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 139, 143, 143, 143, 143, 143, 143 ms/op
Iteration   3: n = 7, mean = 140 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 126, 215, 215, 215, 215, 215, 215 ms/op


Result "write":
  N = 59
  mean =    147.878 ±(99.9%) 12.887 ms/op

  Histogram, ms/op:
    [110.000, 120.000) = 2 
    [120.000, 130.000) = 12 
    [130.000, 140.000) = 28 
    [140.000, 150.000) = 4 
    [150.000, 160.000) = 0 
    [160.000, 170.000) = 1 
    [170.000, 180.000) = 0 
    [180.000, 190.000) = 0 
    [190.000, 200.000) = 7 
    [200.000, 210.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =    118.620 ms/op
     p(50.0000) =    136.839 ms/op
     p(90.0000) =    199.754 ms/op
     p(95.0000) =    201.064 ms/op
     p(99.0000) =    216.793 ms/op
     p(99.9000) =    216.793 ms/op
     p(99.9900) =    216.793 ms/op
     p(99.9990) =    216.793 ms/op
     p(99.9999) =    216.793 ms/op
    p(100.0000) =    216.793 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 91.86% complete, ETA 00:02:29
# Fork: 1 of 3
# Warmup Iteration   1: n = 5, mean = 198 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 167, 180, 258, 258, 258, 258, 258, 258 ms/op
# Warmup Iteration   2: n = 5, mean = 201 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 155, 183, 305, 305, 305, 305, 305, 305 ms/op
# Warmup Iteration   3: n = 5, mean = 212 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 181, 188, 254, 254, 254, 254, 254, 254 ms/op
Iteration   1: n = 5, mean = 192 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 162, 187, 240, 240, 240, 240, 240, 240 ms/op
Iteration   2: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 153, 156, 163, 163, 163, 163, 163, 163 ms/op
Iteration   3: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 160, 163, 164, 164, 164, 164, 164, 164 ms/op

# Run progress: 92.25% complete, ETA 00:02:22
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 234 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 184, 238, 278, 278, 278, 278, 278, 278 ms/op
# Warmup Iteration   2: n = 5, mean = 199 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 179, 183, 258, 258, 258, 258, 258, 258 ms/op
# Warmup Iteration   3: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 162, 184, 188, 188, 188, 188, 188, 188 ms/op
Iteration   1: n = 6, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 155, 160, 162, 162, 162, 162, 162, 162 ms/op
Iteration   2: n = 6, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 155, 160, 162, 162, 162, 162, 162, 162 ms/op
Iteration   3: n = 5, mean = 192 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 187, 237, 237, 237, 237, 237, 237 ms/op

# Run progress: 92.64% complete, ETA 00:02:15
# Fork: 3 of 3
# Warmup Iteration   1: n = 5, mean = 192 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 152, 174, 253, 253, 253, 253, 253, 253 ms/op
# Warmup Iteration   2: n = 5, mean = 211 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 181, 283, 283, 283, 283, 283, 283 ms/op
# Warmup Iteration   3: n = 6, mean = 173 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 155, 178, 187, 187, 187, 187, 187, 187 ms/op
Iteration   1: n = 5, mean = 215 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 179, 230, 244, 244, 244, 244, 244, 244 ms/op
Iteration   2: n = 5, mean = 193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 179, 180, 243, 243, 243, 243, 243, 243 ms/op
Iteration   3: n = 5, mean = 220 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 179, 180, 308, 308, 308, 308, 308, 308 ms/op


Result "write":
  N = 49
  mean =    181.484 ±(99.9%) 16.768 ms/op

  Histogram, ms/op:
    [100.000, 125.000) = 0 
    [125.000, 150.000) = 0 
    [150.000, 175.000) = 26 
    [175.000, 200.000) = 15 
    [200.000, 225.000) = 0 
    [225.000, 250.000) = 6 
    [250.000, 275.000) = 1 
    [275.000, 300.000) = 0 
    [300.000, 325.000) = 1 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    153.092 ms/op
     p(50.0000) =    163.578 ms/op
     p(90.0000) =    242.745 ms/op
     p(95.0000) =    247.464 ms/op
     p(99.0000) =    308.281 ms/op
     p(99.9000) =    308.281 ms/op
     p(99.9900) =    308.281 ms/op
     p(99.9990) =    308.281 ms/op
     p(99.9999) =    308.281 ms/op
    p(100.0000) =    308.281 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 93.02% complete, ETA 00:02:08
# Fork: 1 of 3
# Warmup Iteration   1: n = 5, mean = 173 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 136, 292, 292, 292, 292, 292, 292 ms/op
# Warmup Iteration   2: n = 7, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 135, 201, 201, 201, 201, 201, 201 ms/op
# Warmup Iteration   3: n = 6, mean = 155 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 135, 202, 202, 202, 202, 202, 202 ms/op
Iteration   1: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 143, 188, 188, 188, 188, 188, 188 ms/op
Iteration   2: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 156, 199, 199, 199, 199, 199, 199 ms/op
Iteration   3: n = 7, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 143, 206, 206, 206, 206, 206, 206 ms/op

# Run progress: 93.41% complete, ETA 00:02:01
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 121, 133, 203, 203, 203, 203, 203, 203 ms/op
# Warmup Iteration   2: n = 7, mean = 143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 136, 197, 197, 197, 197, 197, 197 ms/op
# Warmup Iteration   3: n = 8, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 118, 119, 121, 121, 121, 121, 121, 121 ms/op
Iteration   1: n = 8, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 118, 119, 120, 120, 120, 120, 120, 120 ms/op
Iteration   2: n = 7, mean = 141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 119, 134, 192, 192, 192, 192, 192, 192 ms/op
Iteration   3: n = 7, mean = 142 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 134, 195, 195, 195, 195, 195, 195 ms/op

# Run progress: 93.80% complete, ETA 00:01:53
# Fork: 3 of 3
# Warmup Iteration   1: n = 6, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 146, 204, 204, 204, 204, 204, 204 ms/op
# Warmup Iteration   2: n = 7, mean = 143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 120, 138, 188, 188, 188, 188, 188, 188 ms/op
# Warmup Iteration   3: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 128, 195, 195, 195, 195, 195, 195 ms/op
Iteration   1: n = 6, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 117, 137, 224, 224, 224, 224, 224, 224 ms/op
Iteration   2: n = 6, mean = 174 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 169, 237, 237, 237, 237, 237, 237 ms/op
Iteration   3: n = 6, mean = 155 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 135, 202, 202, 202, 202, 202, 202 ms/op


Result "write":
  N = 60
  mean =    148.240 ±(99.9%) 13.830 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 14 
    [125.000, 137.500) = 20 
    [137.500, 150.000) = 9 
    [150.000, 162.500) = 1 
    [162.500, 175.000) = 4 
    [175.000, 187.500) = 0 
    [187.500, 200.000) = 7 
    [200.000, 212.500) = 3 
    [212.500, 225.000) = 1 
    [225.000, 237.500) = 1 
    [237.500, 250.000) = 0 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    116.785 ms/op
     p(50.0000) =    135.004 ms/op
     p(90.0000) =    199.334 ms/op
     p(95.0000) =    205.416 ms/op
     p(99.0000) =    236.716 ms/op
     p(99.9000) =    236.716 ms/op
     p(99.9900) =    236.716 ms/op
     p(99.9990) =    236.716 ms/op
     p(99.9999) =    236.716 ms/op
    p(100.0000) =    236.716 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 94.19% complete, ETA 00:01:46
# Fork: 1 of 3
# Warmup Iteration   1: n = 5, mean = 197 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 160, 183, 254, 254, 254, 254, 254, 254 ms/op
# Warmup Iteration   2: n = 6, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 155, 167, 205, 205, 205, 205, 205, 205 ms/op
# Warmup Iteration   3: n = 4, mean = 231 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 186, 244, 251, 251, 251, 251, 251, 251 ms/op
Iteration   1: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 162, 185, 186, 186, 186, 186, 186, 186 ms/op
Iteration   2: n = 5, mean = 206 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 178, 182, 249, 249, 249, 249, 249, 249 ms/op
Iteration   3: n = 5, mean = 195 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 173, 186, 245, 245, 245, 245, 245, 245 ms/op

# Run progress: 94.57% complete, ETA 00:01:39
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 182, 220, 263, 263, 263, 263, 263, 263 ms/op
# Warmup Iteration   2: n = 5, mean = 194 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 179, 183, 242, 242, 242, 242, 242, 242 ms/op
# Warmup Iteration   3: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 159, 161, 175, 175, 175, 175, 175, 175 ms/op
Iteration   1: n = 5, mean = 195 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 183, 247, 247, 247, 247, 247, 247 ms/op
Iteration   2: n = 5, mean = 183 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 160, 185, 222, 222, 222, 222, 222, 222 ms/op
Iteration   3: n = 5, mean = 188 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 168, 176, 240, 240, 240, 240, 240, 240 ms/op

# Run progress: 94.96% complete, ETA 00:01:32
# Fork: 3 of 3
# Warmup Iteration   1: n = 5, mean = 196 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 153, 179, 257, 257, 257, 257, 257, 257 ms/op
# Warmup Iteration   2: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 152, 155, 286, 286, 286, 286, 286, 286 ms/op
# Warmup Iteration   3: n = 5, mean = 198 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 181, 187, 233, 233, 233, 233, 233, 233 ms/op
Iteration   1: n = 5, mean = 205 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 174, 194, 242, 242, 242, 242, 242, 242 ms/op
Iteration   2: n = 5, mean = 192 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 173, 180, 246, 246, 246, 246, 246, 246 ms/op
Iteration   3: n = 5, mean = 184 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 186, 195, 195, 195, 195, 195, 195 ms/op


Result "write":
  N = 46
  mean =    191.445 ±(99.9%) 13.533 ms/op

  Histogram, ms/op:
    [150.000, 160.000) = 1 
    [160.000, 170.000) = 5 
    [170.000, 180.000) = 10 
    [180.000, 190.000) = 18 
    [190.000, 200.000) = 3 
    [200.000, 210.000) = 0 
    [210.000, 220.000) = 0 
    [220.000, 230.000) = 1 
    [230.000, 240.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    159.908 ms/op
     p(50.0000) =    184.287 ms/op
     p(90.0000) =    244.108 ms/op
     p(95.0000) =    246.927 ms/op
     p(99.0000) =    249.037 ms/op
     p(99.9000) =    249.037 ms/op
     p(99.9900) =    249.037 ms/op
     p(99.9990) =    249.037 ms/op
     p(99.9999) =    249.037 ms/op
    p(100.0000) =    249.037 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 95.35% complete, ETA 00:01:25
# Fork: 1 of 3
# Warmup Iteration   1: n = 6, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 137, 239, 239, 239, 239, 239, 239 ms/op
# Warmup Iteration   2: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 116, 116, 204, 204, 204, 204, 204, 204 ms/op
# Warmup Iteration   3: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 138, 179, 179, 179, 179, 179, 179 ms/op
Iteration   1: n = 7, mean = 149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 142, 208, 208, 208, 208, 208, 208 ms/op
Iteration   2: n = 7, mean = 142 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 137, 202, 202, 202, 202, 202, 202 ms/op
Iteration   3: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 141, 207, 207, 207, 207, 207, 207 ms/op

# Run progress: 95.74% complete, ETA 00:01:18
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 137, 221, 221, 221, 221, 221, 221 ms/op
# Warmup Iteration   2: n = 8, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 120, 120, 135, 135, 135, 135, 135, 135 ms/op
# Warmup Iteration   3: n = 8, mean = 120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 120, 120, 121, 121, 121, 121, 121, 121 ms/op
Iteration   1: n = 7, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 120, 144, 212, 212, 212, 212, 212, 212 ms/op
Iteration   2: n = 6, mean = 171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 171, 215, 215, 215, 215, 215, 215 ms/op
Iteration   3: n = 6, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 141, 199, 199, 199, 199, 199, 199 ms/op

# Run progress: 96.12% complete, ETA 00:01:11
# Fork: 3 of 3
# Warmup Iteration   1: n = 6, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 139, 230, 230, 230, 230, 230, 230 ms/op
# Warmup Iteration   2: n = 6, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 139, 139, 192, 192, 192, 192, 192, 192 ms/op
# Warmup Iteration   3: n = 7, mean = 149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 142, 207, 207, 207, 207, 207, 207 ms/op
Iteration   1: n = 6, mean = 164 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 144, 211, 211, 211, 211, 211, 211 ms/op
Iteration   2: n = 6, mean = 172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 173, 201, 201, 201, 201, 201, 201 ms/op
Iteration   3: n = 6, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 143, 199, 199, 199, 199, 199, 199 ms/op


Result "write":
  N = 57
  mean =    156.930 ±(99.9%) 13.703 ms/op

  Histogram, ms/op:
    [110.000, 120.000) = 3 
    [120.000, 130.000) = 4 
    [130.000, 140.000) = 12 
    [140.000, 150.000) = 18 
    [150.000, 160.000) = 2 
    [160.000, 170.000) = 1 
    [170.000, 180.000) = 0 
    [180.000, 190.000) = 4 
    [190.000, 200.000) = 4 
    [200.000, 210.000) = 6 

  Percentiles, ms/op:
      p(0.0000) =    119.669 ms/op
     p(50.0000) =    142.344 ms/op
     p(90.0000) =    206.727 ms/op
     p(95.0000) =    210.606 ms/op
     p(99.0000) =    214.696 ms/op
     p(99.9000) =    214.696 ms/op
     p(99.9900) =    214.696 ms/op
     p(99.9990) =    214.696 ms/op
     p(99.9999) =    214.696 ms/op
    p(100.0000) =    214.696 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 96.51% complete, ETA 00:01:04
# Fork: 1 of 3
# Warmup Iteration   1: n = 5, mean = 208 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 180, 204, 255, 255, 255, 255, 255, 255 ms/op
# Warmup Iteration   2: n = 5, mean = 222 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 179, 234, 267, 267, 267, 267, 267, 267 ms/op
# Warmup Iteration   3: n = 5, mean = 194 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 174, 184, 246, 246, 246, 246, 246, 246 ms/op
Iteration   1: n = 5, mean = 196 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 175, 185, 252, 252, 252, 252, 252, 252 ms/op
Iteration   2: n = 6, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 160, 160, 161, 161, 161, 161, 161, 161 ms/op
Iteration   3: n = 6, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 160, 161, 162, 162, 162, 162, 162, 162 ms/op

# Run progress: 96.90% complete, ETA 00:00:56
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 222 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 185, 217, 269, 269, 269, 269, 269, 269 ms/op
# Warmup Iteration   2: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 168, 233, 233, 233, 233, 233, 233 ms/op
# Warmup Iteration   3: n = 5, mean = 210 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 178, 181, 276, 276, 276, 276, 276, 276 ms/op
Iteration   1: n = 5, mean = 205 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 182, 245, 245, 245, 245, 245, 245 ms/op
Iteration   2: n = 6, mean = 166 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 163, 184, 184, 184, 184, 184, 184 ms/op
Iteration   3: n = 6, mean = 173 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 153, 155, 263, 263, 263, 263, 263, 263 ms/op

# Run progress: 97.29% complete, ETA 00:00:49
# Fork: 3 of 3
# Warmup Iteration   1: n = 5, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 153, 154, 229, 229, 229, 229, 229, 229 ms/op
# Warmup Iteration   2: n = 6, mean = 155 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 153, 153, 166, 166, 166, 166, 166, 166 ms/op
# Warmup Iteration   3: n = 6, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 153, 153, 159, 159, 159, 159, 159, 159 ms/op
Iteration   1: n = 5, mean = 207 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 177, 184, 252, 252, 252, 252, 252, 252 ms/op
Iteration   2: n = 5, mean = 215 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 177, 231, 248, 248, 248, 248, 248, 248 ms/op
Iteration   3: n = 5, mean = 194 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 177, 181, 248, 248, 248, 248, 248, 248 ms/op


Result "write":
  N = 49
  mean =    184.640 ±(99.9%) 16.763 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 0 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 20 
    [162.500, 175.000) = 3 
    [175.000, 187.500) = 16 
    [187.500, 200.000) = 0 
    [200.000, 212.500) = 0 
    [212.500, 225.000) = 0 
    [225.000, 237.500) = 1 
    [237.500, 250.000) = 6 
    [250.000, 262.500) = 2 
    [262.500, 275.000) = 1 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    152.830 ms/op
     p(50.0000) =    175.636 ms/op
     p(90.0000) =    247.726 ms/op
     p(95.0000) =    252.445 ms/op
     p(99.0000) =    262.668 ms/op
     p(99.9000) =    262.668 ms/op
     p(99.9900) =    262.668 ms/op
     p(99.9990) =    262.668 ms/op
     p(99.9999) =    262.668 ms/op
    p(100.0000) =    262.668 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 97.67% complete, ETA 00:00:42
# Fork: 1 of 3
# Warmup Iteration   1: n = 6, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 139, 144, 213, 213, 213, 213, 213, 213 ms/op
# Warmup Iteration   2: n = 6, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 144, 236, 236, 236, 236, 236, 236 ms/op
# Warmup Iteration   3: n = 7, mean = 149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 142, 207, 207, 207, 207, 207, 207 ms/op
Iteration   1: n = 7, mean = 145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 139, 197, 197, 197, 197, 197, 197 ms/op
Iteration   2: n = 8, mean = 123 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 123, 124, 124, 124, 124, 124, 124 ms/op
Iteration   3: n = 6, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 155, 231, 231, 231, 231, 231, 231 ms/op

# Run progress: 98.06% complete, ETA 00:00:35
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 137, 226, 226, 226, 226, 226, 226 ms/op
# Warmup Iteration   2: n = 6, mean = 165 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 162, 201, 201, 201, 201, 201, 201 ms/op
# Warmup Iteration   3: n = 6, mean = 173 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 171, 211, 211, 211, 211, 211, 211 ms/op
Iteration   1: n = 7, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 126, 143, 143, 143, 143, 143, 143 ms/op
Iteration   2: n = 6, mean = 177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 180, 209, 209, 209, 209, 209, 209 ms/op
Iteration   3: n = 6, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 135, 212, 212, 212, 212, 212, 212 ms/op

# Run progress: 98.45% complete, ETA 00:00:28
# Fork: 3 of 3
# Warmup Iteration   1: n = 6, mean = 149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 136, 202, 202, 202, 202, 202, 202 ms/op
# Warmup Iteration   2: n = 6, mean = 171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 139, 170, 204, 204, 204, 204, 204, 204 ms/op
# Warmup Iteration   3: n = 7, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 142, 209, 209, 209, 209, 209, 209 ms/op
Iteration   1: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 142, 212, 212, 212, 212, 212, 212 ms/op
Iteration   2: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 130, 140, 140, 140, 140, 140, 140 ms/op
Iteration   3: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 139, 140, 215, 215, 215, 215, 215, 215 ms/op


Result "write":
  N = 60
  mean =    148.614 ±(99.9%) 13.423 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 12 
    [125.000, 137.500) = 14 
    [137.500, 150.000) = 20 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 3 
    [175.000, 187.500) = 0 
    [187.500, 200.000) = 3 
    [200.000, 212.500) = 6 
    [212.500, 225.000) = 1 
    [225.000, 237.500) = 1 
    [237.500, 250.000) = 0 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    122.421 ms/op
     p(50.0000) =    138.674 ms/op
     p(90.0000) =    207.697 ms/op
     p(95.0000) =    212.061 ms/op
     p(99.0000) =    230.949 ms/op
     p(99.9000) =    230.949 ms/op
     p(99.9900) =    230.949 ms/op
     p(99.9990) =    230.949 ms/op
     p(99.9999) =    230.949 ms/op
    p(100.0000) =    230.949 ms/op


# JMH 1.12 (released 99 days ago, please consider updating!)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: -Dorg.lwjgl.util.NoChecks=true
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbLwjgl.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 98.84% complete, ETA 00:00:21
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 177, 193, 320, 320, 320, 320, 320, 320 ms/op
# Warmup Iteration   2: n = 5, mean = 195 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 185, 241, 241, 241, 241, 241, 241 ms/op
# Warmup Iteration   3: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 165, 246, 246, 246, 246, 246, 246 ms/op
Iteration   1: n = 5, mean = 198 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 177, 188, 251, 251, 251, 251, 251, 251 ms/op
Iteration   2: n = 6, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 154, 159, 164, 164, 164, 164, 164, 164 ms/op
Iteration   3: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 155, 164, 165, 165, 165, 165, 165, 165 ms/op

# Run progress: 99.22% complete, ETA 00:00:14
# Fork: 2 of 3
# Warmup Iteration   1: n = 5, mean = 196 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 159, 182, 250, 250, 250, 250, 250, 250 ms/op
# Warmup Iteration   2: n = 5, mean = 197 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 177, 186, 247, 247, 247, 247, 247, 247 ms/op
# Warmup Iteration   3: n = 6, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 154, 161, 162, 162, 162, 162, 162, 162 ms/op
Iteration   1: n = 5, mean = 191 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 179, 242, 242, 242, 242, 242, 242 ms/op
Iteration   2: n = 6, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 162, 162, 163, 163, 163, 163, 163, 163 ms/op
Iteration   3: n = 6, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 162, 163, 163, 163, 163, 163, 163 ms/op

# Run progress: 99.61% complete, ETA 00:00:07
# Fork: 3 of 3
# Warmup Iteration   1: n = 5, mean = 194 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 156, 177, 251, 251, 251, 251, 251, 251 ms/op
# Warmup Iteration   2: n = 5, mean = 190 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 170, 177, 240, 240, 240, 240, 240, 240 ms/op
# Warmup Iteration   3: n = 5, mean = 191 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 154, 186, 248, 248, 248, 248, 248, 248 ms/op
Iteration   1: n = 5, mean = 186 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 164, 177, 233, 233, 233, 233, 233, 233 ms/op
Iteration   2: n = 6, mean = 155 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 154, 154, 160, 160, 160, 160, 160, 160 ms/op
Iteration   3: n = 6, mean = 174 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 154, 154, 246, 246, 246, 246, 246, 246 ms/op


Result "write":
  N = 51
  mean =    171.170 ±(99.9%) 11.444 ms/op

  Histogram, ms/op:
    [150.000, 160.000) = 15 
    [160.000, 170.000) = 20 
    [170.000, 180.000) = 8 
    [180.000, 190.000) = 4 
    [190.000, 200.000) = 0 
    [200.000, 210.000) = 0 
    [210.000, 220.000) = 0 
    [220.000, 230.000) = 0 
    [230.000, 240.000) = 1 
    [240.000, 250.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    153.879 ms/op
     p(50.0000) =    162.791 ms/op
     p(90.0000) =    188.849 ms/op
     p(95.0000) =    243.689 ms/op
     p(99.0000) =    250.610 ms/op
     p(99.9000) =    250.610 ms/op
     p(99.9900) =    250.610 ms/op
     p(99.9990) =    250.610 ms/op
     p(99.9999) =    250.610 ms/op
    p(100.0000) =    250.610 ms/op


# Run complete. Total time: 00:30:35

Benchmark                      (forceSafe)  (intKey)  (metaSync)    (num)  (sequential)  (sync)  (valRandom)  (valSize)  (writeMap)    Mode   Cnt    Score    Error  Units
LmdbJavaAgrona.readCrc                 N/A      true         N/A  1000000          true     N/A        false        100        true  sample    75  124.048 ±  8.834  ms/op
LmdbJavaAgrona.readCrc                 N/A      true         N/A  1000000          true     N/A        false        100       false  sample    84  114.223 ± 10.542  ms/op
LmdbJavaAgrona.readKey                 N/A      true         N/A  1000000          true     N/A        false        100        true  sample    90  104.750 ±  6.409  ms/op
LmdbJavaAgrona.readKey                 N/A      true         N/A  1000000          true     N/A        false        100       false  sample    86  110.175 ±  6.767  ms/op
LmdbJavaAgrona.readRev                 N/A      true         N/A  1000000          true     N/A        false        100        true  sample   266   34.486 ±  1.261  ms/op
LmdbJavaAgrona.readRev                 N/A      true         N/A  1000000          true     N/A        false        100       false  sample   274   33.285 ±  1.262  ms/op
LmdbJavaAgrona.readSeq                 N/A      true         N/A  1000000          true     N/A        false        100        true  sample   235   39.021 ±  1.504  ms/op
LmdbJavaAgrona.readSeq                 N/A      true         N/A  1000000          true     N/A        false        100       false  sample   219   41.640 ±  1.956  ms/op
LmdbJavaAgrona.readXxh64               N/A      true         N/A  1000000          true     N/A        false        100        true  sample   128   72.285 ±  4.975  ms/op
LmdbJavaAgrona.readXxh64               N/A      true         N/A  1000000          true     N/A        false        100       false  sample   135   68.405 ±  3.918  ms/op
LmdbJavaAgrona.write                   N/A      true        true  1000000          true    true        false        100        true  sample    52  168.551 ± 14.307  ms/op
LmdbJavaAgrona.write                   N/A      true        true  1000000          true    true        false        100       false  sample    47  192.062 ± 15.660  ms/op
LmdbJavaAgrona.write                   N/A      true        true  1000000          true   false        false        100        true  sample    59  152.808 ± 14.069  ms/op
LmdbJavaAgrona.write                   N/A      true        true  1000000          true   false        false        100       false  sample    47  198.248 ± 17.299  ms/op
LmdbJavaAgrona.write                   N/A      true       false  1000000          true    true        false        100        true  sample    56  161.890 ± 16.621  ms/op
LmdbJavaAgrona.write                   N/A      true       false  1000000          true    true        false        100       false  sample    48  188.263 ± 20.227  ms/op
LmdbJavaAgrona.write                   N/A      true       false  1000000          true   false        false        100        true  sample    63  141.296 ±  9.448  ms/op
LmdbJavaAgrona.write                   N/A      true       false  1000000          true   false        false        100       false  sample    50  182.940 ± 14.968  ms/op
LmdbJavaByteBuffer.readCrc            true      true         N/A  1000000          true     N/A        false        100        true  sample    74  127.579 ± 10.725  ms/op
LmdbJavaByteBuffer.readCrc            true      true         N/A  1000000          true     N/A        false        100       false  sample    76  124.120 ±  9.784  ms/op
LmdbJavaByteBuffer.readCrc           false      true         N/A  1000000          true     N/A        false        100        true  sample    94  101.158 ±  6.266  ms/op
LmdbJavaByteBuffer.readCrc           false      true         N/A  1000000          true     N/A        false        100       false  sample    92  104.162 ±  7.160  ms/op
LmdbJavaByteBuffer.readKey            true      true         N/A  1000000          true     N/A        false        100        true  sample    66  149.502 ±  8.523  ms/op
LmdbJavaByteBuffer.readKey            true      true         N/A  1000000          true     N/A        false        100       false  sample    61  156.057 ± 12.077  ms/op
LmdbJavaByteBuffer.readKey           false      true         N/A  1000000          true     N/A        false        100        true  sample    83  113.387 ±  7.706  ms/op
LmdbJavaByteBuffer.readKey           false      true         N/A  1000000          true     N/A        false        100       false  sample    96   98.525 ±  2.894  ms/op
LmdbJavaByteBuffer.readRev            true      true         N/A  1000000          true     N/A        false        100        true  sample   149   63.164 ±  4.010  ms/op
LmdbJavaByteBuffer.readRev            true      true         N/A  1000000          true     N/A        false        100       false  sample   137   68.077 ±  4.719  ms/op
LmdbJavaByteBuffer.readRev           false      true         N/A  1000000          true     N/A        false        100        true  sample   262   35.140 ±  1.327  ms/op
LmdbJavaByteBuffer.readRev           false      true         N/A  1000000          true     N/A        false        100       false  sample   263   34.527 ±  1.270  ms/op
LmdbJavaByteBuffer.readSeq            true      true         N/A  1000000          true     N/A        false        100        true  sample   133   70.069 ±  3.984  ms/op
LmdbJavaByteBuffer.readSeq            true      true         N/A  1000000          true     N/A        false        100       false  sample   132   70.220 ±  4.124  ms/op
LmdbJavaByteBuffer.readSeq           false      true         N/A  1000000          true     N/A        false        100        true  sample   219   41.947 ±  1.635  ms/op
LmdbJavaByteBuffer.readSeq           false      true         N/A  1000000          true     N/A        false        100       false  sample   210   44.054 ±  1.982  ms/op
LmdbJavaByteBuffer.readXxh64          true      true         N/A  1000000          true     N/A        false        100        true  sample    92  102.307 ±  7.718  ms/op
LmdbJavaByteBuffer.readXxh64          true      true         N/A  1000000          true     N/A        false        100       false  sample    95   99.415 ±  6.917  ms/op
LmdbJavaByteBuffer.readXxh64         false      true         N/A  1000000          true     N/A        false        100        true  sample   128   73.089 ±  4.651  ms/op
LmdbJavaByteBuffer.readXxh64         false      true         N/A  1000000          true     N/A        false        100       false  sample   138   67.816 ±  3.175  ms/op
LmdbJavaByteBuffer.write               N/A      true        true  1000000          true    true        false        100        true  sample    54  167.127 ± 15.721  ms/op
LmdbJavaByteBuffer.write               N/A      true        true  1000000          true    true        false        100       false  sample    49  181.896 ± 13.847  ms/op
LmdbJavaByteBuffer.write               N/A      true        true  1000000          true   false        false        100        true  sample    57  158.186 ± 13.043  ms/op
LmdbJavaByteBuffer.write               N/A      true        true  1000000          true   false        false        100       false  sample    44  214.315 ± 19.151  ms/op
LmdbJavaByteBuffer.write               N/A      true       false  1000000          true    true        false        100        true  sample    59  150.884 ± 12.469  ms/op
LmdbJavaByteBuffer.write               N/A      true       false  1000000          true    true        false        100       false  sample    46  198.084 ± 19.071  ms/op
LmdbJavaByteBuffer.write               N/A      true       false  1000000          true   false        false        100        true  sample    56  161.043 ± 14.071  ms/op
LmdbJavaByteBuffer.write               N/A      true       false  1000000          true   false        false        100       false  sample    49  186.342 ± 16.567  ms/op
LmdbJni.readCrc                        N/A      true         N/A  1000000          true     N/A        false        100        true  sample    96   98.872 ±  6.346  ms/op
LmdbJni.readCrc                        N/A      true         N/A  1000000          true     N/A        false        100       false  sample    70  136.425 ±  9.305  ms/op
LmdbJni.readKey                        N/A      true         N/A  1000000          true     N/A        false        100        true  sample    90  103.704 ±  6.457  ms/op
LmdbJni.readKey                        N/A      true         N/A  1000000          true     N/A        false        100       false  sample    82  113.854 ±  7.678  ms/op
LmdbJni.readRev                        N/A      true         N/A  1000000          true     N/A        false        100        true  sample   289   31.560 ±  1.363  ms/op
LmdbJni.readRev                        N/A      true         N/A  1000000          true     N/A        false        100       false  sample   281   32.489 ±  1.349  ms/op
LmdbJni.readSeq                        N/A      true         N/A  1000000          true     N/A        false        100        true  sample   200   46.148 ±  1.337  ms/op
LmdbJni.readSeq                        N/A      true         N/A  1000000          true     N/A        false        100       false  sample   230   40.074 ±  1.871  ms/op
LmdbJni.readXxh64                      N/A      true         N/A  1000000          true     N/A        false        100        true  sample   137   68.085 ±  3.876  ms/op
LmdbJni.readXxh64                      N/A      true         N/A  1000000          true     N/A        false        100       false  sample   135   69.055 ±  3.697  ms/op
LmdbJni.write                          N/A      true        true  1000000          true    true        false        100        true  sample    55  165.937 ± 14.910  ms/op
LmdbJni.write                          N/A      true        true  1000000          true    true        false        100       false  sample    45  207.070 ± 16.055  ms/op
LmdbJni.write                          N/A      true        true  1000000          true   false        false        100        true  sample    57  157.512 ± 16.245  ms/op
LmdbJni.write                          N/A      true        true  1000000          true   false        false        100       false  sample    46  202.369 ± 16.503  ms/op
LmdbJni.write                          N/A      true       false  1000000          true    true        false        100        true  sample    56  160.559 ± 12.408  ms/op
LmdbJni.write                          N/A      true       false  1000000          true    true        false        100       false  sample    49  188.605 ± 15.023  ms/op
LmdbJni.write                          N/A      true       false  1000000          true   false        false        100        true  sample    59  154.669 ± 12.464  ms/op
LmdbJni.write                          N/A      true       false  1000000          true   false        false        100       false  sample    48  197.804 ± 14.546  ms/op
LmdbLwjgl.byteBufferByte2BH            N/A      true         N/A  1000000          true     N/A        false        100        true  sample  2244    4.018 ±  0.075  ms/op
LmdbLwjgl.byteBufferByte2BH            N/A      true         N/A  1000000          true     N/A        false        100       false  sample  2558    3.523 ±  0.043  ms/op
LmdbLwjgl.byteBufferObject2BH          N/A      true         N/A  1000000          true     N/A        false        100        true  sample  3160    2.851 ±  0.036  ms/op
LmdbLwjgl.byteBufferObject2BH          N/A      true         N/A  1000000          true     N/A        false        100       false  sample  3139    2.868 ±  0.040  ms/op
LmdbLwjgl.readCrc                      N/A      true         N/A  1000000          true     N/A        false        100        true  sample   102   91.541 ±  5.986  ms/op
LmdbLwjgl.readCrc                      N/A      true         N/A  1000000          true     N/A        false        100       false  sample   101   91.818 ±  6.045  ms/op
LmdbLwjgl.readKey                      N/A      true         N/A  1000000          true     N/A        false        100        true  sample    96   96.869 ±  7.454  ms/op
LmdbLwjgl.readKey                      N/A      true         N/A  1000000          true     N/A        false        100       false  sample    97   97.643 ±  6.386  ms/op
LmdbLwjgl.readRev                      N/A      true         N/A  1000000          true     N/A        false        100        true  sample   273   33.422 ±  1.532  ms/op
LmdbLwjgl.readRev                      N/A      true         N/A  1000000          true     N/A        false        100       false  sample   317   28.773 ±  1.623  ms/op
LmdbLwjgl.readSeq                      N/A      true         N/A  1000000          true     N/A        false        100        true  sample   217   42.342 ±  2.261  ms/op
LmdbLwjgl.readSeq                      N/A      true         N/A  1000000          true     N/A        false        100       false  sample   209   43.948 ±  2.511  ms/op
LmdbLwjgl.readXxh64                    N/A      true         N/A  1000000          true     N/A        false        100        true  sample   144   64.214 ±  3.439  ms/op
LmdbLwjgl.readXxh64                    N/A      true         N/A  1000000          true     N/A        false        100       false  sample   145   63.659 ±  2.721  ms/op
LmdbLwjgl.write                        N/A      true        true  1000000          true    true        false        100        true  sample    59  147.878 ± 12.887  ms/op
LmdbLwjgl.write                        N/A      true        true  1000000          true    true        false        100       false  sample    49  181.484 ± 16.768  ms/op
LmdbLwjgl.write                        N/A      true        true  1000000          true   false        false        100        true  sample    60  148.240 ± 13.830  ms/op
LmdbLwjgl.write                        N/A      true        true  1000000          true   false        false        100       false  sample    46  191.445 ± 13.533  ms/op
LmdbLwjgl.write                        N/A      true       false  1000000          true    true        false        100        true  sample    57  156.930 ± 13.703  ms/op
LmdbLwjgl.write                        N/A      true       false  1000000          true    true        false        100       false  sample    49  184.640 ± 16.763  ms/op
LmdbLwjgl.write                        N/A      true       false  1000000          true   false        false        100        true  sample    60  148.614 ± 13.423  ms/op
LmdbLwjgl.write                        N/A      true       false  1000000          true   false        false        100       false  sample    51  171.170 ± 11.444  ms/op

Benchmark result is saved to out-1.csv
