# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 0.00% complete, ETA 00:19:12
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readCrc-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 7, mean = 145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 144, 172, 172, 172, 172, 172, 172 ms/op
# Warmup Iteration   2: n = 7, mean = 151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 143, 209, 209, 209, 209, 209, 209 ms/op
# Warmup Iteration   3: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 128, 134, 134, 134, 134, 134, 134 ms/op
Iteration   1: n = 7, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 146, 211, 211, 211, 211, 211, 211 ms/op
Iteration   2: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 133, 202, 202, 202, 202, 202, 202 ms/op
Iteration   3: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 147, 183, 183, 183, 183, 183, 183 ms/op

# Run progress: 0.52% complete, ETA 00:23:51
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readCrc-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 112, 175, 175, 175, 175, 175, 175 ms/op
# Warmup Iteration   2: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 101, 106, 106, 106, 106, 106, 106 ms/op
# Warmup Iteration   3: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 101, 103, 103, 103, 103, 103, 103 ms/op
Iteration   1: n = 10, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 100, 101, 101, 101, 101, 101, 101 ms/op
Iteration   2: n = 10, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 100, 101, 101, 101, 101, 101, 101 ms/op
Iteration   3: n = 10, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 100, 101, 101, 101, 101, 101, 101 ms/op

# Run progress: 1.04% complete, ETA 00:23:39
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readCrc-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 7, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 146, 250, 250, 250, 250, 250, 250 ms/op
# Warmup Iteration   2: n = 7, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 145, 210, 210, 210, 210, 210, 210 ms/op
# Warmup Iteration   3: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 130, 133, 133, 133, 133, 133, 133 ms/op
Iteration   1: n = 7, mean = 151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 144, 208, 208, 208, 208, 208, 208 ms/op
Iteration   2: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 128, 128, 128, 128, 128, 128, 128 ms/op
Iteration   3: n = 8, mean = 141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 128, 210, 210, 210, 210, 210, 210 ms/op


Result "readCrc":
  N = 74
  mean =    126.054 ±(99.9%) 11.073 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 30 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 23 
    [137.500, 150.000) = 16 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 1 
    [187.500, 200.000) = 0 
    [200.000, 212.500) = 4 
    [212.500, 225.000) = 0 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 0 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    100.008 ms/op
     p(50.0000) =    128.188 ms/op
     p(90.0000) =    147.325 ms/op
     p(95.0000) =    203.489 ms/op
     p(99.0000) =    211.026 ms/op
     p(99.9000) =    211.026 ms/op
     p(99.9900) =    211.026 ms/op
     p(99.9990) =    211.026 ms/op
     p(99.9999) =    211.026 ms/op
    p(100.0000) =    211.026 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 1.56% complete, ETA 00:23:49
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readCrc-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false-compacted
n = 7, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 150, 189, 189, 189, 189, 189, 189 ms/op
# Warmup Iteration   2: n = 8, mean = 134 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 133, 136, 136, 136, 136, 136, 136 ms/op
# Warmup Iteration   3: n = 7, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 148, 212, 212, 212, 212, 212, 212 ms/op
Iteration   1: n = 7, mean = 155 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 149, 213, 213, 213, 213, 213, 213 ms/op
Iteration   2: n = 8, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 133, 134, 134, 134, 134, 134, 134 ms/op
Iteration   3: n = 7, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 149, 212, 212, 212, 212, 212, 212 ms/op

# Run progress: 2.08% complete, ETA 00:24:02
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readCrc-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false-compacted
n = 7, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 144, 224, 224, 224, 224, 224, 224 ms/op
# Warmup Iteration   2: n = 7, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 145, 244, 244, 244, 244, 244, 244 ms/op
# Warmup Iteration   3: n = 7, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 143, 207, 207, 207, 207, 207, 207 ms/op
Iteration   1: n = 7, mean = 151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 145, 209, 209, 209, 209, 209, 209 ms/op
Iteration   2: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 129, 130, 130, 130, 130, 130, 130 ms/op
Iteration   3: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 129, 130, 130, 130, 130, 130, 130 ms/op

# Run progress: 2.60% complete, ETA 00:24:01
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readCrc-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false-compacted
n = 7, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 149, 202, 202, 202, 202, 202, 202 ms/op
# Warmup Iteration   2: n = 8, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 132, 133, 133, 133, 133, 133, 133 ms/op
# Warmup Iteration   3: n = 7, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 147, 211, 211, 211, 211, 211, 211 ms/op
Iteration   1: n = 7, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 150, 214, 214, 214, 214, 214, 214 ms/op
Iteration   2: n = 8, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 132, 132, 132, 132, 132, 132, 132 ms/op
Iteration   3: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 147, 167, 167, 167, 167, 167, 167 ms/op


Result "readCrc":
  N = 67
  mean =    142.820 ±(99.9%) 8.502 ms/op

  Histogram, ms/op:
    [120.000, 130.000) = 15 
    [130.000, 140.000) = 23 
    [140.000, 150.000) = 21 
    [150.000, 160.000) = 2 
    [160.000, 170.000) = 1 
    [170.000, 180.000) = 1 
    [180.000, 190.000) = 0 
    [190.000, 200.000) = 0 
    [200.000, 210.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    128.582 ms/op
     p(50.0000) =    133.300 ms/op
     p(90.0000) =    156.290 ms/op
     p(95.0000) =    210.973 ms/op
     p(99.0000) =    213.910 ms/op
     p(99.9000) =    213.910 ms/op
     p(99.9900) =    213.910 ms/op
     p(99.9990) =    213.910 ms/op
     p(99.9999) =    213.910 ms/op
    p(100.0000) =    213.910 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 3.13% complete, ETA 00:23:51
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 8, mean = 126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 118, 185, 185, 185, 185, 185, 185 ms/op
# Warmup Iteration   2: n = 9, mean = 120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 117, 168, 168, 168, 168, 168, 168 ms/op
# Warmup Iteration   3: n = 8, mean = 134 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 116, 118, 192, 192, 192, 192, 192, 192 ms/op
Iteration   1: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 115, 122, 122, 122, 122, 122, 122 ms/op
Iteration   2: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 103, 105, 106, 106, 106, 106, 106 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 107, 108, 108, 108, 108, 108, 108 ms/op

# Run progress: 3.65% complete, ETA 00:23:38
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 99, 128, 131, 131, 131, 131, 131 ms/op
# Warmup Iteration   2: n = 12, mean = 88 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 86, 88, 89, 90, 90, 90, 90, 90 ms/op
# Warmup Iteration   3: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 99, 153, 153, 153, 153, 153, 153 ms/op
Iteration   1: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 99, 154, 154, 154, 154, 154, 154 ms/op
Iteration   2: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 110, 112, 112, 112, 112, 112, 112 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 98, 148, 153, 153, 153, 153, 153 ms/op

# Run progress: 4.17% complete, ETA 00:23:25
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 99, 167, 173, 173, 173, 173, 173 ms/op
# Warmup Iteration   2: n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 111, 158, 158, 158, 158, 158, 158 ms/op
# Warmup Iteration   3: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 98, 150, 155, 155, 155, 155, 155 ms/op
Iteration   1: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 98, 141, 145, 145, 145, 145, 145 ms/op
Iteration   2: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 88, 90, 90, 90, 90, 90, 90 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 112, 160, 160, 160, 160, 160, 160 ms/op


Result "readKey":
  N = 89
  mean =    105.291 ±(99.9%) 5.061 ms/op

  Histogram, ms/op:
    [ 80.000,  85.000) = 0 
    [ 85.000,  90.000) = 12 
    [ 90.000,  95.000) = 2 
    [ 95.000, 100.000) = 21 
    [100.000, 105.000) = 18 
    [105.000, 110.000) = 13 
    [110.000, 115.000) = 11 
    [115.000, 120.000) = 5 
    [120.000, 125.000) = 1 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 1 
    [135.000, 140.000) = 1 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 1 
    [150.000, 155.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     87.556 ms/op
     p(50.0000) =    103.154 ms/op
     p(90.0000) =    116.130 ms/op
     p(95.0000) =    140.640 ms/op
     p(99.0000) =    159.908 ms/op
     p(99.9000) =    159.908 ms/op
     p(99.9900) =    159.908 ms/op
     p(99.9990) =    159.908 ms/op
     p(99.9999) =    159.908 ms/op
    p(100.0000) =    159.908 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 4.69% complete, ETA 00:23:13
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false-compacted
n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 100, 145, 149, 149, 149, 149, 149 ms/op
# Warmup Iteration   2: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 91, 96, 97, 97, 97, 97, 97 ms/op
# Warmup Iteration   3: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 101, 151, 156, 156, 156, 156, 156 ms/op
Iteration   1: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 89, 92, 93, 93, 93, 93, 93 ms/op
Iteration   2: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 88, 91, 91, 91, 91, 91, 91 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 93, 94, 94, 94, 94, 94, 94 ms/op

# Run progress: 5.21% complete, ETA 00:23:07
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false-compacted
n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 113, 128, 128, 128, 128, 128, 128 ms/op
# Warmup Iteration   2: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 101, 140, 144, 144, 144, 144, 144 ms/op
# Warmup Iteration   3: n = 10, mean = 110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 104, 145, 146, 146, 146, 146, 146 ms/op
Iteration   1: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 112, 168, 168, 168, 168, 168, 168 ms/op
Iteration   2: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 100, 105, 105, 105, 105, 105, 105 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 112, 158, 158, 158, 158, 158, 158 ms/op

# Run progress: 5.73% complete, ETA 00:22:59
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false-compacted
n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 115, 160, 160, 160, 160, 160, 160 ms/op
# Warmup Iteration   2: n = 9, mean = 123 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 114, 164, 164, 164, 164, 164, 164 ms/op
# Warmup Iteration   3: n = 9, mean = 124 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 117, 159, 159, 159, 159, 159, 159 ms/op
Iteration   1: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 102, 154, 159, 159, 159, 159, 159 ms/op
Iteration   2: n = 11, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 93, 94, 94, 94, 94, 94, 94 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 114, 145, 145, 145, 145, 145, 145 ms/op


Result "readKey":
  N = 93
  mean =    101.293 ±(99.9%) 5.420 ms/op

  Histogram, ms/op:
    [ 80.000,  85.000) = 0 
    [ 85.000,  90.000) = 22 
    [ 90.000,  95.000) = 25 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 16 
    [105.000, 110.000) = 5 
    [110.000, 115.000) = 16 
    [115.000, 120.000) = 4 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 1 
    [150.000, 155.000) = 0 
    [155.000, 160.000) = 2 
    [160.000, 165.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     86.901 ms/op
     p(50.0000) =     93.979 ms/op
     p(90.0000) =    114.662 ms/op
     p(95.0000) =    125.213 ms/op
     p(99.0000) =    167.510 ms/op
     p(99.9000) =    167.510 ms/op
     p(99.9900) =    167.510 ms/op
     p(99.9990) =    167.510 ms/op
     p(99.9999) =    167.510 ms/op
    p(100.0000) =    167.510 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readRev
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 6.25% complete, ETA 00:22:51
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readRev-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 51, 67, 69, 69, 69, 69 ms/op
# Warmup Iteration   2: n = 32, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 32, 33, 33, 33, 33, 33, 33 ms/op
# Warmup Iteration   3: n = 26, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 35, 56, 68, 69, 69, 69, 69 ms/op
Iteration   1: n = 26, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 35, 56, 67, 69, 69, 69, 69 ms/op
Iteration   2: n = 31, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 33, 33, 35, 38, 38, 38, 38 ms/op
Iteration   3: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 35, 45, 61, 68, 68, 68, 68 ms/op

# Run progress: 6.77% complete, ETA 00:22:40
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readRev-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 28, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 35, 39, 58, 68, 68, 68, 68 ms/op
# Warmup Iteration   2: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 35, 43, 58, 65, 65, 65, 65 ms/op
# Warmup Iteration   3: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 32, 33, 33, 33, 33, 33, 33 ms/op
Iteration   1: n = 32, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 32, 32, 32, 32, 32, 32 ms/op
Iteration   2: n = 32, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 32, 32, 32, 32, 32, 32 ms/op
Iteration   3: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 33, 42, 59, 68, 68, 68, 68 ms/op

# Run progress: 7.29% complete, ETA 00:22:30
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readRev-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 36, 36, 43, 47, 47, 47, 47 ms/op
# Warmup Iteration   2: n = 25, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 36, 58, 66, 69, 69, 69, 69 ms/op
# Warmup Iteration   3: n = 26, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 36, 57, 69, 70, 70, 70, 70 ms/op
Iteration   1: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 36, 45, 63, 70, 70, 70, 70 ms/op
Iteration   2: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 32, 32, 33, 33, 33, 33, 33 ms/op
Iteration   3: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 34, 42, 59, 68, 68, 68, 68 ms/op


Result "readRev":
  N = 265
  mean =     34.461 ±(99.9%) 1.269 ms/op

  Histogram, ms/op:
    [20.000, 25.000) = 0 
    [25.000, 30.000) = 8 
    [30.000, 35.000) = 175 
    [35.000, 40.000) = 64 
    [40.000, 45.000) = 6 
    [45.000, 50.000) = 1 
    [50.000, 55.000) = 5 
    [55.000, 60.000) = 0 
    [60.000, 65.000) = 0 
    [65.000, 70.000) = 5 
    [70.000, 75.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     29.393 ms/op
     p(50.0000) =     33.128 ms/op
     p(90.0000) =     36.045 ms/op
     p(95.0000) =     43.260 ms/op
     p(99.0000) =     68.336 ms/op
     p(99.9000) =     70.386 ms/op
     p(99.9900) =     70.386 ms/op
     p(99.9990) =     70.386 ms/op
     p(99.9999) =     70.386 ms/op
    p(100.0000) =     70.386 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readRev
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 7.81% complete, ETA 00:22:18
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readRev-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false-compacted
n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 35, 40, 54, 63, 63, 63, 63 ms/op
# Warmup Iteration   2: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 32, 46, 69, 69, 69, 69 ms/op
# Warmup Iteration   3: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 34, 53, 65, 69, 69, 69, 69 ms/op
Iteration   1: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 36, 46, 51, 51, 51, 51 ms/op
Iteration   2: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 31, 32, 32, 32, 32, 32, 32 ms/op
Iteration   3: n = 34, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 32, 32, 32, 32, 32, 32 ms/op

# Run progress: 8.33% complete, ETA 00:22:09
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readRev-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false-compacted
n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 35, 58, 65, 67, 67, 67, 67 ms/op
# Warmup Iteration   2: n = 26, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 35, 55, 66, 66, 66, 66, 66 ms/op
# Warmup Iteration   3: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 33, 42, 58, 67, 67, 67, 67 ms/op
Iteration   1: n = 26, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 35, 57, 67, 69, 69, 69, 69 ms/op
Iteration   2: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 35, 45, 62, 69, 69, 69, 69 ms/op
Iteration   3: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 32, 32, 32, 33, 33, 33, 33 ms/op

# Run progress: 8.85% complete, ETA 00:22:01
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readRev-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false-compacted
n = 25, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 57, 75, 78, 78, 78, 78 ms/op
# Warmup Iteration   2: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 35, 36, 36, 36, 36, 36 ms/op
# Warmup Iteration   3: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 33, 34, 35, 35, 35, 35, 35 ms/op
Iteration   1: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 33, 33, 34, 34, 34, 34, 34 ms/op
Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 33, 34, 34, 34, 34, 34 ms/op
Iteration   3: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 36, 43, 61, 69, 69, 69, 69 ms/op


Result "readRev":
  N = 273
  mean =     33.627 ±(99.9%) 1.103 ms/op

  Histogram, ms/op:
    [20.000, 25.000) = 0 
    [25.000, 30.000) = 50 
    [30.000, 35.000) = 149 
    [35.000, 40.000) = 60 
    [40.000, 45.000) = 5 
    [45.000, 50.000) = 1 
    [50.000, 55.000) = 4 
    [55.000, 60.000) = 0 
    [60.000, 65.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     29.753 ms/op
     p(50.0000) =     32.637 ms/op
     p(90.0000) =     35.914 ms/op
     p(95.0000) =     41.976 ms/op
     p(99.0000) =     68.944 ms/op
     p(99.9000) =     69.075 ms/op
     p(99.9900) =     69.075 ms/op
     p(99.9990) =     69.075 ms/op
     p(99.9999) =     69.075 ms/op
    p(100.0000) =     69.075 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 9.38% complete, ETA 00:21:52
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readSeq-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 50, 76, 76, 76, 76, 76, 76 ms/op
# Warmup Iteration   2: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 40, 51, 66, 70, 70, 70, 70 ms/op
# Warmup Iteration   3: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 47, 47, 47, 47, 47, 47, 47 ms/op
Iteration   1: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 43, 44, 45, 45, 45, 45, 45 ms/op
Iteration   2: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 45, 46, 46, 47, 47, 47, 47 ms/op
Iteration   3: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 40, 67, 72, 72, 72, 72, 72 ms/op

# Run progress: 9.90% complete, ETA 00:21:43
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readSeq-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 40, 55, 81, 86, 86, 86, 86 ms/op
# Warmup Iteration   2: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 36, 37, 39, 40, 40, 40, 40 ms/op
# Warmup Iteration   3: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 40, 63, 72, 73, 73, 73, 73 ms/op
Iteration   1: n = 28, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 36, 41, 51, 54, 54, 54, 54 ms/op
Iteration   2: n = 29, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 36, 36, 36, 36, 36, 36, 36 ms/op
Iteration   3: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 36, 54, 66, 71, 71, 71, 71 ms/op

# Run progress: 10.42% complete, ETA 00:21:34
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readSeq-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 47, 52, 72, 75, 75, 75, 75 ms/op
# Warmup Iteration   2: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 43, 43, 43, 43, 43, 43, 43 ms/op
# Warmup Iteration   3: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 41, 65, 72, 73, 73, 73, 73 ms/op
Iteration   1: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 46, 47, 73, 78, 78, 78, 78, 78 ms/op
Iteration   2: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 42, 46, 49, 49, 49, 49, 49 ms/op
Iteration   3: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 41, 52, 70, 75, 75, 75, 75 ms/op


Result "readSeq":
  N = 222
  mean =     41.790 ±(99.9%) 1.651 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 87 
    [40.000, 45.000) = 90 
    [45.000, 50.000) = 30 
    [50.000, 55.000) = 5 
    [55.000, 60.000) = 2 
    [60.000, 65.000) = 2 
    [65.000, 70.000) = 1 
    [70.000, 75.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =     35.324 ms/op
     p(50.0000) =     41.026 ms/op
     p(90.0000) =     47.317 ms/op
     p(95.0000) =     54.382 ms/op
     p(99.0000) =     75.155 ms/op
     p(99.9000) =     77.988 ms/op
     p(99.9900) =     77.988 ms/op
     p(99.9990) =     77.988 ms/op
     p(99.9999) =     77.988 ms/op
    p(100.0000) =     77.988 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 10.94% complete, ETA 00:21:26
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readSeq-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false-compacted
n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 40, 49, 76, 83, 83, 83, 83 ms/op
# Warmup Iteration   2: n = 22, mean = 47 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 42, 71, 76, 76, 76, 76, 76 ms/op
# Warmup Iteration   3: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 37, 38, 39, 40, 40, 40, 40 ms/op
Iteration   1: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 37, 38, 38, 38, 38, 38, 38 ms/op
Iteration   2: n = 28, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 37, 38, 38, 38, 38, 38, 38 ms/op
Iteration   3: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 36, 37, 37, 37, 37, 37, 37 ms/op

# Run progress: 11.46% complete, ETA 00:21:18
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readSeq-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false-compacted
n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 46, 54, 74, 76, 76, 76, 76 ms/op
# Warmup Iteration   2: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 46, 58, 76, 77, 77, 77, 77 ms/op
# Warmup Iteration   3: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 42, 58, 63, 63, 63, 63, 63 ms/op
Iteration   1: n = 25, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 41, 42, 43, 43, 43, 43, 43 ms/op
Iteration   2: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 37, 54, 68, 72, 72, 72, 72 ms/op
Iteration   3: n = 22, mean = 47 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 46, 54, 67, 69, 69, 69, 69 ms/op

# Run progress: 11.98% complete, ETA 00:21:11
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readSeq-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false-compacted
n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 46, 60, 88, 91, 91, 91, 91 ms/op
# Warmup Iteration   2: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 41, 41, 42, 42, 42, 42, 42 ms/op
# Warmup Iteration   3: n = 22, mean = 47 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 42, 67, 74, 74, 74, 74, 74 ms/op
Iteration   1: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 46, 59, 75, 77, 77, 77, 77 ms/op
Iteration   2: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 42, 55, 72, 75, 75, 75, 75 ms/op
Iteration   3: n = 22, mean = 47 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 45, 57, 74, 77, 77, 77, 77 ms/op


Result "readSeq":
  N = 221
  mean =     41.555 ±(99.9%) 1.596 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 112 
    [40.000, 45.000) = 49 
    [45.000, 50.000) = 45 
    [50.000, 55.000) = 3 
    [55.000, 60.000) = 7 
    [60.000, 65.000) = 0 
    [65.000, 70.000) = 1 
    [70.000, 75.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     35.127 ms/op
     p(50.0000) =     39.387 ms/op
     p(90.0000) =     46.714 ms/op
     p(95.0000) =     56.250 ms/op
     p(99.0000) =     76.638 ms/op
     p(99.9000) =     77.070 ms/op
     p(99.9900) =     77.070 ms/op
     p(99.9990) =     77.070 ms/op
     p(99.9999) =     77.070 ms/op
    p(100.0000) =     77.070 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 12.50% complete, ETA 00:21:04
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readXxh64-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 72, 105, 130, 130, 130, 130, 130 ms/op
# Warmup Iteration   2: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 72, 73, 117, 120, 120, 120, 120, 120 ms/op
# Warmup Iteration   3: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 68, 69, 118, 120, 120, 120, 120, 120 ms/op
Iteration   1: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 73, 103, 124, 124, 124, 124, 124 ms/op
Iteration   2: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 65, 65, 66, 66, 66, 66, 66 ms/op
Iteration   3: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 65, 65, 65, 65, 65, 65, 65 ms/op

# Run progress: 13.02% complete, ETA 00:20:56
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readXxh64-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 77, 104, 119, 119, 119, 119, 119 ms/op
# Warmup Iteration   2: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 69, 71, 72, 72, 72, 72, 72 ms/op
# Warmup Iteration   3: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 70, 101, 121, 121, 121, 121, 121 ms/op
Iteration   1: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 77, 122, 122, 122, 122, 122, 122 ms/op
Iteration   2: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 70, 71, 71, 71, 71, 71, 71 ms/op
Iteration   3: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 62, 62, 62, 62, 62, 62, 62 ms/op

# Run progress: 13.54% complete, ETA 00:20:48
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readXxh64-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 74, 135, 161, 161, 161, 161, 161 ms/op
# Warmup Iteration   2: n = 16, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 66, 68, 69, 69, 69, 69, 69 ms/op
# Warmup Iteration   3: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 68, 69, 116, 119, 119, 119, 119, 119 ms/op
Iteration   1: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 74, 122, 124, 124, 124, 124, 124 ms/op
Iteration   2: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 66, 66, 66, 66, 66, 66, 66 ms/op
Iteration   3: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 73, 120, 120, 120, 120, 120, 120 ms/op


Result "readXxh64":
  N = 132
  mean =     71.050 ±(99.9%) 3.856 ms/op

  Histogram, ms/op:
    [ 60.000,  65.000) = 51 
    [ 65.000,  70.000) = 29 
    [ 70.000,  75.000) = 31 
    [ 75.000,  80.000) = 9 
    [ 80.000,  85.000) = 3 
    [ 85.000,  90.000) = 2 
    [ 90.000,  95.000) = 0 
    [ 95.000, 100.000) = 0 
    [100.000, 105.000) = 0 
    [105.000, 110.000) = 0 
    [110.000, 115.000) = 0 
    [115.000, 120.000) = 3 
    [120.000, 125.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =     61.276 ms/op
     p(50.0000) =     65.962 ms/op
     p(90.0000) =     79.128 ms/op
     p(95.0000) =    119.584 ms/op
     p(99.0000) =    123.864 ms/op
     p(99.9000) =    123.994 ms/op
     p(99.9900) =    123.994 ms/op
     p(99.9990) =    123.994 ms/op
     p(99.9999) =    123.994 ms/op
    p(100.0000) =    123.994 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 14.06% complete, ETA 00:20:40
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readXxh64-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false-compacted
n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 72, 135, 165, 165, 165, 165, 165 ms/op
# Warmup Iteration   2: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 71, 123, 123, 123, 123, 123, 123 ms/op
# Warmup Iteration   3: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 68, 75, 110, 127, 127, 127, 127, 127 ms/op
Iteration   1: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 68, 68, 70, 70, 70, 70, 70, 70 ms/op
Iteration   2: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 72, 100, 104, 104, 104, 104, 104 ms/op
Iteration   3: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 75, 109, 124, 124, 124, 124, 124 ms/op

# Run progress: 14.58% complete, ETA 00:20:34
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readXxh64-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false-compacted
n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 73, 80, 110, 120, 120, 120, 120, 120 ms/op
# Warmup Iteration   2: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 72, 112, 116, 116, 116, 116, 116 ms/op
# Warmup Iteration   3: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 72, 102, 122, 122, 122, 122, 122 ms/op
Iteration   1: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 72, 82, 119, 122, 122, 122, 122, 122 ms/op
Iteration   2: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 73, 82, 116, 127, 127, 127, 127, 127 ms/op
Iteration   3: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 73, 73, 74, 74, 74, 74, 74, 74 ms/op

# Run progress: 15.10% complete, ETA 00:20:27
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readXxh64-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false-compacted
n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 69, 130, 153, 153, 153, 153, 153 ms/op
# Warmup Iteration   2: n = 16, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 62, 63, 63, 63, 63, 63, 63 ms/op
# Warmup Iteration   3: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 68, 69, 113, 119, 119, 119, 119, 119 ms/op
Iteration   1: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 68, 88, 106, 106, 106, 106, 106 ms/op
Iteration   2: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 61, 61, 61, 61, 61, 61, 61 ms/op
Iteration   3: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 67, 95, 118, 118, 118, 118, 118 ms/op


Result "readXxh64":
  N = 127
  mean =     73.426 ±(99.9%) 3.862 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 6 
    [ 60.000,  65.000) = 17 
    [ 65.000,  70.000) = 38 
    [ 70.000,  75.000) = 30 
    [ 75.000,  80.000) = 11 
    [ 80.000,  85.000) = 14 
    [ 85.000,  90.000) = 1 
    [ 90.000,  95.000) = 2 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 1 
    [105.000, 110.000) = 1 
    [110.000, 115.000) = 1 
    [115.000, 120.000) = 1 
    [120.000, 125.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     58.262 ms/op
     p(50.0000) =     71.041 ms/op
     p(90.0000) =     84.306 ms/op
     p(95.0000) =    105.198 ms/op
     p(99.0000) =    126.144 ms/op
     p(99.9000) =    126.878 ms/op
     p(99.9900) =    126.878 ms/op
     p(99.9990) =    126.878 ms/op
     p(99.9999) =    126.878 ms/op
    p(100.0000) =    126.878 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 15.63% complete, ETA 00:20:20
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 166 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 158, 206, 206, 206, 206, 206, 206 ms/op
# Warmup Iteration   2: n = 6, mean = 174 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 174, 206, 206, 206, 206, 206, 206 ms/op
# Warmup Iteration   3: n = 6, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 148, 204, 204, 204, 204, 204, 204 ms/op
Iteration   1: n = 6, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 140, 146, 202, 202, 202, 202, 202, 202 ms/op
Iteration   2: n = 6, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 148, 165, 165, 165, 165, 165, 165 ms/op
Iteration   3: n = 6, mean = 173 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 157, 254, 254, 254, 254, 254, 254 ms/op

# Run progress: 16.15% complete, ETA 00:20:10
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 150, 182, 182, 182, 182, 182, 182 ms/op
# Warmup Iteration   2: n = 7, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 127, 166, 166, 166, 166, 166, 166 ms/op
# Warmup Iteration   3: n = 6, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 146, 202, 202, 202, 202, 202, 202 ms/op
Iteration   1: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 128, 128, 128, 128, 128, 128, 128 ms/op
Iteration   2: n = 7, mean = 148 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 144, 191, 191, 191, 191, 191, 191 ms/op
Iteration   3: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 128, 202, 202, 202, 202, 202, 202 ms/op

# Run progress: 16.67% complete, ETA 00:20:00
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 149, 238, 238, 238, 238, 238, 238 ms/op
# Warmup Iteration   2: n = 6, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 140, 143, 202, 202, 202, 202, 202, 202 ms/op
# Warmup Iteration   3: n = 6, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 143, 203, 203, 203, 203, 203, 203 ms/op
Iteration   1: n = 6, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 139, 144, 201, 201, 201, 201, 201, 201 ms/op
Iteration   2: n = 7, mean = 140 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 142, 147, 147, 147, 147, 147, 147 ms/op
Iteration   3: n = 5, mean = 191 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 208, 241, 241, 241, 241, 241, 241 ms/op


Result "write":
  N = 58
  mean =    152.737 ±(99.9%) 13.316 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 16 
    [137.500, 150.000) = 26 
    [150.000, 162.500) = 3 
    [162.500, 175.000) = 3 
    [175.000, 187.500) = 1 
    [187.500, 200.000) = 2 
    [200.000, 212.500) = 4 
    [212.500, 225.000) = 1 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 1 
    [250.000, 262.500) = 1 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    126.616 ms/op
     p(50.0000) =    144.835 ms/op
     p(90.0000) =    202.375 ms/op
     p(95.0000) =    214.526 ms/op
     p(99.0000) =    254.018 ms/op
     p(99.9000) =    254.018 ms/op
     p(99.9900) =    254.018 ms/op
     p(99.9990) =    254.018 ms/op
     p(99.9999) =    254.018 ms/op
    p(100.0000) =    254.018 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 17.19% complete, ETA 00:19:49
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 208 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 183, 211, 227, 227, 227, 227, 227, 227 ms/op
# Warmup Iteration   2: n = 5, mean = 205 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 171, 200, 249, 249, 249, 249, 249, 249 ms/op
# Warmup Iteration   3: n = 6, mean = 168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 167, 169, 169, 169, 169, 169, 169, 169 ms/op
Iteration   1: n = 4, mean = 232 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 210, 232, 256, 256, 256, 256, 256, 256 ms/op
Iteration   2: n = 5, mean = 200 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 168, 193, 250, 250, 250, 250, 250, 250 ms/op
Iteration   3: n = 6, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 166, 167, 179, 179, 179, 179, 179, 179 ms/op

# Run progress: 17.71% complete, ETA 00:19:40
# Fork: 2 of 3
# Warmup Iteration   1: n = 3, mean = 240 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 212, 213, 296, 296, 296, 296, 296, 296 ms/op
# Warmup Iteration   2: n = 5, mean = 209 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 187, 208, 240, 240, 240, 240, 240, 240 ms/op
# Warmup Iteration   3: n = 4, mean = 242 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 207, 243, 274, 274, 274, 274, 274, 274 ms/op
Iteration   1: n = 5, mean = 217 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 187, 211, 267, 267, 267, 267, 267, 267 ms/op
Iteration   2: n = 4, mean = 230 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 204, 229, 256, 256, 256, 256, 256, 256 ms/op
Iteration   3: n = 5, mean = 215 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 186, 209, 260, 260, 260, 260, 260, 260 ms/op

# Run progress: 18.23% complete, ETA 00:19:31
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 212 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 188, 204, 244, 244, 244, 244, 244, 244 ms/op
# Warmup Iteration   2: n = 5, mean = 212 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 181, 204, 250, 250, 250, 250, 250, 250 ms/op
# Warmup Iteration   3: n = 6, mean = 177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 171, 177, 182, 182, 182, 182, 182, 182 ms/op
Iteration   1: n = 5, mean = 232 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 193, 250, 262, 262, 262, 262, 262, 262 ms/op
Iteration   2: n = 4, mean = 247 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 192, 229, 336, 336, 336, 336, 336, 336 ms/op
Iteration   3: n = 5, mean = 225 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 200, 203, 262, 262, 262, 262, 262, 262 ms/op


Result "write":
  N = 43
  mean =    215.994 ±(99.9%) 20.181 ms/op

  Histogram, ms/op:
    [100.000, 125.000) = 0 
    [125.000, 150.000) = 0 
    [150.000, 175.000) = 6 
    [175.000, 200.000) = 10 
    [200.000, 225.000) = 13 
    [225.000, 250.000) = 2 
    [250.000, 275.000) = 11 
    [275.000, 300.000) = 0 
    [300.000, 325.000) = 0 
    [325.000, 350.000) = 1 
    [350.000, 375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    166.199 ms/op
     p(50.0000) =    208.667 ms/op
     p(90.0000) =    261.620 ms/op
     p(95.0000) =    266.129 ms/op
     p(99.0000) =    336.069 ms/op
     p(99.9000) =    336.069 ms/op
     p(99.9900) =    336.069 ms/op
     p(99.9990) =    336.069 ms/op
     p(99.9999) =    336.069 ms/op
    p(100.0000) =    336.069 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 18.75% complete, ETA 00:19:23
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 148, 198, 198, 198, 198, 198, 198 ms/op
# Warmup Iteration   2: n = 6, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 176, 204, 204, 204, 204, 204, 204 ms/op
# Warmup Iteration   3: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 151, 217, 217, 217, 217, 217, 217 ms/op
Iteration   1: n = 6, mean = 172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 150, 151, 231, 231, 231, 231, 231, 231 ms/op
Iteration   2: n = 7, mean = 145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 145, 174, 174, 174, 174, 174, 174 ms/op
Iteration   3: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 128, 209, 209, 209, 209, 209, 209 ms/op

# Run progress: 19.27% complete, ETA 00:19:16
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 159, 206, 206, 206, 206, 206, 206 ms/op
# Warmup Iteration   2: n = 6, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 148, 209, 209, 209, 209, 209, 209 ms/op
# Warmup Iteration   3: n = 6, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 140, 153, 206, 206, 206, 206, 206, 206 ms/op
Iteration   1: n = 6, mean = 168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 149, 207, 207, 207, 207, 207, 207 ms/op
Iteration   2: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 152, 175, 175, 175, 175, 175, 175 ms/op
Iteration   3: n = 6, mean = 168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 150, 223, 223, 223, 223, 223, 223 ms/op

# Run progress: 19.79% complete, ETA 00:19:05
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 151, 181, 181, 181, 181, 181, 181 ms/op
# Warmup Iteration   2: n = 6, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 148, 194, 194, 194, 194, 194, 194 ms/op
# Warmup Iteration   3: n = 7, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 131, 132, 132, 132, 132, 132, 132 ms/op
Iteration   1: n = 5, mean = 183 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 193, 204, 204, 204, 204, 204, 204 ms/op
Iteration   2: n = 6, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 147, 197, 197, 197, 197, 197, 197 ms/op
Iteration   3: n = 6, mean = 165 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 154, 202, 202, 202, 202, 202, 202 ms/op


Result "write":
  N = 55
  mean =    161.960 ±(99.9%) 12.605 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 6 
    [137.500, 150.000) = 22 
    [150.000, 162.500) = 9 
    [162.500, 175.000) = 3 
    [175.000, 187.500) = 1 
    [187.500, 200.000) = 7 
    [200.000, 212.500) = 5 
    [212.500, 225.000) = 1 
    [225.000, 237.500) = 1 
    [237.500, 250.000) = 0 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    126.222 ms/op
     p(50.0000) =    149.684 ms/op
     p(90.0000) =    204.420 ms/op
     p(95.0000) =    211.655 ms/op
     p(99.0000) =    230.949 ms/op
     p(99.9000) =    230.949 ms/op
     p(99.9900) =    230.949 ms/op
     p(99.9990) =    230.949 ms/op
     p(99.9999) =    230.949 ms/op
    p(100.0000) =    230.949 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 20.31% complete, ETA 00:18:55
# Fork: 1 of 3
# Warmup Iteration   1: n = 3, mean = 226 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 190, 226, 260, 260, 260, 260, 260, 260 ms/op
# Warmup Iteration   2: n = 5, mean = 184 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 191, 195, 195, 195, 195, 195, 195 ms/op
# Warmup Iteration   3: n = 6, mean = 171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 166, 172, 176, 176, 176, 176, 176, 176 ms/op
Iteration   1: n = 6, mean = 173 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 170, 173, 176, 176, 176, 176, 176, 176 ms/op
Iteration   2: n = 6, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 165, 170, 172, 172, 172, 172, 172, 172 ms/op
Iteration   3: n = 5, mean = 215 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 180, 192, 320, 320, 320, 320, 320, 320 ms/op

# Run progress: 20.83% complete, ETA 00:18:47
# Fork: 2 of 3
# Warmup Iteration   1: n = 3, mean = 221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 200, 205, 257, 257, 257, 257, 257, 257 ms/op
# Warmup Iteration   2: n = 5, mean = 206 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 175, 199, 249, 249, 249, 249, 249, 249 ms/op
# Warmup Iteration   3: n = 6, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 175, 177, 177, 177, 177, 177, 177, 177 ms/op
Iteration   1: n = 5, mean = 203 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 195, 258, 258, 258, 258, 258, 258 ms/op
Iteration   2: n = 5, mean = 200 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 192, 250, 250, 250, 250, 250, 250 ms/op
Iteration   3: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 168, 170, 172, 172, 172, 172, 172, 172 ms/op

# Run progress: 21.35% complete, ETA 00:18:39
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 204 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 186, 199, 227, 227, 227, 227, 227, 227 ms/op
# Warmup Iteration   2: n = 6, mean = 164 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 162, 169, 169, 169, 169, 169, 169 ms/op
# Warmup Iteration   3: n = 6, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 160, 163, 164, 164, 164, 164, 164, 164 ms/op
Iteration   1: n = 5, mean = 192 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 168, 184, 242, 242, 242, 242, 242, 242 ms/op
Iteration   2: n = 5, mean = 193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 191, 250, 250, 250, 250, 250, 250 ms/op
Iteration   3: n = 5, mean = 193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 166, 185, 242, 242, 242, 242, 242, 242 ms/op


Result "write":
  N = 48
  mean =    188.613 ±(99.9%) 15.584 ms/op

  Histogram, ms/op:
    [100.000, 125.000) = 0 
    [125.000, 150.000) = 0 
    [150.000, 175.000) = 21 
    [175.000, 200.000) = 21 
    [200.000, 225.000) = 0 
    [225.000, 250.000) = 2 
    [250.000, 275.000) = 3 
    [275.000, 300.000) = 0 
    [300.000, 325.000) = 1 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    161.481 ms/op
     p(50.0000) =    178.258 ms/op
     p(90.0000) =    243.270 ms/op
     p(95.0000) =    254.529 ms/op
     p(99.0000) =    319.816 ms/op
     p(99.9000) =    319.816 ms/op
     p(99.9900) =    319.816 ms/op
     p(99.9990) =    319.816 ms/op
     p(99.9999) =    319.816 ms/op
    p(100.0000) =    319.816 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 21.88% complete, ETA 00:18:29
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 155 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 148, 181, 181, 181, 181, 181, 181 ms/op
# Warmup Iteration   2: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 126, 140, 140, 140, 140, 140, 140 ms/op
# Warmup Iteration   3: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 144, 204, 204, 204, 204, 204, 204 ms/op
Iteration   1: n = 6, mean = 151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 143, 201, 201, 201, 201, 201, 201 ms/op
Iteration   2: n = 8, mean = 126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 126, 129, 129, 129, 129, 129, 129 ms/op
Iteration   3: n = 7, mean = 145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 143, 191, 191, 191, 191, 191, 191 ms/op

# Run progress: 22.40% complete, ETA 00:18:20
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 149, 227, 227, 227, 227, 227, 227 ms/op
# Warmup Iteration   2: n = 7, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 131, 144, 144, 144, 144, 144, 144 ms/op
# Warmup Iteration   3: n = 6, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 145, 204, 204, 204, 204, 204, 204 ms/op
Iteration   1: n = 6, mean = 155 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 145, 203, 203, 203, 203, 203, 203 ms/op
Iteration   2: n = 6, mean = 155 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 147, 206, 206, 206, 206, 206, 206 ms/op
Iteration   3: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 127, 131, 131, 131, 131, 131, 131 ms/op

# Run progress: 22.92% complete, ETA 00:18:11
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 147, 232, 232, 232, 232, 232, 232 ms/op
# Warmup Iteration   2: n = 6, mean = 151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 144, 196, 196, 196, 196, 196, 196 ms/op
# Warmup Iteration   3: n = 8, mean = 126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 126, 127, 127, 127, 127, 127, 127 ms/op
Iteration   1: n = 6, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 143, 202, 202, 202, 202, 202, 202 ms/op
Iteration   2: n = 8, mean = 126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 126, 127, 127, 127, 127, 127, 127 ms/op
Iteration   3: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 143, 207, 207, 207, 207, 207, 207 ms/op


Result "write":
  N = 61
  mean =    142.327 ±(99.9%) 9.983 ms/op

  Histogram, ms/op:
    [120.000, 125.000) = 2 
    [125.000, 130.000) = 24 
    [130.000, 135.000) = 1 
    [135.000, 140.000) = 3 
    [140.000, 145.000) = 17 
    [145.000, 150.000) = 7 
    [150.000, 155.000) = 0 
    [155.000, 160.000) = 0 
    [160.000, 165.000) = 0 
    [165.000, 170.000) = 0 
    [170.000, 175.000) = 0 
    [175.000, 180.000) = 0 
    [180.000, 185.000) = 0 
    [185.000, 190.000) = 1 
    [190.000, 195.000) = 1 
    [195.000, 200.000) = 0 
    [200.000, 205.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =    124.256 ms/op
     p(50.0000) =    140.509 ms/op
     p(90.0000) =    190.631 ms/op
     p(95.0000) =    203.031 ms/op
     p(99.0000) =    206.569 ms/op
     p(99.9000) =    206.569 ms/op
     p(99.9900) =    206.569 ms/op
     p(99.9990) =    206.569 ms/op
     p(99.9999) =    206.569 ms/op
    p(100.0000) =    206.569 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 23.44% complete, ETA 00:18:02
# Fork: 1 of 3
# Warmup Iteration   1: n = 3, mean = 221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 206, 217, 239, 239, 239, 239, 239, 239 ms/op
# Warmup Iteration   2: n = 5, mean = 220 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 193, 227, 256, 256, 256, 256, 256, 256 ms/op
# Warmup Iteration   3: n = 5, mean = 195 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 173, 188, 232, 232, 232, 232, 232, 232 ms/op
Iteration   1: n = 5, mean = 206 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 171, 189, 288, 288, 288, 288, 288, 288 ms/op
Iteration   2: n = 5, mean = 213 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 194, 208, 258, 258, 258, 258, 258, 258 ms/op
Iteration   3: n = 5, mean = 223 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 198, 200, 259, 259, 259, 259, 259, 259 ms/op

# Run progress: 23.96% complete, ETA 00:17:55
# Fork: 2 of 3
# Warmup Iteration   1: n = 3, mean = 244 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 229, 240, 263, 263, 263, 263, 263, 263 ms/op
# Warmup Iteration   2: n = 5, mean = 207 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 197, 199, 240, 240, 240, 240, 240, 240 ms/op
# Warmup Iteration   3: n = 5, mean = 208 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 195, 201, 241, 241, 241, 241, 241, 241 ms/op
Iteration   1: n = 5, mean = 182 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 171, 174, 196, 196, 196, 196, 196, 196 ms/op
Iteration   2: n = 6, mean = 173 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 171, 172, 174, 174, 174, 174, 174, 174 ms/op
Iteration   3: n = 4, mean = 230 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 199, 203, 314, 314, 314, 314, 314, 314 ms/op

# Run progress: 24.48% complete, ETA 00:17:47
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 232 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 195, 207, 294, 294, 294, 294, 294, 294 ms/op
# Warmup Iteration   2: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 174, 200, 200, 200, 200, 200, 200 ms/op
# Warmup Iteration   3: n = 6, mean = 177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 175, 177, 179, 179, 179, 179, 179, 179 ms/op
Iteration   1: n = 5, mean = 209 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 180, 203, 257, 257, 257, 257, 257, 257 ms/op
Iteration   2: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 178, 181, 181, 181, 181, 181, 181 ms/op
Iteration   3: n = 6, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 174, 176, 177, 177, 177, 177, 177, 177 ms/op


Result "write":
  N = 47
  mean =    196.708 ±(99.9%) 16.671 ms/op

  Histogram, ms/op:
    [100.000, 125.000) = 0 
    [125.000, 150.000) = 0 
    [150.000, 175.000) = 12 
    [175.000, 200.000) = 22 
    [200.000, 225.000) = 7 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 4 
    [275.000, 300.000) = 1 
    [300.000, 325.000) = 1 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    171.180 ms/op
     p(50.0000) =    187.957 ms/op
     p(90.0000) =    257.740 ms/op
     p(95.0000) =    276.509 ms/op
     p(99.0000) =    313.524 ms/op
     p(99.9000) =    313.524 ms/op
     p(99.9900) =    313.524 ms/op
     p(99.9990) =    313.524 ms/op
     p(99.9999) =    313.524 ms/op
    p(100.0000) =    313.524 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 25.00% complete, ETA 00:17:39
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 186 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 184, 230, 230, 230, 230, 230, 230 ms/op
# Warmup Iteration   2: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 146, 203, 203, 203, 203, 203, 203 ms/op
# Warmup Iteration   3: n = 7, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 127, 143, 143, 143, 143, 143, 143 ms/op
Iteration   1: n = 8, mean = 126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 126, 128, 128, 128, 128, 128, 128 ms/op
Iteration   2: n = 7, mean = 149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 153, 170, 170, 170, 170, 170, 170 ms/op
Iteration   3: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 167, 203, 203, 203, 203, 203, 203 ms/op

# Run progress: 25.52% complete, ETA 00:17:31
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 155 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 149, 179, 179, 179, 179, 179, 179 ms/op
# Warmup Iteration   2: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 151, 206, 206, 206, 206, 206, 206 ms/op
# Warmup Iteration   3: n = 6, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 126, 215, 215, 215, 215, 215, 215 ms/op
Iteration   1: n = 6, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 157, 184, 184, 184, 184, 184, 184 ms/op
Iteration   2: n = 6, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 143, 205, 205, 205, 205, 205, 205 ms/op
Iteration   3: n = 6, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 139, 153, 194, 194, 194, 194, 194, 194 ms/op

# Run progress: 26.04% complete, ETA 00:17:21
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 153, 223, 223, 223, 223, 223, 223 ms/op
# Warmup Iteration   2: n = 7, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 130, 147, 147, 147, 147, 147, 147 ms/op
# Warmup Iteration   3: n = 6, mean = 177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 172, 217, 217, 217, 217, 217, 217 ms/op
Iteration   1: n = 6, mean = 168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 152, 209, 209, 209, 209, 209, 209 ms/op
Iteration   2: n = 6, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 145, 208, 208, 208, 208, 208, 208 ms/op
Iteration   3: n = 5, mean = 190 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 204, 246, 246, 246, 246, 246, 246 ms/op


Result "write":
  N = 56
  mean =    156.416 ±(99.9%) 13.060 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 1 
    [125.000, 137.500) = 11 
    [137.500, 150.000) = 18 
    [150.000, 162.500) = 12 
    [162.500, 175.000) = 2 
    [175.000, 187.500) = 2 
    [187.500, 200.000) = 2 
    [200.000, 212.500) = 7 
    [212.500, 225.000) = 0 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 1 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    124.781 ms/op
     p(50.0000) =    145.752 ms/op
     p(90.0000) =    204.630 ms/op
     p(95.0000) =    209.532 ms/op
     p(99.0000) =    246.415 ms/op
     p(99.9000) =    246.415 ms/op
     p(99.9900) =    246.415 ms/op
     p(99.9990) =    246.415 ms/op
     p(99.9999) =    246.415 ms/op
    p(100.0000) =    246.415 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 26.56% complete, ETA 00:17:13
# Fork: 1 of 3
# Warmup Iteration   1: n = 3, mean = 257 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 252, 260, 260, 260, 260, 260, 260, 260 ms/op
# Warmup Iteration   2: n = 4, mean = 236 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 202, 223, 298, 298, 298, 298, 298, 298 ms/op
# Warmup Iteration   3: n = 4, mean = 227 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 197, 223, 266, 266, 266, 266, 266, 266 ms/op
Iteration   1: n = 5, mean = 214 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 188, 197, 256, 256, 256, 256, 256, 256 ms/op
Iteration   2: n = 5, mean = 203 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 184, 193, 249, 249, 249, 249, 249, 249 ms/op
Iteration   3: n = 6, mean = 173 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 163, 171, 196, 196, 196, 196, 196, 196 ms/op

# Run progress: 27.08% complete, ETA 00:17:05
# Fork: 2 of 3
# Warmup Iteration   1: n = 3, mean = 239 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 197, 204, 316, 316, 316, 316, 316, 316 ms/op
# Warmup Iteration   2: n = 4, mean = 241 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 195, 236, 298, 298, 298, 298, 298, 298 ms/op
# Warmup Iteration   3: n = 5, mean = 205 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 195, 197, 230, 230, 230, 230, 230, 230 ms/op
Iteration   1: n = 4, mean = 244 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 206, 256, 257, 257, 257, 257, 257, 257 ms/op
Iteration   2: n = 5, mean = 216 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 192, 195, 270, 270, 270, 270, 270, 270 ms/op
Iteration   3: n = 5, mean = 182 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 171, 223, 223, 223, 223, 223, 223 ms/op

# Run progress: 27.60% complete, ETA 00:16:57
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 247 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 202, 212, 328, 328, 328, 328, 328, 328 ms/op
# Warmup Iteration   2: n = 5, mean = 213 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 171, 196, 309, 309, 309, 309, 309, 309 ms/op
# Warmup Iteration   3: n = 5, mean = 191 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 172, 198, 199, 199, 199, 199, 199, 199 ms/op
Iteration   1: n = 5, mean = 206 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 172, 213, 223, 223, 223, 223, 223, 223 ms/op
Iteration   2: n = 5, mean = 201 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 172, 203, 249, 249, 249, 249, 249, 249 ms/op
Iteration   3: n = 4, mean = 229 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 193, 226, 272, 272, 272, 272, 272, 272 ms/op


Result "write":
  N = 44
  mean =    205.300 ±(99.9%) 16.834 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 0 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 10 
    [175.000, 187.500) = 3 
    [187.500, 200.000) = 11 
    [200.000, 212.500) = 5 
    [212.500, 225.000) = 4 
    [225.000, 237.500) = 1 
    [237.500, 250.000) = 4 
    [250.000, 262.500) = 4 
    [262.500, 275.000) = 2 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    163.054 ms/op
     p(50.0000) =    195.953 ms/op
     p(90.0000) =    256.377 ms/op
     p(95.0000) =    266.666 ms/op
     p(99.0000) =    271.581 ms/op
     p(99.9000) =    271.581 ms/op
     p(99.9900) =    271.581 ms/op
     p(99.9990) =    271.581 ms/op
     p(99.9999) =    271.581 ms/op
    p(100.0000) =    271.581 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readCrc
# Parameters: (forceSafe = true, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 28.13% complete, ETA 00:16:49
# Fork: 1 of 3
# Warmup Iteration   1: n = 7, mean = 143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 133, 203, 203, 203, 203, 203, 203 ms/op
# Warmup Iteration   2: n = 8, mean = 134 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 126, 190, 190, 190, 190, 190, 190 ms/op
# Warmup Iteration   3: n = 8, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 126, 198, 198, 198, 198, 198, 198 ms/op
Iteration   1: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 121, 187, 187, 187, 187, 187, 187 ms/op
Iteration   2: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 121, 121, 190, 190, 190, 190, 190, 190 ms/op
Iteration   3: n = 8, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 121, 123, 186, 186, 186, 186, 186, 186 ms/op

# Run progress: 28.65% complete, ETA 00:16:42
# Fork: 2 of 3
# Warmup Iteration   1: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 133, 207, 207, 207, 207, 207, 207 ms/op
# Warmup Iteration   2: n = 8, mean = 134 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 126, 195, 195, 195, 195, 195, 195 ms/op
# Warmup Iteration   3: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 111, 123, 188, 188, 188, 188, 188, 188 ms/op
Iteration   1: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 115, 121, 186, 186, 186, 186, 186, 186 ms/op
Iteration   2: n = 8, mean = 138 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 123, 187, 187, 187, 187, 187, 187 ms/op
Iteration   3: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 123, 169, 169, 169, 169, 169, 169 ms/op

# Run progress: 29.17% complete, ETA 00:16:34
# Fork: 3 of 3
# Warmup Iteration   1: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 136, 207, 207, 207, 207, 207, 207 ms/op
# Warmup Iteration   2: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 114, 134, 134, 134, 134, 134, 134 ms/op
# Warmup Iteration   3: n = 8, mean = 134 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 114, 127, 191, 191, 191, 191, 191, 191 ms/op
Iteration   1: n = 7, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 128, 222, 222, 222, 222, 222, 222 ms/op
Iteration   2: n = 8, mean = 126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 114, 127, 142, 142, 142, 142, 142, 142 ms/op
Iteration   3: n = 7, mean = 145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 128, 188, 188, 188, 188, 188, 188 ms/op


Result "readCrc":
  N = 69
  mean =    135.154 ±(99.9%) 10.459 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 1 
    [112.500, 125.000) = 37 
    [125.000, 137.500) = 16 
    [137.500, 150.000) = 2 
    [150.000, 162.500) = 1 
    [162.500, 175.000) = 1 
    [175.000, 187.500) = 8 
    [187.500, 200.000) = 2 
    [200.000, 212.500) = 0 
    [212.500, 225.000) = 1 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 0 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    110.494 ms/op
     p(50.0000) =    123.208 ms/op
     p(90.0000) =    185.598 ms/op
     p(95.0000) =    187.695 ms/op
     p(99.0000) =    221.774 ms/op
     p(99.9000) =    221.774 ms/op
     p(99.9900) =    221.774 ms/op
     p(99.9990) =    221.774 ms/op
     p(99.9999) =    221.774 ms/op
    p(100.0000) =    221.774 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readCrc
# Parameters: (forceSafe = true, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 29.69% complete, ETA 00:16:27
# Fork: 1 of 3
# Warmup Iteration   1: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 134, 213, 213, 213, 213, 213, 213 ms/op
# Warmup Iteration   2: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 114, 115, 127, 127, 127, 127, 127, 127 ms/op
# Warmup Iteration   3: n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 113, 122, 122, 122, 122, 122, 122 ms/op
Iteration   1: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 113, 121, 121, 121, 121, 121, 121 ms/op
Iteration   2: n = 9, mean = 123 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 113, 185, 185, 185, 185, 185, 185 ms/op
Iteration   3: n = 8, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 126, 190, 190, 190, 190, 190, 190 ms/op

# Run progress: 30.21% complete, ETA 00:16:20
# Fork: 2 of 3
# Warmup Iteration   1: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 136, 216, 216, 216, 216, 216, 216 ms/op
# Warmup Iteration   2: n = 8, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 112, 127, 195, 195, 195, 195, 195, 195 ms/op
# Warmup Iteration   3: n = 8, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 111, 121, 187, 187, 187, 187, 187, 187 ms/op
Iteration   1: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 112, 121, 185, 185, 185, 185, 185, 185 ms/op
Iteration   2: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 107, 107, 107, 107, 107, 107, 107 ms/op
Iteration   3: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 114, 123, 195, 195, 195, 195, 195, 195 ms/op

# Run progress: 30.73% complete, ETA 00:16:13
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 116, 130, 148, 148, 148, 148, 148, 148 ms/op
# Warmup Iteration   2: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 122, 185, 185, 185, 185, 185, 185 ms/op
# Warmup Iteration   3: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 121, 186, 186, 186, 186, 186, 186 ms/op
Iteration   1: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 120, 121, 184, 184, 184, 184, 184, 184 ms/op
Iteration   2: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 109, 113, 166, 166, 166, 166, 166, 166 ms/op
Iteration   3: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 121, 189, 189, 189, 189, 189, 189 ms/op


Result "readCrc":
  N = 77
  mean =    123.233 ±(99.9%) 8.101 ms/op

  Histogram, ms/op:
    [100.000, 110.000) = 12 
    [110.000, 120.000) = 23 
    [120.000, 130.000) = 34 
    [130.000, 140.000) = 1 
    [140.000, 150.000) = 0 
    [150.000, 160.000) = 0 
    [160.000, 170.000) = 1 
    [170.000, 180.000) = 0 
    [180.000, 190.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =    106.824 ms/op
     p(50.0000) =    120.455 ms/op
     p(90.0000) =    139.146 ms/op
     p(95.0000) =    185.677 ms/op
     p(99.0000) =    194.773 ms/op
     p(99.9000) =    194.773 ms/op
     p(99.9900) =    194.773 ms/op
     p(99.9990) =    194.773 ms/op
     p(99.9999) =    194.773 ms/op
    p(100.0000) =    194.773 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readCrc
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 31.25% complete, ETA 00:16:06
# Fork: 1 of 3
# Warmup Iteration   1: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 103, 172, 172, 172, 172, 172, 172 ms/op
# Warmup Iteration   2: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 93, 97, 97, 97, 97, 97, 97 ms/op
# Warmup Iteration   3: n = 11, mean = 95 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 93, 114, 119, 119, 119, 119, 119 ms/op
Iteration   1: n = 11, mean = 99 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 97, 128, 135, 135, 135, 135, 135 ms/op
Iteration   2: n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 103, 173, 173, 173, 173, 173, 173 ms/op
Iteration   3: n = 9, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 103, 174, 174, 174, 174, 174, 174 ms/op

# Run progress: 31.77% complete, ETA 00:15:59
# Fork: 2 of 3
# Warmup Iteration   1: n = 11, mean = 96 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 97, 106, 108, 108, 108, 108, 108 ms/op
# Warmup Iteration   2: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 102, 152, 152, 152, 152, 152, 152 ms/op
# Warmup Iteration   3: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 100, 154, 160, 160, 160, 160, 160 ms/op
Iteration   1: n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 87, 98, 98, 98, 98, 98, 98 ms/op
Iteration   2: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 98, 154, 160, 160, 160, 160, 160 ms/op
Iteration   3: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 102, 160, 166, 166, 166, 166, 166 ms/op

# Run progress: 32.29% complete, ETA 00:15:52
# Fork: 3 of 3
# Warmup Iteration   1: n = 9, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 102, 171, 171, 171, 171, 171, 171 ms/op
# Warmup Iteration   2: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 92, 95, 95, 95, 95, 95, 95 ms/op
# Warmup Iteration   3: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 86, 99, 152, 158, 158, 158, 158, 158 ms/op
Iteration   1: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 102, 154, 159, 159, 159, 159, 159 ms/op
Iteration   2: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 91, 95, 95, 95, 95, 95, 95 ms/op
Iteration   3: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 97, 101, 158, 158, 158, 158, 158, 158 ms/op


Result "readCrc":
  N = 90
  mean =    103.713 ±(99.9%) 7.015 ms/op

  Histogram, ms/op:
    [ 80.000,  90.000) = 10 
    [ 90.000, 100.000) = 36 
    [100.000, 110.000) = 33 
    [110.000, 120.000) = 2 
    [120.000, 130.000) = 0 
    [130.000, 140.000) = 1 
    [140.000, 150.000) = 1 
    [150.000, 160.000) = 3 
    [160.000, 170.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     87.032 ms/op
     p(50.0000) =     98.370 ms/op
     p(90.0000) =    133.523 ms/op
     p(95.0000) =    159.737 ms/op
     p(99.0000) =    174.326 ms/op
     p(99.9000) =    174.326 ms/op
     p(99.9900) =    174.326 ms/op
     p(99.9990) =    174.326 ms/op
     p(99.9999) =    174.326 ms/op
    p(100.0000) =    174.326 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readCrc
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 32.81% complete, ETA 00:15:44
# Fork: 1 of 3
# Warmup Iteration   1: n = 11, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 86, 88, 110, 113, 113, 113, 113, 113 ms/op
# Warmup Iteration   2: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 86, 97, 148, 153, 153, 153, 153, 153 ms/op
# Warmup Iteration   3: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 86, 89, 90, 90, 90, 90, 90 ms/op
Iteration   1: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 97, 153, 159, 159, 159, 159, 159 ms/op
Iteration   2: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 86, 86, 87, 87, 87, 87, 87, 87 ms/op
Iteration   3: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 86, 87, 87, 87, 87, 87, 87 ms/op

# Run progress: 33.33% complete, ETA 00:15:37
# Fork: 2 of 3
# Warmup Iteration   1: n = 11, mean = 96 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 99, 112, 115, 115, 115, 115, 115 ms/op
# Warmup Iteration   2: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 113, 182, 182, 182, 182, 182, 182 ms/op
# Warmup Iteration   3: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 106, 163, 163, 163, 163, 163, 163 ms/op
Iteration   1: n = 10, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 99, 160, 160, 160, 160, 160, 160 ms/op
Iteration   2: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 99, 154, 159, 159, 159, 159, 159 ms/op
Iteration   3: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 88, 92, 92, 92, 92, 92, 92 ms/op

# Run progress: 33.85% complete, ETA 00:15:29
# Fork: 3 of 3
# Warmup Iteration   1: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 90, 112, 115, 115, 115, 115, 115 ms/op
# Warmup Iteration   2: n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 103, 161, 161, 161, 161, 161, 161 ms/op
# Warmup Iteration   3: n = 11, mean = 96 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 93, 103, 103, 103, 103, 103, 103 ms/op
Iteration   1: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 99, 156, 162, 162, 162, 162, 162 ms/op
Iteration   2: n = 12, mean = 88 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 88, 90, 90, 90, 90, 90, 90 ms/op
Iteration   3: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 88, 92, 93, 93, 93, 93, 93 ms/op


Result "readCrc":
  N = 100
  mean =     94.935 ±(99.9%) 5.446 ms/op

  Histogram, ms/op:
    [ 80.000,  85.000) = 0 
    [ 85.000,  90.000) = 57 
    [ 90.000,  95.000) = 8 
    [ 95.000, 100.000) = 25 
    [100.000, 105.000) = 3 
    [105.000, 110.000) = 1 
    [110.000, 115.000) = 1 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 0 
    [150.000, 155.000) = 0 
    [155.000, 160.000) = 4 
    [160.000, 165.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     85.459 ms/op
     p(50.0000) =     88.539 ms/op
     p(90.0000) =    100.060 ms/op
     p(95.0000) =    156.244 ms/op
     p(99.0000) =    162.244 ms/op
     p(99.9000) =    162.267 ms/op
     p(99.9900) =    162.267 ms/op
     p(99.9990) =    162.267 ms/op
     p(99.9999) =    162.267 ms/op
    p(100.0000) =    162.267 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readKey
# Parameters: (forceSafe = true, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 34.38% complete, ETA 00:15:22
# Fork: 1 of 3
# Warmup Iteration   1: n = 6, mean = 173 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 150, 162, 235, 235, 235, 235, 235, 235 ms/op
# Warmup Iteration   2: n = 6, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 159, 226, 226, 226, 226, 226, 226 ms/op
# Warmup Iteration   3: n = 8, mean = 137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 138, 156, 156, 156, 156, 156, 156 ms/op
Iteration   1: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 130, 131, 131, 131, 131, 131, 131 ms/op
Iteration   2: n = 7, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 153, 214, 214, 214, 214, 214, 214 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-true-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 7, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 149, 214, 214, 214, 214, 214, 214 ms/op

# Run progress: 34.90% complete, ETA 00:15:15
# Fork: 2 of 3
# Warmup Iteration   1: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 147, 170, 170, 170, 170, 170, 170 ms/op
# Warmup Iteration   2: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 139, 187, 187, 187, 187, 187, 187 ms/op
# Warmup Iteration   3: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 139, 205, 205, 205, 205, 205, 205 ms/op
Iteration   1: n = 9, mean = 123 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 123, 124, 124, 124, 124, 124, 124 ms/op
Iteration   2: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 138, 211, 211, 211, 211, 211, 211 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-true-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 9, mean = 124 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 123, 128, 128, 128, 128, 128, 128 ms/op

# Run progress: 35.42% complete, ETA 00:15:08
# Fork: 3 of 3
# Warmup Iteration   1: n = 7, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 139, 150, 169, 169, 169, 169, 169, 169 ms/op
# Warmup Iteration   2: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 126, 144, 144, 144, 144, 144, 144 ms/op
# Warmup Iteration   3: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 161, 289, 289, 289, 289, 289, 289 ms/op
Iteration   1: n = 7, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 147, 209, 209, 209, 209, 209, 209 ms/op
Iteration   2: n = 7, mean = 148 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 140, 203, 203, 203, 203, 203, 203 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-true-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 8, mean = 126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 125, 137, 137, 137, 137, 137, 137 ms/op


Result "readKey":
  N = 69
  mean =    139.569 ±(99.9%) 9.331 ms/op

  Histogram, ms/op:
    [120.000, 130.000) = 30 
    [130.000, 140.000) = 14 
    [140.000, 150.000) = 14 
    [150.000, 160.000) = 6 
    [160.000, 170.000) = 0 
    [170.000, 180.000) = 0 
    [180.000, 190.000) = 0 
    [190.000, 200.000) = 0 
    [200.000, 210.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    122.290 ms/op
     p(50.0000) =    131.203 ms/op
     p(90.0000) =    153.616 ms/op
     p(95.0000) =    210.371 ms/op
     p(99.0000) =    214.172 ms/op
     p(99.9000) =    214.172 ms/op
     p(99.9900) =    214.172 ms/op
     p(99.9990) =    214.172 ms/op
     p(99.9999) =    214.172 ms/op
    p(100.0000) =    214.172 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readKey
# Parameters: (forceSafe = true, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 35.94% complete, ETA 00:15:01
# Fork: 1 of 3
# Warmup Iteration   1: n = 6, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 150, 161, 247, 247, 247, 247, 247, 247 ms/op
# Warmup Iteration   2: n = 7, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 152, 228, 228, 228, 228, 228, 228 ms/op
# Warmup Iteration   3: n = 6, mean = 173 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 151, 153, 260, 260, 260, 260, 260, 260 ms/op
Iteration   1: n = 7, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 153, 222, 222, 222, 222, 222, 222 ms/op
Iteration   2: n = 8, mean = 137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 137, 142, 142, 142, 142, 142, 142 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-true-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 6, mean = 171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 158, 209, 209, 209, 209, 209, 209 ms/op

# Run progress: 36.46% complete, ETA 00:14:55
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 151, 167, 263, 263, 263, 263, 263, 263 ms/op
# Warmup Iteration   2: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 169, 231, 231, 231, 231, 231, 231 ms/op
# Warmup Iteration   3: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 158, 165, 213, 213, 213, 213, 213, 213 ms/op
Iteration   1: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 142, 165, 165, 165, 165, 165, 165 ms/op
Iteration   2: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 141, 157, 157, 157, 157, 157, 157 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-true-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 6, mean = 177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 150, 160, 222, 222, 222, 222, 222, 222 ms/op

# Run progress: 36.98% complete, ETA 00:14:48
# Fork: 3 of 3
# Warmup Iteration   1: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 138, 178, 178, 178, 178, 178, 178 ms/op
# Warmup Iteration   2: n = 8, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 130, 149, 149, 149, 149, 149, 149 ms/op
# Warmup Iteration   3: n = 7, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 144, 207, 207, 207, 207, 207, 207 ms/op
Iteration   1: n = 7, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 143, 207, 207, 207, 207, 207, 207 ms/op
Iteration   2: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 127, 132, 132, 132, 132, 132, 132 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-true-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 7, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 143, 207, 207, 207, 207, 207, 207 ms/op


Result "readKey":
  N = 63
  mean =    150.065 ±(99.9%) 10.406 ms/op

  Histogram, ms/op:
    [120.000, 130.000) = 9 
    [130.000, 140.000) = 8 
    [140.000, 150.000) = 27 
    [150.000, 160.000) = 9 
    [160.000, 170.000) = 3 
    [170.000, 180.000) = 0 
    [180.000, 190.000) = 0 
    [190.000, 200.000) = 1 
    [200.000, 210.000) = 3 
    [210.000, 220.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    126.616 ms/op
     p(50.0000) =    142.606 ms/op
     p(90.0000) =    203.738 ms/op
     p(95.0000) =    212.913 ms/op
     p(99.0000) =    222.298 ms/op
     p(99.9000) =    222.298 ms/op
     p(99.9900) =    222.298 ms/op
     p(99.9990) =    222.298 ms/op
     p(99.9999) =    222.298 ms/op
    p(100.0000) =    222.298 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readKey
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 37.50% complete, ETA 00:14:42
# Fork: 1 of 3
# Warmup Iteration   1: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 105, 124, 125, 125, 125, 125, 125 ms/op
# Warmup Iteration   2: n = 11, mean = 95 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 94, 100, 101, 101, 101, 101, 101 ms/op
# Warmup Iteration   3: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 117, 170, 170, 170, 170, 170, 170 ms/op
Iteration   1: n = 9, mean = 120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 120, 154, 154, 154, 154, 154, 154 ms/op
Iteration   2: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 107, 167, 167, 167, 167, 167, 167 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 97, 172, 177, 177, 177, 177, 177 ms/op

# Run progress: 38.02% complete, ETA 00:14:35
# Fork: 2 of 3
# Warmup Iteration   1: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 113, 188, 188, 188, 188, 188, 188 ms/op
# Warmup Iteration   2: n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 112, 166, 166, 166, 166, 166, 166 ms/op
# Warmup Iteration   3: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 114, 166, 166, 166, 166, 166, 166 ms/op
Iteration   1: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 105, 158, 164, 164, 164, 164, 164 ms/op
Iteration   2: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 112, 165, 165, 165, 165, 165, 165 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 103, 104, 104, 104, 104, 104, 104 ms/op

# Run progress: 38.54% complete, ETA 00:14:27
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 111, 120, 194, 194, 194, 194, 194, 194 ms/op
# Warmup Iteration   2: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 107, 110, 110, 110, 110, 110, 110 ms/op
# Warmup Iteration   3: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 119, 171, 171, 171, 171, 171, 171 ms/op
Iteration   1: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 108, 111, 111, 111, 111, 111, 111 ms/op
Iteration   2: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 119, 173, 173, 173, 173, 173, 173 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 106, 113, 113, 113, 113, 113, 113 ms/op


Result "readKey":
  N = 86
  mean =    111.428 ±(99.9%) 6.206 ms/op

  Histogram, ms/op:
    [ 90.000,  95.000) = 6 
    [ 95.000, 100.000) = 4 
    [100.000, 105.000) = 17 
    [105.000, 110.000) = 31 
    [110.000, 115.000) = 8 
    [115.000, 120.000) = 9 
    [120.000, 125.000) = 4 
    [125.000, 130.000) = 1 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 0 
    [150.000, 155.000) = 1 
    [155.000, 160.000) = 0 
    [160.000, 165.000) = 2 
    [165.000, 170.000) = 1 
    [170.000, 175.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     93.323 ms/op
     p(50.0000) =    106.562 ms/op
     p(90.0000) =    121.635 ms/op
     p(95.0000) =    164.259 ms/op
     p(99.0000) =    177.209 ms/op
     p(99.9000) =    177.209 ms/op
     p(99.9900) =    177.209 ms/op
     p(99.9990) =    177.209 ms/op
     p(99.9999) =    177.209 ms/op
    p(100.0000) =    177.209 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readKey
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 39.06% complete, ETA 00:14:20
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 125 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 115, 198, 198, 198, 198, 198, 198 ms/op
# Warmup Iteration   2: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 103, 107, 107, 107, 107, 107, 107 ms/op
# Warmup Iteration   3: n = 9, mean = 124 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 115, 158, 158, 158, 158, 158, 158 ms/op
Iteration   1: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 102, 155, 160, 160, 160, 160, 160 ms/op
Iteration   2: n = 11, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 94, 95, 95, 95, 95, 95, 95 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 91, 92, 92, 92, 92, 92, 92 ms/op

# Run progress: 39.58% complete, ETA 00:14:14
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 107, 130, 131, 131, 131, 131, 131 ms/op
# Warmup Iteration   2: n = 11, mean = 96 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 95, 99, 99, 99, 99, 99, 99 ms/op
# Warmup Iteration   3: n = 11, mean = 96 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 96, 100, 100, 100, 100, 100, 100 ms/op
Iteration   1: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 108, 166, 166, 166, 166, 166, 166 ms/op
Iteration   2: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 107, 166, 166, 166, 166, 166, 166 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 108, 165, 165, 165, 165, 165, 165 ms/op

# Run progress: 40.10% complete, ETA 00:14:06
# Fork: 3 of 3
# Warmup Iteration   1: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 111, 195, 195, 195, 195, 195, 195 ms/op
# Warmup Iteration   2: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 112, 123, 169, 169, 169, 169, 169, 169 ms/op
# Warmup Iteration   3: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 110, 161, 161, 161, 161, 161, 161 ms/op
Iteration   1: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 97, 107, 168, 168, 168, 168, 168, 168 ms/op
Iteration   2: n = 11, mean = 97 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 97, 97, 98, 98, 98, 98, 98, 98 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 8, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 111, 124, 175, 175, 175, 175, 175, 175 ms/op


Result "readKey":
  N = 87
  mean =    106.935 ±(99.9%) 7.237 ms/op

  Histogram, ms/op:
    [ 80.000,  90.000) = 2 
    [ 90.000, 100.000) = 37 
    [100.000, 110.000) = 29 
    [110.000, 120.000) = 8 
    [120.000, 130.000) = 4 
    [130.000, 140.000) = 0 
    [140.000, 150.000) = 0 
    [150.000, 160.000) = 0 
    [160.000, 170.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =     89.653 ms/op
     p(50.0000) =    102.367 ms/op
     p(90.0000) =    124.440 ms/op
     p(95.0000) =    165.990 ms/op
     p(99.0000) =    174.588 ms/op
     p(99.9000) =    174.588 ms/op
     p(99.9900) =    174.588 ms/op
     p(99.9990) =    174.588 ms/op
     p(99.9999) =    174.588 ms/op
    p(100.0000) =    174.588 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readRev
# Parameters: (forceSafe = true, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 40.63% complete, ETA 00:13:59
# Fork: 1 of 3
# Warmup Iteration   1: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 67, 73, 75, 75, 75, 75, 75 ms/op
# Warmup Iteration   2: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 51, 57, 59, 59, 59, 59, 59 ms/op
# Warmup Iteration   3: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 52, 56, 108, 108, 108, 108, 108 ms/op
Iteration   1: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 58, 80, 109, 109, 109, 109, 109 ms/op
Iteration   2: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 52, 57, 59, 59, 59, 59, 59 ms/op
Iteration   3: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 52, 54, 54, 54, 54, 54, 54 ms/op

# Run progress: 41.15% complete, ETA 00:13:52
# Fork: 2 of 3
# Warmup Iteration   1: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 67, 99, 129, 129, 129, 129, 129 ms/op
# Warmup Iteration   2: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 52, 57, 58, 58, 58, 58, 58 ms/op
# Warmup Iteration   3: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 58, 78, 106, 106, 106, 106, 106 ms/op
Iteration   1: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 51, 56, 58, 58, 58, 58, 58 ms/op
Iteration   2: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 52, 71, 94, 94, 94, 94, 94 ms/op
Iteration   3: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 58, 101, 108, 108, 108, 108, 108 ms/op

# Run progress: 41.67% complete, ETA 00:13:45
# Fork: 3 of 3
# Warmup Iteration   1: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 69, 79, 80, 80, 80, 80, 80 ms/op
# Warmup Iteration   2: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 54, 59, 59, 59, 59, 59, 59 ms/op
# Warmup Iteration   3: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 54, 59, 59, 59, 59, 59, 59 ms/op
Iteration   1: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 54, 57, 59, 59, 59, 59, 59 ms/op
Iteration   2: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 54, 59, 62, 62, 62, 62, 62 ms/op
Iteration   3: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 62, 91, 94, 94, 94, 94, 94 ms/op


Result "readRev":
  N = 164
  mean =     56.965 ±(99.9%) 2.614 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 102 
    [ 55.000,  60.000) = 37 
    [ 60.000,  65.000) = 11 
    [ 65.000,  70.000) = 4 
    [ 70.000,  75.000) = 2 
    [ 75.000,  80.000) = 0 
    [ 80.000,  85.000) = 1 
    [ 85.000,  90.000) = 1 
    [ 90.000,  95.000) = 3 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     51.184 ms/op
     p(50.0000) =     53.903 ms/op
     p(90.0000) =     63.308 ms/op
     p(95.0000) =     81.265 ms/op
     p(99.0000) =    108.377 ms/op
     p(99.9000) =    109.314 ms/op
     p(99.9900) =    109.314 ms/op
     p(99.9990) =    109.314 ms/op
     p(99.9999) =    109.314 ms/op
    p(100.0000) =    109.314 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readRev
# Parameters: (forceSafe = true, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 42.19% complete, ETA 00:13:37
# Fork: 1 of 3
# Warmup Iteration   1: n = 16, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 67, 78, 83, 83, 83, 83, 83 ms/op
# Warmup Iteration   2: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 52, 57, 60, 60, 60, 60, 60 ms/op
# Warmup Iteration   3: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 59, 103, 106, 106, 106, 106, 106 ms/op
Iteration   1: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 57, 83, 106, 106, 106, 106, 106 ms/op
Iteration   2: n = 17, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 58, 99, 109, 109, 109, 109, 109 ms/op
Iteration   3: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 57, 78, 107, 107, 107, 107, 107 ms/op

# Run progress: 42.71% complete, ETA 00:13:30
# Fork: 2 of 3
# Warmup Iteration   1: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 68, 74, 83, 83, 83, 83, 83 ms/op
# Warmup Iteration   2: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 53, 58, 59, 59, 59, 59, 59 ms/op
# Warmup Iteration   3: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 52, 57, 60, 60, 60, 60, 60 ms/op
Iteration   1: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 59, 94, 124, 124, 124, 124, 124 ms/op
Iteration   2: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 52, 58, 65, 65, 65, 65, 65 ms/op
Iteration   3: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 61, 86, 110, 110, 110, 110, 110 ms/op

# Run progress: 43.23% complete, ETA 00:13:23
# Fork: 3 of 3
# Warmup Iteration   1: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 67, 98, 119, 119, 119, 119, 119 ms/op
# Warmup Iteration   2: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 53, 59, 64, 64, 64, 64, 64 ms/op
# Warmup Iteration   3: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 57, 82, 100, 100, 100, 100, 100 ms/op
Iteration   1: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 52, 57, 62, 62, 62, 62, 62 ms/op
Iteration   2: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 57, 79, 112, 112, 112, 112, 112 ms/op
Iteration   3: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 59, 98, 107, 107, 107, 107, 107 ms/op


Result "readRev":
  N = 153
  mean =     60.920 ±(99.9%) 3.547 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 40 
    [ 55.000,  60.000) = 76 
    [ 60.000,  65.000) = 16 
    [ 65.000,  70.000) = 3 
    [ 70.000,  75.000) = 5 
    [ 75.000,  80.000) = 2 
    [ 80.000,  85.000) = 1 
    [ 85.000,  90.000) = 1 
    [ 90.000,  95.000) = 1 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 0 
    [105.000, 110.000) = 5 
    [110.000, 115.000) = 1 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     51.118 ms/op
     p(50.0000) =     57.541 ms/op
     p(90.0000) =     71.801 ms/op
     p(95.0000) =     99.064 ms/op
     p(99.0000) =    117.451 ms/op
     p(99.9000) =    124.387 ms/op
     p(99.9900) =    124.387 ms/op
     p(99.9990) =    124.387 ms/op
     p(99.9999) =    124.387 ms/op
    p(100.0000) =    124.387 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readRev
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 43.75% complete, ETA 00:13:15
# Fork: 1 of 3
# Warmup Iteration   1: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 34, 34, 39, 43, 43, 43, 43 ms/op
# Warmup Iteration   2: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 34, 56, 68, 68, 68, 68, 68 ms/op
# Warmup Iteration   3: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 34, 34, 34, 34, 34, 34 ms/op
Iteration   1: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 36, 43, 57, 63, 63, 63, 63 ms/op
Iteration   2: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 34, 45, 56, 58, 58, 58, 58 ms/op
Iteration   3: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 34, 34, 34, 34, 34, 34 ms/op

# Run progress: 44.27% complete, ETA 00:13:08
# Fork: 2 of 3
# Warmup Iteration   1: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 34, 35, 39, 43, 43, 43, 43 ms/op
# Warmup Iteration   2: n = 28, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 31, 51, 63, 66, 66, 66, 66 ms/op
# Warmup Iteration   3: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 36, 45, 62, 69, 69, 69, 69 ms/op
Iteration   1: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 36, 45, 63, 70, 70, 70, 70 ms/op
Iteration   2: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 34, 43, 56, 60, 60, 60, 60 ms/op
Iteration   3: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 36, 56, 68, 70, 70, 70, 70 ms/op

# Run progress: 44.79% complete, ETA 00:13:00
# Fork: 3 of 3
# Warmup Iteration   1: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 36, 45, 72, 82, 82, 82, 82 ms/op
# Warmup Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 32, 34, 34, 34, 34, 34, 34 ms/op
# Warmup Iteration   3: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 36, 45, 63, 71, 71, 71, 71 ms/op
Iteration   1: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 36, 47, 63, 70, 70, 70, 70 ms/op
Iteration   2: n = 31, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 32, 32, 33, 33, 33, 33, 33 ms/op
Iteration   3: n = 31, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 32, 33, 33, 33, 33, 33, 33 ms/op


Result "readRev":
  N = 260
  mean =     35.131 ±(99.9%) 1.294 ms/op

  Histogram, ms/op:
    [20.000, 25.000) = 0 
    [25.000, 30.000) = 17 
    [30.000, 35.000) = 141 
    [35.000, 40.000) = 83 
    [40.000, 45.000) = 4 
    [45.000, 50.000) = 3 
    [50.000, 55.000) = 5 
    [55.000, 60.000) = 1 
    [60.000, 65.000) = 3 
    [65.000, 70.000) = 1 
    [70.000, 75.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     29.721 ms/op
     p(50.0000) =     33.620 ms/op
     p(90.0000) =     36.726 ms/op
     p(95.0000) =     48.487 ms/op
     p(99.0000) =     70.095 ms/op
     p(99.9000) =     70.255 ms/op
     p(99.9900) =     70.255 ms/op
     p(99.9990) =     70.255 ms/op
     p(99.9999) =     70.255 ms/op
    p(100.0000) =     70.255 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readRev
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 45.31% complete, ETA 00:12:52
# Fork: 1 of 3
# Warmup Iteration   1: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 36, 44, 79, 94, 94, 94, 94 ms/op
# Warmup Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 32, 33, 34, 34, 34, 34, 34 ms/op
# Warmup Iteration   3: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 36, 45, 63, 71, 71, 71, 71 ms/op
Iteration   1: n = 31, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 32, 33, 33, 34, 34, 34, 34 ms/op
Iteration   2: n = 31, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 32, 33, 33, 34, 34, 34, 34 ms/op
Iteration   3: n = 31, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 32, 33, 33, 33, 33, 33, 33 ms/op

# Run progress: 45.83% complete, ETA 00:12:45
# Fork: 2 of 3
# Warmup Iteration   1: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 34, 35, 41, 50, 50, 50, 50 ms/op
# Warmup Iteration   2: n = 33, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 32, 32, 33, 33, 33, 33 ms/op
# Warmup Iteration   3: n = 34, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 31, 32, 32, 32, 32, 32 ms/op
Iteration   1: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 34, 41, 59, 68, 68, 68, 68 ms/op
Iteration   2: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 34, 41, 58, 66, 66, 66, 66 ms/op
Iteration   3: n = 33, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 31, 31, 31, 31, 31, 31 ms/op

# Run progress: 46.35% complete, ETA 00:12:37
# Fork: 3 of 3
# Warmup Iteration   1: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 36, 43, 75, 89, 89, 89, 89 ms/op
# Warmup Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 33, 33, 33, 33, 33, 33, 33 ms/op
# Warmup Iteration   3: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 36, 45, 64, 72, 72, 72, 72 ms/op
Iteration   1: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 36, 45, 64, 71, 71, 71, 71 ms/op
Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 33, 33, 33, 35, 35, 35, 35 ms/op
Iteration   3: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 33, 33, 34, 34, 34, 34 ms/op


Result "readRev":
  N = 273
  mean =     33.423 ±(99.9%) 0.908 ms/op

  Histogram, ms/op:
    [20.000, 25.000) = 0 
    [25.000, 30.000) = 5 
    [30.000, 35.000) = 236 
    [35.000, 40.000) = 23 
    [40.000, 45.000) = 3 
    [45.000, 50.000) = 2 
    [50.000, 55.000) = 1 
    [55.000, 60.000) = 0 
    [60.000, 65.000) = 0 
    [65.000, 70.000) = 2 
    [70.000, 75.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     29.819 ms/op
     p(50.0000) =     32.539 ms/op
     p(90.0000) =     36.307 ms/op
     p(95.0000) =     36.372 ms/op
     p(99.0000) =     66.620 ms/op
     p(99.9000) =     71.303 ms/op
     p(99.9900) =     71.303 ms/op
     p(99.9990) =     71.303 ms/op
     p(99.9999) =     71.303 ms/op
    p(100.0000) =     71.303 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readSeq
# Parameters: (forceSafe = true, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 46.88% complete, ETA 00:12:30
# Fork: 1 of 3
# Warmup Iteration   1: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 78, 113, 130, 130, 130, 130, 130 ms/op
# Warmup Iteration   2: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 62, 65, 68, 68, 68, 68, 68 ms/op
# Warmup Iteration   3: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 61, 107, 108, 108, 108, 108, 108 ms/op
Iteration   1: n = 14, mean = 71 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 68, 95, 112, 112, 112, 112, 112 ms/op
Iteration   2: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 62, 68, 68, 68, 68, 68, 68 ms/op
Iteration   3: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 61, 63, 63, 63, 63, 63, 63 ms/op

# Run progress: 47.40% complete, ETA 00:12:22
# Fork: 2 of 3
# Warmup Iteration   1: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 78, 115, 134, 134, 134, 134, 134 ms/op
# Warmup Iteration   2: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 63, 97, 117, 117, 117, 117, 117 ms/op
# Warmup Iteration   3: n = 15, mean = 71 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 62, 107, 108, 108, 108, 108, 108 ms/op
Iteration   1: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 62, 65, 67, 67, 67, 67, 67 ms/op
Iteration   2: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 63, 89, 110, 110, 110, 110, 110 ms/op
Iteration   3: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 69, 92, 96, 96, 96, 96, 96 ms/op

# Run progress: 47.92% complete, ETA 00:12:15
# Fork: 3 of 3
# Warmup Iteration   1: n = 13, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 74, 107, 112, 112, 112, 112, 112 ms/op
# Warmup Iteration   2: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 57, 73, 75, 75, 75, 75, 75 ms/op
# Warmup Iteration   3: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 56, 62, 62, 62, 62, 62, 62 ms/op
Iteration   1: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 57, 62, 63, 63, 63, 63, 63 ms/op
Iteration   2: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 57, 58, 62, 62, 62, 62, 62 ms/op
Iteration   3: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 56, 59, 59, 59, 59, 59, 59 ms/op


Result "readSeq":
  N = 148
  mean =     62.230 ±(99.9%) 2.336 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 1 
    [ 55.000,  60.000) = 59 
    [ 60.000,  65.000) = 59 
    [ 65.000,  70.000) = 19 
    [ 70.000,  75.000) = 3 
    [ 75.000,  80.000) = 2 
    [ 80.000,  85.000) = 1 
    [ 85.000,  90.000) = 1 
    [ 90.000,  95.000) = 0 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 0 
    [105.000, 110.000) = 0 
    [110.000, 115.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     54.985 ms/op
     p(50.0000) =     61.276 ms/op
     p(90.0000) =     68.944 ms/op
     p(95.0000) =     74.999 ms/op
     p(99.0000) =    111.095 ms/op
     p(99.9000) =    111.673 ms/op
     p(99.9900) =    111.673 ms/op
     p(99.9990) =    111.673 ms/op
     p(99.9999) =    111.673 ms/op
    p(100.0000) =    111.673 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readSeq
# Parameters: (forceSafe = true, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 48.44% complete, ETA 00:12:08
# Fork: 1 of 3
# Warmup Iteration   1: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 74, 81, 89, 89, 89, 89, 89 ms/op
# Warmup Iteration   2: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 65, 86, 104, 104, 104, 104, 104 ms/op
# Warmup Iteration   3: n = 17, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 58, 95, 97, 97, 97, 97, 97 ms/op
Iteration   1: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 70, 82, 92, 92, 92, 92, 92 ms/op
Iteration   2: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 65, 100, 110, 110, 110, 110, 110 ms/op
Iteration   3: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 65, 104, 116, 116, 116, 116, 116 ms/op

# Run progress: 48.96% complete, ETA 00:12:00
# Fork: 2 of 3
# Warmup Iteration   1: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 72, 81, 90, 90, 90, 90, 90 ms/op
# Warmup Iteration   2: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 72, 111, 122, 122, 122, 122, 122 ms/op
# Warmup Iteration   3: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 63, 114, 114, 114, 114, 114, 114 ms/op
Iteration   1: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 69, 99, 118, 118, 118, 118, 118 ms/op
Iteration   2: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 64, 85, 100, 100, 100, 100, 100 ms/op
Iteration   3: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 63, 101, 114, 114, 114, 114, 114 ms/op

# Run progress: 49.48% complete, ETA 00:11:53
# Fork: 3 of 3
# Warmup Iteration   1: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 77, 120, 142, 142, 142, 142, 142 ms/op
# Warmup Iteration   2: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 60, 63, 68, 68, 68, 68, 68 ms/op
# Warmup Iteration   3: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 61, 90, 103, 103, 103, 103, 103 ms/op
Iteration   1: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 67, 92, 114, 114, 114, 114, 114 ms/op
Iteration   2: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 62, 89, 101, 101, 101, 101, 101 ms/op
Iteration   3: n = 15, mean = 71 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 67, 93, 114, 114, 114, 114, 114 ms/op


Result "readSeq":
  N = 134
  mean =     69.897 ±(99.9%) 3.631 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 5 
    [ 60.000,  65.000) = 57 
    [ 65.000,  70.000) = 44 
    [ 70.000,  75.000) = 6 
    [ 75.000,  80.000) = 6 
    [ 80.000,  85.000) = 3 
    [ 85.000,  90.000) = 1 
    [ 90.000,  95.000) = 4 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 1 
    [105.000, 110.000) = 0 
    [110.000, 115.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =     55.902 ms/op
     p(50.0000) =     66.552 ms/op
     p(90.0000) =     86.704 ms/op
     p(95.0000) =    103.285 ms/op
     p(99.0000) =    117.368 ms/op
     p(99.9000) =    117.965 ms/op
     p(99.9900) =    117.965 ms/op
     p(99.9990) =    117.965 ms/op
     p(99.9999) =    117.965 ms/op
    p(100.0000) =    117.965 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readSeq
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 50.00% complete, ETA 00:11:46
# Fork: 1 of 3
# Warmup Iteration   1: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 46, 59, 85, 88, 88, 88, 88 ms/op
# Warmup Iteration   2: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 46, 58, 75, 77, 77, 77, 77 ms/op
# Warmup Iteration   3: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 41, 41, 42, 42, 42, 42, 42 ms/op
Iteration   1: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 41, 41, 42, 42, 42, 42, 42 ms/op
Iteration   2: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 41, 41, 41, 41, 41, 41, 41 ms/op
Iteration   3: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 46, 58, 76, 78, 78, 78, 78 ms/op

# Run progress: 50.52% complete, ETA 00:11:38
# Fork: 2 of 3
# Warmup Iteration   1: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 37, 41, 46, 49, 49, 49, 49 ms/op
# Warmup Iteration   2: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 46, 69, 75, 76, 76, 76, 76 ms/op
# Warmup Iteration   3: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 37, 40, 40, 40, 40, 40, 40 ms/op
Iteration   1: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 40, 70, 76, 76, 76, 76, 76 ms/op
Iteration   2: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 35, 39, 40, 40, 40, 40, 40 ms/op
Iteration   3: n = 25, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 36, 57, 71, 77, 77, 77, 77 ms/op

# Run progress: 51.04% complete, ETA 00:11:31
# Fork: 3 of 3
# Warmup Iteration   1: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 49, 62, 92, 93, 93, 93, 93 ms/op
# Warmup Iteration   2: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 44, 44, 45, 45, 45, 45, 45 ms/op
# Warmup Iteration   3: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 44, 49, 60, 80, 81, 81, 81, 81 ms/op
Iteration   1: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 44, 56, 71, 73, 73, 73, 73 ms/op
Iteration   2: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 44, 47, 59, 79, 81, 81, 81, 81 ms/op
Iteration   3: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 44, 44, 44, 44, 44, 44, 44 ms/op


Result "readSeq":
  N = 212
  mean =     43.113 ±(99.9%) 1.749 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 53 
    [40.000, 45.000) = 108 
    [45.000, 50.000) = 33 
    [50.000, 55.000) = 4 
    [55.000, 60.000) = 7 
    [60.000, 65.000) = 1 
    [65.000, 70.000) = 0 
    [70.000, 75.000) = 2 
    [75.000, 80.000) = 3 
    [80.000, 85.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     35.127 ms/op
     p(50.0000) =     41.222 ms/op
     p(90.0000) =     48.130 ms/op
     p(95.0000) =     58.996 ms/op
     p(99.0000) =     77.458 ms/op
     p(99.9000) =     80.609 ms/op
     p(99.9900) =     80.609 ms/op
     p(99.9990) =     80.609 ms/op
     p(99.9999) =     80.609 ms/op
    p(100.0000) =     80.609 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readSeq
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 51.56% complete, ETA 00:11:23
# Fork: 1 of 3
# Warmup Iteration   1: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 41, 43, 54, 58, 58, 58, 58 ms/op
# Warmup Iteration   2: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 41, 65, 75, 77, 77, 77, 77 ms/op
# Warmup Iteration   3: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 41, 41, 41, 41, 41, 41 ms/op
Iteration   1: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 47, 55, 63, 64, 64, 64, 64 ms/op
Iteration   2: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 42, 43, 43, 43, 43, 43, 43 ms/op
Iteration   3: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 41, 52, 70, 75, 75, 75, 75 ms/op

# Run progress: 52.08% complete, ETA 00:11:16
# Fork: 2 of 3
# Warmup Iteration   1: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 47, 60, 102, 104, 104, 104, 104 ms/op
# Warmup Iteration   2: n = 20, mean = 50 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 48, 64, 73, 74, 74, 74, 74 ms/op
# Warmup Iteration   3: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 44, 55, 72, 75, 75, 75, 75 ms/op
Iteration   1: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 44, 59, 75, 78, 78, 78, 78 ms/op
Iteration   2: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 44, 58, 73, 76, 76, 76, 76 ms/op
Iteration   3: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 47, 59, 77, 78, 78, 78, 78 ms/op

# Run progress: 52.60% complete, ETA 00:11:08
# Fork: 3 of 3
# Warmup Iteration   1: n = 20, mean = 50 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 47, 58, 99, 101, 101, 101, 101 ms/op
# Warmup Iteration   2: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 47, 59, 78, 80, 80, 80, 80 ms/op
# Warmup Iteration   3: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 47, 60, 77, 79, 79, 79, 79 ms/op
Iteration   1: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 47, 54, 65, 66, 66, 66, 66 ms/op
Iteration   2: n = 20, mean = 50 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 46, 47, 63, 75, 75, 75, 75, 75 ms/op
Iteration   3: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 44, 47, 57, 74, 76, 76, 76, 76 ms/op


Result "readSeq":
  N = 196
  mean =     46.572 ±(99.9%) 1.691 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 10 
    [40.000, 45.000) = 81 
    [45.000, 50.000) = 82 
    [50.000, 55.000) = 5 
    [55.000, 60.000) = 6 
    [60.000, 65.000) = 5 
    [65.000, 70.000) = 1 
    [70.000, 75.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     35.717 ms/op
     p(50.0000) =     46.137 ms/op
     p(90.0000) =     53.366 ms/op
     p(95.0000) =     61.253 ms/op
     p(99.0000) =     77.745 ms/op
     p(99.9000) =     78.381 ms/op
     p(99.9900) =     78.381 ms/op
     p(99.9990) =     78.381 ms/op
     p(99.9999) =     78.381 ms/op
    p(100.0000) =     78.381 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readXxh64
# Parameters: (forceSafe = true, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 53.13% complete, ETA 00:11:01
# Fork: 1 of 3
# Warmup Iteration   1: n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 107, 191, 191, 191, 191, 191, 191 ms/op
# Warmup Iteration   2: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 98, 153, 158, 158, 158, 158, 158 ms/op
# Warmup Iteration   3: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 97, 149, 155, 155, 155, 155, 155 ms/op
Iteration   1: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 97, 149, 153, 153, 153, 153, 153 ms/op
Iteration   2: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 102, 174, 174, 174, 174, 174, 174 ms/op
Iteration   3: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 90, 100, 101, 101, 101, 101, 101 ms/op

# Run progress: 53.65% complete, ETA 00:10:53
# Fork: 2 of 3
# Warmup Iteration   1: n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 103, 184, 184, 184, 184, 184, 184 ms/op
# Warmup Iteration   2: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 95, 143, 148, 148, 148, 148, 148 ms/op
# Warmup Iteration   3: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 84, 85, 87, 88, 88, 88, 88, 88 ms/op
Iteration   1: n = 12, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 83, 85, 140, 152, 152, 152, 152, 152 ms/op
Iteration   2: n = 11, mean = 98 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 94, 139, 149, 149, 149, 149, 149 ms/op
Iteration   3: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 85, 91, 93, 93, 93, 93, 93 ms/op

# Run progress: 54.17% complete, ETA 00:10:46
# Fork: 3 of 3
# Warmup Iteration   1: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 102, 130, 133, 133, 133, 133, 133 ms/op
# Warmup Iteration   2: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 83, 86, 89, 90, 90, 90, 90, 90 ms/op
# Warmup Iteration   3: n = 11, mean = 97 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 84, 86, 157, 168, 168, 168, 168, 168 ms/op
Iteration   1: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 104, 154, 159, 159, 159, 159, 159 ms/op
Iteration   2: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 93, 97, 98, 98, 98, 98, 98 ms/op
Iteration   3: n = 10, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 94, 149, 154, 154, 154, 154, 154 ms/op


Result "readXxh64":
  N = 96
  mean =     97.808 ±(99.9%) 5.965 ms/op

  Histogram, ms/op:
    [ 80.000,  90.000) = 30 
    [ 90.000, 100.000) = 42 
    [100.000, 110.000) = 14 
    [110.000, 120.000) = 3 
    [120.000, 130.000) = 1 
    [130.000, 140.000) = 0 
    [140.000, 150.000) = 1 
    [150.000, 160.000) = 4 
    [160.000, 170.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     83.231 ms/op
     p(50.0000) =     93.454 ms/op
     p(90.0000) =    111.804 ms/op
     p(95.0000) =    152.201 ms/op
     p(99.0000) =    173.801 ms/op
     p(99.9000) =    173.801 ms/op
     p(99.9900) =    173.801 ms/op
     p(99.9990) =    173.801 ms/op
     p(99.9999) =    173.801 ms/op
    p(100.0000) =    173.801 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readXxh64
# Parameters: (forceSafe = true, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 54.69% complete, ETA 00:10:39
# Fork: 1 of 3
# Warmup Iteration   1: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 103, 196, 196, 196, 196, 196, 196 ms/op
# Warmup Iteration   2: n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 83, 89, 91, 91, 91, 91, 91 ms/op
# Warmup Iteration   3: n = 11, mean = 98 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 94, 143, 155, 155, 155, 155, 155 ms/op
Iteration   1: n = 12, mean = 83 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 83, 86, 88, 88, 88, 88, 88 ms/op
Iteration   2: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 83, 83, 150, 158, 158, 158, 158, 158 ms/op
Iteration   3: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 93, 170, 171, 171, 171, 171, 171 ms/op

# Run progress: 55.21% complete, ETA 00:10:32
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 102, 134, 137, 137, 137, 137, 137 ms/op
# Warmup Iteration   2: n = 12, mean = 83 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 81, 83, 89, 91, 91, 91, 91, 91 ms/op
# Warmup Iteration   3: n = 13, mean = 83 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 82, 86, 87, 87, 87, 87, 87 ms/op
Iteration   1: n = 11, mean = 98 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 93, 143, 153, 153, 153, 153, 153 ms/op
Iteration   2: n = 11, mean = 97 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 92, 142, 153, 153, 153, 153, 153 ms/op
Iteration   3: n = 13, mean = 83 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 83, 87, 88, 88, 88, 88, 88 ms/op

# Run progress: 55.73% complete, ETA 00:10:24
# Fork: 3 of 3
# Warmup Iteration   1: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 99, 197, 197, 197, 197, 197, 197 ms/op
# Warmup Iteration   2: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 80, 81, 88, 91, 91, 91, 91, 91 ms/op
# Warmup Iteration   3: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 93, 149, 152, 152, 152, 152, 152 ms/op
Iteration   1: n = 11, mean = 98 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 84, 93, 142, 153, 153, 153, 153, 153 ms/op
Iteration   2: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 95, 151, 152, 152, 152, 152, 152 ms/op
Iteration   3: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 79, 80, 131, 143, 143, 143, 143, 143 ms/op


Result "readXxh64":
  N = 101
  mean =     94.486 ±(99.9%) 6.754 ms/op

  Histogram, ms/op:
    [ 70.000,  80.000) = 7 
    [ 80.000,  90.000) = 40 
    [ 90.000, 100.000) = 39 
    [100.000, 110.000) = 5 
    [110.000, 120.000) = 0 
    [120.000, 130.000) = 1 
    [130.000, 140.000) = 0 
    [140.000, 150.000) = 2 
    [150.000, 160.000) = 6 
    [160.000, 170.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     79.430 ms/op
     p(50.0000) =     91.357 ms/op
     p(90.0000) =    117.152 ms/op
     p(95.0000) =    152.568 ms/op
     p(99.0000) =    170.918 ms/op
     p(99.9000) =    171.180 ms/op
     p(99.9900) =    171.180 ms/op
     p(99.9990) =    171.180 ms/op
     p(99.9999) =    171.180 ms/op
    p(100.0000) =    171.180 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readXxh64
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 56.25% complete, ETA 00:10:17
# Fork: 1 of 3
# Warmup Iteration   1: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 66, 92, 99, 99, 99, 99, 99 ms/op
# Warmup Iteration   2: n = 13, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 70, 110, 116, 116, 116, 116, 116 ms/op
# Warmup Iteration   3: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 61, 66, 67, 67, 67, 67, 67 ms/op
Iteration   1: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 60, 61, 62, 62, 62, 62, 62 ms/op
Iteration   2: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 60, 61, 62, 62, 62, 62, 62 ms/op
Iteration   3: n = 13, mean = 83 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 70, 118, 121, 121, 121, 121, 121 ms/op

# Run progress: 56.77% complete, ETA 00:10:10
# Fork: 2 of 3
# Warmup Iteration   1: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 73, 80, 135, 154, 154, 154, 154, 154 ms/op
# Warmup Iteration   2: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 72, 100, 110, 110, 110, 110, 110 ms/op
# Warmup Iteration   3: n = 13, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 79, 120, 121, 121, 121, 121, 121 ms/op
Iteration   1: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 72, 103, 124, 124, 124, 124, 124 ms/op
Iteration   2: n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 79, 80, 109, 118, 118, 118, 118, 118 ms/op
Iteration   3: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 79, 81, 108, 112, 112, 112, 112, 112 ms/op

# Run progress: 57.29% complete, ETA 00:10:02
# Fork: 3 of 3
# Warmup Iteration   1: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 83, 85, 147, 160, 160, 160, 160, 160 ms/op
# Warmup Iteration   2: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 84, 123, 126, 126, 126, 126, 126 ms/op
# Warmup Iteration   3: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 65, 73, 73, 73, 73, 73, 73 ms/op
Iteration   1: n = 12, mean = 88 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 74, 85, 119, 130, 130, 130, 130, 130 ms/op
Iteration   2: n = 14, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 76, 79, 79, 79, 79, 79, 79 ms/op
Iteration   3: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 84, 115, 119, 119, 119, 119, 119 ms/op


Result "readXxh64":
  N = 123
  mean =     76.555 ±(99.9%) 4.676 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 23 
    [ 60.000,  65.000) = 13 
    [ 65.000,  70.000) = 7 
    [ 70.000,  75.000) = 11 
    [ 75.000,  80.000) = 19 
    [ 80.000,  85.000) = 26 
    [ 85.000,  90.000) = 10 
    [ 90.000,  95.000) = 3 
    [ 95.000, 100.000) = 2 
    [100.000, 105.000) = 0 
    [105.000, 110.000) = 2 
    [110.000, 115.000) = 2 
    [115.000, 120.000) = 2 
    [120.000, 125.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     58.720 ms/op
     p(50.0000) =     76.415 ms/op
     p(90.0000) =     94.477 ms/op
     p(95.0000) =    113.902 ms/op
     p(99.0000) =    128.246 ms/op
     p(99.9000) =    129.630 ms/op
     p(99.9900) =    129.630 ms/op
     p(99.9990) =    129.630 ms/op
     p(99.9999) =    129.630 ms/op
    p(100.0000) =    129.630 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readXxh64
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 57.81% complete, ETA 00:09:55
# Fork: 1 of 3
# Warmup Iteration   1: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 69, 117, 155, 155, 155, 155, 155 ms/op
# Warmup Iteration   2: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 61, 67, 79, 79, 79, 79, 79 ms/op
# Warmup Iteration   3: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 76, 110, 124, 124, 124, 124, 124 ms/op
Iteration   1: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 70, 100, 119, 119, 119, 119, 119 ms/op
Iteration   2: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 77, 107, 122, 122, 122, 122, 122 ms/op
Iteration   3: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 68, 69, 100, 120, 120, 120, 120, 120 ms/op

# Run progress: 58.33% complete, ETA 00:09:48
# Fork: 2 of 3
# Warmup Iteration   1: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 71, 129, 161, 161, 161, 161, 161 ms/op
# Warmup Iteration   2: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 63, 63, 64, 64, 64, 64, 64 ms/op
# Warmup Iteration   3: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 63, 63, 63, 63, 63, 63, 63 ms/op
Iteration   1: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 62, 63, 63, 63, 63, 63, 63 ms/op
Iteration   2: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 62, 63, 63, 63, 63, 63, 63 ms/op
Iteration   3: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 77, 110, 126, 126, 126, 126, 126 ms/op

# Run progress: 58.85% complete, ETA 00:09:40
# Fork: 3 of 3
# Warmup Iteration   1: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 71, 135, 165, 165, 165, 165, 165 ms/op
# Warmup Iteration   2: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 71, 117, 123, 123, 123, 123, 123 ms/op
# Warmup Iteration   3: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 63, 70, 71, 71, 71, 71, 71 ms/op
Iteration   1: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 69, 99, 119, 119, 119, 119, 119 ms/op
Iteration   2: n = 15, mean = 71 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 70, 97, 121, 121, 121, 121, 121 ms/op
Iteration   3: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 71, 122, 122, 122, 122, 122, 122 ms/op


Result "readXxh64":
  N = 130
  mean =     72.019 ±(99.9%) 4.139 ms/op

  Histogram, ms/op:
    [ 60.000,  65.000) = 45 
    [ 65.000,  70.000) = 36 
    [ 70.000,  75.000) = 15 
    [ 75.000,  80.000) = 20 
    [ 80.000,  85.000) = 4 
    [ 85.000,  90.000) = 2 
    [ 90.000,  95.000) = 0 
    [ 95.000, 100.000) = 0 
    [100.000, 105.000) = 0 
    [105.000, 110.000) = 0 
    [110.000, 115.000) = 0 
    [115.000, 120.000) = 3 
    [120.000, 125.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =     60.752 ms/op
     p(50.0000) =     69.009 ms/op
     p(90.0000) =     80.688 ms/op
     p(95.0000) =    119.380 ms/op
     p(99.0000) =    124.551 ms/op
     p(99.9000) =    125.567 ms/op
     p(99.9900) =    125.567 ms/op
     p(99.9990) =    125.567 ms/op
     p(99.9999) =    125.567 ms/op
    p(100.0000) =    125.567 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 59.38% complete, ETA 00:09:33
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 154, 186, 186, 186, 186, 186, 186 ms/op
# Warmup Iteration   2: n = 7, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 131, 156, 156, 156, 156, 156, 156 ms/op
# Warmup Iteration   3: n = 6, mean = 174 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 153, 155, 217, 217, 217, 217, 217, 217 ms/op
Iteration   1: n = 6, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 154, 214, 214, 214, 214, 214, 214 ms/op
Iteration   2: n = 7, mean = 134 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 135, 136, 136, 136, 136, 136, 136 ms/op
Iteration   3: n = 6, mean = 164 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 149, 208, 208, 208, 208, 208, 208 ms/op

# Run progress: 59.90% complete, ETA 00:09:25
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 153, 189, 189, 189, 189, 189, 189 ms/op
# Warmup Iteration   2: n = 7, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 129, 135, 135, 135, 135, 135, 135 ms/op
# Warmup Iteration   3: n = 6, mean = 164 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 147, 207, 207, 207, 207, 207, 207 ms/op
Iteration   1: n = 5, mean = 185 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 209, 216, 216, 216, 216, 216, 216 ms/op
Iteration   2: n = 6, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 150, 194, 194, 194, 194, 194, 194 ms/op
Iteration   3: n = 6, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 152, 215, 215, 215, 215, 215, 215 ms/op

# Run progress: 60.42% complete, ETA 00:09:18
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 152, 180, 180, 180, 180, 180, 180 ms/op
# Warmup Iteration   2: n = 7, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 128, 142, 142, 142, 142, 142, 142 ms/op
# Warmup Iteration   3: n = 6, mean = 177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 173, 220, 220, 220, 220, 220, 220 ms/op
Iteration   1: n = 6, mean = 177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 171, 221, 221, 221, 221, 221, 221 ms/op
Iteration   2: n = 7, mean = 137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 133, 148, 148, 148, 148, 148, 148 ms/op
Iteration   3: n = 6, mean = 168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 147, 212, 212, 212, 212, 212, 212 ms/op


Result "write":
  N = 55
  mean =    160.287 ±(99.9%) 13.785 ms/op

  Histogram, ms/op:
    [120.000, 130.000) = 4 
    [130.000, 140.000) = 8 
    [140.000, 150.000) = 20 
    [150.000, 160.000) = 9 
    [160.000, 170.000) = 0 
    [170.000, 180.000) = 0 
    [180.000, 190.000) = 0 
    [190.000, 200.000) = 2 
    [200.000, 210.000) = 6 
    [210.000, 220.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =    128.975 ms/op
     p(50.0000) =    147.063 ms/op
     p(90.0000) =    211.865 ms/op
     p(95.0000) =    215.168 ms/op
     p(99.0000) =    220.987 ms/op
     p(99.9000) =    220.987 ms/op
     p(99.9900) =    220.987 ms/op
     p(99.9990) =    220.987 ms/op
     p(99.9999) =    220.987 ms/op
    p(100.0000) =    220.987 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 60.94% complete, ETA 00:09:10
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 200 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 173, 195, 238, 238, 238, 238, 238, 238 ms/op
# Warmup Iteration   2: n = 5, mean = 211 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 177, 206, 264, 264, 264, 264, 264, 264 ms/op
# Warmup Iteration   3: n = 5, mean = 186 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 183, 203, 203, 203, 203, 203, 203 ms/op
Iteration   1: n = 5, mean = 182 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 174, 184, 186, 186, 186, 186, 186, 186 ms/op
Iteration   2: n = 5, mean = 186 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 185, 186, 187, 187, 187, 187, 187, 187 ms/op
Iteration   3: n = 5, mean = 212 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 179, 209, 251, 251, 251, 251, 251, 251 ms/op

# Run progress: 61.46% complete, ETA 00:09:03
# Fork: 2 of 3
# Warmup Iteration   1: n = 3, mean = 224 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 197, 209, 266, 266, 266, 266, 266, 266 ms/op
# Warmup Iteration   2: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 171, 174, 191, 191, 191, 191, 191, 191 ms/op
# Warmup Iteration   3: n = 5, mean = 187 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 171, 172, 245, 245, 245, 245, 245, 245 ms/op
Iteration   1: n = 5, mean = 205 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 174, 198, 253, 253, 253, 253, 253, 253 ms/op
Iteration   2: n = 5, mean = 207 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 174, 196, 246, 246, 246, 246, 246, 246 ms/op
Iteration   3: n = 5, mean = 206 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 175, 197, 260, 260, 260, 260, 260, 260 ms/op

# Run progress: 61.98% complete, ETA 00:08:55
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 241 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 208, 213, 303, 303, 303, 303, 303, 303 ms/op
# Warmup Iteration   2: n = 4, mean = 240 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 195, 228, 308, 308, 308, 308, 308, 308 ms/op
# Warmup Iteration   3: n = 4, mean = 232 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 203, 232, 262, 262, 262, 262, 262, 262 ms/op
Iteration   1: n = 5, mean = 191 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 177, 197, 200, 200, 200, 200, 200, 200 ms/op
Iteration   2: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 174, 179, 181, 181, 181, 181, 181, 181 ms/op
Iteration   3: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 180, 182, 182, 182, 182, 182, 182 ms/op


Result "write":
  N = 47
  mean =    193.345 ±(99.9%) 11.048 ms/op

  Histogram, ms/op:
    [170.000, 180.000) = 13 
    [180.000, 190.000) = 15 
    [190.000, 200.000) = 10 
    [200.000, 210.000) = 3 
    [210.000, 220.000) = 1 
    [220.000, 230.000) = 1 
    [230.000, 240.000) = 0 
    [240.000, 250.000) = 1 
    [250.000, 260.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    173.539 ms/op
     p(50.0000) =    185.336 ms/op
     p(90.0000) =    228.223 ms/op
     p(95.0000) =    252.392 ms/op
     p(99.0000) =    260.309 ms/op
     p(99.9000) =    260.309 ms/op
     p(99.9900) =    260.309 ms/op
     p(99.9990) =    260.309 ms/op
     p(99.9999) =    260.309 ms/op
    p(100.0000) =    260.309 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 62.50% complete, ETA 00:08:48
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 155, 188, 188, 188, 188, 188, 188 ms/op
# Warmup Iteration   2: n = 6, mean = 173 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 161, 213, 213, 213, 213, 213, 213 ms/op
# Warmup Iteration   3: n = 7, mean = 139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 139, 149, 149, 149, 149, 149, 149 ms/op
Iteration   1: n = 7, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 131, 133, 133, 133, 133, 133, 133 ms/op
Iteration   2: n = 7, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 131, 132, 132, 132, 132, 132, 132 ms/op
Iteration   3: n = 6, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 148, 206, 206, 206, 206, 206, 206 ms/op

# Run progress: 63.02% complete, ETA 00:08:40
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 165 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 150, 156, 196, 196, 196, 196, 196, 196 ms/op
# Warmup Iteration   2: n = 7, mean = 141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 134, 174, 174, 174, 174, 174, 174 ms/op
# Warmup Iteration   3: n = 5, mean = 193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 150, 200, 209, 209, 209, 209, 209, 209 ms/op
Iteration   1: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 140, 149, 207, 207, 207, 207, 207, 207 ms/op
Iteration   2: n = 7, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 132, 138, 138, 138, 138, 138, 138 ms/op
Iteration   3: n = 5, mean = 185 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 185, 211, 211, 211, 211, 211, 211 ms/op

# Run progress: 63.54% complete, ETA 00:08:32
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 150, 168, 222, 222, 222, 222, 222, 222 ms/op
# Warmup Iteration   2: n = 6, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 154, 212, 212, 212, 212, 212, 212 ms/op
# Warmup Iteration   3: n = 7, mean = 134 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 133, 137, 137, 137, 137, 137, 137 ms/op
Iteration   1: n = 6, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 140, 153, 207, 207, 207, 207, 207, 207 ms/op
Iteration   2: n = 6, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 155, 217, 217, 217, 217, 217, 217 ms/op
Iteration   3: n = 6, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 153, 211, 211, 211, 211, 211, 211 ms/op


Result "write":
  N = 56
  mean =    151.568 ±(99.9%) 12.286 ms/op

  Histogram, ms/op:
    [120.000, 130.000) = 7 
    [130.000, 140.000) = 18 
    [140.000, 150.000) = 9 
    [150.000, 160.000) = 12 
    [160.000, 170.000) = 0 
    [170.000, 180.000) = 1 
    [180.000, 190.000) = 1 
    [190.000, 200.000) = 0 
    [200.000, 210.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =    127.533 ms/op
     p(50.0000) =    146.407 ms/op
     p(90.0000) =    206.569 ms/op
     p(95.0000) =    211.288 ms/op
     p(99.0000) =    217.317 ms/op
     p(99.9000) =    217.317 ms/op
     p(99.9900) =    217.317 ms/op
     p(99.9990) =    217.317 ms/op
     p(99.9999) =    217.317 ms/op
    p(100.0000) =    217.317 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 64.06% complete, ETA 00:08:25
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 265 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 213, 265, 318, 318, 318, 318, 318, 318 ms/op
# Warmup Iteration   2: n = 5, mean = 184 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 188, 196, 196, 196, 196, 196, 196 ms/op
# Warmup Iteration   3: n = 5, mean = 211 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 189, 196, 243, 243, 243, 243, 243, 243 ms/op
Iteration   1: n = 5, mean = 213 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 190, 191, 250, 250, 250, 250, 250, 250 ms/op
Iteration   2: n = 5, mean = 222 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 190, 196, 269, 269, 269, 269, 269, 269 ms/op
Iteration   3: n = 5, mean = 193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 166, 171, 284, 284, 284, 284, 284, 284 ms/op

# Run progress: 64.58% complete, ETA 00:08:17
# Fork: 2 of 3
# Warmup Iteration   1: n = 3, mean = 217 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 193, 209, 250, 250, 250, 250, 250, 250 ms/op
# Warmup Iteration   2: n = 5, mean = 204 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 175, 185, 278, 278, 278, 278, 278, 278 ms/op
# Warmup Iteration   3: n = 4, mean = 237 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 202, 232, 282, 282, 282, 282, 282, 282 ms/op
Iteration   1: n = 5, mean = 205 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 201, 243, 243, 243, 243, 243, 243 ms/op
Iteration   2: n = 5, mean = 208 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 205, 246, 246, 246, 246, 246, 246 ms/op
Iteration   3: n = 5, mean = 205 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 175, 198, 258, 258, 258, 258, 258, 258 ms/op

# Run progress: 65.10% complete, ETA 00:08:10
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 227 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 200, 209, 273, 273, 273, 273, 273, 273 ms/op
# Warmup Iteration   2: n = 5, mean = 200 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 171, 172, 296, 296, 296, 296, 296, 296 ms/op
# Warmup Iteration   3: n = 5, mean = 198 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 171, 187, 247, 247, 247, 247, 247, 247 ms/op
Iteration   1: n = 4, mean = 231 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 201, 232, 258, 258, 258, 258, 258, 258 ms/op
Iteration   2: n = 5, mean = 189 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 182, 184, 206, 206, 206, 206, 206, 206 ms/op
Iteration   3: n = 5, mean = 182 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 180, 183, 184, 184, 184, 184, 184, 184 ms/op


Result "write":
  N = 44
  mean =    204.764 ±(99.9%) 16.618 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 0 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 5 
    [175.000, 187.500) = 10 
    [187.500, 200.000) = 10 
    [200.000, 212.500) = 9 
    [212.500, 225.000) = 0 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 3 
    [250.000, 262.500) = 5 
    [262.500, 275.000) = 1 
    [275.000, 287.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    165.675 ms/op
     p(50.0000) =    195.428 ms/op
     p(90.0000) =    258.343 ms/op
     p(95.0000) =    267.256 ms/op
     p(99.0000) =    283.640 ms/op
     p(99.9000) =    283.640 ms/op
     p(99.9900) =    283.640 ms/op
     p(99.9990) =    283.640 ms/op
     p(99.9999) =    283.640 ms/op
    p(100.0000) =    283.640 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 65.63% complete, ETA 00:08:02
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 150, 197, 197, 197, 197, 197, 197 ms/op
# Warmup Iteration   2: n = 6, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 146, 201, 201, 201, 201, 201, 201 ms/op
# Warmup Iteration   3: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 128, 129, 129, 129, 129, 129, 129 ms/op
Iteration   1: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 144, 208, 208, 208, 208, 208, 208 ms/op
Iteration   2: n = 7, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 128, 145, 145, 145, 145, 145, 145 ms/op
Iteration   3: n = 6, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 145, 204, 204, 204, 204, 204, 204 ms/op

# Run progress: 66.15% complete, ETA 00:07:55
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 165 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 150, 155, 200, 200, 200, 200, 200, 200 ms/op
# Warmup Iteration   2: n = 7, mean = 134 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 132, 144, 144, 144, 144, 144, 144 ms/op
# Warmup Iteration   3: n = 7, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 131, 133, 133, 133, 133, 133, 133 ms/op
Iteration   1: n = 6, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 150, 210, 210, 210, 210, 210, 210 ms/op
Iteration   2: n = 6, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 141, 200, 200, 200, 200, 200, 200 ms/op
Iteration   3: n = 5, mean = 184 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 168, 240, 240, 240, 240, 240, 240 ms/op

# Run progress: 66.67% complete, ETA 00:07:47
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 188 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 159, 257, 257, 257, 257, 257, 257 ms/op
# Warmup Iteration   2: n = 7, mean = 141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 139, 152, 152, 152, 152, 152, 152 ms/op
# Warmup Iteration   3: n = 6, mean = 171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 151, 219, 219, 219, 219, 219, 219 ms/op
Iteration   1: n = 5, mean = 185 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 150, 192, 222, 222, 222, 222, 222, 222 ms/op
Iteration   2: n = 5, mean = 188 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 152, 192, 214, 214, 214, 214, 214, 214 ms/op
Iteration   3: n = 6, mean = 171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 152, 152, 210, 210, 210, 210, 210, 210 ms/op


Result "write":
  N = 53
  mean =    161.852 ±(99.9%) 15.328 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 13 
    [137.500, 150.000) = 14 
    [150.000, 162.500) = 9 
    [162.500, 175.000) = 2 
    [175.000, 187.500) = 0 
    [187.500, 200.000) = 3 
    [200.000, 212.500) = 7 
    [212.500, 225.000) = 4 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 1 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    127.271 ms/op
     p(50.0000) =    149.946 ms/op
     p(90.0000) =    212.441 ms/op
     p(95.0000) =    216.714 ms/op
     p(99.0000) =    240.124 ms/op
     p(99.9000) =    240.124 ms/op
     p(99.9900) =    240.124 ms/op
     p(99.9990) =    240.124 ms/op
     p(99.9999) =    240.124 ms/op
    p(100.0000) =    240.124 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 67.19% complete, ETA 00:07:39
# Fork: 1 of 3
# Warmup Iteration   1: n = 3, mean = 246 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 200, 207, 330, 330, 330, 330, 330, 330 ms/op
# Warmup Iteration   2: n = 5, mean = 195 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 171, 176, 255, 255, 255, 255, 255, 255 ms/op
# Warmup Iteration   3: n = 4, mean = 227 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 194, 226, 262, 262, 262, 262, 262, 262 ms/op
Iteration   1: n = 5, mean = 224 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 194, 208, 268, 268, 268, 268, 268, 268 ms/op
Iteration   2: n = 4, mean = 233 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 193, 228, 282, 282, 282, 282, 282, 282 ms/op
Iteration   3: n = 5, mean = 211 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 182, 206, 261, 261, 261, 261, 261, 261 ms/op

# Run progress: 67.71% complete, ETA 00:07:32
# Fork: 2 of 3
# Warmup Iteration   1: n = 3, mean = 241 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 189, 207, 327, 327, 327, 327, 327, 327 ms/op
# Warmup Iteration   2: n = 4, mean = 239 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 201, 229, 297, 297, 297, 297, 297, 297 ms/op
# Warmup Iteration   3: n = 5, mean = 219 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 199, 212, 260, 260, 260, 260, 260, 260 ms/op
Iteration   1: n = 4, mean = 233 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 210, 233, 257, 257, 257, 257, 257, 257 ms/op
Iteration   2: n = 5, mean = 188 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 178, 185, 205, 205, 205, 205, 205, 205 ms/op
Iteration   3: n = 4, mean = 234 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 208, 210, 307, 307, 307, 307, 307, 307 ms/op

# Run progress: 68.23% complete, ETA 00:07:25
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 264 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 207, 247, 339, 339, 339, 339, 339, 339 ms/op
# Warmup Iteration   2: n = 5, mean = 216 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 196, 204, 270, 270, 270, 270, 270, 270 ms/op
# Warmup Iteration   3: n = 5, mean = 190 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 180, 183, 205, 205, 205, 205, 205, 205 ms/op
Iteration   1: n = 4, mean = 240 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 203, 249, 260, 260, 260, 260, 260, 260 ms/op
Iteration   2: n = 5, mean = 212 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 181, 205, 266, 266, 266, 266, 266, 266 ms/op
Iteration   3: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 177, 179, 179, 179, 179, 179, 179, 179 ms/op


Result "write":
  N = 42
  mean =    214.552 ±(99.9%) 18.601 ms/op

  Histogram, ms/op:
    [100.000, 125.000) = 0 
    [125.000, 150.000) = 0 
    [150.000, 175.000) = 0 
    [175.000, 200.000) = 15 
    [200.000, 225.000) = 15 
    [225.000, 250.000) = 2 
    [250.000, 275.000) = 8 
    [275.000, 300.000) = 1 
    [300.000, 325.000) = 1 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    176.685 ms/op
     p(50.0000) =    205.390 ms/op
     p(90.0000) =    264.687 ms/op
     p(95.0000) =    279.983 ms/op
     p(99.0000) =    307.233 ms/op
     p(99.9000) =    307.233 ms/op
     p(99.9900) =    307.233 ms/op
     p(99.9990) =    307.233 ms/op
     p(99.9999) =    307.233 ms/op
    p(100.0000) =    307.233 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 68.75% complete, ETA 00:07:17
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 186 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 158, 179, 226, 226, 226, 226, 226, 226 ms/op
# Warmup Iteration   2: n = 6, mean = 181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 162, 165, 220, 220, 220, 220, 220, 220 ms/op
# Warmup Iteration   3: n = 6, mean = 180 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 157, 165, 219, 219, 219, 219, 219, 219 ms/op
Iteration   1: n = 5, mean = 186 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 158, 169, 220, 220, 220, 220, 220, 220 ms/op
Iteration   2: n = 5, mean = 197 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 163, 210, 228, 228, 228, 228, 228, 228 ms/op
Iteration   3: n = 5, mean = 185 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 158, 163, 220, 220, 220, 220, 220, 220 ms/op

# Run progress: 69.27% complete, ETA 00:07:10
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 150, 155, 237, 237, 237, 237, 237, 237 ms/op
# Warmup Iteration   2: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 151, 205, 205, 205, 205, 205, 205 ms/op
# Warmup Iteration   3: n = 7, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 133, 134, 134, 134, 134, 134, 134 ms/op
Iteration   1: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 151, 209, 209, 209, 209, 209, 209 ms/op
Iteration   2: n = 7, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 132, 134, 134, 134, 134, 134, 134 ms/op
Iteration   3: n = 6, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 150, 197, 197, 197, 197, 197, 197 ms/op

# Run progress: 69.79% complete, ETA 00:07:02
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 157, 186, 186, 186, 186, 186, 186 ms/op
# Warmup Iteration   2: n = 6, mean = 173 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 152, 155, 213, 213, 213, 213, 213, 213 ms/op
# Warmup Iteration   3: n = 6, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 149, 206, 206, 206, 206, 206, 206 ms/op
Iteration   1: n = 6, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 156, 187, 187, 187, 187, 187, 187 ms/op
Iteration   2: n = 5, mean = 184 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 151, 202, 209, 209, 209, 209, 209, 209 ms/op
Iteration   3: n = 6, mean = 166 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 151, 153, 194, 194, 194, 194, 194, 194 ms/op


Result "write":
  N = 51
  mean =    166.014 ±(99.9%) 14.915 ms/op

  Histogram, ms/op:
    [120.000, 130.000) = 1 
    [130.000, 140.000) = 10 
    [140.000, 150.000) = 3 
    [150.000, 160.000) = 16 
    [160.000, 170.000) = 6 
    [170.000, 180.000) = 0 
    [180.000, 190.000) = 1 
    [190.000, 200.000) = 3 
    [200.000, 210.000) = 5 
    [210.000, 220.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    128.319 ms/op
     p(50.0000) =    155.189 ms/op
     p(90.0000) =    220.044 ms/op
     p(95.0000) =    221.512 ms/op
     p(99.0000) =    227.541 ms/op
     p(99.9000) =    227.541 ms/op
     p(99.9900) =    227.541 ms/op
     p(99.9990) =    227.541 ms/op
     p(99.9999) =    227.541 ms/op
    p(100.0000) =    227.541 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 70.31% complete, ETA 00:06:55
# Fork: 1 of 3
# Warmup Iteration   1: n = 3, mean = 252 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 210, 249, 296, 296, 296, 296, 296, 296 ms/op
# Warmup Iteration   2: n = 4, mean = 239 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 203, 225, 303, 303, 303, 303, 303, 303 ms/op
# Warmup Iteration   3: n = 5, mean = 201 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 177, 205, 216, 216, 216, 216, 216, 216 ms/op
Iteration   1: n = 5, mean = 213 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 181, 201, 255, 255, 255, 255, 255, 255 ms/op
Iteration   2: n = 6, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 176, 182, 182, 182, 182, 182, 182 ms/op
Iteration   3: n = 4, mean = 229 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 200, 229, 259, 259, 259, 259, 259, 259 ms/op

# Run progress: 70.83% complete, ETA 00:06:48
# Fork: 2 of 3
# Warmup Iteration   1: n = 3, mean = 221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 197, 210, 256, 256, 256, 256, 256, 256 ms/op
# Warmup Iteration   2: n = 5, mean = 203 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 196, 255, 255, 255, 255, 255, 255 ms/op
# Warmup Iteration   3: n = 5, mean = 202 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 171, 196, 252, 252, 252, 252, 252, 252 ms/op
Iteration   1: n = 5, mean = 209 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 185, 185, 250, 250, 250, 250, 250, 250 ms/op
Iteration   2: n = 5, mean = 194 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 171, 185, 242, 242, 242, 242, 242, 242 ms/op
Iteration   3: n = 5, mean = 203 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 191, 259, 259, 259, 259, 259, 259 ms/op

# Run progress: 71.35% complete, ETA 00:06:40
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 238 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 199, 240, 274, 274, 274, 274, 274, 274 ms/op
# Warmup Iteration   2: n = 5, mean = 186 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 174, 185, 199, 199, 199, 199, 199, 199 ms/op
# Warmup Iteration   3: n = 5, mean = 183 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 174, 187, 189, 189, 189, 189, 189, 189 ms/op
Iteration   1: n = 5, mean = 216 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 186, 209, 266, 266, 266, 266, 266, 266 ms/op
Iteration   2: n = 5, mean = 185 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 184, 185, 186, 186, 186, 186, 186, 186 ms/op
Iteration   3: n = 5, mean = 184 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 182, 184, 186, 186, 186, 186, 186, 186 ms/op


Result "write":
  N = 45
  mean =    199.795 ±(99.9%) 14.762 ms/op

  Histogram, ms/op:
    [160.000, 170.000) = 2 
    [170.000, 180.000) = 5 
    [180.000, 190.000) = 20 
    [190.000, 200.000) = 3 
    [200.000, 210.000) = 4 
    [210.000, 220.000) = 2 
    [220.000, 230.000) = 1 
    [230.000, 240.000) = 1 
    [240.000, 250.000) = 2 
    [250.000, 260.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =    168.559 ms/op
     p(50.0000) =    185.598 ms/op
     p(90.0000) =    255.853 ms/op
     p(95.0000) =    259.182 ms/op
     p(99.0000) =    265.814 ms/op
     p(99.9000) =    265.814 ms/op
     p(99.9900) =    265.814 ms/op
     p(99.9990) =    265.814 ms/op
     p(99.9999) =    265.814 ms/op
    p(100.0000) =    265.814 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 71.88% complete, ETA 00:06:33
# Fork: 1 of 3
# Warmup Iteration   1: n = 7, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 142, 225, 225, 225, 225, 225, 225 ms/op
# Warmup Iteration   2: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 142, 193, 193, 193, 193, 193, 193 ms/op
# Warmup Iteration   3: n = 7, mean = 149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 142, 208, 208, 208, 208, 208, 208 ms/op
Iteration   1: n = 7, mean = 149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 142, 207, 207, 207, 207, 207, 207 ms/op
Iteration   2: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 127, 131, 131, 131, 131, 131, 131 ms/op
Iteration   3: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 127, 129, 129, 129, 129, 129, 129 ms/op

# Run progress: 72.40% complete, ETA 00:06:25
# Fork: 2 of 3
# Warmup Iteration   1: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 136, 220, 220, 220, 220, 220, 220 ms/op
# Warmup Iteration   2: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 121, 121, 124, 124, 124, 124, 124, 124 ms/op
# Warmup Iteration   3: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 120, 121, 122, 122, 122, 122, 122, 122 ms/op
Iteration   1: n = 7, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 138, 204, 204, 204, 204, 204, 204 ms/op
Iteration   2: n = 8, mean = 141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 135, 200, 200, 200, 200, 200, 200 ms/op
Iteration   3: n = 7, mean = 143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 136, 200, 200, 200, 200, 200, 200 ms/op

# Run progress: 72.92% complete, ETA 00:06:18
# Fork: 3 of 3
# Warmup Iteration   1: n = 7, mean = 151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 138, 233, 233, 233, 233, 233, 233 ms/op
# Warmup Iteration   2: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 138, 203, 203, 203, 203, 203, 203 ms/op
# Warmup Iteration   3: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 138, 203, 203, 203, 203, 203, 203 ms/op
Iteration   1: n = 7, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 137, 203, 203, 203, 203, 203, 203 ms/op
Iteration   2: n = 7, mean = 143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 136, 206, 206, 206, 206, 206, 206 ms/op
Iteration   3: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 138, 200, 200, 200, 200, 200, 200 ms/op


Result "readCrc":
  N = 66
  mean =    142.579 ±(99.9%) 10.136 ms/op

  Histogram, ms/op:
    [120.000, 125.000) = 4 
    [125.000, 130.000) = 18 
    [130.000, 135.000) = 3 
    [135.000, 140.000) = 24 
    [140.000, 145.000) = 7 
    [145.000, 150.000) = 1 
    [150.000, 155.000) = 0 
    [155.000, 160.000) = 0 
    [160.000, 165.000) = 0 
    [165.000, 170.000) = 0 
    [170.000, 175.000) = 0 
    [175.000, 180.000) = 0 
    [180.000, 185.000) = 1 
    [185.000, 190.000) = 0 
    [190.000, 195.000) = 0 
    [195.000, 200.000) = 1 
    [200.000, 205.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =    122.290 ms/op
     p(50.0000) =    136.053 ms/op
     p(90.0000) =    200.016 ms/op
     p(95.0000) =    203.502 ms/op
     p(99.0000) =    206.569 ms/op
     p(99.9000) =    206.569 ms/op
     p(99.9900) =    206.569 ms/op
     p(99.9990) =    206.569 ms/op
     p(99.9999) =    206.569 ms/op
    p(100.0000) =    206.569 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 73.44% complete, ETA 00:06:11
# Fork: 1 of 3
# Warmup Iteration   1: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 102, 190, 190, 190, 190, 190, 190 ms/op
# Warmup Iteration   2: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 100, 157, 163, 163, 163, 163, 163 ms/op
# Warmup Iteration   3: n = 12, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 90, 94, 94, 94, 94, 94, 94 ms/op
Iteration   1: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 100, 158, 164, 164, 164, 164, 164 ms/op
Iteration   2: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 90, 90, 90, 90, 90, 90, 90 ms/op
Iteration   3: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 90, 90, 90, 90, 90, 90, 90 ms/op

# Run progress: 73.96% complete, ETA 00:06:03
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 102, 125, 128, 128, 128, 128, 128 ms/op
# Warmup Iteration   2: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 101, 159, 165, 165, 165, 165, 165 ms/op
# Warmup Iteration   3: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 101, 157, 163, 163, 163, 163, 163 ms/op
Iteration   1: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 90, 90, 90, 90, 90, 90, 90 ms/op
Iteration   2: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 90, 90, 90, 90, 90, 90, 90 ms/op
Iteration   3: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 90, 91, 91, 91, 91, 91, 91 ms/op

# Run progress: 74.48% complete, ETA 00:05:56
# Fork: 3 of 3
# Warmup Iteration   1: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 105, 191, 191, 191, 191, 191, 191 ms/op
# Warmup Iteration   2: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 95, 157, 158, 158, 158, 158, 158 ms/op
# Warmup Iteration   3: n = 9, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 105, 147, 147, 147, 147, 147, 147 ms/op
Iteration   1: n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 103, 165, 165, 165, 165, 165, 165 ms/op
Iteration   2: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 102, 163, 163, 163, 163, 163, 163 ms/op
Iteration   3: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 97, 106, 164, 164, 164, 164, 164, 164 ms/op


Result "readCrc":
  N = 97
  mean =     97.977 ±(99.9%) 5.792 ms/op

  Histogram, ms/op:
    [ 80.000,  85.000) = 0 
    [ 85.000,  90.000) = 51 
    [ 90.000,  95.000) = 11 
    [ 95.000, 100.000) = 6 
    [100.000, 105.000) = 14 
    [105.000, 110.000) = 7 
    [110.000, 115.000) = 0 
    [115.000, 120.000) = 2 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 2 
    [145.000, 150.000) = 0 
    [150.000, 155.000) = 0 
    [155.000, 160.000) = 0 
    [160.000, 165.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =     88.211 ms/op
     p(50.0000) =     89.915 ms/op
     p(90.0000) =    106.876 ms/op
     p(95.0000) =    144.835 ms/op
     p(99.0000) =    164.889 ms/op
     p(99.9000) =    164.889 ms/op
     p(99.9900) =    164.889 ms/op
     p(99.9990) =    164.889 ms/op
     p(99.9999) =    164.889 ms/op
    p(100.0000) =    164.889 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 75.00% complete, ETA 00:05:49
# Fork: 1 of 3
# Warmup Iteration   1: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 104, 128, 129, 129, 129, 129, 129 ms/op
# Warmup Iteration   2: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 94, 95, 95, 95, 95, 95, 95 ms/op
# Warmup Iteration   3: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 103, 153, 159, 159, 159, 159, 159 ms/op
Iteration   1: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 119, 165, 165, 165, 165, 165, 165 ms/op
Iteration   2: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 107, 142, 142, 142, 142, 142, 142 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 106, 162, 162, 162, 162, 162, 162 ms/op

# Run progress: 75.52% complete, ETA 00:05:41
# Fork: 2 of 3
# Warmup Iteration   1: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 112, 120, 194, 194, 194, 194, 194, 194 ms/op
# Warmup Iteration   2: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 107, 109, 109, 109, 109, 109, 109 ms/op
# Warmup Iteration   3: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 107, 163, 163, 163, 163, 163, 163 ms/op
Iteration   1: n = 11, mean = 95 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 95, 96, 96, 96, 96, 96, 96 ms/op
Iteration   2: n = 10, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 107, 144, 145, 145, 145, 145, 145 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 118, 121, 155, 155, 155, 155, 155, 155 ms/op

# Run progress: 76.04% complete, ETA 00:05:34
# Fork: 3 of 3
# Warmup Iteration   1: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 104, 126, 127, 127, 127, 127, 127 ms/op
# Warmup Iteration   2: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 93, 136, 137, 137, 137, 137, 137 ms/op
# Warmup Iteration   3: n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 103, 157, 157, 157, 157, 157, 157 ms/op
Iteration   1: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 115, 170, 170, 170, 170, 170, 170 ms/op
Iteration   2: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 104, 156, 161, 161, 161, 161, 161 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 12, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 91, 91, 91, 91, 91, 91, 91 ms/op


Result "readKey":
  N = 86
  mean =    110.666 ±(99.9%) 7.268 ms/op

  Histogram, ms/op:
    [ 90.000,  95.000) = 26 
    [ 95.000, 100.000) = 6 
    [100.000, 105.000) = 6 
    [105.000, 110.000) = 14 
    [110.000, 115.000) = 1 
    [115.000, 120.000) = 16 
    [120.000, 125.000) = 4 
    [125.000, 130.000) = 1 
    [130.000, 135.000) = 3 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 1 
    [145.000, 150.000) = 2 
    [150.000, 155.000) = 0 
    [155.000, 160.000) = 2 
    [160.000, 165.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     90.309 ms/op
     p(50.0000) =    105.775 ms/op
     p(90.0000) =    143.026 ms/op
     p(95.0000) =    160.301 ms/op
     p(99.0000) =    169.607 ms/op
     p(99.9000) =    169.607 ms/op
     p(99.9900) =    169.607 ms/op
     p(99.9990) =    169.607 ms/op
     p(99.9999) =    169.607 ms/op
    p(100.0000) =    169.607 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 76.56% complete, ETA 00:05:27
# Fork: 1 of 3
# Warmup Iteration   1: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 101, 132, 134, 134, 134, 134, 134 ms/op
# Warmup Iteration   2: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 105, 157, 162, 162, 162, 162, 162 ms/op
# Warmup Iteration   3: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 92, 93, 93, 93, 93, 93, 93 ms/op
Iteration   1: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 104, 153, 158, 158, 158, 158, 158 ms/op
Iteration   2: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 92, 95, 95, 95, 95, 95, 95 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 105, 156, 161, 161, 161, 161, 161 ms/op

# Run progress: 77.08% complete, ETA 00:05:20
# Fork: 2 of 3
# Warmup Iteration   1: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 109, 119, 208, 208, 208, 208, 208, 208 ms/op
# Warmup Iteration   2: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 115, 121, 176, 176, 176, 176, 176, 176 ms/op
# Warmup Iteration   3: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 112, 122, 172, 172, 172, 172, 172, 172 ms/op
Iteration   1: n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 109, 110, 142, 142, 142, 142, 142, 142 ms/op
Iteration   2: n = 8, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 120, 121, 177, 177, 177, 177, 177, 177 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 10, mean = 110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 109, 109, 117, 117, 117, 117, 117, 117 ms/op

# Run progress: 77.60% complete, ETA 00:05:12
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 117, 198, 198, 198, 198, 198, 198 ms/op
# Warmup Iteration   2: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 109, 168, 168, 168, 168, 168, 168 ms/op
# Warmup Iteration   3: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 117, 149, 149, 149, 149, 149, 149 ms/op
Iteration   1: n = 9, mean = 120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 103, 169, 169, 169, 169, 169, 169 ms/op
Iteration   2: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 117, 148, 148, 148, 148, 148, 148 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-false
n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 105, 108, 109, 109, 109, 109, 109 ms/op


Result "readKey":
  N = 86
  mean =    111.739 ±(99.9%) 6.681 ms/op

  Histogram, ms/op:
    [ 90.000,  95.000) = 13 
    [ 95.000, 100.000) = 2 
    [100.000, 105.000) = 23 
    [105.000, 110.000) = 21 
    [110.000, 115.000) = 4 
    [115.000, 120.000) = 8 
    [120.000, 125.000) = 4 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 3 
    [140.000, 145.000) = 1 
    [145.000, 150.000) = 2 
    [150.000, 155.000) = 0 
    [155.000, 160.000) = 1 
    [160.000, 165.000) = 2 
    [165.000, 170.000) = 1 
    [170.000, 175.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     90.046 ms/op
     p(50.0000) =    107.610 ms/op
     p(90.0000) =    139.618 ms/op
     p(95.0000) =    160.026 ms/op
     p(99.0000) =    176.685 ms/op
     p(99.9000) =    176.685 ms/op
     p(99.9900) =    176.685 ms/op
     p(99.9990) =    176.685 ms/op
     p(99.9999) =    176.685 ms/op
    p(100.0000) =    176.685 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readRev
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 78.13% complete, ETA 00:05:05
# Fork: 1 of 3
# Warmup Iteration   1: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 32, 38, 61, 76, 76, 76, 76 ms/op
# Warmup Iteration   2: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 32, 45, 56, 58, 58, 58, 58 ms/op
# Warmup Iteration   3: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 31, 39, 53, 62, 62, 62, 62 ms/op
Iteration   1: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 31, 48, 58, 60, 60, 60, 60 ms/op
Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 32, 38, 51, 58, 58, 58, 58 ms/op
Iteration   3: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 32, 39, 52, 61, 61, 61, 61 ms/op

# Run progress: 78.65% complete, ETA 00:04:58
# Fork: 2 of 3
# Warmup Iteration   1: n = 36, mean = 28 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 29, 29, 34, 40, 40, 40, 40 ms/op
# Warmup Iteration   2: n = 39, mean = 26 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 26, 26, 26, 26, 26, 26, 26 ms/op
# Warmup Iteration   3: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 32, 54, 59, 60, 60, 60, 60 ms/op
Iteration   1: n = 28, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 32, 54, 59, 61, 61, 61, 61 ms/op
Iteration   2: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 29, 36, 49, 59, 59, 59, 59 ms/op
Iteration   3: n = 39, mean = 26 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 26, 26, 26, 26, 26, 26, 26 ms/op

# Run progress: 79.17% complete, ETA 00:04:50
# Fork: 3 of 3
# Warmup Iteration   1: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 32, 38, 60, 74, 74, 74, 74 ms/op
# Warmup Iteration   2: n = 35, mean = 29 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 29, 29, 30, 30, 30, 30, 30 ms/op
# Warmup Iteration   3: n = 36, mean = 28 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 28, 28, 29, 29, 29, 29, 29 ms/op
Iteration   1: n = 36, mean = 28 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 28, 28, 29, 29, 29, 29, 29 ms/op
Iteration   2: n = 36, mean = 28 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 28, 28, 28, 29, 29, 29, 29 ms/op
Iteration   3: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 31, 38, 52, 62, 62, 62, 62 ms/op


Result "readRev":
  N = 295
  mean =     31.039 ±(99.9%) 1.224 ms/op

  Histogram, ms/op:
    [20.000, 25.000) = 0 
    [25.000, 30.000) = 171 
    [30.000, 35.000) = 95 
    [35.000, 40.000) = 9 
    [40.000, 45.000) = 4 
    [45.000, 50.000) = 6 
    [50.000, 55.000) = 2 
    [55.000, 60.000) = 4 
    [60.000, 65.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =     25.559 ms/op
     p(50.0000) =     29.196 ms/op
     p(90.0000) =     35.154 ms/op
     p(95.0000) =     46.137 ms/op
     p(99.0000) =     61.017 ms/op
     p(99.9000) =     61.735 ms/op
     p(99.9900) =     61.735 ms/op
     p(99.9990) =     61.735 ms/op
     p(99.9999) =     61.735 ms/op
    p(100.0000) =     61.735 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readRev
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 79.69% complete, ETA 00:04:43
# Fork: 1 of 3
# Warmup Iteration   1: n = 35, mean = 29 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 29, 29, 36, 47, 47, 47, 47 ms/op
# Warmup Iteration   2: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 32, 51, 56, 58, 58, 58, 58 ms/op
# Warmup Iteration   3: n = 37, mean = 27 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 28, 29, 29, 29, 29, 29, 29 ms/op
Iteration   1: n = 30, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 29, 46, 59, 59, 59, 59, 59 ms/op
Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 29, 48, 60, 60, 60, 60, 60 ms/op
Iteration   3: n = 39, mean = 26 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 26, 27, 27, 29, 29, 29, 29 ms/op

# Run progress: 80.21% complete, ETA 00:04:36
# Fork: 2 of 3
# Warmup Iteration   1: n = 35, mean = 29 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 30, 30, 36, 47, 47, 47, 47 ms/op
# Warmup Iteration   2: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 29, 37, 48, 56, 56, 56, 56 ms/op
# Warmup Iteration   3: n = 39, mean = 26 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 26, 26, 26, 27, 27, 27, 27 ms/op
Iteration   1: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 30, 37, 49, 60, 60, 60, 60 ms/op
Iteration   2: n = 38, mean = 27 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 27, 27, 27, 28, 28, 28, 28 ms/op
Iteration   3: n = 39, mean = 26 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 26, 26, 27, 27, 27, 27, 27 ms/op

# Run progress: 80.73% complete, ETA 00:04:28
# Fork: 3 of 3
# Warmup Iteration   1: n = 36, mean = 28 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 29, 29, 35, 47, 47, 47, 47 ms/op
# Warmup Iteration   2: n = 34, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 26, 48, 56, 57, 57, 57, 57 ms/op
# Warmup Iteration   3: n = 36, mean = 28 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 29, 29, 29, 30, 30, 30, 30 ms/op
Iteration   1: n = 39, mean = 26 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 26, 26, 26, 26, 26, 26, 26 ms/op
Iteration   2: n = 39, mean = 26 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 26, 26, 26, 27, 27, 27, 27 ms/op
Iteration   3: n = 39, mean = 26 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 26, 26, 26, 27, 27, 27, 27 ms/op


Result "readRev":
  N = 327
  mean =     27.976 ±(99.9%) 0.919 ms/op

  Histogram, ms/op:
    [20.000, 22.500) = 0 
    [22.500, 25.000) = 0 
    [25.000, 27.500) = 235 
    [27.500, 30.000) = 64 
    [30.000, 32.500) = 10 
    [32.500, 35.000) = 4 
    [35.000, 37.500) = 0 
    [37.500, 40.000) = 4 
    [40.000, 42.500) = 0 
    [42.500, 45.000) = 2 
    [45.000, 47.500) = 2 
    [47.500, 50.000) = 1 
    [50.000, 52.500) = 0 
    [52.500, 55.000) = 0 
    [55.000, 57.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =     25.657 ms/op
     p(50.0000) =     26.116 ms/op
     p(90.0000) =     29.596 ms/op
     p(95.0000) =     33.895 ms/op
     p(99.0000) =     59.433 ms/op
     p(99.9000) =     59.965 ms/op
     p(99.9900) =     59.965 ms/op
     p(99.9990) =     59.965 ms/op
     p(99.9999) =     59.965 ms/op
    p(100.0000) =     59.965 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 81.25% complete, ETA 00:04:21
# Fork: 1 of 3
# Warmup Iteration   1: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 39, 40, 46, 49, 49, 49, 49 ms/op
# Warmup Iteration   2: n = 30, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 34, 34, 34, 34, 34, 34 ms/op
# Warmup Iteration   3: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 34, 34, 34, 34, 34, 34 ms/op
Iteration   1: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 42, 62, 65, 65, 65, 65, 65 ms/op
Iteration   2: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 39, 60, 62, 62, 62, 62, 62 ms/op
Iteration   3: n = 25, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 39, 50, 63, 67, 67, 67, 67 ms/op

# Run progress: 81.77% complete, ETA 00:04:14
# Fork: 2 of 3
# Warmup Iteration   1: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 39, 67, 81, 83, 83, 83, 83 ms/op
# Warmup Iteration   2: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 50, 51, 76, 77, 77, 77, 77, 77 ms/op
# Warmup Iteration   3: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 50, 63, 74, 74, 74, 74, 74 ms/op
Iteration   1: n = 22, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 45, 46, 46, 46, 46, 46, 46 ms/op
Iteration   2: n = 22, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 45, 51, 64, 66, 66, 66, 66 ms/op
Iteration   3: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 50, 64, 73, 73, 73, 73, 73 ms/op

# Run progress: 82.29% complete, ETA 00:04:06
# Fork: 3 of 3
# Warmup Iteration   1: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 46, 51, 65, 89, 89, 89, 89, 89 ms/op
# Warmup Iteration   2: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 46, 51, 61, 63, 63, 63, 63 ms/op
# Warmup Iteration   3: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 39, 39, 39, 39, 39, 39, 39 ms/op
Iteration   1: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 39, 66, 70, 71, 71, 71, 71 ms/op
Iteration   2: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 50, 63, 71, 72, 72, 72, 72 ms/op
Iteration   3: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 50, 59, 72, 72, 72, 72, 72 ms/op


Result "readSeq":
  N = 198
  mean =     46.410 ±(99.9%) 1.959 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 14 
    [35.000, 40.000) = 47 
    [40.000, 45.000) = 6 
    [45.000, 50.000) = 51 
    [50.000, 55.000) = 58 
    [55.000, 60.000) = 9 
    [60.000, 65.000) = 5 
    [65.000, 70.000) = 4 
    [70.000, 75.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =     32.735 ms/op
     p(50.0000) =     45.711 ms/op
     p(90.0000) =     55.647 ms/op
     p(95.0000) =     64.691 ms/op
     p(99.0000) =     72.358 ms/op
     p(99.9000) =     73.007 ms/op
     p(99.9900) =     73.007 ms/op
     p(99.9990) =     73.007 ms/op
     p(99.9999) =     73.007 ms/op
    p(100.0000) =     73.007 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 82.81% complete, ETA 00:03:59
# Fork: 1 of 3
# Warmup Iteration   1: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 46, 50, 62, 100, 100, 100, 100, 100 ms/op
# Warmup Iteration   2: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 45, 45, 47, 48, 48, 48, 48 ms/op
# Warmup Iteration   3: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 45, 45, 45, 45, 45, 45, 45 ms/op
Iteration   1: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 41, 52, 64, 66, 66, 66, 66 ms/op
Iteration   2: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 50, 59, 65, 66, 66, 66, 66 ms/op
Iteration   3: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 45, 45, 46, 46, 46, 46, 46 ms/op

# Run progress: 83.33% complete, ETA 00:03:52
# Fork: 2 of 3
# Warmup Iteration   1: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 41, 56, 90, 96, 96, 96, 96 ms/op
# Warmup Iteration   2: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 41, 53, 67, 70, 70, 70, 70 ms/op
# Warmup Iteration   3: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 41, 50, 65, 69, 69, 69, 69 ms/op
Iteration   1: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 47, 60, 64, 64, 64, 64 ms/op
Iteration   2: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 38, 58, 68, 70, 70, 70, 70 ms/op
Iteration   3: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 42, 54, 69, 71, 71, 71, 71 ms/op

# Run progress: 83.85% complete, ETA 00:03:44
# Fork: 3 of 3
# Warmup Iteration   1: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 39, 50, 79, 88, 88, 88, 88 ms/op
# Warmup Iteration   2: n = 30, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 34, 35, 35, 35, 35, 35 ms/op
# Warmup Iteration   3: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 39, 65, 68, 69, 69, 69, 69 ms/op
Iteration   1: n = 20, mean = 50 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 50, 67, 72, 72, 72, 72, 72 ms/op
Iteration   2: n = 20, mean = 50 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 50, 64, 67, 67, 67, 67, 67 ms/op
Iteration   3: n = 25, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 39, 50, 64, 67, 67, 67, 67 ms/op


Result "readSeq":
  N = 204
  mean =     44.671 ±(99.9%) 1.861 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 2 
    [35.000, 40.000) = 69 
    [40.000, 45.000) = 46 
    [45.000, 50.000) = 30 
    [50.000, 55.000) = 36 
    [55.000, 60.000) = 10 
    [60.000, 65.000) = 3 
    [65.000, 70.000) = 5 
    [70.000, 75.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =     33.161 ms/op
     p(50.0000) =     41.648 ms/op
     p(90.0000) =     55.411 ms/op
     p(95.0000) =     63.816 ms/op
     p(99.0000) =     71.251 ms/op
     p(99.9000) =     72.090 ms/op
     p(99.9900) =     72.090 ms/op
     p(99.9990) =     72.090 ms/op
     p(99.9999) =     72.090 ms/op
    p(100.0000) =     72.090 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 84.38% complete, ETA 00:03:37
# Fork: 1 of 3
# Warmup Iteration   1: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 63, 95, 96, 96, 96, 96, 96 ms/op
# Warmup Iteration   2: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 63, 106, 108, 108, 108, 108, 108 ms/op
# Warmup Iteration   3: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 63, 90, 111, 111, 111, 111, 111 ms/op
Iteration   1: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 57, 95, 110, 110, 110, 110, 110 ms/op
Iteration   2: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 73, 105, 110, 110, 110, 110, 110 ms/op
Iteration   3: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 64, 90, 112, 112, 112, 112, 112 ms/op

# Run progress: 84.90% complete, ETA 00:03:30
# Fork: 2 of 3
# Warmup Iteration   1: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 71, 82, 94, 94, 94, 94, 94 ms/op
# Warmup Iteration   2: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 63, 64, 64, 64, 64, 64, 64 ms/op
# Warmup Iteration   3: n = 13, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 72, 73, 112, 114, 114, 114, 114, 114 ms/op
Iteration   1: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 73, 90, 118, 118, 118, 118, 118, 118 ms/op
Iteration   2: n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 72, 83, 99, 99, 99, 99, 99, 99 ms/op
Iteration   3: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 64, 72, 72, 72, 72, 72, 72 ms/op

# Run progress: 85.42% complete, ETA 00:03:22
# Fork: 3 of 3
# Warmup Iteration   1: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 64, 105, 148, 148, 148, 148, 148 ms/op
# Warmup Iteration   2: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 59, 111, 113, 113, 113, 113, 113 ms/op
# Warmup Iteration   3: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 71, 100, 117, 117, 117, 117, 117 ms/op
Iteration   1: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 64, 91, 92, 92, 92, 92, 92 ms/op
Iteration   2: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 56, 63, 64, 64, 64, 64, 64 ms/op
Iteration   3: n = 14, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 70, 113, 115, 115, 115, 115, 115 ms/op


Result "readXxh64":
  N = 129
  mean =     71.425 ±(99.9%) 4.402 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 25 
    [ 60.000,  65.000) = 38 
    [ 65.000,  70.000) = 8 
    [ 70.000,  75.000) = 26 
    [ 75.000,  80.000) = 4 
    [ 80.000,  85.000) = 6 
    [ 85.000,  90.000) = 9 
    [ 90.000,  95.000) = 3 
    [ 95.000, 100.000) = 2 
    [100.000, 105.000) = 1 
    [105.000, 110.000) = 2 
    [110.000, 115.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =     55.640 ms/op
     p(50.0000) =     69.075 ms/op
     p(90.0000) =     90.309 ms/op
     p(95.0000) =    109.904 ms/op
     p(99.0000) =    118.096 ms/op
     p(99.9000) =    118.096 ms/op
     p(99.9900) =    118.096 ms/op
     p(99.9990) =    118.096 ms/op
     p(99.9999) =    118.096 ms/op
    p(100.0000) =    118.096 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 85.94% complete, ETA 00:03:15
# Fork: 1 of 3
# Warmup Iteration   1: n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 84, 150, 165, 165, 165, 165, 165 ms/op
# Warmup Iteration   2: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 72, 74, 77, 77, 77, 77, 77, 77 ms/op
# Warmup Iteration   3: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 73, 75, 77, 77, 77, 77, 77, 77 ms/op
Iteration   1: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 69, 111, 120, 120, 120, 120, 120 ms/op
Iteration   2: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 79, 81, 104, 109, 109, 109, 109, 109 ms/op
Iteration   3: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 70, 94, 112, 112, 112, 112, 112 ms/op

# Run progress: 86.46% complete, ETA 00:03:08
# Fork: 2 of 3
# Warmup Iteration   1: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 65, 77, 95, 95, 95, 95, 95 ms/op
# Warmup Iteration   2: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 57, 90, 97, 97, 97, 97, 97 ms/op
# Warmup Iteration   3: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 75, 106, 110, 110, 110, 110, 110 ms/op
Iteration   1: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 65, 91, 112, 112, 112, 112, 112 ms/op
Iteration   2: n = 15, mean = 71 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 64, 95, 100, 100, 100, 100, 100 ms/op
Iteration   3: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 57, 64, 65, 65, 65, 65, 65 ms/op

# Run progress: 86.98% complete, ETA 00:03:01
# Fork: 3 of 3
# Warmup Iteration   1: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 62, 74, 97, 97, 97, 97, 97 ms/op
# Warmup Iteration   2: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 55, 57, 57, 57, 57, 57, 57 ms/op
# Warmup Iteration   3: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 55, 55, 55, 55, 55, 55, 55 ms/op
Iteration   1: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 55, 56, 56, 56, 56, 56, 56 ms/op
Iteration   2: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 55, 56, 56, 56, 56, 56, 56 ms/op
Iteration   3: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 55, 55, 56, 56, 56, 56, 56 ms/op


Result "readXxh64":
  N = 143
  mean =     65.012 ±(99.9%) 3.840 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 35 
    [ 55.000,  60.000) = 37 
    [ 60.000,  65.000) = 23 
    [ 65.000,  70.000) = 16 
    [ 70.000,  75.000) = 7 
    [ 75.000,  80.000) = 4 
    [ 80.000,  85.000) = 8 
    [ 85.000,  90.000) = 2 
    [ 90.000,  95.000) = 4 
    [ 95.000, 100.000) = 3 
    [100.000, 105.000) = 0 
    [105.000, 110.000) = 1 
    [110.000, 115.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     54.723 ms/op
     p(50.0000) =     59.179 ms/op
     p(90.0000) =     81.763 ms/op
     p(95.0000) =     95.656 ms/op
     p(99.0000) =    116.471 ms/op
     p(99.9000) =    119.931 ms/op
     p(99.9900) =    119.931 ms/op
     p(99.9990) =    119.931 ms/op
     p(99.9999) =    119.931 ms/op
    p(100.0000) =    119.931 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 87.50% complete, ETA 00:02:53
# Fork: 1 of 3
# Warmup Iteration   1: n = 6, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 147, 226, 226, 226, 226, 226, 226 ms/op
# Warmup Iteration   2: n = 7, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 129, 134, 134, 134, 134, 134, 134 ms/op
# Warmup Iteration   3: n = 7, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 130, 131, 131, 131, 131, 131, 131 ms/op
Iteration   1: n = 7, mean = 149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 131, 208, 208, 208, 208, 208, 208 ms/op
Iteration   2: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 147, 180, 180, 180, 180, 180, 180 ms/op
Iteration   3: n = 6, mean = 181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 159, 174, 217, 217, 217, 217, 217, 217 ms/op

# Run progress: 88.02% complete, ETA 00:02:46
# Fork: 2 of 3
# Warmup Iteration   1: n = 5, mean = 199 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 177, 178, 248, 248, 248, 248, 248, 248 ms/op
# Warmup Iteration   2: n = 5, mean = 193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 152, 158, 326, 326, 326, 326, 326, 326 ms/op
# Warmup Iteration   3: n = 5, mean = 190 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 172, 179, 233, 233, 233, 233, 233, 233 ms/op
Iteration   1: n = 5, mean = 201 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 171, 172, 262, 262, 262, 262, 262, 262 ms/op
Iteration   2: n = 5, mean = 207 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 180, 186, 298, 298, 298, 298, 298, 298 ms/op
Iteration   3: n = 6, mean = 166 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 157, 162, 191, 191, 191, 191, 191, 191 ms/op

# Run progress: 88.54% complete, ETA 00:02:39
# Fork: 3 of 3
# Warmup Iteration   1: n = 5, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 147, 293, 293, 293, 293, 293, 293 ms/op
# Warmup Iteration   2: n = 7, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 131, 139, 139, 139, 139, 139, 139 ms/op
# Warmup Iteration   3: n = 6, mean = 172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 168, 203, 203, 203, 203, 203, 203 ms/op
Iteration   1: n = 7, mean = 139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 146, 147, 147, 147, 147, 147, 147 ms/op
Iteration   2: n = 7, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 129, 132, 132, 132, 132, 132, 132 ms/op
Iteration   3: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 129, 130, 130, 130, 130, 130, 130 ms/op


Result "write":
  N = 58
  mean =    156.868 ±(99.9%) 16.061 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 25 
    [137.500, 150.000) = 7 
    [150.000, 162.500) = 8 
    [162.500, 175.000) = 5 
    [175.000, 187.500) = 6 
    [187.500, 200.000) = 1 
    [200.000, 212.500) = 2 
    [212.500, 225.000) = 1 
    [225.000, 237.500) = 1 
    [237.500, 250.000) = 0 
    [250.000, 262.500) = 1 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    127.926 ms/op
     p(50.0000) =    146.932 ms/op
     p(90.0000) =    205.547 ms/op
     p(95.0000) =    231.775 ms/op
     p(99.0000) =    297.796 ms/op
     p(99.9000) =    297.796 ms/op
     p(99.9900) =    297.796 ms/op
     p(99.9990) =    297.796 ms/op
     p(99.9999) =    297.796 ms/op
    p(100.0000) =    297.796 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 89.06% complete, ETA 00:02:31
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 227 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 192, 206, 305, 305, 305, 305, 305, 305 ms/op
# Warmup Iteration   2: n = 5, mean = 203 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 182, 190, 256, 256, 256, 256, 256, 256 ms/op
# Warmup Iteration   3: n = 5, mean = 211 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 193, 196, 240, 240, 240, 240, 240, 240 ms/op
Iteration   1: n = 5, mean = 218 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 180, 198, 312, 312, 312, 312, 312, 312 ms/op
Iteration   2: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 175, 178, 183, 183, 183, 183, 183, 183 ms/op
Iteration   3: n = 5, mean = 200 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 174, 193, 247, 247, 247, 247, 247, 247 ms/op

# Run progress: 89.58% complete, ETA 00:02:24
# Fork: 2 of 3
# Warmup Iteration   1: n = 5, mean = 190 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 159, 177, 245, 245, 245, 245, 245, 245 ms/op
# Warmup Iteration   2: n = 5, mean = 209 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 170, 192, 252, 252, 252, 252, 252, 252 ms/op
# Warmup Iteration   3: n = 5, mean = 190 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 172, 266, 266, 266, 266, 266, 266 ms/op
Iteration   1: n = 5, mean = 197 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 172, 189, 247, 247, 247, 247, 247, 247 ms/op
Iteration   2: n = 5, mean = 189 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 170, 178, 239, 239, 239, 239, 239, 239 ms/op
Iteration   3: n = 6, mean = 181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 168, 169, 245, 245, 245, 245, 245, 245 ms/op

# Run progress: 90.10% complete, ETA 00:02:17
# Fork: 3 of 3
# Warmup Iteration   1: n = 5, mean = 204 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 193, 267, 267, 267, 267, 267, 267 ms/op
# Warmup Iteration   2: n = 5, mean = 196 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 163, 169, 255, 255, 255, 255, 255, 255 ms/op
# Warmup Iteration   3: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 164, 179, 192, 192, 192, 192, 192, 192 ms/op
Iteration   1: n = 5, mean = 206 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 201, 254, 254, 254, 254, 254, 254 ms/op
Iteration   2: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 170, 170, 171, 171, 171, 171, 171, 171 ms/op
Iteration   3: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 170, 170, 171, 171, 171, 171, 171, 171 ms/op


Result "write":
  N = 49
  mean =    188.770 ±(99.9%) 14.700 ms/op

  Histogram, ms/op:
    [100.000, 125.000) = 0 
    [125.000, 150.000) = 0 
    [150.000, 175.000) = 22 
    [175.000, 200.000) = 18 
    [200.000, 225.000) = 3 
    [225.000, 250.000) = 4 
    [250.000, 275.000) = 1 
    [275.000, 300.000) = 0 
    [300.000, 325.000) = 1 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    167.772 ms/op
     p(50.0000) =    177.996 ms/op
     p(90.0000) =    245.367 ms/op
     p(95.0000) =    250.610 ms/op
     p(99.0000) =    312.476 ms/op
     p(99.9000) =    312.476 ms/op
     p(99.9900) =    312.476 ms/op
     p(99.9990) =    312.476 ms/op
     p(99.9999) =    312.476 ms/op
    p(100.0000) =    312.476 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 90.63% complete, ETA 00:02:10
# Fork: 1 of 3
# Warmup Iteration   1: n = 6, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 155, 196, 196, 196, 196, 196, 196 ms/op
# Warmup Iteration   2: n = 7, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 136, 137, 137, 137, 137, 137, 137 ms/op
# Warmup Iteration   3: n = 7, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 137, 137, 137, 137, 137, 137, 137 ms/op
Iteration   1: n = 6, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 155, 210, 210, 210, 210, 210, 210 ms/op
Iteration   2: n = 7, mean = 137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 137, 139, 139, 139, 139, 139, 139 ms/op
Iteration   3: n = 7, mean = 138 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 137, 142, 142, 142, 142, 142, 142 ms/op

# Run progress: 91.15% complete, ETA 00:02:02
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 148, 224, 224, 224, 224, 224, 224 ms/op
# Warmup Iteration   2: n = 7, mean = 138 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 138, 139, 139, 139, 139, 139, 139 ms/op
# Warmup Iteration   3: n = 6, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 154, 208, 208, 208, 208, 208, 208 ms/op
Iteration   1: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 156, 245, 245, 245, 245, 245, 245 ms/op
Iteration   2: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 150, 152, 152, 152, 152, 152, 152 ms/op
Iteration   3: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 152, 216, 216, 216, 216, 216, 216 ms/op

# Run progress: 91.67% complete, ETA 00:01:55
# Fork: 3 of 3
# Warmup Iteration   1: n = 6, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 148, 189, 189, 189, 189, 189, 189 ms/op
# Warmup Iteration   2: n = 7, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 130, 131, 131, 131, 131, 131, 131 ms/op
# Warmup Iteration   3: n = 7, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 130, 135, 135, 135, 135, 135, 135 ms/op
Iteration   1: n = 6, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 148, 207, 207, 207, 207, 207, 207 ms/op
Iteration   2: n = 7, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 130, 131, 131, 131, 131, 131, 131 ms/op
Iteration   3: n = 7, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 130, 131, 131, 131, 131, 131, 131 ms/op


Result "write":
  N = 59
  mean =    147.891 ±(99.9%) 11.180 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 26 
    [137.500, 150.000) = 17 
    [150.000, 162.500) = 9 
    [162.500, 175.000) = 1 
    [175.000, 187.500) = 0 
    [187.500, 200.000) = 0 
    [200.000, 212.500) = 4 
    [212.500, 225.000) = 1 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 1 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    128.713 ms/op
     p(50.0000) =    138.936 ms/op
     p(90.0000) =    202.899 ms/op
     p(95.0000) =    209.715 ms/op
     p(99.0000) =    245.367 ms/op
     p(99.9000) =    245.367 ms/op
     p(99.9900) =    245.367 ms/op
     p(99.9990) =    245.367 ms/op
     p(99.9999) =    245.367 ms/op
    p(100.0000) =    245.367 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.write
# Parameters: (intKey = true, metaSync = true, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 92.19% complete, ETA 00:01:48
# Fork: 1 of 3
# Warmup Iteration   1: n = 5, mean = 200 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 168, 191, 245, 245, 245, 245, 245, 245 ms/op
# Warmup Iteration   2: n = 5, mean = 189 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 166, 167, 275, 275, 275, 275, 275, 275 ms/op
# Warmup Iteration   3: n = 5, mean = 195 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 171, 198, 213, 213, 213, 213, 213, 213 ms/op
Iteration   1: n = 5, mean = 207 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 174, 210, 268, 268, 268, 268, 268, 268 ms/op
Iteration   2: n = 5, mean = 203 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 193, 261, 261, 261, 261, 261, 261 ms/op
Iteration   3: n = 5, mean = 203 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 198, 247, 247, 247, 247, 247, 247 ms/op

# Run progress: 92.71% complete, ETA 00:01:41
# Fork: 2 of 3
# Warmup Iteration   1: n = 5, mean = 205 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 173, 201, 249, 249, 249, 249, 249, 249 ms/op
# Warmup Iteration   2: n = 5, mean = 207 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 170, 175, 344, 344, 344, 344, 344, 344 ms/op
# Warmup Iteration   3: n = 5, mean = 223 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 196, 204, 261, 261, 261, 261, 261, 261 ms/op
Iteration   1: n = 5, mean = 217 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 181, 196, 318, 318, 318, 318, 318, 318 ms/op
Iteration   2: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 171, 179, 181, 181, 181, 181, 181, 181 ms/op
Iteration   3: n = 5, mean = 228 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 200, 204, 279, 279, 279, 279, 279, 279 ms/op

# Run progress: 93.23% complete, ETA 00:01:33
# Fork: 3 of 3
# Warmup Iteration   1: n = 5, mean = 201 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 166, 192, 246, 246, 246, 246, 246, 246 ms/op
# Warmup Iteration   2: n = 5, mean = 188 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 172, 173, 250, 250, 250, 250, 250, 250 ms/op
# Warmup Iteration   3: n = 4, mean = 234 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 208, 233, 263, 263, 263, 263, 263, 263 ms/op
Iteration   1: n = 5, mean = 210 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 192, 199, 260, 260, 260, 260, 260, 260 ms/op
Iteration   2: n = 5, mean = 202 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 168, 193, 261, 261, 261, 261, 261, 261 ms/op
Iteration   3: n = 5, mean = 198 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 191, 249, 249, 249, 249, 249, 249 ms/op


Result "write":
  N = 46
  mean =    204.558 ±(99.9%) 17.540 ms/op

  Histogram, ms/op:
    [100.000, 125.000) = 0 
    [125.000, 150.000) = 0 
    [150.000, 175.000) = 6 
    [175.000, 200.000) = 25 
    [200.000, 225.000) = 6 
    [225.000, 250.000) = 2 
    [250.000, 275.000) = 5 
    [275.000, 300.000) = 1 
    [300.000, 325.000) = 1 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    167.772 ms/op
     p(50.0000) =    195.428 ms/op
     p(90.0000) =    261.174 ms/op
     p(95.0000) =    275.592 ms/op
     p(99.0000) =    317.719 ms/op
     p(99.9000) =    317.719 ms/op
     p(99.9900) =    317.719 ms/op
     p(99.9990) =    317.719 ms/op
     p(99.9999) =    317.719 ms/op
    p(100.0000) =    317.719 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 93.75% complete, ETA 00:01:26
# Fork: 1 of 3
# Warmup Iteration   1: n = 6, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 146, 193, 193, 193, 193, 193, 193 ms/op
# Warmup Iteration   2: n = 6, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 147, 212, 212, 212, 212, 212, 212 ms/op
# Warmup Iteration   3: n = 6, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 161, 205, 205, 205, 205, 205, 205 ms/op
Iteration   1: n = 6, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 146, 206, 206, 206, 206, 206, 206 ms/op
Iteration   2: n = 6, mean = 172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 155, 167, 207, 207, 207, 207, 207, 207 ms/op
Iteration   3: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 146, 190, 190, 190, 190, 190, 190 ms/op

# Run progress: 94.27% complete, ETA 00:01:19
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 149, 226, 226, 226, 226, 226, 226 ms/op
# Warmup Iteration   2: n = 7, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 130, 152, 152, 152, 152, 152, 152 ms/op
# Warmup Iteration   3: n = 5, mean = 195 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 159, 205, 219, 219, 219, 219, 219, 219 ms/op
Iteration   1: n = 6, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 160, 200, 200, 200, 200, 200, 200 ms/op
Iteration   2: n = 7, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 130, 148, 148, 148, 148, 148, 148 ms/op
Iteration   3: n = 6, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 154, 207, 207, 207, 207, 207, 207 ms/op

# Run progress: 94.79% complete, ETA 00:01:12
# Fork: 3 of 3
# Warmup Iteration   1: n = 6, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 150, 191, 191, 191, 191, 191, 191 ms/op
# Warmup Iteration   2: n = 7, mean = 140 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 132, 186, 186, 186, 186, 186, 186 ms/op
# Warmup Iteration   3: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 165, 206, 206, 206, 206, 206, 206 ms/op
Iteration   1: n = 6, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 151, 169, 214, 214, 214, 214, 214, 214 ms/op
Iteration   2: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 151, 172, 205, 205, 205, 205, 205, 205 ms/op
Iteration   3: n = 7, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 135, 145, 145, 145, 145, 145, 145 ms/op


Result "write":
  N = 57
  mean =    158.151 ±(99.9%) 11.509 ms/op

  Histogram, ms/op:
    [120.000, 130.000) = 4 
    [130.000, 140.000) = 10 
    [140.000, 150.000) = 16 
    [150.000, 160.000) = 11 
    [160.000, 170.000) = 1 
    [170.000, 180.000) = 1 
    [180.000, 190.000) = 2 
    [190.000, 200.000) = 6 
    [200.000, 210.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =    128.057 ms/op
     p(50.0000) =    148.111 ms/op
     p(90.0000) =    201.274 ms/op
     p(95.0000) =    206.622 ms/op
     p(99.0000) =    213.910 ms/op
     p(99.9000) =    213.910 ms/op
     p(99.9900) =    213.910 ms/op
     p(99.9990) =    213.910 ms/op
     p(99.9999) =    213.910 ms/op
    p(100.0000) =    213.910 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = true, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 95.31% complete, ETA 00:01:05
# Fork: 1 of 3
# Warmup Iteration   1: n = 5, mean = 210 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 180, 215, 246, 246, 246, 246, 246, 246 ms/op
# Warmup Iteration   2: n = 5, mean = 190 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 168, 179, 225, 225, 225, 225, 225, 225 ms/op
# Warmup Iteration   3: n = 5, mean = 213 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 186, 214, 242, 242, 242, 242, 242, 242 ms/op
Iteration   1: n = 4, mean = 232 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 210, 228, 261, 261, 261, 261, 261, 261 ms/op
Iteration   2: n = 5, mean = 187 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 182, 183, 203, 203, 203, 203, 203, 203 ms/op
Iteration   3: n = 5, mean = 229 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 193, 208, 295, 295, 295, 295, 295, 295 ms/op

# Run progress: 95.83% complete, ETA 00:00:57
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 225 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 201, 208, 284, 284, 284, 284, 284, 284 ms/op
# Warmup Iteration   2: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 177, 190, 190, 190, 190, 190, 190 ms/op
# Warmup Iteration   3: n = 4, mean = 232 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 208, 231, 258, 258, 258, 258, 258, 258 ms/op
Iteration   1: n = 4, mean = 248 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 206, 236, 316, 316, 316, 316, 316, 316 ms/op
Iteration   2: n = 4, mean = 248 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 201, 260, 271, 271, 271, 271, 271, 271 ms/op
Iteration   3: n = 5, mean = 189 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 190, 203, 203, 203, 203, 203, 203 ms/op

# Run progress: 96.35% complete, ETA 00:00:50
# Fork: 3 of 3
# Warmup Iteration   1: n = 5, mean = 203 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 174, 201, 244, 244, 244, 244, 244, 244 ms/op
# Warmup Iteration   2: n = 4, mean = 229 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 196, 225, 271, 271, 271, 271, 271, 271 ms/op
# Warmup Iteration   3: n = 5, mean = 193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 175, 194, 209, 209, 209, 209, 209, 209 ms/op
Iteration   1: n = 4, mean = 228 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 197, 226, 263, 263, 263, 263, 263, 263 ms/op
Iteration   2: n = 5, mean = 183 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 170, 183, 201, 201, 201, 201, 201, 201 ms/op
Iteration   3: n = 5, mean = 198 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 175, 186, 242, 242, 242, 242, 242, 242 ms/op


Result "write":
  N = 41
  mean =    213.596 ±(99.9%) 20.194 ms/op

  Histogram, ms/op:
    [100.000, 125.000) = 0 
    [125.000, 150.000) = 0 
    [150.000, 175.000) = 2 
    [175.000, 200.000) = 15 
    [200.000, 225.000) = 12 
    [225.000, 250.000) = 3 
    [250.000, 275.000) = 7 
    [275.000, 300.000) = 1 
    [300.000, 325.000) = 1 
    [325.000, 350.000) = 0 
    [350.000, 375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    170.394 ms/op
     p(50.0000) =    202.637 ms/op
     p(90.0000) =    262.563 ms/op
     p(95.0000) =    292.291 ms/op
     p(99.0000) =    315.621 ms/op
     p(99.9000) =    315.621 ms/op
     p(99.9900) =    315.621 ms/op
     p(99.9990) =    315.621 ms/op
     p(99.9999) =    315.621 ms/op
    p(100.0000) =    315.621 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 96.88% complete, ETA 00:00:43
# Fork: 1 of 3
# Warmup Iteration   1: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 156, 224, 224, 224, 224, 224, 224 ms/op
# Warmup Iteration   2: n = 6, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 148, 209, 209, 209, 209, 209, 209 ms/op
# Warmup Iteration   3: n = 7, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 133, 134, 134, 134, 134, 134, 134 ms/op
Iteration   1: n = 7, mean = 134 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 134, 137, 137, 137, 137, 137, 137 ms/op
Iteration   2: n = 6, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 144, 207, 207, 207, 207, 207, 207 ms/op
Iteration   3: n = 6, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 146, 205, 205, 205, 205, 205, 205 ms/op

# Run progress: 97.40% complete, ETA 00:00:36
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 145, 193, 193, 193, 193, 193, 193 ms/op
# Warmup Iteration   2: n = 5, mean = 186 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 202, 222, 222, 222, 222, 222, 222 ms/op
# Warmup Iteration   3: n = 6, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 148, 210, 210, 210, 210, 210, 210 ms/op
Iteration   1: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 128, 132, 132, 132, 132, 132, 132 ms/op
Iteration   2: n = 6, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 138, 200, 200, 200, 200, 200, 200 ms/op
Iteration   3: n = 7, mean = 138 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 142, 148, 148, 148, 148, 148, 148 ms/op

# Run progress: 97.92% complete, ETA 00:00:28
# Fork: 3 of 3
# Warmup Iteration   1: n = 5, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 151, 153, 234, 234, 234, 234, 234, 234 ms/op
# Warmup Iteration   2: n = 7, mean = 137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 134, 151, 151, 151, 151, 151, 151 ms/op
# Warmup Iteration   3: n = 7, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 148, 215, 215, 215, 215, 215, 215 ms/op
Iteration   1: n = 6, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 150, 208, 208, 208, 208, 208, 208 ms/op
Iteration   2: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 151, 170, 204, 204, 204, 204, 204, 204 ms/op
Iteration   3: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 150, 155, 155, 155, 155, 155, 155 ms/op


Result "write":
  N = 59
  mean =    148.171 ±(99.9%) 10.833 ms/op

  Histogram, ms/op:
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 12 
    [130.000, 135.000) = 13 
    [135.000, 140.000) = 3 
    [140.000, 145.000) = 2 
    [145.000, 150.000) = 10 
    [150.000, 155.000) = 8 
    [155.000, 160.000) = 2 
    [160.000, 165.000) = 0 
    [165.000, 170.000) = 0 
    [170.000, 175.000) = 0 
    [175.000, 180.000) = 0 
    [180.000, 185.000) = 1 
    [185.000, 190.000) = 0 
    [190.000, 195.000) = 1 
    [195.000, 200.000) = 1 
    [200.000, 205.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =    126.747 ms/op
     p(50.0000) =    144.179 ms/op
     p(90.0000) =    200.278 ms/op
     p(95.0000) =    204.734 ms/op
     p(99.0000) =    207.618 ms/op
     p(99.9000) =    207.618 ms/op
     p(99.9900) =    207.618 ms/op
     p(99.9990) =    207.618 ms/op
     p(99.9999) =    207.618 ms/op
    p(100.0000) =    207.618 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = false)

# Run progress: 98.44% complete, ETA 00:00:21
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 241 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 204, 220, 318, 318, 318, 318, 318, 318 ms/op
# Warmup Iteration   2: n = 4, mean = 237 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 199, 228, 294, 294, 294, 294, 294, 294 ms/op
# Warmup Iteration   3: n = 5, mean = 219 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 195, 215, 246, 246, 246, 246, 246, 246 ms/op
Iteration   1: n = 4, mean = 230 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 198, 230, 262, 262, 262, 262, 262, 262 ms/op
Iteration   2: n = 5, mean = 188 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 181, 183, 209, 209, 209, 209, 209, 209 ms/op
Iteration   3: n = 5, mean = 212 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 194, 206, 259, 259, 259, 259, 259, 259 ms/op

# Run progress: 98.96% complete, ETA 00:00:14
# Fork: 2 of 3
# Warmup Iteration   1: n = 5, mean = 198 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 189, 239, 239, 239, 239, 239, 239 ms/op
# Warmup Iteration   2: n = 5, mean = 207 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 170, 204, 243, 243, 243, 243, 243, 243 ms/op
# Warmup Iteration   3: n = 6, mean = 177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 170, 176, 185, 185, 185, 185, 185, 185 ms/op
Iteration   1: n = 5, mean = 204 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 171, 195, 250, 250, 250, 250, 250, 250 ms/op
Iteration   2: n = 5, mean = 193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 183, 237, 237, 237, 237, 237, 237 ms/op
Iteration   3: n = 5, mean = 205 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 170, 194, 262, 262, 262, 262, 262, 262 ms/op

# Run progress: 99.48% complete, ETA 00:00:07
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 226 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 198, 206, 293, 293, 293, 293, 293, 293 ms/op
# Warmup Iteration   2: n = 6, mean = 177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 170, 174, 191, 191, 191, 191, 191, 191 ms/op
# Warmup Iteration   3: n = 5, mean = 193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 172, 174, 272, 272, 272, 272, 272, 272 ms/op
Iteration   1: n = 4, mean = 230 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 199, 227, 266, 266, 266, 266, 266, 266 ms/op
Iteration   2: n = 5, mean = 183 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 171, 174, 198, 198, 198, 198, 198, 198 ms/op
Iteration   3: n = 5, mean = 220 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 192, 200, 268, 268, 268, 268, 268, 268 ms/op


Result "write":
  N = 43
  mean =    206.149 ±(99.9%) 15.908 ms/op

  Histogram, ms/op:
    [170.000, 180.000) = 6 
    [180.000, 190.000) = 8 
    [190.000, 200.000) = 12 
    [200.000, 210.000) = 6 
    [210.000, 220.000) = 1 
    [220.000, 230.000) = 0 
    [230.000, 240.000) = 1 
    [240.000, 250.000) = 2 
    [250.000, 260.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =    170.131 ms/op
     p(50.0000) =    198.181 ms/op
     p(90.0000) =    260.886 ms/op
     p(95.0000) =    265.342 ms/op
     p(99.0000) =    267.649 ms/op
     p(99.9000) =    267.649 ms/op
     p(99.9900) =    267.649 ms/op
     p(99.9990) =    267.649 ms/op
     p(99.9999) =    267.649 ms/op
    p(100.0000) =    267.649 ms/op


# Run complete. Total time: 00:23:04

Benchmark                     (forceSafe)  (intKey)  (metaSync)    (num)  (sequential)  (sync)  (valRandom)  (valSize)  (writeMap)    Mode  Cnt    Score    Error  Units
LmdbJavaAgrona.readCrc                N/A      true         N/A  1000000          true     N/A        false        100        true  sample   74  126.054 ± 11.073  ms/op
LmdbJavaAgrona.readCrc                N/A      true         N/A  1000000          true     N/A        false        100       false  sample   67  142.820 ±  8.502  ms/op
LmdbJavaAgrona.readKey                N/A      true         N/A  1000000          true     N/A        false        100        true  sample   89  105.291 ±  5.061  ms/op
LmdbJavaAgrona.readKey                N/A      true         N/A  1000000          true     N/A        false        100       false  sample   93  101.293 ±  5.420  ms/op
LmdbJavaAgrona.readRev                N/A      true         N/A  1000000          true     N/A        false        100        true  sample  265   34.461 ±  1.269  ms/op
LmdbJavaAgrona.readRev                N/A      true         N/A  1000000          true     N/A        false        100       false  sample  273   33.627 ±  1.103  ms/op
LmdbJavaAgrona.readSeq                N/A      true         N/A  1000000          true     N/A        false        100        true  sample  222   41.790 ±  1.651  ms/op
LmdbJavaAgrona.readSeq                N/A      true         N/A  1000000          true     N/A        false        100       false  sample  221   41.555 ±  1.596  ms/op
LmdbJavaAgrona.readXxh64              N/A      true         N/A  1000000          true     N/A        false        100        true  sample  132   71.050 ±  3.856  ms/op
LmdbJavaAgrona.readXxh64              N/A      true         N/A  1000000          true     N/A        false        100       false  sample  127   73.426 ±  3.862  ms/op
LmdbJavaAgrona.write                  N/A      true        true  1000000          true    true        false        100        true  sample   58  152.737 ± 13.316  ms/op
LmdbJavaAgrona.write                  N/A      true        true  1000000          true    true        false        100       false  sample   43  215.994 ± 20.181  ms/op
LmdbJavaAgrona.write                  N/A      true        true  1000000          true   false        false        100        true  sample   55  161.960 ± 12.605  ms/op
LmdbJavaAgrona.write                  N/A      true        true  1000000          true   false        false        100       false  sample   48  188.613 ± 15.584  ms/op
LmdbJavaAgrona.write                  N/A      true       false  1000000          true    true        false        100        true  sample   61  142.327 ±  9.983  ms/op
LmdbJavaAgrona.write                  N/A      true       false  1000000          true    true        false        100       false  sample   47  196.708 ± 16.671  ms/op
LmdbJavaAgrona.write                  N/A      true       false  1000000          true   false        false        100        true  sample   56  156.416 ± 13.060  ms/op
LmdbJavaAgrona.write                  N/A      true       false  1000000          true   false        false        100       false  sample   44  205.300 ± 16.834  ms/op
LmdbJavaByteBuffer.readCrc           true      true         N/A  1000000          true     N/A        false        100        true  sample   69  135.154 ± 10.459  ms/op
LmdbJavaByteBuffer.readCrc           true      true         N/A  1000000          true     N/A        false        100       false  sample   77  123.233 ±  8.101  ms/op
LmdbJavaByteBuffer.readCrc          false      true         N/A  1000000          true     N/A        false        100        true  sample   90  103.713 ±  7.015  ms/op
LmdbJavaByteBuffer.readCrc          false      true         N/A  1000000          true     N/A        false        100       false  sample  100   94.935 ±  5.446  ms/op
LmdbJavaByteBuffer.readKey           true      true         N/A  1000000          true     N/A        false        100        true  sample   69  139.569 ±  9.331  ms/op
LmdbJavaByteBuffer.readKey           true      true         N/A  1000000          true     N/A        false        100       false  sample   63  150.065 ± 10.406  ms/op
LmdbJavaByteBuffer.readKey          false      true         N/A  1000000          true     N/A        false        100        true  sample   86  111.428 ±  6.206  ms/op
LmdbJavaByteBuffer.readKey          false      true         N/A  1000000          true     N/A        false        100       false  sample   87  106.935 ±  7.237  ms/op
LmdbJavaByteBuffer.readRev           true      true         N/A  1000000          true     N/A        false        100        true  sample  164   56.965 ±  2.614  ms/op
LmdbJavaByteBuffer.readRev           true      true         N/A  1000000          true     N/A        false        100       false  sample  153   60.920 ±  3.547  ms/op
LmdbJavaByteBuffer.readRev          false      true         N/A  1000000          true     N/A        false        100        true  sample  260   35.131 ±  1.294  ms/op
LmdbJavaByteBuffer.readRev          false      true         N/A  1000000          true     N/A        false        100       false  sample  273   33.423 ±  0.908  ms/op
LmdbJavaByteBuffer.readSeq           true      true         N/A  1000000          true     N/A        false        100        true  sample  148   62.230 ±  2.336  ms/op
LmdbJavaByteBuffer.readSeq           true      true         N/A  1000000          true     N/A        false        100       false  sample  134   69.897 ±  3.631  ms/op
LmdbJavaByteBuffer.readSeq          false      true         N/A  1000000          true     N/A        false        100        true  sample  212   43.113 ±  1.749  ms/op
LmdbJavaByteBuffer.readSeq          false      true         N/A  1000000          true     N/A        false        100       false  sample  196   46.572 ±  1.691  ms/op
LmdbJavaByteBuffer.readXxh64         true      true         N/A  1000000          true     N/A        false        100        true  sample   96   97.808 ±  5.965  ms/op
LmdbJavaByteBuffer.readXxh64         true      true         N/A  1000000          true     N/A        false        100       false  sample  101   94.486 ±  6.754  ms/op
LmdbJavaByteBuffer.readXxh64        false      true         N/A  1000000          true     N/A        false        100        true  sample  123   76.555 ±  4.676  ms/op
LmdbJavaByteBuffer.readXxh64        false      true         N/A  1000000          true     N/A        false        100       false  sample  130   72.019 ±  4.139  ms/op
LmdbJavaByteBuffer.write              N/A      true        true  1000000          true    true        false        100        true  sample   55  160.287 ± 13.785  ms/op
LmdbJavaByteBuffer.write              N/A      true        true  1000000          true    true        false        100       false  sample   47  193.345 ± 11.048  ms/op
LmdbJavaByteBuffer.write              N/A      true        true  1000000          true   false        false        100        true  sample   56  151.568 ± 12.286  ms/op
LmdbJavaByteBuffer.write              N/A      true        true  1000000          true   false        false        100       false  sample   44  204.764 ± 16.618  ms/op
LmdbJavaByteBuffer.write              N/A      true       false  1000000          true    true        false        100        true  sample   53  161.852 ± 15.328  ms/op
LmdbJavaByteBuffer.write              N/A      true       false  1000000          true    true        false        100       false  sample   42  214.552 ± 18.601  ms/op
LmdbJavaByteBuffer.write              N/A      true       false  1000000          true   false        false        100        true  sample   51  166.014 ± 14.915  ms/op
LmdbJavaByteBuffer.write              N/A      true       false  1000000          true   false        false        100       false  sample   45  199.795 ± 14.762  ms/op
LmdbJni.readCrc                       N/A      true         N/A  1000000          true     N/A        false        100        true  sample   66  142.579 ± 10.136  ms/op
LmdbJni.readCrc                       N/A      true         N/A  1000000          true     N/A        false        100       false  sample   97   97.977 ±  5.792  ms/op
LmdbJni.readKey                       N/A      true         N/A  1000000          true     N/A        false        100        true  sample   86  110.666 ±  7.268  ms/op
LmdbJni.readKey                       N/A      true         N/A  1000000          true     N/A        false        100       false  sample   86  111.739 ±  6.681  ms/op
LmdbJni.readRev                       N/A      true         N/A  1000000          true     N/A        false        100        true  sample  295   31.039 ±  1.224  ms/op
LmdbJni.readRev                       N/A      true         N/A  1000000          true     N/A        false        100       false  sample  327   27.976 ±  0.919  ms/op
LmdbJni.readSeq                       N/A      true         N/A  1000000          true     N/A        false        100        true  sample  198   46.410 ±  1.959  ms/op
LmdbJni.readSeq                       N/A      true         N/A  1000000          true     N/A        false        100       false  sample  204   44.671 ±  1.861  ms/op
LmdbJni.readXxh64                     N/A      true         N/A  1000000          true     N/A        false        100        true  sample  129   71.425 ±  4.402  ms/op
LmdbJni.readXxh64                     N/A      true         N/A  1000000          true     N/A        false        100       false  sample  143   65.012 ±  3.840  ms/op
LmdbJni.write                         N/A      true        true  1000000          true    true        false        100        true  sample   58  156.868 ± 16.061  ms/op
LmdbJni.write                         N/A      true        true  1000000          true    true        false        100       false  sample   49  188.770 ± 14.700  ms/op
LmdbJni.write                         N/A      true        true  1000000          true   false        false        100        true  sample   59  147.891 ± 11.180  ms/op
LmdbJni.write                         N/A      true        true  1000000          true   false        false        100       false  sample   46  204.558 ± 17.540  ms/op
LmdbJni.write                         N/A      true       false  1000000          true    true        false        100        true  sample   57  158.151 ± 11.509  ms/op
LmdbJni.write                         N/A      true       false  1000000          true    true        false        100       false  sample   41  213.596 ± 20.194  ms/op
LmdbJni.write                         N/A      true       false  1000000          true   false        false        100        true  sample   59  148.171 ± 10.833  ms/op
LmdbJni.write                         N/A      true       false  1000000          true   false        false        100       false  sample   43  206.149 ± 15.908  ms/op

Benchmark result is saved to out-1.csv
