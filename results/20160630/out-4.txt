# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Chronicle.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 0.00% complete, ETA 00:52:48
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1035 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1035, 1035, 1035, 1035, 1035, 1035, 1035, 1035 ms/op
# Warmup Iteration   2: n = 2, mean = 775 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 724, 775, 826, 826, 826, 826, 826, 826 ms/op
# Warmup Iteration   3: n = 2, mean = 710 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 661, 710, 760, 760, 760, 760, 760, 760 ms/op
Iteration   1: n = 2, mean = 587 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 584, 587, 590, 590, 590, 590, 590, 590 ms/op
Iteration   2: n = 2, mean = 683 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 633, 683, 732, 732, 732, 732, 732, 732 ms/op
Iteration   3: 
Bytes	122515456	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 2, mean = 596 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 591, 596, 600, 600, 600, 600, 600, 600 ms/op

# Run progress: 0.19% complete, ETA 01:33:54
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 823 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 736, 823, 910, 910, 910, 910, 910, 910 ms/op
# Warmup Iteration   2: n = 2, mean = 744 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 737, 744, 752, 752, 752, 752, 752, 752 ms/op
# Warmup Iteration   3: n = 2, mean = 660 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 611, 660, 709, 709, 709, 709, 709, 709 ms/op
Iteration   1: n = 2, mean = 741 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 668, 741, 815, 815, 815, 815, 815, 815 ms/op
Iteration   2: n = 2, mean = 608 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 601, 608, 614, 614, 614, 614, 614, 614 ms/op
Iteration   3: 
Bytes	122515456	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 2, mean = 616 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 607, 616, 624, 624, 624, 624, 624, 624 ms/op

# Run progress: 0.38% complete, ETA 01:37:04
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 768 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 632, 768, 904, 904, 904, 904, 904, 904 ms/op
# Warmup Iteration   2: n = 2, mean = 739 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 734, 739, 743, 743, 743, 743, 743, 743 ms/op
# Warmup Iteration   3: n = 2, mean = 673 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 665, 673, 681, 681, 681, 681, 681, 681 ms/op
Iteration   1: n = 2, mean = 710 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 638, 710, 783, 783, 783, 783, 783, 783 ms/op
Iteration   2: n = 2, mean = 632 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 621, 632, 643, 643, 643, 643, 643, 643 ms/op
Iteration   3: 
Bytes	122515456	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 2, mean = 596 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 579, 596, 612, 612, 612, 612, 612, 612 ms/op


Result "readKey":
  N = 18
  mean =    640.855 ±(99.9%) 63.434 ms/op

  Histogram, ms/op:
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 0 
    [550.000, 575.000) = 0 
    [575.000, 600.000) = 5 
    [600.000, 625.000) = 6 
    [625.000, 650.000) = 3 
    [650.000, 675.000) = 1 
    [675.000, 700.000) = 0 
    [700.000, 725.000) = 0 
    [725.000, 750.000) = 1 
    [750.000, 775.000) = 0 
    [775.000, 800.000) = 1 
    [800.000, 825.000) = 1 
    [825.000, 850.000) = 0 
    [850.000, 875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    578.814 ms/op
     p(50.0000) =    617.611 ms/op
     p(90.0000) =    786.432 ms/op
     p(95.0000) =    814.744 ms/op
     p(99.0000) =    814.744 ms/op
     p(99.9000) =    814.744 ms/op
     p(99.9900) =    814.744 ms/op
     p(99.9990) =    814.744 ms/op
     p(99.9999) =    814.744 ms/op
    p(100.0000) =    814.744 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Chronicle.readKey
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 0.57% complete, ETA 01:37:28
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 835 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 783, 835, 886, 886, 886, 886, 886, 886 ms/op
# Warmup Iteration   2: n = 2, mean = 712 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 651, 712, 773, 773, 773, 773, 773, 773 ms/op
# Warmup Iteration   3: n = 2, mean = 595 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 593, 595, 596, 596, 596, 596, 596, 596 ms/op
Iteration   1: n = 2, mean = 739 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 700, 739, 778, 778, 778, 778, 778, 778 ms/op
Iteration   2: n = 2, mean = 666 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 638, 666, 694, 694, 694, 694, 694, 694 ms/op
Iteration   3: 
Bytes	122544128	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 2, mean = 752 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 683, 752, 822, 822, 822, 822, 822, 822 ms/op

# Run progress: 0.76% complete, ETA 01:38:54
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 892 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 811, 892, 974, 974, 974, 974, 974, 974 ms/op
# Warmup Iteration   2: n = 2, mean = 850 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 805, 850, 894, 894, 894, 894, 894, 894 ms/op
# Warmup Iteration   3: n = 2, mean = 785 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 729, 785, 841, 841, 841, 841, 841, 841 ms/op
Iteration   1: n = 2, mean = 732 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 707, 732, 757, 757, 757, 757, 757, 757 ms/op
Iteration   2: n = 2, mean = 722 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 714, 722, 730, 730, 730, 730, 730, 730 ms/op
Iteration   3: 
Bytes	122511360	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 2, mean = 672 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 669, 672, 675, 675, 675, 675, 675, 675 ms/op

# Run progress: 0.95% complete, ETA 01:41:05
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 806 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 705, 806, 907, 907, 907, 907, 907, 907 ms/op
# Warmup Iteration   2: n = 2, mean = 743 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 721, 743, 765, 765, 765, 765, 765, 765 ms/op
# Warmup Iteration   3: n = 2, mean = 689 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 644, 689, 734, 734, 734, 734, 734, 734 ms/op
Iteration   1: n = 2, mean = 687 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 627, 687, 748, 748, 748, 748, 748, 748 ms/op
Iteration   2: n = 2, mean = 590 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 585, 590, 595, 595, 595, 595, 595, 595 ms/op
Iteration   3: 
Bytes	122482688	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 2, mean = 588 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 580, 588, 596, 596, 596, 596, 596, 596 ms/op


Result "readKey":
  N = 18
  mean =    683.147 ±(99.9%) 65.433 ms/op

  Histogram, ms/op:
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 0 
    [550.000, 575.000) = 0 
    [575.000, 600.000) = 4 
    [600.000, 625.000) = 0 
    [625.000, 650.000) = 2 
    [650.000, 675.000) = 1 
    [675.000, 700.000) = 3 
    [700.000, 725.000) = 3 
    [725.000, 750.000) = 2 
    [750.000, 775.000) = 1 
    [775.000, 800.000) = 1 
    [800.000, 825.000) = 1 
    [825.000, 850.000) = 0 
    [850.000, 875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    579.863 ms/op
     p(50.0000) =    688.390 ms/op
     p(90.0000) =    782.447 ms/op
     p(95.0000) =    822.084 ms/op
     p(99.0000) =    822.084 ms/op
     p(99.9000) =    822.084 ms/op
     p(99.9900) =    822.084 ms/op
     p(99.9990) =    822.084 ms/op
     p(99.9999) =    822.084 ms/op
    p(100.0000) =    822.084 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Chronicle.readKey
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 1.14% complete, ETA 01:40:21
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 2026 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2026, 2026, 2026, 2026, 2026, 2026, 2026, 2026 ms/op
# Warmup Iteration   2: n = 1, mean = 1875 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1875, 1875, 1875, 1875, 1875, 1875, 1875, 1875 ms/op
# Warmup Iteration   3: n = 1, mean = 1980 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1980, 1980, 1980, 1980, 1980, 1980, 1980, 1980 ms/op
Iteration   1: n = 1, mean = 1984 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1984, 1984, 1984, 1984, 1984, 1984, 1984, 1984 ms/op
Iteration   2: n = 1, mean = 1864 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1864, 1864, 1864, 1864, 1864, 1864, 1864, 1864 ms/op
Iteration   3: 
Bytes	139755520	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 1791 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791 ms/op

# Run progress: 1.33% complete, ETA 01:46:06
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 2168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2168, 2168, 2168, 2168, 2168, 2168, 2168, 2168 ms/op
# Warmup Iteration   2: n = 1, mean = 1774 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774 ms/op
# Warmup Iteration   3: n = 1, mean = 1980 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1980, 1980, 1980, 1980, 1980, 1980, 1980, 1980 ms/op
Iteration   1: n = 1, mean = 1780 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1780, 1780, 1780, 1780, 1780, 1780, 1780, 1780 ms/op
Iteration   2: n = 1, mean = 1590 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590 ms/op
Iteration   3: 
Bytes	139755520	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 1669 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669 ms/op

# Run progress: 1.52% complete, ETA 01:49:07
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 2336 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2336, 2336, 2336, 2336, 2336, 2336, 2336, 2336 ms/op
# Warmup Iteration   2: n = 1, mean = 1881 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1881, 1881, 1881, 1881, 1881, 1881, 1881, 1881 ms/op
# Warmup Iteration   3: n = 1, mean = 2112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112 ms/op
Iteration   1: n = 1, mean = 2036 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2036, 2036, 2036, 2036, 2036, 2036, 2036, 2036 ms/op
Iteration   2: n = 1, mean = 1902 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1902, 1902, 1902, 1902, 1902, 1902, 1902, 1902 ms/op
Iteration   3: 
Bytes	139755520	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 1791 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791 ms/op


Result "readKey":
  N = 9
  mean =   1823.124 ±(99.9%) 238.615 ms/op

  Histogram, ms/op:
    [1500.000, 1550.000) = 0 
    [1550.000, 1600.000) = 1 
    [1600.000, 1650.000) = 0 
    [1650.000, 1700.000) = 1 
    [1700.000, 1750.000) = 0 
    [1750.000, 1800.000) = 3 
    [1800.000, 1850.000) = 0 
    [1850.000, 1900.000) = 1 
    [1900.000, 1950.000) = 1 
    [1950.000, 2000.000) = 1 
    [2000.000, 2050.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1589.641 ms/op
     p(50.0000) =   1790.968 ms/op
     p(90.0000) =   2036.335 ms/op
     p(95.0000) =   2036.335 ms/op
     p(99.0000) =   2036.335 ms/op
     p(99.9000) =   2036.335 ms/op
     p(99.9900) =   2036.335 ms/op
     p(99.9990) =   2036.335 ms/op
     p(99.9999) =   2036.335 ms/op
    p(100.0000) =   2036.335 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Chronicle.readKey
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 1.70% complete, ETA 01:52:30
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 2032 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2032, 2032, 2032, 2032, 2032, 2032, 2032, 2032 ms/op
# Warmup Iteration   2: n = 1, mean = 1806 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1806, 1806, 1806, 1806, 1806, 1806, 1806, 1806 ms/op
# Warmup Iteration   3: n = 1, mean = 2101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2101, 2101, 2101, 2101, 2101, 2101, 2101, 2101 ms/op
Iteration   1: n = 1, mean = 1822 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822 ms/op
Iteration   2: n = 1, mean = 1789 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789 ms/op
Iteration   3: 
Bytes	139698176	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 1866 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1866, 1866, 1866, 1866, 1866, 1866, 1866, 1866 ms/op

# Run progress: 1.89% complete, ETA 01:55:03
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 2089 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2089, 2089, 2089, 2089, 2089, 2089, 2089, 2089 ms/op
# Warmup Iteration   2: n = 1, mean = 1831 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1831, 1831, 1831, 1831, 1831, 1831, 1831, 1831 ms/op
# Warmup Iteration   3: n = 1, mean = 1778 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1778, 1778, 1778, 1778, 1778, 1778, 1778, 1778 ms/op
Iteration   1: n = 1, mean = 2001 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001 ms/op
Iteration   2: n = 1, mean = 1567 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567 ms/op
Iteration   3: 
Bytes	139710464	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 1911 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1911, 1911, 1911, 1911, 1911, 1911, 1911, 1911 ms/op

# Run progress: 2.08% complete, ETA 01:56:16
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 2223 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2223, 2223, 2223, 2223, 2223, 2223, 2223, 2223 ms/op
# Warmup Iteration   2: n = 1, mean = 1925 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925 ms/op
# Warmup Iteration   3: n = 1, mean = 2160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2160, 2160, 2160, 2160, 2160, 2160, 2160, 2160 ms/op
Iteration   1: n = 1, mean = 1881 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1881, 1881, 1881, 1881, 1881, 1881, 1881, 1881 ms/op
Iteration   2: n = 1, mean = 1768 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768 ms/op
Iteration   3: 
Bytes	139689984	org.lmdbjava.bench.Chronicle.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 1822 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822 ms/op


Result "readKey":
  N = 9
  mean =   1825.221 ±(99.9%) 200.960 ms/op

  Histogram, ms/op:
    [1500.000, 1550.000) = 0 
    [1550.000, 1600.000) = 1 
    [1600.000, 1650.000) = 0 
    [1650.000, 1700.000) = 0 
    [1700.000, 1750.000) = 0 
    [1750.000, 1800.000) = 2 
    [1800.000, 1850.000) = 2 
    [1850.000, 1900.000) = 2 
    [1900.000, 1950.000) = 1 
    [1950.000, 2000.000) = 0 
    [2000.000, 2050.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1566.573 ms/op
     p(50.0000) =   1822.425 ms/op
     p(90.0000) =   2000.683 ms/op
     p(95.0000) =   2000.683 ms/op
     p(99.0000) =   2000.683 ms/op
     p(99.9000) =   2000.683 ms/op
     p(99.9900) =   2000.683 ms/op
     p(99.9990) =   2000.683 ms/op
     p(99.9999) =   2000.683 ms/op
    p(100.0000) =   2000.683 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Chronicle.write
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 2.27% complete, ETA 01:57:54
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1294 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294 ms/op
# Warmup Iteration   2: n = 2, mean = 904 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 835, 904, 973, 973, 973, 973, 973, 973 ms/op
# Warmup Iteration   3: n = 2, mean = 920 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 873, 920, 966, 966, 966, 966, 966, 966 ms/op
Iteration   1: n = 2, mean = 942 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 919, 942, 965, 965, 965, 965, 965, 965 ms/op
Iteration   2: n = 2, mean = 825 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 813, 825, 838, 838, 838, 838, 838, 838 ms/op
Iteration   3: n = 2, mean = 876 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 860, 876, 892, 892, 892, 892, 892, 892 ms/op

# Run progress: 2.46% complete, ETA 01:56:31
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1317 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317 ms/op
# Warmup Iteration   2: n = 1, mean = 986 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 986, 986, 986, 986, 986, 986, 986, 986 ms/op
# Warmup Iteration   3: n = 1, mean = 992 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 992, 992, 992, 992, 992, 992, 992, 992 ms/op
Iteration   1: n = 1, mean = 973 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 973, 973, 973, 973, 973, 973, 973, 973 ms/op
Iteration   2: n = 1, mean = 985 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 985, 985, 985, 985, 985, 985, 985, 985 ms/op
Iteration   3: n = 1, mean = 972 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 972, 972, 972, 972, 972, 972, 972, 972 ms/op

# Run progress: 2.65% complete, ETA 01:52:44
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1336 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336 ms/op
# Warmup Iteration   2: n = 2, mean = 911 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 867, 911, 955, 955, 955, 955, 955, 955 ms/op
# Warmup Iteration   3: n = 2, mean = 782 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 706, 782, 858, 858, 858, 858, 858, 858 ms/op
Iteration   1: n = 2, mean = 931 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 923, 931, 938, 938, 938, 938, 938, 938 ms/op
Iteration   2: n = 2, mean = 905 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 879, 905, 931, 931, 931, 931, 931, 931 ms/op
Iteration   3: n = 2, mean = 859 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 843, 859, 876, 876, 876, 876, 876, 876 ms/op


Result "write":
  N = 15
  mean =    907.018 ±(99.9%) 58.491 ms/op

  Histogram, ms/op:
    [ 800.000,  812.500) = 0 
    [ 812.500,  825.000) = 1 
    [ 825.000,  837.500) = 0 
    [ 837.500,  850.000) = 2 
    [ 850.000,  862.500) = 1 
    [ 862.500,  875.000) = 0 
    [ 875.000,  887.500) = 2 
    [ 887.500,  900.000) = 1 
    [ 900.000,  912.500) = 0 
    [ 912.500,  925.000) = 2 
    [ 925.000,  937.500) = 1 
    [ 937.500,  950.000) = 1 
    [ 950.000,  962.500) = 0 
    [ 962.500,  975.000) = 3 
    [ 975.000,  987.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    812.646 ms/op
     p(50.0000) =    918.553 ms/op
     p(90.0000) =    977.692 ms/op
     p(95.0000) =    984.613 ms/op
     p(99.0000) =    984.613 ms/op
     p(99.9000) =    984.613 ms/op
     p(99.9900) =    984.613 ms/op
     p(99.9990) =    984.613 ms/op
     p(99.9999) =    984.613 ms/op
    p(100.0000) =    984.613 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Chronicle.write
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 2.84% complete, ETA 01:51:50
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1407 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407 ms/op
# Warmup Iteration   2: n = 1, mean = 1031 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1031, 1031, 1031, 1031, 1031, 1031, 1031, 1031 ms/op
# Warmup Iteration   3: n = 1, mean = 1101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101 ms/op
Iteration   1: n = 1, mean = 1132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132 ms/op
Iteration   2: n = 1, mean = 1183 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1183, 1183, 1183, 1183, 1183, 1183, 1183, 1183 ms/op
Iteration   3: n = 1, mean = 1048 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048 ms/op

# Run progress: 3.03% complete, ETA 01:49:28
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1229 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229 ms/op
# Warmup Iteration   2: n = 1, mean = 963 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 963, 963, 963, 963, 963, 963, 963, 963 ms/op
# Warmup Iteration   3: n = 1, mean = 976 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 976, 976, 976, 976, 976, 976, 976, 976 ms/op
Iteration   1: n = 1, mean = 1061 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061 ms/op
Iteration   2: n = 1, mean = 925 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 925, 925, 925, 925, 925, 925, 925, 925 ms/op
Iteration   3: n = 1, mean = 1070 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070 ms/op

# Run progress: 3.22% complete, ETA 01:46:53
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1286 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286 ms/op
# Warmup Iteration   2: n = 1, mean = 1039 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039 ms/op
# Warmup Iteration   3: n = 1, mean = 1041 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041 ms/op
Iteration   1: n = 1, mean = 1101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101 ms/op
Iteration   2: n = 1, mean = 1166 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166 ms/op
Iteration   3: n = 1, mean = 1118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118 ms/op


Result "write":
  N = 9
  mean =   1089.237 ±(99.9%) 129.364 ms/op

  Histogram, ms/op:
    [ 900.000,  925.000) = 1 
    [ 925.000,  950.000) = 0 
    [ 950.000,  975.000) = 0 
    [ 975.000, 1000.000) = 0 
    [1000.000, 1025.000) = 0 
    [1025.000, 1050.000) = 1 
    [1050.000, 1075.000) = 2 
    [1075.000, 1100.000) = 0 
    [1100.000, 1125.000) = 2 
    [1125.000, 1150.000) = 1 
    [1150.000, 1175.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    924.844 ms/op
     p(50.0000) =   1101.005 ms/op
     p(90.0000) =   1182.794 ms/op
     p(95.0000) =   1182.794 ms/op
     p(99.0000) =   1182.794 ms/op
     p(99.9000) =   1182.794 ms/op
     p(99.9900) =   1182.794 ms/op
     p(99.9990) =   1182.794 ms/op
     p(99.9999) =   1182.794 ms/op
    p(100.0000) =   1182.794 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Chronicle.write
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 3.41% complete, ETA 01:44:54
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 2554 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2554, 2554, 2554, 2554, 2554, 2554, 2554, 2554 ms/op
# Warmup Iteration   2: n = 1, mean = 1967 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1967, 1967, 1967, 1967, 1967, 1967, 1967, 1967 ms/op
# Warmup Iteration   3: n = 1, mean = 2110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2110, 2110, 2110, 2110, 2110, 2110, 2110, 2110 ms/op
Iteration   1: n = 1, mean = 1976 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1976, 1976, 1976, 1976, 1976, 1976, 1976, 1976 ms/op
Iteration   2: n = 1, mean = 1827 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1827, 1827, 1827, 1827, 1827, 1827, 1827, 1827 ms/op
Iteration   3: n = 1, mean = 2185 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2185, 2185, 2185, 2185, 2185, 2185, 2185, 2185 ms/op

# Run progress: 3.60% complete, ETA 01:45:34
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 2638 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2638, 2638, 2638, 2638, 2638, 2638, 2638, 2638 ms/op
# Warmup Iteration   2: n = 1, mean = 2215 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215 ms/op
# Warmup Iteration   3: n = 1, mean = 2013 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013 ms/op
Iteration   1: n = 1, mean = 2156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156 ms/op
Iteration   2: n = 1, mean = 2168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2168, 2168, 2168, 2168, 2168, 2168, 2168, 2168 ms/op
Iteration   3: n = 1, mean = 1883 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1883, 1883, 1883, 1883, 1883, 1883, 1883, 1883 ms/op

# Run progress: 3.79% complete, ETA 01:46:17
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 2676 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2676, 2676, 2676, 2676, 2676, 2676, 2676, 2676 ms/op
# Warmup Iteration   2: n = 1, mean = 2181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2181, 2181, 2181, 2181, 2181, 2181, 2181, 2181 ms/op
# Warmup Iteration   3: n = 1, mean = 2227 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2227, 2227, 2227, 2227, 2227, 2227, 2227, 2227 ms/op
Iteration   1: n = 1, mean = 1942 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1942, 1942, 1942, 1942, 1942, 1942, 1942, 1942 ms/op
Iteration   2: n = 1, mean = 1904 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1904, 1904, 1904, 1904, 1904, 1904, 1904, 1904 ms/op
Iteration   3: n = 1, mean = 2129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2129, 2129, 2129, 2129, 2129, 2129, 2129, 2129 ms/op


Result "write":
  N = 9
  mean =   2018.858 ±(99.9%) 235.531 ms/op

  Histogram, ms/op:
    [1800.000, 1825.000) = 0 
    [1825.000, 1850.000) = 1 
    [1850.000, 1875.000) = 0 
    [1875.000, 1900.000) = 1 
    [1900.000, 1925.000) = 1 
    [1925.000, 1950.000) = 1 
    [1950.000, 1975.000) = 0 
    [1975.000, 2000.000) = 1 
    [2000.000, 2025.000) = 0 
    [2025.000, 2050.000) = 0 
    [2050.000, 2075.000) = 0 
    [2075.000, 2100.000) = 0 
    [2100.000, 2125.000) = 0 
    [2125.000, 2150.000) = 1 
    [2150.000, 2175.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   1826.619 ms/op
     p(50.0000) =   1975.517 ms/op
     p(90.0000) =   2185.232 ms/op
     p(95.0000) =   2185.232 ms/op
     p(99.0000) =   2185.232 ms/op
     p(99.9000) =   2185.232 ms/op
     p(99.9900) =   2185.232 ms/op
     p(99.9990) =   2185.232 ms/op
     p(99.9999) =   2185.232 ms/op
    p(100.0000) =   2185.232 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.Chronicle.write
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 3.98% complete, ETA 01:46:53
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 2693 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2693, 2693, 2693, 2693, 2693, 2693, 2693, 2693 ms/op
# Warmup Iteration   2: n = 1, mean = 2236 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2236, 2236, 2236, 2236, 2236, 2236, 2236, 2236 ms/op
# Warmup Iteration   3: n = 1, mean = 2378 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378 ms/op
Iteration   1: n = 1, mean = 2156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156 ms/op
Iteration   2: n = 1, mean = 1885 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1885, 1885, 1885, 1885, 1885, 1885, 1885, 1885 ms/op
Iteration   3: n = 1, mean = 2168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2168, 2168, 2168, 2168, 2168, 2168, 2168, 2168 ms/op

# Run progress: 4.17% complete, ETA 01:47:50
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 2680 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2680, 2680, 2680, 2680, 2680, 2680, 2680, 2680 ms/op
# Warmup Iteration   2: n = 1, mean = 2041 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2041, 2041, 2041, 2041, 2041, 2041, 2041, 2041 ms/op
# Warmup Iteration   3: n = 1, mean = 2156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2156, 2156, 2156, 2156, 2156, 2156, 2156, 2156 ms/op
Iteration   1: n = 1, mean = 1887 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1887, 1887, 1887, 1887, 1887, 1887, 1887, 1887 ms/op
Iteration   2: n = 1, mean = 1822 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822 ms/op
Iteration   3: n = 1, mean = 2015 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2015, 2015, 2015, 2015, 2015, 2015, 2015, 2015 ms/op

# Run progress: 4.36% complete, ETA 01:48:12
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 2445 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2445, 2445, 2445, 2445, 2445, 2445, 2445, 2445 ms/op
# Warmup Iteration   2: n = 1, mean = 2194 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2194, 2194, 2194, 2194, 2194, 2194, 2194, 2194 ms/op
# Warmup Iteration   3: n = 1, mean = 2173 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173 ms/op
Iteration   1: n = 1, mean = 1795 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1795, 1795, 1795, 1795, 1795, 1795, 1795, 1795 ms/op
Iteration   2: n = 1, mean = 1969 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1969, 1969, 1969, 1969, 1969, 1969, 1969, 1969 ms/op
Iteration   3: n = 1, mean = 2026 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2026, 2026, 2026, 2026, 2026, 2026, 2026, 2026 ms/op


Result "write":
  N = 9
  mean =   1969.459 ±(99.9%) 226.577 ms/op

  Histogram, ms/op:
    [1700.000, 1750.000) = 0 
    [1750.000, 1800.000) = 1 
    [1800.000, 1850.000) = 1 
    [1850.000, 1900.000) = 2 
    [1900.000, 1950.000) = 0 
    [1950.000, 2000.000) = 1 
    [2000.000, 2050.000) = 2 
    [2050.000, 2100.000) = 0 
    [2100.000, 2150.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1795.162 ms/op
     p(50.0000) =   1969.226 ms/op
     p(90.0000) =   2168.455 ms/op
     p(95.0000) =   2168.455 ms/op
     p(99.0000) =   2168.455 ms/op
     p(99.9000) =   2168.455 ms/op
     p(99.9900) =   2168.455 ms/op
     p(99.9990) =   2168.455 ms/op
     p(99.9999) =   2168.455 ms/op
    p(100.0000) =   2168.455 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 4.55% complete, ETA 01:48:36
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1829 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1829, 1829, 1829, 1829, 1829, 1829, 1829, 1829 ms/op
# Warmup Iteration   2: n = 1, mean = 1659 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1659, 1659, 1659, 1659, 1659, 1659, 1659, 1659 ms/op
# Warmup Iteration   3: n = 1, mean = 1510 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510 ms/op
Iteration   1: n = 1, mean = 1395 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395 ms/op
Iteration   2: n = 1, mean = 1439 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439 ms/op
Iteration   3: n = 1, mean = 1409 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409 ms/op

# Run progress: 4.73% complete, ETA 01:48:07
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1749 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749 ms/op
# Warmup Iteration   2: n = 1, mean = 1481 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481 ms/op
# Warmup Iteration   3: n = 1, mean = 1256 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256 ms/op
Iteration   1: n = 1, mean = 1514 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514 ms/op
Iteration   2: n = 1, mean = 1537 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537 ms/op
Iteration   3: n = 1, mean = 1357 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357 ms/op

# Run progress: 4.92% complete, ETA 01:47:31
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1883 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1883, 1883, 1883, 1883, 1883, 1883, 1883, 1883 ms/op
# Warmup Iteration   2: n = 1, mean = 1378 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378 ms/op
# Warmup Iteration   3: n = 1, mean = 1468 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468 ms/op
Iteration   1: n = 1, mean = 1476 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476 ms/op
Iteration   2: n = 1, mean = 1363 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363 ms/op
Iteration   3: n = 1, mean = 1527 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527 ms/op


Result "readCrc":
  N = 9
  mean =   1446.336 ±(99.9%) 117.716 ms/op

  Histogram, ms/op:
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 2 
    [1375.000, 1400.000) = 1 
    [1400.000, 1425.000) = 1 
    [1425.000, 1450.000) = 1 
    [1450.000, 1475.000) = 0 
    [1475.000, 1500.000) = 1 
    [1500.000, 1525.000) = 1 
    [1525.000, 1550.000) = 2 
    [1550.000, 1575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1356.857 ms/op
     p(50.0000) =   1438.646 ms/op
     p(90.0000) =   1537.212 ms/op
     p(95.0000) =   1537.212 ms/op
     p(99.0000) =   1537.212 ms/op
     p(99.9000) =   1537.212 ms/op
     p(99.9900) =   1537.212 ms/op
     p(99.9990) =   1537.212 ms/op
     p(99.9999) =   1537.212 ms/op
    p(100.0000) =   1537.212 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 5.11% complete, ETA 01:46:55
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1739 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739 ms/op
# Warmup Iteration   2: n = 1, mean = 1434 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434 ms/op
# Warmup Iteration   3: n = 1, mean = 1302 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302 ms/op
Iteration   1: n = 1, mean = 1437 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437 ms/op
Iteration   2: n = 1, mean = 1493 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493 ms/op
Iteration   3: n = 1, mean = 1441 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441 ms/op

# Run progress: 5.30% complete, ETA 01:46:27
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 2101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2101, 2101, 2101, 2101, 2101, 2101, 2101, 2101 ms/op
# Warmup Iteration   2: n = 1, mean = 1508 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508 ms/op
# Warmup Iteration   3: n = 1, mean = 1365 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365 ms/op
Iteration   1: n = 1, mean = 1447 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447 ms/op
Iteration   2: n = 1, mean = 1493 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493 ms/op
Iteration   3: n = 1, mean = 1432 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432 ms/op

# Run progress: 5.49% complete, ETA 01:46:05
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1745 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745 ms/op
# Warmup Iteration   2: n = 1, mean = 1583 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583 ms/op
# Warmup Iteration   3: n = 1, mean = 1525 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1525, 1525, 1525, 1525, 1525, 1525, 1525, 1525 ms/op
Iteration   1: n = 1, mean = 1369 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369 ms/op
Iteration   2: n = 1, mean = 1332 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332 ms/op
Iteration   3: n = 1, mean = 1401 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401 ms/op


Result "readCrc":
  N = 9
  mean =   1427.228 ±(99.9%) 89.208 ms/op

  Histogram, ms/op:
    [1300.000, 1312.500) = 0 
    [1312.500, 1325.000) = 0 
    [1325.000, 1337.500) = 1 
    [1337.500, 1350.000) = 0 
    [1350.000, 1362.500) = 0 
    [1362.500, 1375.000) = 1 
    [1375.000, 1387.500) = 0 
    [1387.500, 1400.000) = 0 
    [1400.000, 1412.500) = 1 
    [1412.500, 1425.000) = 0 
    [1425.000, 1437.500) = 2 
    [1437.500, 1450.000) = 2 
    [1450.000, 1462.500) = 0 
    [1462.500, 1475.000) = 0 
    [1475.000, 1487.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1331.692 ms/op
     p(50.0000) =   1436.549 ms/op
     p(90.0000) =   1493.172 ms/op
     p(95.0000) =   1493.172 ms/op
     p(99.0000) =   1493.172 ms/op
     p(99.9000) =   1493.172 ms/op
     p(99.9900) =   1493.172 ms/op
     p(99.9990) =   1493.172 ms/op
     p(99.9999) =   1493.172 ms/op
    p(100.0000) =   1493.172 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 5.68% complete, ETA 01:45:40
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1493 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493 ms/op
# Warmup Iteration   2: n = 1, mean = 1250 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250 ms/op
# Warmup Iteration   3: n = 1, mean = 1411 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411 ms/op
Iteration   1: n = 1, mean = 1380 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1380 ms/op
Iteration   2: n = 1, mean = 1361 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361 ms/op
Iteration   3: n = 1, mean = 1451 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451 ms/op

# Run progress: 5.87% complete, ETA 01:45:20
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1378 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378 ms/op
# Warmup Iteration   2: n = 1, mean = 1575 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1575, 1575, 1575, 1575, 1575, 1575, 1575, 1575 ms/op
# Warmup Iteration   3: n = 1, mean = 1567 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567 ms/op
Iteration   1: n = 1, mean = 1342 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342 ms/op
Iteration   2: n = 1, mean = 1317 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317 ms/op
Iteration   3: n = 1, mean = 1499 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499 ms/op

# Run progress: 6.06% complete, ETA 01:44:57
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1382 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382 ms/op
# Warmup Iteration   2: n = 1, mean = 1277 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277 ms/op
# Warmup Iteration   3: n = 1, mean = 1508 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508 ms/op
Iteration   1: n = 1, mean = 1470 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470 ms/op
Iteration   2: n = 1, mean = 1506 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506 ms/op
Iteration   3: n = 1, mean = 1265 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265 ms/op


Result "readCrc":
  N = 9
  mean =   1399.033 ±(99.9%) 144.430 ms/op

  Histogram, ms/op:
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 1 
    [1275.000, 1300.000) = 0 
    [1300.000, 1325.000) = 1 
    [1325.000, 1350.000) = 1 
    [1350.000, 1375.000) = 1 
    [1375.000, 1400.000) = 1 
    [1400.000, 1425.000) = 0 
    [1425.000, 1450.000) = 0 
    [1450.000, 1475.000) = 2 
    [1475.000, 1500.000) = 1 
    [1500.000, 1525.000) = 1 
    [1525.000, 1550.000) = 0 
    [1550.000, 1575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1264.583 ms/op
     p(50.0000) =   1379.926 ms/op
     p(90.0000) =   1505.755 ms/op
     p(95.0000) =   1505.755 ms/op
     p(99.0000) =   1505.755 ms/op
     p(99.9000) =   1505.755 ms/op
     p(99.9900) =   1505.755 ms/op
     p(99.9990) =   1505.755 ms/op
     p(99.9999) =   1505.755 ms/op
    p(100.0000) =   1505.755 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 6.25% complete, ETA 01:44:37
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1973 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1973, 1973, 1973, 1973, 1973, 1973, 1973, 1973 ms/op
# Warmup Iteration   2: n = 1, mean = 1432 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432 ms/op
# Warmup Iteration   3: n = 1, mean = 1506 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506 ms/op
Iteration   1: n = 1, mean = 1674 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1674, 1674, 1674, 1674, 1674, 1674, 1674, 1674 ms/op
Iteration   2: n = 1, mean = 1365 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365 ms/op
Iteration   3: n = 1, mean = 1661 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661 ms/op

# Run progress: 6.44% complete, ETA 01:44:49
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 2202 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2202, 2202, 2202, 2202, 2202, 2202, 2202, 2202 ms/op
# Warmup Iteration   2: n = 1, mean = 1585 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1585, 1585, 1585, 1585, 1585, 1585, 1585, 1585 ms/op
# Warmup Iteration   3: n = 1, mean = 1684 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684 ms/op
Iteration   1: n = 1, mean = 1439 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439 ms/op
Iteration   2: n = 1, mean = 1439 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439 ms/op
Iteration   3: n = 1, mean = 1590 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1590, 1590, 1590, 1590, 1590, 1590, 1590, 1590 ms/op

# Run progress: 6.63% complete, ETA 01:44:59
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 2049 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2049, 2049, 2049, 2049, 2049, 2049, 2049, 2049 ms/op
# Warmup Iteration   2: n = 1, mean = 1523 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523 ms/op
# Warmup Iteration   3: n = 1, mean = 1680 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680 ms/op
Iteration   1: n = 1, mean = 1690 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1690, 1690, 1690, 1690, 1690, 1690, 1690, 1690 ms/op
Iteration   2: n = 1, mean = 1552 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552 ms/op
Iteration   3: n = 1, mean = 1671 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671 ms/op


Result "readCrc":
  N = 9
  mean =   1564.475 ±(99.9%) 206.342 ms/op

  Histogram, ms/op:
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 1 
    [1375.000, 1400.000) = 0 
    [1400.000, 1425.000) = 0 
    [1425.000, 1450.000) = 2 
    [1450.000, 1475.000) = 0 
    [1475.000, 1500.000) = 0 
    [1500.000, 1525.000) = 0 
    [1525.000, 1550.000) = 0 
    [1550.000, 1575.000) = 1 
    [1575.000, 1600.000) = 1 
    [1600.000, 1625.000) = 0 
    [1625.000, 1650.000) = 0 
    [1650.000, 1675.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =   1365.246 ms/op
     p(50.0000) =   1589.641 ms/op
     p(90.0000) =   1690.305 ms/op
     p(95.0000) =   1690.305 ms/op
     p(99.0000) =   1690.305 ms/op
     p(99.9000) =   1690.305 ms/op
     p(99.9900) =   1690.305 ms/op
     p(99.9990) =   1690.305 ms/op
     p(99.9999) =   1690.305 ms/op
    p(100.0000) =   1690.305 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 6.82% complete, ETA 01:45:14
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 3330 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3330, 3330, 3330, 3330, 3330, 3330, 3330, 3330 ms/op
# Warmup Iteration   2: n = 1, mean = 2915 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2915, 2915, 2915, 2915, 2915, 2915, 2915, 2915 ms/op
# Warmup Iteration   3: n = 1, mean = 2894 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2894, 2894, 2894, 2894, 2894, 2894, 2894, 2894 ms/op
Iteration   1: n = 1, mean = 3041 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3041, 3041, 3041, 3041, 3041, 3041, 3041, 3041 ms/op
Iteration   2: n = 1, mean = 2835 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2835, 2835, 2835, 2835, 2835, 2835, 2835, 2835 ms/op
Iteration   3: 
Bytes	125370368	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 2911 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2911, 2911, 2911, 2911, 2911, 2911, 2911, 2911 ms/op

# Run progress: 7.01% complete, ETA 01:46:52
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 3297 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3297, 3297, 3297, 3297, 3297, 3297, 3297, 3297 ms/op
# Warmup Iteration   2: n = 1, mean = 2848 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2848, 2848, 2848, 2848, 2848, 2848, 2848, 2848 ms/op
# Warmup Iteration   3: n = 1, mean = 3028 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3028, 3028, 3028, 3028, 3028, 3028, 3028, 3028 ms/op
Iteration   1: n = 1, mean = 2886 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2886, 2886, 2886, 2886, 2886, 2886, 2886, 2886 ms/op
Iteration   2: n = 1, mean = 2940 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2940, 2940, 2940, 2940, 2940, 2940, 2940, 2940 ms/op
Iteration   3: 
Bytes	127479808	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 2923 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2923, 2923, 2923, 2923, 2923, 2923, 2923, 2923 ms/op

# Run progress: 7.20% complete, ETA 01:48:22
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 3444 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3444, 3444, 3444, 3444, 3444, 3444, 3444, 3444 ms/op
# Warmup Iteration   2: n = 1, mean = 2991 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2991, 2991, 2991, 2991, 2991, 2991, 2991, 2991 ms/op
# Warmup Iteration   3: n = 1, mean = 3100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3100, 3100, 3100, 3100, 3100, 3100, 3100, 3100 ms/op
Iteration   1: n = 1, mean = 3167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3167, 3167, 3167, 3167, 3167, 3167, 3167, 3167 ms/op
Iteration   2: n = 1, mean = 3007 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3007, 3007, 3007, 3007, 3007, 3007, 3007, 3007 ms/op
Iteration   3: 
Bytes	123080704	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 3032 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3032, 3032, 3032, 3032, 3032, 3032, 3032, 3032 ms/op


Result "readKey":
  N = 9
  mean =   2971.431 ±(99.9%) 168.868 ms/op

  Histogram, ms/op:
    [2800.000, 2825.000) = 0 
    [2825.000, 2850.000) = 1 
    [2850.000, 2875.000) = 0 
    [2875.000, 2900.000) = 1 
    [2900.000, 2925.000) = 2 
    [2925.000, 2950.000) = 1 
    [2950.000, 2975.000) = 0 
    [2975.000, 3000.000) = 0 
    [3000.000, 3025.000) = 1 
    [3025.000, 3050.000) = 2 
    [3050.000, 3075.000) = 0 
    [3075.000, 3100.000) = 0 
    [3100.000, 3125.000) = 0 
    [3125.000, 3150.000) = 0 
    [3150.000, 3175.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2835.350 ms/op
     p(50.0000) =   2940.207 ms/op
     p(90.0000) =   3166.700 ms/op
     p(95.0000) =   3166.700 ms/op
     p(99.0000) =   3166.700 ms/op
     p(99.9000) =   3166.700 ms/op
     p(99.9900) =   3166.700 ms/op
     p(99.9990) =   3166.700 ms/op
     p(99.9999) =   3166.700 ms/op
    p(100.0000) =   3166.700 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readKey
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 7.39% complete, ETA 01:49:59
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 3838 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3838, 3838, 3838, 3838, 3838, 3838, 3838, 3838 ms/op
# Warmup Iteration   2: n = 1, mean = 3091 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3091, 3091, 3091, 3091, 3091, 3091, 3091, 3091 ms/op
# Warmup Iteration   3: n = 1, mean = 3251 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3251, 3251, 3251, 3251, 3251, 3251, 3251, 3251 ms/op
Iteration   1: n = 1, mean = 3423 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3423, 3423, 3423, 3423, 3423, 3423, 3423, 3423 ms/op
Iteration   2: n = 1, mean = 3381 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3381, 3381, 3381, 3381, 3381, 3381, 3381, 3381 ms/op
Iteration   3: 
Bytes	126476288	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 3121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3121, 3121, 3121, 3121, 3121, 3121, 3121, 3121 ms/op

# Run progress: 7.58% complete, ETA 01:51:45
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 3985 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3985, 3985, 3985, 3985, 3985, 3985, 3985, 3985 ms/op
# Warmup Iteration   2: n = 1, mean = 3368 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3368, 3368, 3368, 3368, 3368, 3368, 3368, 3368 ms/op
# Warmup Iteration   3: n = 1, mean = 3477 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3477, 3477, 3477, 3477, 3477, 3477, 3477, 3477 ms/op
Iteration   1: n = 1, mean = 3301 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3301, 3301, 3301, 3301, 3301, 3301, 3301, 3301 ms/op
Iteration   2: n = 1, mean = 3288 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3288, 3288, 3288, 3288, 3288, 3288, 3288, 3288 ms/op
Iteration   3: 
Bytes	119238656	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 3246 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3246, 3246, 3246, 3246, 3246, 3246, 3246, 3246 ms/op

# Run progress: 7.77% complete, ETA 01:53:34
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 3876 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3876, 3876, 3876, 3876, 3876, 3876, 3876, 3876 ms/op
# Warmup Iteration   2: n = 1, mean = 3074 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3074, 3074, 3074, 3074, 3074, 3074, 3074, 3074 ms/op
# Warmup Iteration   3: n = 1, mean = 3133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3133, 3133, 3133, 3133, 3133, 3133, 3133, 3133 ms/op
Iteration   1: n = 1, mean = 3204 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3204, 3204, 3204, 3204, 3204, 3204, 3204, 3204 ms/op
Iteration   2: n = 1, mean = 3087 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3087, 3087, 3087, 3087, 3087, 3087, 3087, 3087 ms/op
Iteration   3: 
Bytes	114798592	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 3087 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3087, 3087, 3087, 3087, 3087, 3087, 3087, 3087 ms/op


Result "readKey":
  N = 9
  mean =   3237.537 ±(99.9%) 207.069 ms/op

  Histogram, ms/op:
    [3000.000, 3050.000) = 0 
    [3050.000, 3100.000) = 2 
    [3100.000, 3150.000) = 1 
    [3150.000, 3200.000) = 0 
    [3200.000, 3250.000) = 2 
    [3250.000, 3300.000) = 1 
    [3300.000, 3350.000) = 1 
    [3350.000, 3400.000) = 1 
    [3400.000, 3450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3087.008 ms/op
     p(50.0000) =   3246.391 ms/op
     p(90.0000) =   3422.552 ms/op
     p(95.0000) =   3422.552 ms/op
     p(99.0000) =   3422.552 ms/op
     p(99.9000) =   3422.552 ms/op
     p(99.9900) =   3422.552 ms/op
     p(99.9990) =   3422.552 ms/op
     p(99.9999) =   3422.552 ms/op
    p(100.0000) =   3422.552 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readKey
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 7.95% complete, ETA 01:55:01
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 2760 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2760, 2760, 2760, 2760, 2760, 2760, 2760, 2760 ms/op
# Warmup Iteration   2: n = 1, mean = 2886 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2886, 2886, 2886, 2886, 2886, 2886, 2886, 2886 ms/op
# Warmup Iteration   3: n = 1, mean = 2651 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2651, 2651, 2651, 2651, 2651, 2651, 2651, 2651 ms/op
Iteration   1: n = 1, mean = 2710 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2710, 2710, 2710, 2710, 2710, 2710, 2710, 2710 ms/op
Iteration   2: n = 1, mean = 2869 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2869, 2869, 2869, 2869, 2869, 2869, 2869, 2869 ms/op
Iteration   3: 
Bytes	115396608	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 2999 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2999, 2999, 2999, 2999, 2999, 2999, 2999, 2999 ms/op

# Run progress: 8.14% complete, ETA 01:56:06
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 3137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3137, 3137, 3137, 3137, 3137, 3137, 3137, 3137 ms/op
# Warmup Iteration   2: n = 1, mean = 2911 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2911, 2911, 2911, 2911, 2911, 2911, 2911, 2911 ms/op
# Warmup Iteration   3: n = 1, mean = 3410 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3410, 3410, 3410, 3410, 3410, 3410, 3410, 3410 ms/op
Iteration   1: n = 1, mean = 3125 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3125, 3125, 3125, 3125, 3125, 3125, 3125, 3125 ms/op
Iteration   2: n = 1, mean = 2978 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2978, 2978, 2978, 2978, 2978, 2978, 2978, 2978 ms/op
Iteration   3: 
Bytes	115396608	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 2877 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2877, 2877, 2877, 2877, 2877, 2877, 2877, 2877 ms/op

# Run progress: 8.33% complete, ETA 01:57:22
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 2777 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2777, 2777, 2777, 2777, 2777, 2777, 2777, 2777 ms/op
# Warmup Iteration   2: n = 1, mean = 2861 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2861, 2861, 2861, 2861, 2861, 2861, 2861, 2861 ms/op
# Warmup Iteration   3: n = 1, mean = 3079 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3079, 3079, 3079, 3079, 3079, 3079, 3079, 3079 ms/op
Iteration   1: n = 1, mean = 3129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3129, 3129, 3129, 3129, 3129, 3129, 3129, 3129 ms/op
Iteration   2: n = 1, mean = 3007 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3007, 3007, 3007, 3007, 3007, 3007, 3007, 3007 ms/op
Iteration   3: 
Bytes	115396608	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 2806 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2806, 2806, 2806, 2806, 2806, 2806, 2806, 2806 ms/op


Result "readKey":
  N = 9
  mean =   2944.401 ±(99.9%) 237.035 ms/op

  Histogram, ms/op:
    [2700.000, 2750.000) = 1 
    [2750.000, 2800.000) = 0 
    [2800.000, 2850.000) = 1 
    [2850.000, 2900.000) = 2 
    [2900.000, 2950.000) = 0 
    [2950.000, 3000.000) = 2 
    [3000.000, 3050.000) = 1 
    [3050.000, 3100.000) = 0 
    [3100.000, 3150.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   2709.520 ms/op
     p(50.0000) =   2977.956 ms/op
     p(90.0000) =   3128.951 ms/op
     p(95.0000) =   3128.951 ms/op
     p(99.0000) =   3128.951 ms/op
     p(99.9000) =   3128.951 ms/op
     p(99.9900) =   3128.951 ms/op
     p(99.9990) =   3128.951 ms/op
     p(99.9999) =   3128.951 ms/op
    p(100.0000) =   3128.951 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readKey
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 8.52% complete, ETA 01:58:27
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 5771 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5771, 5771, 5771, 5771, 5771, 5771, 5771, 5771 ms/op
# Warmup Iteration   2: n = 1, mean = 5201 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5201, 5201, 5201, 5201, 5201, 5201, 5201, 5201 ms/op
# Warmup Iteration   3: n = 1, mean = 5201 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5201, 5201, 5201, 5201, 5201, 5201, 5201, 5201 ms/op
Iteration   1: n = 1, mean = 5276 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5276, 5276, 5276, 5276, 5276, 5276, 5276, 5276 ms/op
Iteration   2: n = 1, mean = 4924 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4924, 4924, 4924, 4924, 4924, 4924, 4924, 4924 ms/op
Iteration   3: 
Bytes	125546496	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 5033 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5033, 5033, 5033, 5033, 5033, 5033, 5033, 5033 ms/op

# Run progress: 8.71% complete, ETA 02:02:02
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 5050 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5050, 5050, 5050, 5050, 5050, 5050, 5050, 5050 ms/op
# Warmup Iteration   2: n = 1, mean = 4438 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4438, 4438, 4438, 4438, 4438, 4438, 4438, 4438 ms/op
# Warmup Iteration   3: n = 1, mean = 4631 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4631, 4631, 4631, 4631, 4631, 4631, 4631, 4631 ms/op
Iteration   1: n = 1, mean = 4547 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4547, 4547, 4547, 4547, 4547, 4547, 4547, 4547 ms/op
Iteration   2: n = 1, mean = 4672 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4672, 4672, 4672, 4672, 4672, 4672, 4672, 4672 ms/op
Iteration   3: 
Bytes	130039808	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 4295 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4295, 4295, 4295, 4295, 4295, 4295, 4295, 4295 ms/op

# Run progress: 8.90% complete, ETA 02:04:39
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 5016 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5016, 5016, 5016, 5016, 5016, 5016, 5016, 5016 ms/op
# Warmup Iteration   2: n = 1, mean = 4731 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4731, 4731, 4731, 4731, 4731, 4731, 4731, 4731 ms/op
# Warmup Iteration   3: n = 1, mean = 4832 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4832, 4832, 4832, 4832, 4832, 4832, 4832, 4832 ms/op
Iteration   1: n = 1, mean = 4782 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4782, 4782, 4782, 4782, 4782, 4782, 4782, 4782 ms/op
Iteration   2: n = 1, mean = 4563 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4563, 4563, 4563, 4563, 4563, 4563, 4563, 4563 ms/op
Iteration   3: 
Bytes	125444096	org.lmdbjava.bench.LevelDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 5067 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 5067, 5067, 5067, 5067, 5067, 5067, 5067, 5067 ms/op


Result "readKey":
  N = 9
  mean =   4795.488 ±(99.9%) 517.795 ms/op

  Histogram, ms/op:
    [4200.000, 4300.000) = 1 
    [4300.000, 4400.000) = 0 
    [4400.000, 4500.000) = 0 
    [4500.000, 4600.000) = 2 
    [4600.000, 4700.000) = 1 
    [4700.000, 4800.000) = 1 
    [4800.000, 4900.000) = 0 
    [4900.000, 5000.000) = 1 
    [5000.000, 5100.000) = 2 
    [5100.000, 5200.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   4294.967 ms/op
     p(50.0000) =   4781.507 ms/op
     p(90.0000) =   5276.434 ms/op
     p(95.0000) =   5276.434 ms/op
     p(99.0000) =   5276.434 ms/op
     p(99.9000) =   5276.434 ms/op
     p(99.9900) =   5276.434 ms/op
     p(99.9990) =   5276.434 ms/op
     p(99.9999) =   5276.434 ms/op
    p(100.0000) =   5276.434 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readRev
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 9.09% complete, ETA 02:07:28
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 27481 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27481, 27481, 27481, 27481, 27481, 27481, 27481, 27481 ms/op
# Warmup Iteration   2: n = 1, mean = 16425 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 16425, 16425, 16425, 16425, 16425, 16425, 16425, 16425 ms/op
# Warmup Iteration   3: n = 1, mean = 11912 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11912, 11912, 11912, 11912, 11912, 11912, 11912, 11912 ms/op
Iteration   1: n = 1, mean = 11878 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11878, 11878, 11878, 11878, 11878, 11878, 11878, 11878 ms/op
Iteration   2: n = 1, mean = 11912 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11912, 11912, 11912, 11912, 11912, 11912, 11912, 11912 ms/op
Iteration   3: n = 1, mean = 12080 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12080, 12080, 12080, 12080, 12080, 12080, 12080, 12080 ms/op

# Run progress: 9.28% complete, ETA 02:20:04
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 23522 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 23522, 23522, 23522, 23522, 23522, 23522, 23522, 23522 ms/op
# Warmup Iteration   2: n = 1, mean = 17180 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 17180, 17180, 17180, 17180, 17180, 17180, 17180, 17180 ms/op
# Warmup Iteration   3: n = 1, mean = 15720 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 15720, 15720, 15720, 15720, 15720, 15720, 15720, 15720 ms/op
Iteration   1: n = 1, mean = 12012 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12012, 12012, 12012, 12012, 12012, 12012, 12012, 12012 ms/op
Iteration   2: n = 1, mean = 11694 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11694, 11694, 11694, 11694, 11694, 11694, 11694, 11694 ms/op
Iteration   3: n = 1, mean = 11560 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11560, 11560, 11560, 11560, 11560, 11560, 11560, 11560 ms/op

# Run progress: 9.47% complete, ETA 02:32:02
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 23455 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 23455, 23455, 23455, 23455, 23455, 23455, 23455, 23455 ms/op
# Warmup Iteration   2: n = 1, mean = 16727 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 16727, 16727, 16727, 16727, 16727, 16727, 16727, 16727 ms/op
# Warmup Iteration   3: n = 1, mean = 15485 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 15485, 15485, 15485, 15485, 15485, 15485, 15485, 15485 ms/op
Iteration   1: n = 1, mean = 11409 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11409, 11409, 11409, 11409, 11409, 11409, 11409, 11409 ms/op
Iteration   2: n = 1, mean = 11425 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11425, 11425, 11425, 11425, 11425, 11425, 11425, 11425 ms/op
Iteration   3: n = 1, mean = 11409 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11409, 11409, 11409, 11409, 11409, 11409, 11409, 11409 ms/op


Result "readRev":
  N = 9
  mean =  11708.633 ±(99.9%) 453.602 ms/op

  Histogram, ms/op:
    [11400.000, 11450.000) = 3 
    [11450.000, 11500.000) = 0 
    [11500.000, 11550.000) = 0 
    [11550.000, 11600.000) = 1 
    [11600.000, 11650.000) = 0 
    [11650.000, 11700.000) = 1 
    [11700.000, 11750.000) = 0 
    [11750.000, 11800.000) = 0 
    [11800.000, 11850.000) = 0 
    [11850.000, 11900.000) = 1 
    [11900.000, 11950.000) = 1 
    [11950.000, 12000.000) = 0 
    [12000.000, 12050.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  11408.507 ms/op
     p(50.0000) =  11693.720 ms/op
     p(90.0000) =  12079.596 ms/op
     p(95.0000) =  12079.596 ms/op
     p(99.0000) =  12079.596 ms/op
     p(99.9000) =  12079.596 ms/op
     p(99.9900) =  12079.596 ms/op
     p(99.9990) =  12079.596 ms/op
     p(99.9999) =  12079.596 ms/op
    p(100.0000) =  12079.596 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readRev
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 9.66% complete, ETA 02:43:14
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 25199 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 25199, 25199, 25199, 25199, 25199, 25199, 25199, 25199 ms/op
# Warmup Iteration   2: n = 1, mean = 15519 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 15519, 15519, 15519, 15519, 15519, 15519, 15519, 15519 ms/op
# Warmup Iteration   3: n = 1, mean = 15066 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 15066, 15066, 15066, 15066, 15066, 15066, 15066, 15066 ms/op
Iteration   1: n = 1, mean = 15066 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 15066, 15066, 15066, 15066, 15066, 15066, 15066, 15066 ms/op
Iteration   2: n = 1, mean = 11677 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11677, 11677, 11677, 11677, 11677, 11677, 11677, 11677 ms/op
Iteration   3: n = 1, mean = 11660 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11660, 11660, 11660, 11660, 11660, 11660, 11660, 11660 ms/op

# Run progress: 9.85% complete, ETA 02:54:39
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 19898 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 19898, 19898, 19898, 19898, 19898, 19898, 19898, 19898 ms/op
# Warmup Iteration   2: n = 1, mean = 15536 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 15536, 15536, 15536, 15536, 15536, 15536, 15536, 15536 ms/op
# Warmup Iteration   3: n = 1, mean = 11358 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11358, 11358, 11358, 11358, 11358, 11358, 11358, 11358 ms/op
Iteration   1: n = 1, mean = 11375 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11375, 11375, 11375, 11375, 11375, 11375, 11375, 11375 ms/op
Iteration   2: n = 1, mean = 11409 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11409, 11409, 11409, 11409, 11409, 11409, 11409, 11409 ms/op
Iteration   3: n = 1, mean = 11291 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11291, 11291, 11291, 11291, 11291, 11291, 11291, 11291 ms/op

# Run progress: 10.04% complete, ETA 03:03:32
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 24797 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 24797, 24797, 24797, 24797, 24797, 24797, 24797, 24797 ms/op
# Warmup Iteration   2: n = 1, mean = 17985 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 17985, 17985, 17985, 17985, 17985, 17985, 17985, 17985 ms/op
# Warmup Iteration   3: n = 1, mean = 17348 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 17348, 17348, 17348, 17348, 17348, 17348, 17348, 17348 ms/op
Iteration   1: n = 1, mean = 17062 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 17062, 17062, 17062, 17062, 17062, 17062, 17062, 17062 ms/op
Iteration   2: n = 1, mean = 13388 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 13388, 13388, 13388, 13388, 13388, 13388, 13388, 13388 ms/op
Iteration   3: n = 1, mean = 13355 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 13355, 13355, 13355, 13355, 13355, 13355, 13355, 13355 ms/op


Result "readRev":
  N = 9
  mean =  12920.320 ±(99.9%) 3393.820 ms/op

  Histogram, ms/op:
    [11000.000, 11500.000) = 3 
    [11500.000, 12000.000) = 2 
    [12000.000, 12500.000) = 0 
    [12500.000, 13000.000) = 0 
    [13000.000, 13500.000) = 2 
    [13500.000, 14000.000) = 0 
    [14000.000, 14500.000) = 0 
    [14500.000, 15000.000) = 0 
    [15000.000, 15500.000) = 1 
    [15500.000, 16000.000) = 0 
    [16000.000, 16500.000) = 0 
    [16500.000, 17000.000) = 0 
    [17000.000, 17500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  11291.066 ms/op
     p(50.0000) =  11676.942 ms/op
     p(90.0000) =  17062.429 ms/op
     p(95.0000) =  17062.429 ms/op
     p(99.0000) =  17062.429 ms/op
     p(99.9000) =  17062.429 ms/op
     p(99.9900) =  17062.429 ms/op
     p(99.9990) =  17062.429 ms/op
     p(99.9999) =  17062.429 ms/op
    p(100.0000) =  17062.429 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readRev
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 10.23% complete, ETA 03:15:25
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 9345 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9345, 9345, 9345, 9345, 9345, 9345, 9345, 9345 ms/op
# Warmup Iteration   2: n = 1, mean = 9110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9110, 9110, 9110, 9110, 9110, 9110, 9110, 9110 ms/op
# Warmup Iteration   3: n = 1, mean = 9110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9110, 9110, 9110, 9110, 9110, 9110, 9110, 9110 ms/op
Iteration   1: n = 1, mean = 9076 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9076, 9076, 9076, 9076, 9076, 9076, 9076, 9076 ms/op
Iteration   2: n = 1, mean = 9144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9144, 9144, 9144, 9144, 9144, 9144, 9144, 9144 ms/op
Iteration   3: n = 1, mean = 8993 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8993, 8993, 8993, 8993, 8993, 8993, 8993, 8993 ms/op

# Run progress: 10.42% complete, ETA 03:19:52
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 9060 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9060, 9060, 9060, 9060, 9060, 9060, 9060, 9060 ms/op
# Warmup Iteration   2: n = 1, mean = 8875 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8875, 8875, 8875, 8875, 8875, 8875, 8875, 8875 ms/op
# Warmup Iteration   3: n = 1, mean = 9144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9144, 9144, 9144, 9144, 9144, 9144, 9144, 9144 ms/op
Iteration   1: n = 1, mean = 9295 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9295, 9295, 9295, 9295, 9295, 9295, 9295, 9295 ms/op
Iteration   2: n = 1, mean = 9093 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9093, 9093, 9093, 9093, 9093, 9093, 9093, 9093 ms/op
Iteration   3: n = 1, mean = 9144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9144, 9144, 9144, 9144, 9144, 9144, 9144, 9144 ms/op

# Run progress: 10.61% complete, ETA 03:24:04
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 8959 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8959, 8959, 8959, 8959, 8959, 8959, 8959, 8959 ms/op
# Warmup Iteration   2: n = 1, mean = 9093 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9093, 9093, 9093, 9093, 9093, 9093, 9093, 9093 ms/op
# Warmup Iteration   3: n = 1, mean = 9227 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9227, 9227, 9227, 9227, 9227, 9227, 9227, 9227 ms/op
Iteration   1: n = 1, mean = 9009 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9009, 9009, 9009, 9009, 9009, 9009, 9009, 9009 ms/op
Iteration   2: n = 1, mean = 9127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9127, 9127, 9127, 9127, 9127, 9127, 9127, 9127 ms/op
Iteration   3: n = 1, mean = 9076 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9076, 9076, 9076, 9076, 9076, 9076, 9076, 9076 ms/op


Result "readRev":
  N = 9
  mean =   9106.300 ±(99.9%) 149.035 ms/op

  Histogram, ms/op:
    [8900.000, 8925.000) = 0 
    [8925.000, 8950.000) = 0 
    [8950.000, 8975.000) = 0 
    [8975.000, 9000.000) = 1 
    [9000.000, 9025.000) = 1 
    [9025.000, 9050.000) = 0 
    [9050.000, 9075.000) = 0 
    [9075.000, 9100.000) = 3 
    [9100.000, 9125.000) = 0 
    [9125.000, 9150.000) = 3 
    [9150.000, 9175.000) = 0 
    [9175.000, 9200.000) = 0 
    [9200.000, 9225.000) = 0 
    [9225.000, 9250.000) = 0 
    [9250.000, 9275.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   8992.588 ms/op
     p(50.0000) =   9093.251 ms/op
     p(90.0000) =   9294.578 ms/op
     p(95.0000) =   9294.578 ms/op
     p(99.0000) =   9294.578 ms/op
     p(99.9000) =   9294.578 ms/op
     p(99.9900) =   9294.578 ms/op
     p(99.9990) =   9294.578 ms/op
     p(99.9999) =   9294.578 ms/op
    p(100.0000) =   9294.578 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readRev
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 10.80% complete, ETA 03:28:08
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 17314 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 17314, 17314, 17314, 17314, 17314, 17314, 17314, 17314 ms/op
# Warmup Iteration   2: n = 1, mean = 16794 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 16794, 16794, 16794, 16794, 16794, 16794, 16794, 16794 ms/op
# Warmup Iteration   3: n = 1, mean = 16375 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 16375, 16375, 16375, 16375, 16375, 16375, 16375, 16375 ms/op
Iteration   1: n = 1, mean = 16425 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 16425, 16425, 16425, 16425, 16425, 16425, 16425, 16425 ms/op
Iteration   2: n = 1, mean = 12398 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12398, 12398, 12398, 12398, 12398, 12398, 12398, 12398 ms/op
Iteration   3: n = 1, mean = 12348 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12348, 12348, 12348, 12348, 12348, 12348, 12348, 12348 ms/op

# Run progress: 10.98% complete, ETA 03:37:07
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 31810 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31810, 31810, 31810, 31810, 31810, 31810, 31810, 31810 ms/op
# Warmup Iteration   2: n = 1, mean = 16207 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 16207, 16207, 16207, 16207, 16207, 16207, 16207, 16207 ms/op
# Warmup Iteration   3: n = 1, mean = 16073 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 16073, 16073, 16073, 16073, 16073, 16073, 16073, 16073 ms/op
Iteration   1: n = 1, mean = 11828 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11828, 11828, 11828, 11828, 11828, 11828, 11828, 11828 ms/op
Iteration   2: n = 1, mean = 11476 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11476, 11476, 11476, 11476, 11476, 11476, 11476, 11476 ms/op
Iteration   3: n = 1, mean = 11409 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11409, 11409, 11409, 11409, 11409, 11409, 11409, 11409 ms/op

# Run progress: 11.17% complete, ETA 03:46:39
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 24763 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 24763, 24763, 24763, 24763, 24763, 24763, 24763, 24763 ms/op
# Warmup Iteration   2: n = 1, mean = 15938 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 15938, 15938, 15938, 15938, 15938, 15938, 15938, 15938 ms/op
# Warmup Iteration   3: n = 1, mean = 11643 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11643, 11643, 11643, 11643, 11643, 11643, 11643, 11643 ms/op
Iteration   1: n = 1, mean = 11526 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11526, 11526, 11526, 11526, 11526, 11526, 11526, 11526 ms/op
Iteration   2: n = 1, mean = 11425 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11425, 11425, 11425, 11425, 11425, 11425, 11425, 11425 ms/op
Iteration   3: n = 1, mean = 11576 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11576, 11576, 11576, 11576, 11576, 11576, 11576, 11576 ms/op


Result "readRev":
  N = 9
  mean =  12267.873 ±(99.9%) 2696.740 ms/op

  Histogram, ms/op:
    [11000.000, 11500.000) = 3 
    [11500.000, 12000.000) = 3 
    [12000.000, 12500.000) = 2 
    [12500.000, 13000.000) = 0 
    [13000.000, 13500.000) = 0 
    [13500.000, 14000.000) = 0 
    [14000.000, 14500.000) = 0 
    [14500.000, 15000.000) = 0 
    [15000.000, 15500.000) = 0 
    [15500.000, 16000.000) = 0 
    [16000.000, 16500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  11408.507 ms/op
     p(50.0000) =  11576.279 ms/op
     p(90.0000) =  16424.894 ms/op
     p(95.0000) =  16424.894 ms/op
     p(99.0000) =  16424.894 ms/op
     p(99.9000) =  16424.894 ms/op
     p(99.9900) =  16424.894 ms/op
     p(99.9990) =  16424.894 ms/op
     p(99.9999) =  16424.894 ms/op
    p(100.0000) =  16424.894 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 11.36% complete, ETA 03:54:13
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1730 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1730, 1730, 1730, 1730, 1730, 1730, 1730, 1730 ms/op
# Warmup Iteration   2: n = 1, mean = 1523 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523 ms/op
# Warmup Iteration   3: n = 1, mean = 1518 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518 ms/op
Iteration   1: n = 1, mean = 1512 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512 ms/op
Iteration   2: n = 1, mean = 1279 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279 ms/op
Iteration   3: n = 1, mean = 1277 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1277, 1277, 1277, 1277, 1277, 1277, 1277, 1277 ms/op

# Run progress: 11.55% complete, ETA 03:51:24
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1493 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493 ms/op
# Warmup Iteration   2: n = 1, mean = 1311 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1311 ms/op
# Warmup Iteration   3: n = 1, mean = 1374 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1374, 1374, 1374, 1374, 1374, 1374, 1374, 1374 ms/op
Iteration   1: n = 1, mean = 1388 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388 ms/op
Iteration   2: n = 1, mean = 1254 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254 ms/op
Iteration   3: n = 1, mean = 1518 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518 ms/op

# Run progress: 11.74% complete, ETA 03:48:35
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1732 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732 ms/op
# Warmup Iteration   2: n = 1, mean = 1512 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512 ms/op
# Warmup Iteration   3: n = 1, mean = 1401 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401 ms/op
Iteration   1: n = 1, mean = 1399 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399 ms/op
Iteration   2: n = 1, mean = 1493 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493 ms/op
Iteration   3: n = 1, mean = 1233 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233 ms/op


Result "readSeq":
  N = 9
  mean =   1372.702 ±(99.9%) 194.771 ms/op

  Histogram, ms/op:
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 1 
    [1250.000, 1275.000) = 1 
    [1275.000, 1300.000) = 2 
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 0 
    [1375.000, 1400.000) = 2 
    [1400.000, 1425.000) = 0 
    [1425.000, 1450.000) = 0 
    [1450.000, 1475.000) = 0 
    [1475.000, 1500.000) = 1 
    [1500.000, 1525.000) = 2 
    [1525.000, 1550.000) = 0 
    [1550.000, 1575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1233.125 ms/op
     p(50.0000) =   1388.315 ms/op
     p(90.0000) =   1518.338 ms/op
     p(95.0000) =   1518.338 ms/op
     p(99.0000) =   1518.338 ms/op
     p(99.9000) =   1518.338 ms/op
     p(99.9900) =   1518.338 ms/op
     p(99.9990) =   1518.338 ms/op
     p(99.9999) =   1518.338 ms/op
    p(100.0000) =   1518.338 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 11.93% complete, ETA 03:45:56
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1776 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1776, 1776, 1776, 1776, 1776, 1776, 1776, 1776 ms/op
# Warmup Iteration   2: n = 1, mean = 1491 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491 ms/op
# Warmup Iteration   3: n = 1, mean = 1512 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512 ms/op
Iteration   1: n = 1, mean = 1397 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397 ms/op
Iteration   2: n = 1, mean = 1552 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552 ms/op
Iteration   3: n = 1, mean = 1229 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1229 ms/op

# Run progress: 12.12% complete, ETA 03:43:23
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1481 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481 ms/op
# Warmup Iteration   2: n = 1, mean = 1434 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434 ms/op
# Warmup Iteration   3: n = 1, mean = 1437 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437 ms/op
Iteration   1: n = 1, mean = 1407 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407 ms/op
Iteration   2: n = 1, mean = 1239 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239 ms/op
Iteration   3: n = 1, mean = 1260 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260 ms/op

# Run progress: 12.31% complete, ETA 03:40:49
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1927 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1927, 1927, 1927, 1927, 1927, 1927, 1927, 1927 ms/op
# Warmup Iteration   2: n = 1, mean = 1736 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736 ms/op
# Warmup Iteration   3: n = 1, mean = 1382 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382 ms/op
Iteration   1: n = 1, mean = 1353 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353 ms/op
Iteration   2: n = 1, mean = 1242 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242 ms/op
Iteration   3: n = 1, mean = 1231 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231 ms/op


Result "readSeq":
  N = 9
  mean =   1323.303 ±(99.9%) 188.483 ms/op

  Histogram, ms/op:
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 4 
    [1250.000, 1275.000) = 1 
    [1275.000, 1300.000) = 0 
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 1 
    [1375.000, 1400.000) = 1 
    [1400.000, 1425.000) = 1 
    [1425.000, 1450.000) = 0 
    [1450.000, 1475.000) = 0 
    [1475.000, 1500.000) = 0 
    [1500.000, 1525.000) = 0 
    [1525.000, 1550.000) = 0 
    [1550.000, 1575.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1228.931 ms/op
     p(50.0000) =   1260.388 ms/op
     p(90.0000) =   1551.892 ms/op
     p(95.0000) =   1551.892 ms/op
     p(99.0000) =   1551.892 ms/op
     p(99.9000) =   1551.892 ms/op
     p(99.9900) =   1551.892 ms/op
     p(99.9990) =   1551.892 ms/op
     p(99.9999) =   1551.892 ms/op
    p(100.0000) =   1551.892 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 12.50% complete, ETA 03:38:24
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1447 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447 ms/op
# Warmup Iteration   2: n = 1, mean = 1304 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304 ms/op
# Warmup Iteration   3: n = 1, mean = 1420 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420 ms/op
Iteration   1: n = 1, mean = 1462 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462 ms/op
Iteration   2: n = 1, mean = 1401 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401 ms/op
Iteration   3: n = 1, mean = 1399 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399 ms/op

# Run progress: 12.69% complete, ETA 03:36:05
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1416 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416 ms/op
# Warmup Iteration   2: n = 1, mean = 1202 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202 ms/op
# Warmup Iteration   3: n = 1, mean = 1497 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497 ms/op
Iteration   1: n = 1, mean = 1325 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325 ms/op
Iteration   2: n = 1, mean = 1168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168 ms/op
Iteration   3: n = 1, mean = 1172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172 ms/op

# Run progress: 12.88% complete, ETA 03:33:42
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1279 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279 ms/op
# Warmup Iteration   2: n = 1, mean = 1177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177 ms/op
# Warmup Iteration   3: n = 1, mean = 1336 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336 ms/op
Iteration   1: n = 1, mean = 1390 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1390 ms/op
Iteration   2: n = 1, mean = 1294 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294 ms/op
Iteration   3: n = 1, mean = 1298 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1298, 1298, 1298, 1298, 1298, 1298, 1298, 1298 ms/op


Result "readSeq":
  N = 9
  mean =   1323.303 ±(99.9%) 171.953 ms/op

  Histogram, ms/op:
    [1100.000, 1125.000) = 0 
    [1125.000, 1150.000) = 0 
    [1150.000, 1175.000) = 2 
    [1175.000, 1200.000) = 0 
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 0 
    [1275.000, 1300.000) = 2 
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 1 
    [1350.000, 1375.000) = 0 
    [1375.000, 1400.000) = 2 
    [1400.000, 1425.000) = 1 
    [1425.000, 1450.000) = 0 
    [1450.000, 1475.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1168.114 ms/op
     p(50.0000) =   1325.400 ms/op
     p(90.0000) =   1461.715 ms/op
     p(95.0000) =   1461.715 ms/op
     p(99.0000) =   1461.715 ms/op
     p(99.9000) =   1461.715 ms/op
     p(99.9900) =   1461.715 ms/op
     p(99.9990) =   1461.715 ms/op
     p(99.9999) =   1461.715 ms/op
    p(100.0000) =   1461.715 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 13.07% complete, ETA 03:31:25
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1743 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1743, 1743, 1743, 1743, 1743, 1743, 1743, 1743 ms/op
# Warmup Iteration   2: n = 1, mean = 1420 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420 ms/op
# Warmup Iteration   3: n = 1, mean = 1411 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411 ms/op
Iteration   1: n = 1, mean = 1252 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252 ms/op
Iteration   2: n = 1, mean = 1554 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554 ms/op
Iteration   3: n = 1, mean = 1252 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252 ms/op

# Run progress: 13.26% complete, ETA 03:29:22
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1866 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1866, 1866, 1866, 1866, 1866, 1866, 1866, 1866 ms/op
# Warmup Iteration   2: n = 1, mean = 1330 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330 ms/op
# Warmup Iteration   3: n = 1, mean = 1504 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1504, 1504, 1504, 1504, 1504, 1504, 1504, 1504 ms/op
Iteration   1: n = 1, mean = 1424 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424 ms/op
Iteration   2: n = 1, mean = 1437 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437 ms/op
Iteration   3: n = 1, mean = 1256 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256 ms/op

# Run progress: 13.45% complete, ETA 03:27:24
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1774 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1774, 1774, 1774, 1774, 1774, 1774, 1774, 1774 ms/op
# Warmup Iteration   2: n = 1, mean = 1422 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422 ms/op
# Warmup Iteration   3: n = 1, mean = 1495 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495 ms/op
Iteration   1: n = 1, mean = 1481 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481 ms/op
Iteration   2: n = 1, mean = 1338 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338 ms/op
Iteration   3: n = 1, mean = 1510 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510 ms/op


Result "readSeq":
  N = 9
  mean =   1389.247 ±(99.9%) 198.388 ms/op

  Histogram, ms/op:
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 3 
    [1275.000, 1300.000) = 0 
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 1 
    [1350.000, 1375.000) = 0 
    [1375.000, 1400.000) = 0 
    [1400.000, 1425.000) = 1 
    [1425.000, 1450.000) = 1 
    [1450.000, 1475.000) = 0 
    [1475.000, 1500.000) = 1 
    [1500.000, 1525.000) = 1 
    [1525.000, 1550.000) = 0 
    [1550.000, 1575.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1252.000 ms/op
     p(50.0000) =   1423.966 ms/op
     p(90.0000) =   1553.990 ms/op
     p(95.0000) =   1553.990 ms/op
     p(99.0000) =   1553.990 ms/op
     p(99.9000) =   1553.990 ms/op
     p(99.9900) =   1553.990 ms/op
     p(99.9990) =   1553.990 ms/op
     p(99.9999) =   1553.990 ms/op
    p(100.0000) =   1553.990 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 13.64% complete, ETA 03:25:28
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1686 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686 ms/op
# Warmup Iteration   2: n = 1, mean = 1323 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323 ms/op
# Warmup Iteration   3: n = 1, mean = 1596 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596 ms/op
Iteration   1: n = 1, mean = 1514 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514 ms/op
Iteration   2: n = 1, mean = 1409 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1409, 1409, 1409, 1409, 1409, 1409, 1409, 1409 ms/op
Iteration   3: n = 1, mean = 1499 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499 ms/op

# Run progress: 13.83% complete, ETA 03:23:29
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1523 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523 ms/op
# Warmup Iteration   2: n = 1, mean = 1627 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627 ms/op
# Warmup Iteration   3: n = 1, mean = 1453 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453 ms/op
Iteration   1: n = 1, mean = 1443 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443 ms/op
Iteration   2: n = 1, mean = 1296 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296 ms/op
Iteration   3: n = 1, mean = 1426 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426 ms/op

# Run progress: 14.02% complete, ETA 03:21:29
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1887 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1887, 1887, 1887, 1887, 1887, 1887, 1887, 1887 ms/op
# Warmup Iteration   2: n = 1, mean = 1642 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642 ms/op
# Warmup Iteration   3: n = 1, mean = 1418 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418 ms/op
Iteration   1: n = 1, mean = 1535 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535 ms/op
Iteration   2: n = 1, mean = 1332 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332 ms/op
Iteration   3: n = 1, mean = 1428 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428 ms/op


Result "readXxh64":
  N = 9
  mean =   1431.423 ±(99.9%) 134.381 ms/op

  Histogram, ms/op:
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 0 
    [1275.000, 1300.000) = 1 
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 1 
    [1350.000, 1375.000) = 0 
    [1375.000, 1400.000) = 0 
    [1400.000, 1425.000) = 1 
    [1425.000, 1450.000) = 3 
    [1450.000, 1475.000) = 0 
    [1475.000, 1500.000) = 1 
    [1500.000, 1525.000) = 1 
    [1525.000, 1550.000) = 1 
    [1550.000, 1575.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1296.040 ms/op
     p(50.0000) =   1428.161 ms/op
     p(90.0000) =   1535.115 ms/op
     p(95.0000) =   1535.115 ms/op
     p(99.0000) =   1535.115 ms/op
     p(99.9000) =   1535.115 ms/op
     p(99.9900) =   1535.115 ms/op
     p(99.9990) =   1535.115 ms/op
     p(99.9999) =   1535.115 ms/op
    p(100.0000) =   1535.115 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 14.20% complete, ETA 03:19:34
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1869 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1869, 1869, 1869, 1869, 1869, 1869, 1869, 1869 ms/op
# Warmup Iteration   2: n = 1, mean = 1453 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453 ms/op
# Warmup Iteration   3: n = 1, mean = 1365 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365 ms/op
Iteration   1: n = 1, mean = 1319 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319 ms/op
Iteration   2: n = 1, mean = 1317 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317 ms/op
Iteration   3: n = 1, mean = 1357 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357 ms/op

# Run progress: 14.39% complete, ETA 03:17:41
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1571 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571 ms/op
# Warmup Iteration   2: n = 1, mean = 1363 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363 ms/op
# Warmup Iteration   3: n = 1, mean = 1399 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399 ms/op
Iteration   1: n = 1, mean = 1499 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1499, 1499, 1499, 1499, 1499, 1499, 1499, 1499 ms/op
Iteration   2: n = 1, mean = 1411 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411 ms/op
Iteration   3: n = 1, mean = 1233 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233 ms/op

# Run progress: 14.58% complete, ETA 03:15:47
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1772 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772 ms/op
# Warmup Iteration   2: n = 1, mean = 1485 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1485, 1485, 1485, 1485, 1485, 1485, 1485, 1485 ms/op
# Warmup Iteration   3: n = 1, mean = 1476 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476 ms/op
Iteration   1: n = 1, mean = 1420 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420 ms/op
Iteration   2: n = 1, mean = 1420 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420 ms/op
Iteration   3: n = 1, mean = 1403 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403 ms/op


Result "readXxh64":
  N = 9
  mean =   1375.499 ±(99.9%) 130.909 ms/op

  Histogram, ms/op:
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 1 
    [1250.000, 1275.000) = 0 
    [1275.000, 1300.000) = 0 
    [1300.000, 1325.000) = 2 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 1 
    [1375.000, 1400.000) = 0 
    [1400.000, 1425.000) = 4 
    [1425.000, 1450.000) = 0 
    [1450.000, 1475.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1233.125 ms/op
     p(50.0000) =   1402.995 ms/op
     p(90.0000) =   1499.464 ms/op
     p(95.0000) =   1499.464 ms/op
     p(99.0000) =   1499.464 ms/op
     p(99.9000) =   1499.464 ms/op
     p(99.9900) =   1499.464 ms/op
     p(99.9990) =   1499.464 ms/op
     p(99.9999) =   1499.464 ms/op
    p(100.0000) =   1499.464 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 14.77% complete, ETA 03:14:00
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1642 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642 ms/op
# Warmup Iteration   2: n = 1, mean = 1407 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407 ms/op
# Warmup Iteration   3: n = 1, mean = 1384 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1384, 1384, 1384, 1384, 1384, 1384, 1384, 1384 ms/op
Iteration   1: n = 1, mean = 1577 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577 ms/op
Iteration   2: n = 1, mean = 1294 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294 ms/op
Iteration   3: n = 1, mean = 1256 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256 ms/op

# Run progress: 14.96% complete, ETA 03:12:15
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1223 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1223, 1223, 1223, 1223, 1223, 1223, 1223, 1223 ms/op
# Warmup Iteration   2: n = 1, mean = 1466 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466 ms/op
# Warmup Iteration   3: n = 1, mean = 1502 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502 ms/op
Iteration   1: n = 1, mean = 1346 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346 ms/op
Iteration   2: n = 1, mean = 1189 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189 ms/op
Iteration   3: n = 1, mean = 1193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193 ms/op

# Run progress: 15.15% complete, ETA 03:10:28
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1443 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443 ms/op
# Warmup Iteration   2: n = 1, mean = 1361 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361 ms/op
# Warmup Iteration   3: n = 1, mean = 1592 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592 ms/op
Iteration   1: n = 1, mean = 1242 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242 ms/op
Iteration   2: n = 1, mean = 1460 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460 ms/op
Iteration   3: n = 1, mean = 1464 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464 ms/op


Result "readXxh64":
  N = 9
  mean =   1335.653 ±(99.9%) 229.220 ms/op

  Histogram, ms/op:
    [1100.000, 1150.000) = 0 
    [1150.000, 1200.000) = 2 
    [1200.000, 1250.000) = 1 
    [1250.000, 1300.000) = 2 
    [1300.000, 1350.000) = 1 
    [1350.000, 1400.000) = 0 
    [1400.000, 1450.000) = 0 
    [1450.000, 1500.000) = 2 
    [1500.000, 1550.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1189.085 ms/op
     p(50.0000) =   1293.943 ms/op
     p(90.0000) =   1577.058 ms/op
     p(95.0000) =   1577.058 ms/op
     p(99.0000) =   1577.058 ms/op
     p(99.9000) =   1577.058 ms/op
     p(99.9900) =   1577.058 ms/op
     p(99.9990) =   1577.058 ms/op
     p(99.9999) =   1577.058 ms/op
    p(100.0000) =   1577.058 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 15.34% complete, ETA 03:08:48
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1906 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1906, 1906, 1906, 1906, 1906, 1906, 1906, 1906 ms/op
# Warmup Iteration   2: n = 1, mean = 1539 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1539, 1539, 1539, 1539, 1539, 1539, 1539, 1539 ms/op
# Warmup Iteration   3: n = 1, mean = 1705 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1705, 1705, 1705, 1705, 1705, 1705, 1705, 1705 ms/op
Iteration   1: n = 1, mean = 1609 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609 ms/op
Iteration   2: n = 1, mean = 1317 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317 ms/op
Iteration   3: n = 1, mean = 1535 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1535, 1535, 1535, 1535, 1535, 1535, 1535, 1535 ms/op

# Run progress: 15.53% complete, ETA 03:07:24
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1822 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1822, 1822, 1822, 1822, 1822, 1822, 1822, 1822 ms/op
# Warmup Iteration   2: n = 1, mean = 1602 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602 ms/op
# Warmup Iteration   3: n = 1, mean = 1650 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650 ms/op
Iteration   1: n = 1, mean = 1650 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650 ms/op
Iteration   2: n = 1, mean = 1487 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487 ms/op
Iteration   3: n = 1, mean = 1596 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596 ms/op

# Run progress: 15.72% complete, ETA 03:06:02
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1564 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1564, 1564, 1564, 1564, 1564, 1564, 1564, 1564 ms/op
# Warmup Iteration   2: n = 1, mean = 1292 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292 ms/op
# Warmup Iteration   3: n = 1, mean = 1466 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466 ms/op
Iteration   1: n = 1, mean = 1464 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1464, 1464, 1464, 1464, 1464, 1464, 1464, 1464 ms/op
Iteration   2: n = 1, mean = 1286 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1286 ms/op
Iteration   3: n = 1, mean = 1598 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598 ms/op


Result "readXxh64":
  N = 9
  mean =   1504.590 ±(99.9%) 218.475 ms/op

  Histogram, ms/op:
    [1200.000, 1250.000) = 0 
    [1250.000, 1300.000) = 1 
    [1300.000, 1350.000) = 1 
    [1350.000, 1400.000) = 0 
    [1400.000, 1450.000) = 0 
    [1450.000, 1500.000) = 2 
    [1500.000, 1550.000) = 1 
    [1550.000, 1600.000) = 2 
    [1600.000, 1650.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1285.554 ms/op
     p(50.0000) =   1535.115 ms/op
     p(90.0000) =   1650.459 ms/op
     p(95.0000) =   1650.459 ms/op
     p(99.0000) =   1650.459 ms/op
     p(99.9000) =   1650.459 ms/op
     p(99.9900) =   1650.459 ms/op
     p(99.9990) =   1650.459 ms/op
     p(99.9999) =   1650.459 ms/op
    p(100.0000) =   1650.459 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.write
# Parameters: (batchSize = 1000000, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 15.91% complete, ETA 03:04:32
# Fork: 1 of 3
# Warmup Iteration   1: n = 3, mean = 312 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 290, 305, 340, 340, 340, 340, 340, 340 ms/op
# Warmup Iteration   2: n = 5, mean = 273 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 235, 242, 393, 393, 393, 393, 393, 393 ms/op
# Warmup Iteration   3: n = 4, mean = 293 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 268, 292, 322, 322, 322, 322, 322, 322 ms/op
Iteration   1: n = 4, mean = 311 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 273, 303, 367, 367, 367, 367, 367, 367 ms/op
Iteration   2: n = 4, mean = 288 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 270, 272, 338, 338, 338, 338, 338, 338 ms/op
Iteration   3: n = 4, mean = 299 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 265, 268, 396, 396, 396, 396, 396, 396 ms/op

# Run progress: 16.10% complete, ETA 03:02:38
# Fork: 2 of 3
# Warmup Iteration   1: n = 3, mean = 329 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 292, 309, 385, 385, 385, 385, 385, 385 ms/op
# Warmup Iteration   2: n = 5, mean = 242 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 238, 240, 250, 250, 250, 250, 250, 250 ms/op
# Warmup Iteration   3: n = 5, mean = 244 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 238, 246, 247, 247, 247, 247, 247, 247 ms/op
Iteration   1: n = 4, mean = 306 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 262, 267, 429, 429, 429, 429, 429, 429 ms/op
Iteration   2: n = 4, mean = 295 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 264, 294, 328, 328, 328, 328, 328, 328 ms/op
Iteration   3: n = 4, mean = 314 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 271, 319, 345, 345, 345, 345, 345, 345 ms/op

# Run progress: 16.29% complete, ETA 03:00:45
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 313 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 297, 301, 340, 340, 340, 340, 340, 340 ms/op
# Warmup Iteration   2: n = 4, mean = 299 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 272, 295, 336, 336, 336, 336, 336, 336 ms/op
# Warmup Iteration   3: n = 4, mean = 323 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 275, 327, 362, 362, 362, 362, 362, 362 ms/op
Iteration   1: n = 4, mean = 304 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 271, 306, 334, 334, 334, 334, 334, 334 ms/op
Iteration   2: n = 4, mean = 301 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 270, 300, 334, 334, 334, 334, 334, 334 ms/op
Iteration   3: n = 4, mean = 302 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 272, 299, 336, 336, 336, 336, 336, 336 ms/op


Result "write":
  N = 36
  mean =    302.332 ±(99.9%) 24.882 ms/op

  Histogram, ms/op:
    [200.000, 225.000) = 0 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 18 
    [275.000, 300.000) = 2 
    [300.000, 325.000) = 3 
    [325.000, 350.000) = 10 
    [350.000, 375.000) = 1 
    [375.000, 400.000) = 1 
    [400.000, 425.000) = 0 
    [425.000, 450.000) = 1 
    [450.000, 475.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    261.882 ms/op
     p(50.0000) =    276.300 ms/op
     p(90.0000) =    351.588 ms/op
     p(95.0000) =    400.792 ms/op
     p(99.0000) =    428.868 ms/op
     p(99.9000) =    428.868 ms/op
     p(99.9900) =    428.868 ms/op
     p(99.9990) =    428.868 ms/op
     p(99.9999) =    428.868 ms/op
    p(100.0000) =    428.868 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.write
# Parameters: (batchSize = 1000000, intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 16.48% complete, ETA 02:58:55
# Fork: 1 of 3
# Warmup Iteration   1: n = 3, mean = 329 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 293, 307, 387, 387, 387, 387, 387, 387 ms/op
# Warmup Iteration   2: n = 4, mean = 246 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 245, 246, 248, 248, 248, 248, 248, 248 ms/op
# Warmup Iteration   3: n = 4, mean = 243 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 240, 243, 247, 247, 247, 247, 247, 247 ms/op
Iteration   1: n = 3, mean = 293 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 246, 272, 361, 361, 361, 361, 361, 361 ms/op
Iteration   2: n = 4, mean = 283 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 240, 272, 346, 346, 346, 346, 346, 346 ms/op
Iteration   3: n = 3, mean = 282 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 267, 280, 297, 297, 297, 297, 297, 297 ms/op

# Run progress: 16.67% complete, ETA 02:57:05
# Fork: 2 of 3
# Warmup Iteration   1: n = 3, mean = 327 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 292, 298, 390, 390, 390, 390, 390, 390 ms/op
# Warmup Iteration   2: n = 4, mean = 263 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 242, 243, 326, 326, 326, 326, 326, 326 ms/op
# Warmup Iteration   3: n = 4, mean = 284 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 269, 271, 326, 326, 326, 326, 326, 326 ms/op
Iteration   1: n = 3, mean = 296 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 271, 277, 340, 340, 340, 340, 340, 340 ms/op
Iteration   2: n = 4, mean = 256 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 237, 258, 271, 271, 271, 271, 271, 271 ms/op
Iteration   3: n = 3, mean = 299 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 268, 294, 336, 336, 336, 336, 336, 336 ms/op

# Run progress: 16.86% complete, ETA 02:55:19
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 315 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 300, 309, 336, 336, 336, 336, 336, 336 ms/op
# Warmup Iteration   2: n = 4, mean = 264 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 241, 262, 289, 289, 289, 289, 289, 289 ms/op
# Warmup Iteration   3: n = 4, mean = 238 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 235, 237, 243, 243, 243, 243, 243, 243 ms/op
Iteration   1: n = 3, mean = 301 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 269, 299, 333, 333, 333, 333, 333, 333 ms/op
Iteration   2: n = 4, mean = 268 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 236, 269, 297, 297, 297, 297, 297, 297 ms/op
Iteration   3: n = 3, mean = 282 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 269, 283, 295, 295, 295, 295, 295, 295 ms/op


Result "write":
  N = 30
  mean =    282.749 ±(99.9%) 21.681 ms/op

  Histogram, ms/op:
    [200.000, 212.500) = 0 
    [212.500, 225.000) = 0 
    [225.000, 237.500) = 2 
    [237.500, 250.000) = 3 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 12 
    [275.000, 287.500) = 3 
    [287.500, 300.000) = 5 
    [300.000, 312.500) = 0 
    [312.500, 325.000) = 0 
    [325.000, 337.500) = 2 
    [337.500, 350.000) = 2 
    [350.000, 362.500) = 1 
    [362.500, 375.000) = 0 
    [375.000, 387.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    235.667 ms/op
     p(50.0000) =    272.105 ms/op
     p(90.0000) =    339.372 ms/op
     p(95.0000) =    352.348 ms/op
     p(99.0000) =    360.710 ms/op
     p(99.9000) =    360.710 ms/op
     p(99.9900) =    360.710 ms/op
     p(99.9990) =    360.710 ms/op
     p(99.9999) =    360.710 ms/op
    p(100.0000) =    360.710 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.write
# Parameters: (batchSize = 1000000, intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 17.05% complete, ETA 02:53:33
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1592 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592 ms/op
# Warmup Iteration   2: n = 1, mean = 1294 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294 ms/op
# Warmup Iteration   3: n = 1, mean = 1323 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1323, 1323, 1323, 1323, 1323, 1323, 1323, 1323 ms/op
Iteration   1: n = 1, mean = 1386 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386 ms/op
Iteration   2: n = 1, mean = 1288 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288 ms/op
Iteration   3: n = 1, mean = 1348 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348 ms/op

# Run progress: 17.23% complete, ETA 02:51:58
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1434 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1434, 1434, 1434, 1434, 1434, 1434, 1434, 1434 ms/op
# Warmup Iteration   2: n = 1, mean = 1135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135 ms/op
# Warmup Iteration   3: n = 1, mean = 1476 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476 ms/op
Iteration   1: n = 1, mean = 1218 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218 ms/op
Iteration   2: n = 1, mean = 1476 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476 ms/op
Iteration   3: n = 1, mean = 1078 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078 ms/op

# Run progress: 17.42% complete, ETA 02:50:22
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1661 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661 ms/op
# Warmup Iteration   2: n = 1, mean = 1445 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1445, 1445, 1445, 1445, 1445, 1445, 1445, 1445 ms/op
# Warmup Iteration   3: n = 1, mean = 1330 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330 ms/op
Iteration   1: n = 1, mean = 1327 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327 ms/op
Iteration   2: n = 1, mean = 1596 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596 ms/op
Iteration   3: n = 1, mean = 1197 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197 ms/op


Result "write":
  N = 9
  mean =   1324.002 ±(99.9%) 259.431 ms/op

  Histogram, ms/op:
    [1000.000, 1050.000) = 0 
    [1050.000, 1100.000) = 1 
    [1100.000, 1150.000) = 0 
    [1150.000, 1200.000) = 1 
    [1200.000, 1250.000) = 1 
    [1250.000, 1300.000) = 1 
    [1300.000, 1350.000) = 2 
    [1350.000, 1400.000) = 1 
    [1400.000, 1450.000) = 0 
    [1450.000, 1500.000) = 1 
    [1500.000, 1550.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1077.936 ms/op
     p(50.0000) =   1327.497 ms/op
     p(90.0000) =   1595.933 ms/op
     p(95.0000) =   1595.933 ms/op
     p(99.0000) =   1595.933 ms/op
     p(99.9000) =   1595.933 ms/op
     p(99.9900) =   1595.933 ms/op
     p(99.9990) =   1595.933 ms/op
     p(99.9999) =   1595.933 ms/op
    p(100.0000) =   1595.933 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LevelDb.write
# Parameters: (batchSize = 1000000, intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 17.61% complete, ETA 02:48:51
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1508 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508 ms/op
# Warmup Iteration   2: n = 1, mean = 1395 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395 ms/op
# Warmup Iteration   3: n = 1, mean = 1407 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407 ms/op
Iteration   1: n = 1, mean = 1288 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1288 ms/op
Iteration   2: n = 1, mean = 1124 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124 ms/op
Iteration   3: n = 1, mean = 1290 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290 ms/op

# Run progress: 17.80% complete, ETA 02:47:21
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1432 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432 ms/op
# Warmup Iteration   2: n = 1, mean = 1126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126 ms/op
# Warmup Iteration   3: n = 1, mean = 1548 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548 ms/op
Iteration   1: n = 1, mean = 1271 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271 ms/op
Iteration   2: n = 1, mean = 1111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1111, 1111, 1111, 1111, 1111, 1111, 1111, 1111 ms/op
Iteration   3: n = 1, mean = 1252 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252 ms/op

# Run progress: 17.99% complete, ETA 02:45:52
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1657 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657 ms/op
# Warmup Iteration   2: n = 1, mean = 1336 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1336, 1336, 1336, 1336, 1336, 1336, 1336, 1336 ms/op
# Warmup Iteration   3: n = 1, mean = 1340 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340 ms/op
Iteration   1: n = 1, mean = 1470 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470 ms/op
Iteration   2: n = 1, mean = 1130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130 ms/op
Iteration   3: n = 1, mean = 1118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1118, 1118, 1118, 1118, 1118, 1118, 1118, 1118 ms/op


Result "write":
  N = 9
  mean =   1228.232 ±(99.9%) 200.999 ms/op

  Histogram, ms/op:
    [1100.000, 1125.000) = 3 
    [1125.000, 1150.000) = 1 
    [1150.000, 1175.000) = 0 
    [1175.000, 1200.000) = 0 
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 2 
    [1275.000, 1300.000) = 2 
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 0 
    [1375.000, 1400.000) = 0 
    [1400.000, 1425.000) = 0 
    [1425.000, 1450.000) = 0 
    [1450.000, 1475.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1111.491 ms/op
     p(50.0000) =   1252.000 ms/op
     p(90.0000) =   1470.104 ms/op
     p(95.0000) =   1470.104 ms/op
     p(99.0000) =   1470.104 ms/op
     p(99.9000) =   1470.104 ms/op
     p(99.9900) =   1470.104 ms/op
     p(99.9990) =   1470.104 ms/op
     p(99.9999) =   1470.104 ms/op
    p(100.0000) =   1470.104 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 18.18% complete, ETA 02:44:26
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readCrc-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 143, 182, 182, 182, 182, 182, 182 ms/op
# Warmup Iteration   2: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 128, 134, 134, 134, 134, 134, 134 ms/op
# Warmup Iteration   3: n = 7, mean = 168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 142, 208, 208, 208, 208, 208, 208 ms/op
Iteration   1: n = 8, mean = 137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 140, 142, 142, 142, 142, 142, 142 ms/op
Iteration   2: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 143, 188, 188, 188, 188, 188, 188 ms/op
Iteration   3: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 127, 128, 128, 128, 128, 128, 128 ms/op

# Run progress: 18.37% complete, ETA 02:42:56
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readCrc-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 7, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 148, 201, 201, 201, 201, 201, 201 ms/op
# Warmup Iteration   2: n = 7, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 148, 196, 196, 196, 196, 196, 196 ms/op
# Warmup Iteration   3: n = 6, mean = 168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 153, 211, 211, 211, 211, 211, 211 ms/op
Iteration   1: n = 7, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 149, 204, 204, 204, 204, 204, 204 ms/op
Iteration   2: n = 8, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 131, 147, 147, 147, 147, 147, 147 ms/op
Iteration   3: n = 7, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 148, 210, 210, 210, 210, 210, 210 ms/op

# Run progress: 18.56% complete, ETA 02:41:28
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readCrc-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 7, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 146, 188, 188, 188, 188, 188, 188 ms/op
# Warmup Iteration   2: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 130, 131, 131, 131, 131, 131, 131 ms/op
# Warmup Iteration   3: n = 7, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 144, 208, 208, 208, 208, 208, 208 ms/op
Iteration   1: n = 6, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 149, 218, 218, 218, 218, 218, 218 ms/op
Iteration   2: n = 7, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 147, 211, 211, 211, 211, 211, 211 ms/op
Iteration   3: n = 7, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 147, 211, 211, 211, 211, 211, 211 ms/op


Result "readCrc":
  N = 65
  mean =    149.237 ±(99.9%) 10.104 ms/op

  Histogram, ms/op:
    [120.000, 130.000) = 15 
    [130.000, 140.000) = 5 
    [140.000, 150.000) = 33 
    [150.000, 160.000) = 2 
    [160.000, 170.000) = 0 
    [170.000, 180.000) = 1 
    [180.000, 190.000) = 1 
    [190.000, 200.000) = 3 
    [200.000, 210.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    126.878 ms/op
     p(50.0000) =    145.752 ms/op
     p(90.0000) =    193.043 ms/op
     p(95.0000) =    210.528 ms/op
     p(99.0000) =    218.104 ms/op
     p(99.9000) =    218.104 ms/op
     p(99.9900) =    218.104 ms/op
     p(99.9990) =    218.104 ms/op
     p(99.9999) =    218.104 ms/op
    p(100.0000) =    218.104 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 18.75% complete, ETA 02:40:01
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	172249088	org.lmdbjava.bench.LmdbJavaAgrona.readCrc-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 132, 232, 232, 232, 232, 232, 232 ms/op
# Warmup Iteration   2: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 131, 193, 193, 193, 193, 193, 193 ms/op
# Warmup Iteration   3: n = 7, mean = 168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 149, 200, 200, 200, 200, 200, 200 ms/op
Iteration   1: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 121, 132, 138, 138, 138, 138, 138, 138 ms/op
Iteration   2: n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 116, 116, 118, 118, 118, 118, 118, 118 ms/op
Iteration   3: n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 116, 116, 116, 116, 116, 116, 116, 116 ms/op

# Run progress: 18.94% complete, ETA 02:38:38
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	172146688	org.lmdbjava.bench.LmdbJavaAgrona.readCrc-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 7, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 134, 226, 226, 226, 226, 226, 226 ms/op
# Warmup Iteration   2: n = 7, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 149, 199, 199, 199, 199, 199, 199 ms/op
# Warmup Iteration   3: n = 7, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 133, 191, 191, 191, 191, 191, 191 ms/op
Iteration   1: n = 8, mean = 138 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 118, 133, 192, 192, 192, 192, 192, 192 ms/op
Iteration   2: n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 117, 117, 118, 118, 118, 118, 118, 118 ms/op
Iteration   3: n = 7, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 149, 201, 201, 201, 201, 201, 201 ms/op

# Run progress: 19.13% complete, ETA 02:37:18
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	172040192	org.lmdbjava.bench.LmdbJavaAgrona.readCrc-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 7, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 133, 235, 235, 235, 235, 235, 235 ms/op
# Warmup Iteration   2: n = 9, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 116, 118, 202, 202, 202, 202, 202, 202 ms/op
# Warmup Iteration   3: n = 8, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 117, 132, 192, 192, 192, 192, 192, 192 ms/op
Iteration   1: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 116, 117, 120, 120, 120, 120, 120, 120 ms/op
Iteration   2: n = 8, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 116, 117, 175, 175, 175, 175, 175, 175 ms/op
Iteration   3: n = 8, mean = 137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 116, 133, 189, 189, 189, 189, 189, 189 ms/op


Result "readCrc":
  N = 75
  mean =    127.855 ±(99.9%) 7.277 ms/op

  Histogram, ms/op:
    [110.000, 120.000) = 42 
    [120.000, 130.000) = 5 
    [130.000, 140.000) = 17 
    [140.000, 150.000) = 6 
    [150.000, 160.000) = 0 
    [160.000, 170.000) = 1 
    [170.000, 180.000) = 1 
    [180.000, 190.000) = 1 
    [190.000, 200.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    115.606 ms/op
     p(50.0000) =    117.703 ms/op
     p(90.0000) =    149.265 ms/op
     p(95.0000) =    177.524 ms/op
     p(99.0000) =    201.064 ms/op
     p(99.9000) =    201.064 ms/op
     p(99.9900) =    201.064 ms/op
     p(99.9990) =    201.064 ms/op
     p(99.9999) =    201.064 ms/op
    p(100.0000) =    201.064 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 19.32% complete, ETA 02:36:00
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	128847872	org.lmdbjava.bench.LmdbJavaAgrona.readCrc-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 6, mean = 193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 166, 176, 281, 281, 281, 281, 281, 281 ms/op
# Warmup Iteration   2: n = 6, mean = 183 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 158, 177, 236, 236, 236, 236, 236, 236 ms/op
# Warmup Iteration   3: n = 7, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 157, 158, 159, 159, 159, 159, 159, 159 ms/op
Iteration   1: n = 6, mean = 184 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 157, 176, 242, 242, 242, 242, 242, 242 ms/op
Iteration   2: n = 5, mean = 203 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 189, 242, 242, 242, 242, 242, 242 ms/op
Iteration   3: n = 6, mean = 181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 158, 177, 225, 225, 225, 225, 225, 225 ms/op

# Run progress: 19.51% complete, ETA 02:34:46
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	128847872	org.lmdbjava.bench.LmdbJavaAgrona.readCrc-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 6, mean = 181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 158, 177, 229, 229, 229, 229, 229, 229 ms/op
# Warmup Iteration   2: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 158, 177, 205, 205, 205, 205, 205, 205 ms/op
# Warmup Iteration   3: n = 6, mean = 177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 157, 177, 212, 212, 212, 212, 212, 212 ms/op
Iteration   1: n = 6, mean = 195 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 174, 177, 242, 242, 242, 242, 242, 242 ms/op
Iteration   2: n = 7, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 155, 156, 174, 174, 174, 174, 174, 174 ms/op
Iteration   3: n = 6, mean = 182 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 157, 175, 241, 241, 241, 241, 241, 241 ms/op

# Run progress: 19.70% complete, ETA 02:33:32
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	128847872	org.lmdbjava.bench.LmdbJavaAgrona.readCrc-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 6, mean = 182 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 162, 165, 223, 223, 223, 223, 223, 223 ms/op
# Warmup Iteration   2: n = 7, mean = 151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 145, 162, 162, 162, 162, 162, 162 ms/op
# Warmup Iteration   3: n = 6, mean = 173 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 157, 164, 228, 228, 228, 228, 228, 228 ms/op
Iteration   1: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 162, 164, 229, 229, 229, 229, 229, 229 ms/op
Iteration   2: n = 6, mean = 173 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 163, 229, 229, 229, 229, 229, 229 ms/op
Iteration   3: n = 7, mean = 145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 144, 151, 151, 151, 151, 151, 151 ms/op


Result "readCrc":
  N = 55
  mean =    176.494 ±(99.9%) 13.220 ms/op

  Histogram, ms/op:
    [140.000, 150.000) = 6 
    [150.000, 160.000) = 9 
    [160.000, 170.000) = 10 
    [170.000, 180.000) = 19 
    [180.000, 190.000) = 1 
    [190.000, 200.000) = 1 
    [200.000, 210.000) = 0 
    [210.000, 220.000) = 0 
    [220.000, 230.000) = 4 
    [230.000, 240.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    143.655 ms/op
     p(50.0000) =    174.064 ms/op
     p(90.0000) =    230.005 ms/op
     p(95.0000) =    242.221 ms/op
     p(99.0000) =    242.221 ms/op
     p(99.9000) =    242.221 ms/op
     p(99.9900) =    242.221 ms/op
     p(99.9990) =    242.221 ms/op
     p(99.9999) =    242.221 ms/op
    p(100.0000) =    242.221 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 19.89% complete, ETA 02:32:18
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	189153280	org.lmdbjava.bench.LmdbJavaAgrona.readCrc-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 7, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 166, 185, 185, 185, 185, 185, 185 ms/op
# Warmup Iteration   2: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 150, 168, 227, 227, 227, 227, 227, 227 ms/op
# Warmup Iteration   3: n = 7, mean = 148 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 148, 149, 149, 149, 149, 149, 149 ms/op
Iteration   1: n = 7, mean = 148 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 148, 149, 149, 149, 149, 149, 149 ms/op
Iteration   2: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 147, 148, 148, 148, 148, 148, 148 ms/op
Iteration   3: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 148, 148, 148, 148, 148, 148, 148 ms/op

# Run progress: 20.08% complete, ETA 02:31:10
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	188956672	org.lmdbjava.bench.LmdbJavaAgrona.readCrc-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 5, mean = 212 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 182, 203, 269, 269, 269, 269, 269, 269 ms/op
# Warmup Iteration   2: n = 6, mean = 180 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 179, 180, 180, 180, 180, 180, 180, 180 ms/op
# Warmup Iteration   3: n = 5, mean = 212 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 186, 203, 264, 264, 264, 264, 264, 264 ms/op
Iteration   1: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 178, 179, 181, 181, 181, 181, 181, 181 ms/op
Iteration   2: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 178, 179, 179, 179, 179, 179, 179, 179 ms/op
Iteration   3: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 179, 179, 179, 179, 179, 179, 179, 179 ms/op

# Run progress: 20.27% complete, ETA 02:30:03
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	189202432	org.lmdbjava.bench.LmdbJavaAgrona.readCrc-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 6, mean = 193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 163, 172, 264, 264, 264, 264, 264, 264 ms/op
# Warmup Iteration   2: n = 7, mean = 171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 155, 221, 221, 221, 221, 221, 221 ms/op
# Warmup Iteration   3: n = 7, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 155, 218, 218, 218, 218, 218, 218 ms/op
Iteration   1: n = 7, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 138, 196, 196, 196, 196, 196, 196 ms/op
Iteration   2: n = 6, mean = 180 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 151, 172, 217, 217, 217, 217, 217, 217 ms/op
Iteration   3: n = 7, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 155, 198, 198, 198, 198, 198, 198 ms/op


Result "readCrc":
  N = 59
  mean =    162.156 ±(99.9%) 8.819 ms/op

  Histogram, ms/op:
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 5 
    [140.000, 145.000) = 1 
    [145.000, 150.000) = 21 
    [150.000, 155.000) = 2 
    [155.000, 160.000) = 4 
    [160.000, 165.000) = 1 
    [165.000, 170.000) = 1 
    [170.000, 175.000) = 2 
    [175.000, 180.000) = 17 
    [180.000, 185.000) = 1 
    [185.000, 190.000) = 0 
    [190.000, 195.000) = 0 
    [195.000, 200.000) = 2 
    [200.000, 205.000) = 0 
    [205.000, 210.000) = 0 
    [210.000, 215.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    135.791 ms/op
     p(50.0000) =    155.189 ms/op
     p(90.0000) =    179.569 ms/op
     p(95.0000) =    197.657 ms/op
     p(99.0000) =    217.055 ms/op
     p(99.9000) =    217.055 ms/op
     p(99.9900) =    217.055 ms/op
     p(99.9990) =    217.055 ms/op
     p(99.9999) =    217.055 ms/op
    p(100.0000) =    217.055 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 20.45% complete, ETA 02:28:57
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 114, 117, 175, 175, 175, 175, 175, 175 ms/op
# Warmup Iteration   2: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 116, 165, 165, 165, 165, 165, 165 ms/op
# Warmup Iteration   3: n = 9, mean = 120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 107, 161, 161, 161, 161, 161, 161 ms/op
Iteration   1: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 104, 148, 152, 152, 152, 152, 152 ms/op
Iteration   2: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 93, 162, 167, 167, 167, 167, 167 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 103, 131, 134, 134, 134, 134, 134 ms/op

# Run progress: 20.64% complete, ETA 02:27:44
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 112, 163, 163, 163, 163, 163, 163 ms/op
# Warmup Iteration   2: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 101, 104, 104, 104, 104, 104, 104 ms/op
# Warmup Iteration   3: n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 112, 161, 161, 161, 161, 161, 161 ms/op
Iteration   1: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 99, 148, 153, 153, 153, 153, 153 ms/op
Iteration   2: n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 111, 158, 158, 158, 158, 158, 158 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 11, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 100, 101, 101, 101, 101, 101, 101 ms/op

# Run progress: 20.83% complete, ETA 02:26:30
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 8, mean = 125 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 115, 190, 190, 190, 190, 190, 190 ms/op
# Warmup Iteration   2: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 114, 183, 183, 183, 183, 183, 183 ms/op
# Warmup Iteration   3: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 106, 163, 163, 163, 163, 163, 163 ms/op
Iteration   1: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 115, 165, 165, 165, 165, 165, 165 ms/op
Iteration   2: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 103, 106, 106, 106, 106, 106, 106 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 9, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 106, 163, 163, 163, 163, 163, 163 ms/op


Result "readKey":
  N = 88
  mean =    107.278 ±(99.9%) 5.864 ms/op

  Histogram, ms/op:
    [ 80.000,  85.000) = 0 
    [ 85.000,  90.000) = 1 
    [ 90.000,  95.000) = 11 
    [ 95.000, 100.000) = 15 
    [100.000, 105.000) = 28 
    [105.000, 110.000) = 11 
    [110.000, 115.000) = 11 
    [115.000, 120.000) = 4 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 1 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 0 
    [150.000, 155.000) = 2 
    [155.000, 160.000) = 1 
    [160.000, 165.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     87.687 ms/op
     p(50.0000) =    103.547 ms/op
     p(90.0000) =    117.087 ms/op
     p(95.0000) =    155.714 ms/op
     p(99.0000) =    166.986 ms/op
     p(99.9000) =    166.986 ms/op
     p(99.9900) =    166.986 ms/op
     p(99.9990) =    166.986 ms/op
     p(99.9999) =    166.986 ms/op
    p(100.0000) =    166.986 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readKey
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 21.02% complete, ETA 02:25:18
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	171724800	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 2, mean = 838 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 775, 838, 902, 902, 902, 902, 902, 902 ms/op
# Warmup Iteration   2: n = 2, mean = 686 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 623, 686, 749, 749, 749, 749, 749, 749 ms/op
# Warmup Iteration   3: n = 2, mean = 592 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 591, 592, 592, 592, 592, 592, 592, 592 ms/op
Iteration   1: n = 2, mean = 783 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 657, 783, 908, 908, 908, 908, 908, 908 ms/op
Iteration   2: n = 2, mean = 592 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 587, 592, 597, 597, 597, 597, 597, 597 ms/op
Iteration   3: 
Bytes	171737088	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 745 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 651, 745, 839, 839, 839, 839, 839, 839 ms/op

# Run progress: 21.21% complete, ETA 02:24:20
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	171790336	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 2, mean = 847 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 799, 847, 894, 894, 894, 894, 894, 894 ms/op
# Warmup Iteration   2: n = 2, mean = 733 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 646, 733, 821, 821, 821, 821, 821, 821 ms/op
# Warmup Iteration   3: n = 2, mean = 652 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 611, 652, 692, 692, 692, 692, 692, 692 ms/op
Iteration   1: n = 2, mean = 592 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 590, 592, 593, 593, 593, 593, 593, 593 ms/op
Iteration   2: n = 2, mean = 611 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 601, 611, 621, 621, 621, 621, 621, 621 ms/op
Iteration   3: 
Bytes	171802624	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 735 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 642, 735, 827, 827, 827, 827, 827, 827 ms/op

# Run progress: 21.40% complete, ETA 02:23:20
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	171855872	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 2, mean = 759 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 660, 759, 858, 858, 858, 858, 858, 858 ms/op
# Warmup Iteration   2: n = 2, mean = 765 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 655, 765, 876, 876, 876, 876, 876, 876 ms/op
# Warmup Iteration   3: n = 2, mean = 714 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 643, 714, 784, 784, 784, 784, 784, 784 ms/op
Iteration   1: n = 2, mean = 595 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 589, 595, 601, 601, 601, 601, 601, 601 ms/op
Iteration   2: n = 2, mean = 838 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 772, 838, 905, 905, 905, 905, 905, 905 ms/op
Iteration   3: 
Bytes	171868160	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 732 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 691, 732, 774, 774, 774, 774, 774, 774 ms/op


Result "readKey":
  N = 18
  mean =    691.419 ±(99.9%) 106.969 ms/op

  Histogram, ms/op:
    [ 500.000,  550.000) = 0 
    [ 550.000,  600.000) = 5 
    [ 600.000,  650.000) = 4 
    [ 650.000,  700.000) = 3 
    [ 700.000,  750.000) = 0 
    [ 750.000,  800.000) = 2 
    [ 800.000,  850.000) = 2 
    [ 850.000,  900.000) = 0 
    [ 900.000,  950.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    587.203 ms/op
     p(50.0000) =    646.447 ms/op
     p(90.0000) =    905.236 ms/op
     p(95.0000) =    908.067 ms/op
     p(99.0000) =    908.067 ms/op
     p(99.9000) =    908.067 ms/op
     p(99.9900) =    908.067 ms/op
     p(99.9990) =    908.067 ms/op
     p(99.9999) =    908.067 ms/op
    p(100.0000) =    908.067 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readKey
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 21.59% complete, ETA 02:22:24
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	128847872	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 1, mean = 1351 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351 ms/op
# Warmup Iteration   2: n = 1, mean = 1141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141 ms/op
# Warmup Iteration   3: n = 1, mean = 1181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181 ms/op
Iteration   1: n = 1, mean = 1242 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242 ms/op
Iteration   2: n = 1, mean = 1068 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068 ms/op
Iteration   3: 
Bytes	128860160	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 1107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107 ms/op

# Run progress: 21.78% complete, ETA 02:21:24
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	128847872	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 1, mean = 1369 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1369, 1369, 1369, 1369, 1369, 1369, 1369, 1369 ms/op
# Warmup Iteration   2: n = 1, mean = 1193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193 ms/op
# Warmup Iteration   3: n = 1, mean = 1290 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290 ms/op
Iteration   1: n = 1, mean = 1149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1149, 1149, 1149, 1149, 1149, 1149, 1149, 1149 ms/op
Iteration   2: n = 1, mean = 1395 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395 ms/op
Iteration   3: 
Bytes	128860160	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 1231 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231 ms/op

# Run progress: 21.97% complete, ETA 02:20:25
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	128847872	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 1, mean = 1376 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376 ms/op
# Warmup Iteration   2: n = 1, mean = 1307 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1307, 1307, 1307, 1307, 1307, 1307, 1307, 1307 ms/op
# Warmup Iteration   3: n = 1, mean = 1066 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066 ms/op
Iteration   1: n = 1, mean = 1296 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296 ms/op
Iteration   2: n = 1, mean = 1105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105 ms/op
Iteration   3: 
Bytes	128860160	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 1210 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210 ms/op


Result "readKey":
  N = 9
  mean =   1200.387 ±(99.9%) 175.575 ms/op

  Histogram, ms/op:
    [1000.000, 1025.000) = 0 
    [1025.000, 1050.000) = 0 
    [1050.000, 1075.000) = 1 
    [1075.000, 1100.000) = 0 
    [1100.000, 1125.000) = 2 
    [1125.000, 1150.000) = 1 
    [1150.000, 1175.000) = 0 
    [1175.000, 1200.000) = 0 
    [1200.000, 1225.000) = 1 
    [1225.000, 1250.000) = 2 
    [1250.000, 1275.000) = 0 
    [1275.000, 1300.000) = 1 
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1068.499 ms/op
     p(50.0000) =   1210.057 ms/op
     p(90.0000) =   1394.606 ms/op
     p(95.0000) =   1394.606 ms/op
     p(99.0000) =   1394.606 ms/op
     p(99.9000) =   1394.606 ms/op
     p(99.9900) =   1394.606 ms/op
     p(99.9990) =   1394.606 ms/op
     p(99.9999) =   1394.606 ms/op
    p(100.0000) =   1394.606 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readKey
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 22.16% complete, ETA 02:19:28
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	189071360	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 1, mean = 1877 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877 ms/op
# Warmup Iteration   2: n = 1, mean = 2030 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030 ms/op
# Warmup Iteration   3: n = 1, mean = 1944 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1944, 1944, 1944, 1944, 1944, 1944, 1944, 1944 ms/op
Iteration   1: n = 1, mean = 2059 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059 ms/op
Iteration   2: n = 1, mean = 1929 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1929, 1929, 1929, 1929, 1929, 1929, 1929, 1929 ms/op
Iteration   3: 
Bytes	189083648	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 1791 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1791, 1791, 1791, 1791, 1791, 1791, 1791, 1791 ms/op

# Run progress: 22.35% complete, ETA 02:18:50
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	189349888	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 1, mean = 2112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112 ms/op
# Warmup Iteration   2: n = 1, mean = 1908 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1908, 1908, 1908, 1908, 1908, 1908, 1908, 1908 ms/op
# Warmup Iteration   3: n = 1, mean = 1720 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720 ms/op
Iteration   1: n = 1, mean = 1948 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1948, 1948, 1948, 1948, 1948, 1948, 1948, 1948 ms/op
Iteration   2: n = 1, mean = 1720 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1720, 1720, 1720, 1720, 1720, 1720, 1720, 1720 ms/op
Iteration   3: 
Bytes	189362176	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 1766 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766 ms/op

# Run progress: 22.54% complete, ETA 02:18:11
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	189153280	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 1, mean = 1952 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1952, 1952, 1952, 1952, 1952, 1952, 1952, 1952 ms/op
# Warmup Iteration   2: n = 1, mean = 2168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2168, 2168, 2168, 2168, 2168, 2168, 2168, 2168 ms/op
# Warmup Iteration   3: n = 1, mean = 1772 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772 ms/op
Iteration   1: n = 1, mean = 2101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2101, 2101, 2101, 2101, 2101, 2101, 2101, 2101 ms/op
Iteration   2: n = 1, mean = 2062 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2062, 2062, 2062, 2062, 2062, 2062, 2062, 2062 ms/op
Iteration   3: 
Bytes	189165568	org.lmdbjava.bench.LmdbJavaAgrona.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 2097 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097 ms/op


Result "readKey":
  N = 9
  mean =   1941.497 ±(99.9%) 252.773 ms/op

  Histogram, ms/op:
    [1700.000, 1750.000) = 1 
    [1750.000, 1800.000) = 2 
    [1800.000, 1850.000) = 0 
    [1850.000, 1900.000) = 0 
    [1900.000, 1950.000) = 2 
    [1950.000, 2000.000) = 0 
    [2000.000, 2050.000) = 0 
    [2050.000, 2100.000) = 3 
    [2100.000, 2150.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1719.665 ms/op
     p(50.0000) =   1948.254 ms/op
     p(90.0000) =   2101.346 ms/op
     p(95.0000) =   2101.346 ms/op
     p(99.0000) =   2101.346 ms/op
     p(99.9000) =   2101.346 ms/op
     p(99.9900) =   2101.346 ms/op
     p(99.9990) =   2101.346 ms/op
     p(99.9999) =   2101.346 ms/op
    p(100.0000) =   2101.346 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readRev
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 22.73% complete, ETA 02:17:34
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readRev-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 35, 37, 41, 45, 45, 45, 45 ms/op
# Warmup Iteration   2: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 32, 33, 33, 33, 33, 33 ms/op
# Warmup Iteration   3: n = 32, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 32, 32, 33, 33, 33, 33 ms/op
Iteration   1: n = 32, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 32, 32, 32, 32, 32, 32 ms/op
Iteration   2: n = 32, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 32, 32, 32, 32, 32, 32 ms/op
Iteration   3: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 35, 44, 61, 68, 68, 68, 68 ms/op

# Run progress: 22.92% complete, ETA 02:16:31
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readRev-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 35, 39, 57, 66, 66, 66, 66 ms/op
# Warmup Iteration   2: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 34, 39, 51, 57, 57, 57, 57 ms/op
# Warmup Iteration   3: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 56, 64, 68, 68, 68, 68 ms/op
Iteration   1: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 34, 54, 67, 71, 71, 71, 71 ms/op
Iteration   2: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 35, 35, 39, 42, 42, 42, 42 ms/op
Iteration   3: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 34, 53, 65, 69, 69, 69, 69 ms/op

# Run progress: 23.11% complete, ETA 02:15:28
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readRev-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 35, 44, 68, 79, 79, 79, 79 ms/op
# Warmup Iteration   2: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 32, 32, 32, 32, 32, 32 ms/op
# Warmup Iteration   3: n = 31, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 42, 60, 71, 71, 71, 71 ms/op
Iteration   1: n = 28, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 35, 44, 63, 72, 72, 72, 72 ms/op
Iteration   2: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 31, 47, 59, 59, 59, 59, 59 ms/op
Iteration   3: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 35, 43, 62, 71, 71, 71, 71 ms/op


Result "readRev":
  N = 260
  mean =     35.157 ±(99.9%) 1.436 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 186 
    [35.000, 40.000) = 49 
    [40.000, 45.000) = 7 
    [45.000, 50.000) = 4 
    [50.000, 55.000) = 5 
    [55.000, 60.000) = 2 
    [60.000, 65.000) = 2 
    [65.000, 70.000) = 2 
    [70.000, 75.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =     30.900 ms/op
     p(50.0000) =     33.620 ms/op
     p(90.0000) =     39.531 ms/op
     p(95.0000) =     51.328 ms/op
     p(99.0000) =     70.750 ms/op
     p(99.9000) =     71.827 ms/op
     p(99.9900) =     71.827 ms/op
     p(99.9990) =     71.827 ms/op
     p(99.9999) =     71.827 ms/op
    p(100.0000) =     71.827 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readRev
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 23.30% complete, ETA 02:14:26
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	172224512	org.lmdbjava.bench.LmdbJavaAgrona.readRev-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 60, 72, 91, 91, 91, 91, 91 ms/op
# Warmup Iteration   2: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 75, 97, 102, 102, 102, 102, 102 ms/op
# Warmup Iteration   3: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 74, 77, 98, 101, 101, 101, 101, 101 ms/op
Iteration   1: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 60, 80, 93, 93, 93, 93, 93 ms/op
Iteration   2: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 77, 95, 100, 100, 100, 100, 100 ms/op
Iteration   3: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 69, 70, 70, 70, 70, 70, 70 ms/op

# Run progress: 23.48% complete, ETA 02:13:28
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	171896832	org.lmdbjava.bench.LmdbJavaAgrona.readRev-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 61, 88, 88, 88, 88, 88, 88 ms/op
# Warmup Iteration   2: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 52, 60, 60, 60, 60, 60, 60 ms/op
# Warmup Iteration   3: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 61, 82, 95, 95, 95, 95, 95 ms/op
Iteration   1: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 61, 93, 100, 100, 100, 100, 100 ms/op
Iteration   2: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 52, 53, 58, 58, 58, 58, 58 ms/op
Iteration   3: n = 13, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 78, 95, 100, 100, 100, 100, 100 ms/op

# Run progress: 23.67% complete, ETA 02:12:31
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	171802624	org.lmdbjava.bench.LmdbJavaAgrona.readRev-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 78, 108, 122, 122, 122, 122, 122 ms/op
# Warmup Iteration   2: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 61, 78, 87, 87, 87, 87, 87 ms/op
# Warmup Iteration   3: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 61, 78, 88, 88, 88, 88, 88 ms/op
Iteration   1: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 52, 53, 53, 53, 53, 53, 53 ms/op
Iteration   2: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 61, 78, 88, 88, 88, 88, 88 ms/op
Iteration   3: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 53, 53, 53, 53, 53, 53, 53 ms/op


Result "readRev":
  N = 149
  mean =     62.371 ±(99.9%) 3.218 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 62 
    [ 55.000,  60.000) = 14 
    [ 60.000,  65.000) = 25 
    [ 65.000,  70.000) = 15 
    [ 70.000,  75.000) = 5 
    [ 75.000,  80.000) = 20 
    [ 80.000,  85.000) = 0 
    [ 85.000,  90.000) = 4 
    [ 90.000,  95.000) = 1 
    [ 95.000, 100.000) = 0 
    [100.000, 105.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =     51.511 ms/op
     p(50.0000) =     59.900 ms/op
     p(90.0000) =     78.119 ms/op
     p(95.0000) =     87.622 ms/op
     p(99.0000) =    100.139 ms/op
     p(99.9000) =    100.270 ms/op
     p(99.9900) =    100.270 ms/op
     p(99.9990) =    100.270 ms/op
     p(99.9999) =    100.270 ms/op
    p(100.0000) =    100.270 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readRev
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 23.86% complete, ETA 02:11:35
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	128847872	org.lmdbjava.bench.LmdbJavaAgrona.readRev-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 25, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 37, 68, 69, 70, 70, 70, 70 ms/op
# Warmup Iteration   2: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 35, 43, 60, 68, 68, 68, 68 ms/op
# Warmup Iteration   3: n = 28, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 35, 43, 61, 69, 69, 69, 69 ms/op
Iteration   1: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 35, 45, 63, 70, 70, 70, 70 ms/op
Iteration   2: n = 28, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 35, 43, 62, 70, 70, 70, 70 ms/op
Iteration   3: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 37, 47, 65, 71, 71, 71, 71 ms/op

# Run progress: 24.05% complete, ETA 02:10:41
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	128847872	org.lmdbjava.bench.LmdbJavaAgrona.readRev-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 25, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 37, 49, 75, 83, 83, 83, 83 ms/op
# Warmup Iteration   2: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 40, 50, 67, 71, 71, 71, 71 ms/op
# Warmup Iteration   3: n = 28, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 37, 37, 37, 37, 37, 37, 37 ms/op
Iteration   1: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 36, 37, 37, 37, 37, 37 ms/op
Iteration   2: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 38, 47, 67, 74, 74, 74, 74 ms/op
Iteration   3: n = 25, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 34, 59, 64, 65, 65, 65, 65 ms/op

# Run progress: 24.24% complete, ETA 02:09:47
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	128847872	org.lmdbjava.bench.LmdbJavaAgrona.readRev-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 34, 36, 53, 63, 63, 63, 63 ms/op
# Warmup Iteration   2: n = 34, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 30, 31, 31, 31, 31, 31 ms/op
# Warmup Iteration   3: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 36, 58, 66, 68, 68, 68, 68 ms/op
Iteration   1: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 34, 55, 66, 70, 70, 70, 70 ms/op
Iteration   2: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 34, 43, 61, 69, 69, 69, 69 ms/op
Iteration   3: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 34, 43, 60, 68, 68, 68, 68 ms/op


Result "readRev":
  N = 242
  mean =     37.617 ±(99.9%) 1.644 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 129 
    [35.000, 40.000) = 81 
    [40.000, 45.000) = 9 
    [45.000, 50.000) = 1 
    [50.000, 55.000) = 11 
    [55.000, 60.000) = 2 
    [60.000, 65.000) = 1 
    [65.000, 70.000) = 3 
    [70.000, 75.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =     30.147 ms/op
     p(50.0000) =     34.898 ms/op
     p(90.0000) =     44.584 ms/op
     p(95.0000) =     53.549 ms/op
     p(99.0000) =     70.909 ms/op
     p(99.9000) =     74.056 ms/op
     p(99.9900) =     74.056 ms/op
     p(99.9990) =     74.056 ms/op
     p(99.9999) =     74.056 ms/op
    p(100.0000) =     74.056 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readRev
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 24.43% complete, ETA 02:08:54
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	189636608	org.lmdbjava.bench.LmdbJavaAgrona.readRev-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 63, 77, 97, 97, 97, 97, 97 ms/op
# Warmup Iteration   2: n = 19, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 54, 55, 88, 88, 88, 88, 88 ms/op
# Warmup Iteration   3: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 81, 100, 102, 102, 102, 102, 102 ms/op
Iteration   1: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 63, 84, 103, 103, 103, 103, 103 ms/op
Iteration   2: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 55, 94, 99, 99, 99, 99, 99 ms/op
Iteration   3: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 63, 105, 115, 115, 115, 115, 115 ms/op

# Run progress: 24.62% complete, ETA 02:08:05
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	189284352	org.lmdbjava.bench.LmdbJavaAgrona.readRev-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 64, 72, 86, 86, 86, 86, 86 ms/op
# Warmup Iteration   2: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 59, 72, 88, 88, 88, 88, 88 ms/op
# Warmup Iteration   3: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 64, 92, 102, 102, 102, 102, 102 ms/op
Iteration   1: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 64, 72, 83, 83, 83, 83, 83 ms/op
Iteration   2: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 55, 79, 95, 95, 95, 95, 95 ms/op
Iteration   3: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 55, 71, 86, 86, 86, 86, 86 ms/op

# Run progress: 24.81% complete, ETA 02:07:16
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	189108224	org.lmdbjava.bench.LmdbJavaAgrona.readRev-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 83, 104, 111, 111, 111, 111, 111 ms/op
# Warmup Iteration   2: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 64, 80, 88, 88, 88, 88, 88 ms/op
# Warmup Iteration   3: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 64, 79, 88, 88, 88, 88, 88 ms/op
Iteration   1: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 55, 56, 56, 56, 56, 56, 56 ms/op
Iteration   2: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 55, 56, 56, 56, 56, 56, 56 ms/op
Iteration   3: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 55, 56, 56, 56, 56, 56, 56 ms/op


Result "readRev":
  N = 155
  mean =     59.793 ±(99.9%) 2.741 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 48 
    [ 55.000,  60.000) = 60 
    [ 60.000,  65.000) = 32 
    [ 65.000,  70.000) = 3 
    [ 70.000,  75.000) = 0 
    [ 75.000,  80.000) = 2 
    [ 80.000,  85.000) = 2 
    [ 85.000,  90.000) = 2 
    [ 90.000,  95.000) = 3 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 1 
    [105.000, 110.000) = 0 
    [110.000, 115.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     53.936 ms/op
     p(50.0000) =     55.443 ms/op
     p(90.0000) =     65.588 ms/op
     p(95.0000) =     85.354 ms/op
     p(99.0000) =    108.355 ms/op
     p(99.9000) =    115.474 ms/op
     p(99.9900) =    115.474 ms/op
     p(99.9990) =    115.474 ms/op
     p(99.9999) =    115.474 ms/op
    p(100.0000) =    115.474 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 25.00% complete, ETA 02:06:28
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readSeq-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 40, 51, 81, 89, 89, 89, 89 ms/op
# Warmup Iteration   2: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 36, 37, 37, 37, 37, 37, 37 ms/op
# Warmup Iteration   3: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 40, 67, 73, 73, 73, 73, 73 ms/op
Iteration   1: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 40, 70, 76, 76, 76, 76, 76 ms/op
Iteration   2: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 40, 52, 70, 74, 74, 74, 74 ms/op
Iteration   3: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 35, 37, 37, 37, 37, 37, 37 ms/op

# Run progress: 25.19% complete, ETA 02:05:34
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readSeq-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 48, 53, 73, 75, 75, 75, 75 ms/op
# Warmup Iteration   2: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 43, 44, 44, 44, 44, 44, 44 ms/op
# Warmup Iteration   3: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 48, 70, 78, 79, 79, 79, 79 ms/op
Iteration   1: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 48, 61, 78, 80, 80, 80, 80 ms/op
Iteration   2: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 47, 60, 78, 80, 80, 80, 80 ms/op
Iteration   3: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 42, 43, 43, 43, 43, 43, 43 ms/op

# Run progress: 25.38% complete, ETA 02:04:41
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readSeq-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 46, 56, 79, 82, 82, 82, 82 ms/op
# Warmup Iteration   2: n = 25, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 41, 43, 43, 43, 43, 43, 43 ms/op
# Warmup Iteration   3: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 41, 51, 67, 71, 71, 71, 71 ms/op
Iteration   1: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 46, 46, 64, 79, 80, 80, 80, 80 ms/op
Iteration   2: n = 26, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 41, 41, 43, 45, 45, 45, 45 ms/op
Iteration   3: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 46, 59, 75, 76, 76, 76, 76 ms/op


Result "readSeq":
  N = 207
  mean =     44.375 ±(99.9%) 1.956 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 51 
    [40.000, 45.000) = 70 
    [45.000, 50.000) = 64 
    [50.000, 55.000) = 6 
    [55.000, 60.000) = 2 
    [60.000, 65.000) = 7 
    [65.000, 70.000) = 0 
    [70.000, 75.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     35.324 ms/op
     p(50.0000) =     42.402 ms/op
     p(90.0000) =     51.511 ms/op
     p(95.0000) =     63.098 ms/op
     p(99.0000) =     79.561 ms/op
     p(99.9000) =     79.823 ms/op
     p(99.9900) =     79.823 ms/op
     p(99.9990) =     79.823 ms/op
     p(99.9999) =     79.823 ms/op
    p(100.0000) =     79.823 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 25.57% complete, ETA 02:03:48
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	172027904	org.lmdbjava.bench.LmdbJavaAgrona.readSeq-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 76, 111, 121, 121, 121, 121, 121 ms/op
# Warmup Iteration   2: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 83, 85, 111, 117, 117, 117, 117, 117 ms/op
# Warmup Iteration   3: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 85, 112, 119, 119, 119, 119, 119 ms/op
Iteration   1: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 65, 85, 93, 93, 93, 93, 93 ms/op
Iteration   2: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 57, 57, 57, 57, 57, 57, 57 ms/op
Iteration   3: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 84, 87, 103, 105, 105, 105, 105, 105 ms/op

# Run progress: 25.76% complete, ETA 02:02:59
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	171909120	org.lmdbjava.bench.LmdbJavaAgrona.readSeq-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 15, mean = 71 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 65, 99, 104, 104, 104, 104, 104 ms/op
# Warmup Iteration   2: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 81, 85, 107, 114, 114, 114, 114, 114 ms/op
# Warmup Iteration   3: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 65, 83, 93, 93, 93, 93, 93 ms/op
Iteration   1: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 55, 56, 57, 57, 57, 57, 57 ms/op
Iteration   2: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 56, 57, 57, 57, 57, 57, 57 ms/op
Iteration   3: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 84, 84, 103, 107, 107, 107, 107, 107 ms/op

# Run progress: 25.95% complete, ETA 02:02:10
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	171847680	org.lmdbjava.bench.LmdbJavaAgrona.readSeq-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 65, 77, 97, 97, 97, 97, 97 ms/op
# Warmup Iteration   2: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 56, 57, 57, 57, 57, 57, 57 ms/op
# Warmup Iteration   3: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 66, 78, 90, 90, 90, 90, 90 ms/op
Iteration   1: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 56, 57, 57, 57, 57, 57, 57 ms/op
Iteration   2: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 56, 57, 57, 57, 57, 57, 57 ms/op
Iteration   3: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 84, 94, 98, 98, 98, 98, 98 ms/op


Result "readSeq":
  N = 142
  mean =     65.188 ±(99.9%) 3.902 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 93 
    [ 60.000,  65.000) = 6 
    [ 65.000,  70.000) = 6 
    [ 70.000,  75.000) = 0 
    [ 75.000,  80.000) = 1 
    [ 80.000,  85.000) = 24 
    [ 85.000,  90.000) = 3 
    [ 90.000,  95.000) = 5 
    [ 95.000, 100.000) = 2 
    [100.000, 105.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     55.378 ms/op
     p(50.0000) =     56.590 ms/op
     p(90.0000) =     84.725 ms/op
     p(95.0000) =     92.910 ms/op
     p(99.0000) =    105.997 ms/op
     p(99.9000) =    106.955 ms/op
     p(99.9900) =    106.955 ms/op
     p(99.9990) =    106.955 ms/op
     p(99.9999) =    106.955 ms/op
    p(100.0000) =    106.955 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 26.14% complete, ETA 02:01:21
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	128847872	org.lmdbjava.bench.LmdbJavaAgrona.readSeq-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 22, mean = 47 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 44, 65, 73, 74, 74, 74, 74 ms/op
# Warmup Iteration   2: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 35, 40, 40, 40, 40, 40, 40 ms/op
# Warmup Iteration   3: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 47, 70, 74, 74, 74, 74, 74 ms/op
Iteration   1: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 46, 58, 63, 63, 63, 63, 63 ms/op
Iteration   2: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 40, 52, 71, 75, 75, 75, 75 ms/op
Iteration   3: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 35, 55, 68, 71, 71, 71, 71 ms/op

# Run progress: 26.33% complete, ETA 02:00:34
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	128847872	org.lmdbjava.bench.LmdbJavaAgrona.readSeq-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 37, 40, 56, 62, 62, 62, 62 ms/op
# Warmup Iteration   2: n = 28, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 37, 38, 38, 38, 38, 38, 38 ms/op
# Warmup Iteration   3: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 43, 72, 76, 76, 76, 76, 76 ms/op
Iteration   1: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 48, 58, 74, 75, 75, 75, 75 ms/op
Iteration   2: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 40, 50, 69, 74, 74, 74, 74 ms/op
Iteration   3: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 48, 76, 79, 79, 79, 79, 79 ms/op

# Run progress: 26.52% complete, ETA 01:59:48
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	128847872	org.lmdbjava.bench.LmdbJavaAgrona.readSeq-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 40, 44, 63, 69, 69, 69, 69 ms/op
# Warmup Iteration   2: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 36, 37, 37, 37, 37, 37, 37 ms/op
# Warmup Iteration   3: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 47, 59, 75, 77, 77, 77, 77 ms/op
Iteration   1: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 42, 71, 73, 73, 73, 73, 73 ms/op
Iteration   2: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 40, 58, 66, 67, 67, 67, 67 ms/op
Iteration   3: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 47, 61, 78, 79, 79, 79, 79 ms/op


Result "readSeq":
  N = 200
  mean =     45.714 ±(99.9%) 2.084 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 2 
    [35.000, 40.000) = 17 
    [40.000, 45.000) = 86 
    [45.000, 50.000) = 66 
    [50.000, 55.000) = 8 
    [55.000, 60.000) = 4 
    [60.000, 65.000) = 7 
    [65.000, 70.000) = 1 
    [70.000, 75.000) = 6 

  Percentiles, ms/op:
      p(0.0000) =     34.865 ms/op
     p(50.0000) =     43.581 ms/op
     p(90.0000) =     56.984 ms/op
     p(95.0000) =     66.798 ms/op
     p(99.0000) =     79.156 ms/op
     p(99.9000) =     79.167 ms/op
     p(99.9900) =     79.167 ms/op
     p(99.9990) =     79.167 ms/op
     p(99.9999) =     79.167 ms/op
    p(100.0000) =     79.167 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 26.70% complete, ETA 01:59:02
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	189472768	org.lmdbjava.bench.LmdbJavaAgrona.readSeq-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 59, 73, 88, 88, 88, 88, 88 ms/op
# Warmup Iteration   2: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 65, 66, 66, 66, 66, 66, 66 ms/op
# Warmup Iteration   3: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 74, 92, 100, 100, 100, 100, 100 ms/op
Iteration   1: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 65, 65, 65, 65, 65, 65, 65 ms/op
Iteration   2: n = 12, mean = 88 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 74, 87, 110, 110, 110, 110, 110, 110 ms/op
Iteration   3: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 72, 75, 75, 75, 75, 75, 75 ms/op

# Run progress: 26.89% complete, ETA 01:58:20
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	189165568	org.lmdbjava.bench.LmdbJavaAgrona.readSeq-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 82, 113, 121, 121, 121, 121, 121 ms/op
# Warmup Iteration   2: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 73, 94, 106, 106, 106, 106, 106 ms/op
# Warmup Iteration   3: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 64, 65, 65, 65, 65, 65, 65 ms/op
Iteration   1: n = 12, mean = 88 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 82, 106, 108, 108, 108, 108, 108 ms/op
Iteration   2: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 73, 78, 83, 83, 83, 83, 83 ms/op
Iteration   3: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 72, 72, 105, 105, 105, 105, 105, 105 ms/op

# Run progress: 27.08% complete, ETA 01:57:38
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	189280256	org.lmdbjava.bench.LmdbJavaAgrona.readSeq-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 78, 87, 95, 98, 98, 98, 98, 98 ms/op
# Warmup Iteration   2: n = 12, mean = 88 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 80, 87, 107, 112, 112, 112, 112, 112 ms/op
# Warmup Iteration   3: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 69, 84, 93, 93, 93, 93, 93 ms/op
Iteration   1: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 58, 59, 59, 59, 59, 59, 59 ms/op
Iteration   2: n = 18, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 59, 59, 59, 59, 59, 59, 59 ms/op
Iteration   3: n = 18, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 59, 59, 59, 59, 59, 59, 59 ms/op


Result "readSeq":
  N = 136
  mean =     69.330 ±(99.9%) 3.684 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 54 
    [ 60.000,  65.000) = 15 
    [ 65.000,  70.000) = 11 
    [ 70.000,  75.000) = 26 
    [ 75.000,  80.000) = 2 
    [ 80.000,  85.000) = 11 
    [ 85.000,  90.000) = 7 
    [ 90.000,  95.000) = 3 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 1 
    [105.000, 110.000) = 4 
    [110.000, 115.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     57.868 ms/op
     p(50.0000) =     64.815 ms/op
     p(90.0000) =     86.809 ms/op
     p(95.0000) =     96.856 ms/op
     p(99.0000) =    109.684 ms/op
     p(99.9000) =    110.363 ms/op
     p(99.9900) =    110.363 ms/op
     p(99.9990) =    110.363 ms/op
     p(99.9999) =    110.363 ms/op
    p(100.0000) =    110.363 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 27.27% complete, ETA 01:56:57
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readXxh64-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 73, 126, 152, 152, 152, 152, 152 ms/op
# Warmup Iteration   2: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 65, 65, 65, 65, 65, 65, 65 ms/op
# Warmup Iteration   3: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 68, 99, 119, 119, 119, 119, 119 ms/op
Iteration   1: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 73, 102, 120, 120, 120, 120, 120 ms/op
Iteration   2: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 73, 103, 122, 122, 122, 122, 122 ms/op
Iteration   3: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 65, 65, 66, 66, 66, 66, 66 ms/op

# Run progress: 27.46% complete, ETA 01:56:10
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readXxh64-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 71, 124, 150, 150, 150, 150, 150 ms/op
# Warmup Iteration   2: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 64, 66, 66, 66, 66, 66, 66 ms/op
# Warmup Iteration   3: n = 16, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 64, 82, 118, 118, 118, 118, 118 ms/op
Iteration   1: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 65, 83, 97, 97, 97, 97, 97 ms/op
Iteration   2: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 64, 96, 96, 96, 96, 96, 96 ms/op
Iteration   3: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 68, 69, 72, 72, 72, 72, 72 ms/op

# Run progress: 27.65% complete, ETA 01:55:24
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	117452800	org.lmdbjava.bench.LmdbJavaAgrona.readXxh64-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 73, 120, 145, 145, 145, 145, 145 ms/op
# Warmup Iteration   2: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 66, 68, 68, 68, 68, 68, 68 ms/op
# Warmup Iteration   3: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 69, 100, 120, 120, 120, 120, 120 ms/op
Iteration   1: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 61, 115, 121, 121, 121, 121, 121 ms/op
Iteration   2: n = 15, mean = 71 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 68, 92, 114, 114, 114, 114, 114 ms/op
Iteration   3: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 61, 61, 61, 61, 61, 61, 61 ms/op


Result "readXxh64":
  N = 136
  mean =     68.624 ±(99.9%) 3.368 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 3 
    [ 60.000,  65.000) = 71 
    [ 65.000,  70.000) = 28 
    [ 70.000,  75.000) = 21 
    [ 75.000,  80.000) = 1 
    [ 80.000,  85.000) = 4 
    [ 85.000,  90.000) = 0 
    [ 90.000,  95.000) = 0 
    [ 95.000, 100.000) = 3 
    [100.000, 105.000) = 0 
    [105.000, 110.000) = 1 
    [110.000, 115.000) = 1 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =     59.638 ms/op
     p(50.0000) =     64.848 ms/op
     p(90.0000) =     75.353 ms/op
     p(95.0000) =     96.436 ms/op
     p(99.0000) =    121.985 ms/op
     p(99.9000) =    122.421 ms/op
     p(99.9900) =    122.421 ms/op
     p(99.9990) =    122.421 ms/op
     p(99.9999) =    122.421 ms/op
    p(100.0000) =    122.421 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 27.84% complete, ETA 01:54:38
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	172146688	org.lmdbjava.bench.LmdbJavaAgrona.readXxh64-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 94, 189, 197, 197, 197, 197, 197 ms/op
# Warmup Iteration   2: n = 11, mean = 96 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 83, 95, 124, 132, 132, 132, 132, 132 ms/op
# Warmup Iteration   3: n = 11, mean = 98 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 83, 95, 134, 143, 143, 143, 143, 143 ms/op
Iteration   1: n = 13, mean = 83 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 83, 83, 83, 83, 83, 83, 83 ms/op
Iteration   2: n = 13, mean = 83 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 83, 83, 83, 83, 83, 83, 83 ms/op
Iteration   3: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 83, 95, 113, 117, 117, 117, 117, 117 ms/op

# Run progress: 28.03% complete, ETA 01:53:56
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	172032000	org.lmdbjava.bench.LmdbJavaAgrona.readXxh64-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 110, 196, 196, 196, 196, 196, 196 ms/op
# Warmup Iteration   2: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 80, 83, 92, 92, 92, 92, 92, 92 ms/op
# Warmup Iteration   3: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 110, 151, 151, 151, 151, 151, 151 ms/op
Iteration   1: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 109, 111, 165, 165, 165, 165, 165, 165 ms/op
Iteration   2: n = 12, mean = 88 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 80, 92, 92, 92, 92, 92, 92, 92 ms/op
Iteration   3: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 80, 80, 81, 81, 81, 81, 81, 81 ms/op

# Run progress: 28.22% complete, ETA 01:53:13
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	171945984	org.lmdbjava.bench.LmdbJavaAgrona.readXxh64-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 93, 161, 164, 164, 164, 164, 164 ms/op
# Warmup Iteration   2: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 80, 81, 128, 144, 144, 144, 144, 144 ms/op
# Warmup Iteration   3: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 109, 157, 157, 157, 157, 157, 157 ms/op
Iteration   1: n = 11, mean = 99 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 98, 101, 101, 101, 101, 101, 101 ms/op
Iteration   2: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 99, 122, 123, 123, 123, 123, 123 ms/op
Iteration   3: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 110, 150, 150, 150, 150, 150, 150 ms/op


Result "readXxh64":
  N = 101
  mean =     94.040 ±(99.9%) 5.184 ms/op

  Histogram, ms/op:
    [ 80.000,  85.000) = 46 
    [ 85.000,  90.000) = 0 
    [ 90.000,  95.000) = 15 
    [ 95.000, 100.000) = 17 
    [100.000, 105.000) = 3 
    [105.000, 110.000) = 7 
    [110.000, 115.000) = 7 
    [115.000, 120.000) = 1 
    [120.000, 125.000) = 1 
    [125.000, 130.000) = 1 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 1 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 0 
    [150.000, 155.000) = 1 
    [155.000, 160.000) = 0 
    [160.000, 165.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     80.216 ms/op
     p(50.0000) =     91.750 ms/op
     p(90.0000) =    110.599 ms/op
     p(95.0000) =    122.343 ms/op
     p(99.0000) =    165.109 ms/op
     p(99.9000) =    165.413 ms/op
     p(99.9900) =    165.413 ms/op
     p(99.9990) =    165.413 ms/op
     p(99.9999) =    165.413 ms/op
    p(100.0000) =    165.413 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 28.41% complete, ETA 01:52:31
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	128847872	org.lmdbjava.bench.LmdbJavaAgrona.readXxh64-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 71, 129, 144, 144, 144, 144, 144 ms/op
# Warmup Iteration   2: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 63, 70, 71, 71, 71, 71, 71 ms/op
# Warmup Iteration   3: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 73, 104, 125, 125, 125, 125, 125 ms/op
Iteration   1: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 70, 86, 101, 101, 101, 101, 101 ms/op
Iteration   2: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 62, 107, 121, 121, 121, 121, 121 ms/op
Iteration   3: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 73, 115, 125, 125, 125, 125, 125 ms/op

# Run progress: 28.60% complete, ETA 01:51:51
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	128847872	org.lmdbjava.bench.LmdbJavaAgrona.readXxh64-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 12, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 74, 84, 134, 136, 136, 136, 136, 136 ms/op
# Warmup Iteration   2: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 74, 109, 126, 126, 126, 126, 126 ms/op
# Warmup Iteration   3: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 66, 66, 67, 67, 67, 67, 67 ms/op
Iteration   1: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 66, 67, 67, 67, 67, 67, 67 ms/op
Iteration   2: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 66, 66, 67, 67, 67, 67, 67 ms/op
Iteration   3: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 66, 66, 66, 66, 66, 66, 66 ms/op

# Run progress: 28.79% complete, ETA 01:51:11
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	128847872	org.lmdbjava.bench.LmdbJavaAgrona.readXxh64-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true-compacted
n = 13, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 71, 121, 148, 148, 148, 148, 148 ms/op
# Warmup Iteration   2: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 63, 63, 63, 63, 63, 63, 63 ms/op
# Warmup Iteration   3: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 62, 62, 62, 62, 62, 62, 62 ms/op
Iteration   1: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 62, 62, 63, 63, 63, 63, 63 ms/op
Iteration   2: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 62, 63, 63, 63, 63, 63, 63 ms/op
Iteration   3: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 69, 117, 121, 121, 121, 121, 121 ms/op


Result "readXxh64":
  N = 139
  mean =     68.146 ±(99.9%) 3.158 ms/op

  Histogram, ms/op:
    [ 60.000,  65.000) = 57 
    [ 65.000,  70.000) = 53 
    [ 70.000,  75.000) = 17 
    [ 75.000,  80.000) = 2 
    [ 80.000,  85.000) = 3 
    [ 85.000,  90.000) = 0 
    [ 90.000,  95.000) = 0 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 2 
    [105.000, 110.000) = 0 
    [110.000, 115.000) = 1 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =     61.735 ms/op
     p(50.0000) =     65.864 ms/op
     p(90.0000) =     74.711 ms/op
     p(95.0000) =     97.124 ms/op
     p(99.0000) =    123.129 ms/op
     p(99.9000) =    124.649 ms/op
     p(99.9900) =    124.649 ms/op
     p(99.9990) =    124.649 ms/op
     p(99.9999) =    124.649 ms/op
    p(100.0000) =    124.649 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 28.98% complete, ETA 01:50:31
# Fork: 1 of 3
# Warmup Iteration   1: 
Bytes	189489152	org.lmdbjava.bench.LmdbJavaAgrona.readXxh64-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 106, 129, 131, 131, 131, 131, 131 ms/op
# Warmup Iteration   2: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 106, 144, 148, 148, 148, 148, 148 ms/op
# Warmup Iteration   3: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 102, 140, 144, 144, 144, 144, 144 ms/op
Iteration   1: n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 113, 156, 156, 156, 156, 156, 156 ms/op
Iteration   2: n = 11, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 99, 101, 101, 101, 101, 101, 101 ms/op
Iteration   3: n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 113, 158, 158, 158, 158, 158, 158 ms/op

# Run progress: 29.17% complete, ETA 01:49:55
# Fork: 2 of 3
# Warmup Iteration   1: 
Bytes	189046784	org.lmdbjava.bench.LmdbJavaAgrona.readXxh64-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 8, mean = 126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 114, 116, 163, 163, 163, 163, 163, 163 ms/op
# Warmup Iteration   2: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 86, 98, 99, 99, 99, 99, 99, 99 ms/op
# Warmup Iteration   3: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 85, 130, 148, 148, 148, 148, 148 ms/op
Iteration   1: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 86, 115, 125, 125, 125, 125, 125 ms/op
Iteration   2: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 86, 86, 86, 86, 86, 86, 86 ms/op
Iteration   3: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 99, 159, 159, 159, 159, 159, 159 ms/op

# Run progress: 29.36% complete, ETA 01:49:18
# Fork: 3 of 3
# Warmup Iteration   1: 
Bytes	188964864	org.lmdbjava.bench.LmdbJavaAgrona.readXxh64-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true-compacted
n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 111, 148, 148, 148, 148, 148, 148 ms/op
# Warmup Iteration   2: n = 10, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 105, 149, 149, 149, 149, 149, 149 ms/op
# Warmup Iteration   3: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 93, 130, 132, 132, 132, 132, 132 ms/op
Iteration   1: n = 11, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 93, 94, 95, 95, 95, 95, 95 ms/op
Iteration   2: n = 11, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 93, 93, 93, 93, 93, 93, 93 ms/op
Iteration   3: n = 11, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 93, 131, 134, 134, 134, 134, 134 ms/op


Result "readXxh64":
  N = 95
  mean =     99.579 ±(99.9%) 5.500 ms/op

  Histogram, ms/op:
    [ 80.000,  85.000) = 2 
    [ 85.000,  90.000) = 20 
    [ 90.000,  95.000) = 31 
    [ 95.000, 100.000) = 11 
    [100.000, 105.000) = 8 
    [105.000, 110.000) = 1 
    [110.000, 115.000) = 12 
    [115.000, 120.000) = 4 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 1 
    [130.000, 135.000) = 1 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 1 
    [150.000, 155.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     84.673 ms/op
     p(50.0000) =     92.668 ms/op
     p(90.0000) =    116.182 ms/op
     p(95.0000) =    136.629 ms/op
     p(99.0000) =    158.597 ms/op
     p(99.9000) =    158.597 ms/op
     p(99.9900) =    158.597 ms/op
     p(99.9990) =    158.597 ms/op
     p(99.9999) =    158.597 ms/op
    p(100.0000) =    158.597 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 29.55% complete, ETA 01:48:42
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 147, 194, 194, 194, 194, 194, 194 ms/op
# Warmup Iteration   2: n = 7, mean = 139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 126, 199, 199, 199, 199, 199, 199 ms/op
# Warmup Iteration   3: n = 6, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 142, 202, 202, 202, 202, 202, 202 ms/op
Iteration   1: n = 6, mean = 151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 143, 202, 202, 202, 202, 202, 202 ms/op
Iteration   2: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 142, 200, 200, 200, 200, 200, 200 ms/op
Iteration   3: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 141, 204, 204, 204, 204, 204, 204 ms/op

# Run progress: 29.73% complete, ETA 01:48:00
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 166 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 151, 214, 214, 214, 214, 214, 214 ms/op
# Warmup Iteration   2: n = 6, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 151, 202, 202, 202, 202, 202, 202 ms/op
# Warmup Iteration   3: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 139, 146, 205, 205, 205, 205, 205, 205 ms/op
Iteration   1: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 142, 186, 186, 186, 186, 186, 186 ms/op
Iteration   2: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 148, 216, 216, 216, 216, 216, 216 ms/op
Iteration   3: n = 5, mean = 199 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 197, 252, 252, 252, 252, 252, 252 ms/op

# Run progress: 29.92% complete, ETA 01:47:18
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 166 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 149, 223, 223, 223, 223, 223, 223 ms/op
# Warmup Iteration   2: n = 7, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 128, 145, 145, 145, 145, 145, 145 ms/op
# Warmup Iteration   3: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 127, 129, 129, 129, 129, 129, 129 ms/op
Iteration   1: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 128, 129, 129, 129, 129, 129, 129 ms/op
Iteration   2: n = 8, mean = 126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 127, 128, 128, 128, 128, 128, 128 ms/op
Iteration   3: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 126, 132, 132, 132, 132, 132, 132 ms/op


Result "write":
  N = 62
  mean =    145.384 ±(99.9%) 12.206 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 2 
    [125.000, 137.500) = 29 
    [137.500, 150.000) = 21 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 2 
    [187.500, 200.000) = 3 
    [200.000, 212.500) = 3 
    [212.500, 225.000) = 1 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 0 
    [250.000, 262.500) = 1 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    124.649 ms/op
     p(50.0000) =    136.970 ms/op
     p(90.0000) =    199.046 ms/op
     p(95.0000) =    203.909 ms/op
     p(99.0000) =    252.183 ms/op
     p(99.9000) =    252.183 ms/op
     p(99.9900) =    252.183 ms/op
     p(99.9990) =    252.183 ms/op
     p(99.9999) =    252.183 ms/op
    p(100.0000) =    252.183 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = false, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 30.11% complete, ETA 01:46:36
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1014 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014 ms/op
# Warmup Iteration   2: n = 1, mean = 971 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 971, 971, 971, 971, 971, 971, 971, 971 ms/op
# Warmup Iteration   3: n = 1, mean = 1011 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011 ms/op
Iteration   1: n = 1, mean = 959 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 959, 959, 959, 959, 959, 959, 959, 959 ms/op
Iteration   2: n = 2, mean = 764 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 759, 764, 770, 770, 770, 770, 770, 770 ms/op
Iteration   3: n = 1, mean = 948 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 948, 948, 948, 948, 948, 948, 948, 948 ms/op

# Run progress: 30.30% complete, ETA 01:45:57
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 968 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 968, 968, 968, 968, 968, 968, 968, 968 ms/op
# Warmup Iteration   2: n = 2, mean = 752 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 751, 752, 753, 753, 753, 753, 753, 753 ms/op
# Warmup Iteration   3: n = 1, mean = 924 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 924, 924, 924, 924, 924, 924, 924, 924 ms/op
Iteration   1: n = 2, mean = 758 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 757, 758, 759, 759, 759, 759, 759, 759 ms/op
Iteration   2: n = 2, mean = 911 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 760, 911, 1061, 1061, 1061, 1061, 1061, 1061 ms/op
Iteration   3: n = 2, mean = 829 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 762, 829, 897, 897, 897, 897, 897, 897 ms/op

# Run progress: 30.49% complete, ETA 01:45:23
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 980 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 980, 980, 980, 980, 980, 980, 980, 980 ms/op
# Warmup Iteration   2: n = 2, mean = 873 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 868, 873, 878, 878, 878, 878, 878, 878 ms/op
# Warmup Iteration   3: n = 1, mean = 1012 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012 ms/op
Iteration   1: n = 2, mean = 826 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 753, 826, 900, 900, 900, 900, 900, 900 ms/op
Iteration   2: n = 2, mean = 889 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 845, 889, 933, 933, 933, 933, 933, 933 ms/op
Iteration   3: n = 2, mean = 783 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 746, 783, 820, 820, 820, 820, 820, 820 ms/op


Result "write":
  N = 16
  mean =    839.320 ±(99.9%) 99.935 ms/op

  Histogram, ms/op:
    [ 700.000,  725.000) = 0 
    [ 725.000,  750.000) = 1 
    [ 750.000,  775.000) = 7 
    [ 775.000,  800.000) = 0 
    [ 800.000,  825.000) = 1 
    [ 825.000,  850.000) = 1 
    [ 850.000,  875.000) = 0 
    [ 875.000,  900.000) = 2 
    [ 900.000,  925.000) = 0 
    [ 925.000,  950.000) = 2 
    [ 950.000,  975.000) = 1 
    [ 975.000, 1000.000) = 0 
    [1000.000, 1025.000) = 0 
    [1025.000, 1050.000) = 0 
    [1050.000, 1075.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    745.538 ms/op
     p(50.0000) =    794.821 ms/op
     p(90.0000) =    989.961 ms/op
     p(95.0000) =   1061.159 ms/op
     p(99.0000) =   1061.159 ms/op
     p(99.9000) =   1061.159 ms/op
     p(99.9900) =   1061.159 ms/op
     p(99.9990) =   1061.159 ms/op
     p(99.9999) =   1061.159 ms/op
    p(100.0000) =   1061.159 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.write
# Parameters: (intKey = false, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 30.68% complete, ETA 01:44:50
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1558 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558 ms/op
# Warmup Iteration   2: n = 1, mean = 1256 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256 ms/op
# Warmup Iteration   3: n = 1, mean = 1399 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399 ms/op
Iteration   1: n = 1, mean = 1265 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1265, 1265, 1265, 1265, 1265, 1265, 1265, 1265 ms/op
Iteration   2: n = 1, mean = 1313 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313 ms/op
Iteration   3: n = 1, mean = 1353 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353 ms/op

# Run progress: 30.87% complete, ETA 01:44:15
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1439 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1439, 1439, 1439, 1439, 1439, 1439, 1439, 1439 ms/op
# Warmup Iteration   2: n = 1, mean = 1093 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1093, 1093, 1093, 1093, 1093, 1093, 1093, 1093 ms/op
# Warmup Iteration   3: n = 1, mean = 1101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1101, 1101, 1101, 1101, 1101, 1101, 1101, 1101 ms/op
Iteration   1: n = 1, mean = 1078 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078 ms/op
Iteration   2: n = 1, mean = 1166 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1166, 1166, 1166, 1166, 1166, 1166, 1166, 1166 ms/op
Iteration   3: n = 1, mean = 1039 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039 ms/op

# Run progress: 31.06% complete, ETA 01:43:37
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1378 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378 ms/op
# Warmup Iteration   2: n = 1, mean = 1064 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064 ms/op
# Warmup Iteration   3: n = 1, mean = 1242 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242 ms/op
Iteration   1: n = 1, mean = 1109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1109, 1109, 1109, 1109, 1109, 1109, 1109, 1109 ms/op
Iteration   2: n = 1, mean = 1174 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174 ms/op
Iteration   3: n = 1, mean = 1162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162 ms/op


Result "write":
  N = 9
  mean =   1184.308 ±(99.9%) 178.476 ms/op

  Histogram, ms/op:
    [1000.000, 1025.000) = 0 
    [1025.000, 1050.000) = 1 
    [1050.000, 1075.000) = 0 
    [1075.000, 1100.000) = 1 
    [1100.000, 1125.000) = 1 
    [1125.000, 1150.000) = 0 
    [1150.000, 1175.000) = 3 
    [1175.000, 1200.000) = 0 
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 1 
    [1275.000, 1300.000) = 0 
    [1300.000, 1325.000) = 1 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1039.139 ms/op
     p(50.0000) =   1166.017 ms/op
     p(90.0000) =   1352.663 ms/op
     p(95.0000) =   1352.663 ms/op
     p(99.0000) =   1352.663 ms/op
     p(99.9000) =   1352.663 ms/op
     p(99.9900) =   1352.663 ms/op
     p(99.9990) =   1352.663 ms/op
     p(99.9999) =   1352.663 ms/op
    p(100.0000) =   1352.663 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaAgrona.write
# Parameters: (intKey = false, metaSync = false, num = 1000000, sequential = false, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 31.25% complete, ETA 01:43:00
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 2433 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2433, 2433, 2433, 2433, 2433, 2433, 2433, 2433 ms/op
# Warmup Iteration   2: n = 1, mean = 2550 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2550, 2550, 2550, 2550, 2550, 2550, 2550, 2550 ms/op
# Warmup Iteration   3: n = 1, mean = 2087 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2087, 2087, 2087, 2087, 2087, 2087, 2087, 2087 ms/op
Iteration   1: n = 1, mean = 2127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2127, 2127, 2127, 2127, 2127, 2127, 2127, 2127 ms/op
Iteration   2: n = 1, mean = 1839 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1839, 1839, 1839, 1839, 1839, 1839, 1839, 1839 ms/op
Iteration   3: n = 1, mean = 1969 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1969, 1969, 1969, 1969, 1969, 1969, 1969, 1969 ms/op

# Run progress: 31.44% complete, ETA 01:42:37
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 2248 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2248, 2248, 2248, 2248, 2248, 2248, 2248, 2248 ms/op
# Warmup Iteration   2: n = 1, mean = 2357 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2357, 2357, 2357, 2357, 2357, 2357, 2357, 2357 ms/op
# Warmup Iteration   3: n = 1, mean = 2164 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2164, 2164, 2164, 2164, 2164, 2164, 2164, 2164 ms/op
Iteration   1: n = 1, mean = 2236 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2236, 2236, 2236, 2236, 2236, 2236, 2236, 2236 ms/op
Iteration   2: n = 1, mean = 1969 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1969, 1969, 1969, 1969, 1969, 1969, 1969, 1969 ms/op
Iteration   3: n = 1, mean = 2173 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173 ms/op

# Run progress: 31.63% complete, ETA 01:42:14
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 2517 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2517, 2517, 2517, 2517, 2517, 2517, 2517, 2517 ms/op
# Warmup Iteration   2: n = 1, mean = 2112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112 ms/op
# Warmup Iteration   3: n = 1, mean = 2141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2141, 2141, 2141, 2141, 2141, 2141, 2141, 2141 ms/op
Iteration   1: n = 1, mean = 2112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2112, 2112, 2112, 2112, 2112, 2112, 2112, 2112 ms/op
Iteration   2: n = 1, mean = 2007 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007 ms/op
Iteration   3: n = 1, mean = 1915 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1915, 1915, 1915, 1915, 1915, 1915, 1915, 1915 ms/op


Result "write":
  N = 9
  mean =   2038.432 ±(99.9%) 218.773 ms/op

  Histogram, ms/op:
    [1800.000, 1850.000) = 1 
    [1850.000, 1900.000) = 0 
    [1900.000, 1950.000) = 1 
    [1950.000, 2000.000) = 2 
    [2000.000, 2050.000) = 1 
    [2050.000, 2100.000) = 0 
    [2100.000, 2150.000) = 2 
    [2150.000, 2200.000) = 1 
    [2200.000, 2250.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1839.202 ms/op
     p(50.0000) =   2006.974 ms/op
     p(90.0000) =   2235.564 ms/op
     p(95.0000) =   2235.564 ms/op
     p(99.0000) =   2235.564 ms/op
     p(99.9000) =   2235.564 ms/op
     p(99.9900) =   2235.564 ms/op
     p(99.9990) =   2235.564 ms/op
     p(99.9999) =   2235.564 ms/op
    p(100.0000) =   2235.564 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readCrc
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 31.82% complete, ETA 01:41:51
# Fork: 1 of 3
# Warmup Iteration   1: n = 11, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 89, 107, 109, 109, 109, 109, 109 ms/op
# Warmup Iteration   2: n = 11, mean = 98 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 88, 152, 158, 158, 158, 158, 158 ms/op
# Warmup Iteration   3: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 87, 88, 88, 88, 88, 88, 88 ms/op
Iteration   1: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 105, 157, 163, 163, 163, 163, 163 ms/op
Iteration   2: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 99, 153, 159, 159, 159, 159, 159 ms/op
Iteration   3: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 87, 88, 88, 88, 88, 88, 88 ms/op

# Run progress: 32.01% complete, ETA 01:41:14
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 101, 163, 169, 169, 169, 169, 169 ms/op
# Warmup Iteration   2: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 97, 99, 160, 160, 160, 160, 160, 160 ms/op
# Warmup Iteration   3: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 99, 154, 159, 159, 159, 159, 159 ms/op
Iteration   1: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 90, 91, 91, 91, 91, 91, 91 ms/op
Iteration   2: n = 11, mean = 96 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 90, 122, 123, 123, 123, 123, 123 ms/op
Iteration   3: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 90, 101, 155, 161, 161, 161, 161, 161 ms/op

# Run progress: 32.20% complete, ETA 01:40:37
# Fork: 3 of 3
# Warmup Iteration   1: n = 11, mean = 96 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 98, 107, 109, 109, 109, 109, 109 ms/op
# Warmup Iteration   2: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 87, 89, 89, 89, 89, 89, 89 ms/op
# Warmup Iteration   3: n = 10, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 99, 158, 159, 159, 159, 159, 159 ms/op
Iteration   1: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 88, 122, 130, 130, 130, 130, 130 ms/op
Iteration   2: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 87, 88, 88, 88, 88, 88, 88 ms/op
Iteration   3: n = 12, mean = 88 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 88, 89, 89, 89, 89, 89, 89 ms/op


Result "readCrc":
  N = 100
  mean =     94.762 ±(99.9%) 4.813 ms/op

  Histogram, ms/op:
    [ 80.000,  85.000) = 0 
    [ 85.000,  90.000) = 59 
    [ 90.000,  95.000) = 12 
    [ 95.000, 100.000) = 8 
    [100.000, 105.000) = 14 
    [105.000, 110.000) = 1 
    [110.000, 115.000) = 0 
    [115.000, 120.000) = 1 
    [120.000, 125.000) = 1 
    [125.000, 130.000) = 1 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 0 
    [150.000, 155.000) = 0 
    [155.000, 160.000) = 1 
    [160.000, 165.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     86.770 ms/op
     p(50.0000) =     89.784 ms/op
     p(90.0000) =    104.595 ms/op
     p(95.0000) =    122.461 ms/op
     p(99.0000) =    162.773 ms/op
     p(99.9000) =    162.791 ms/op
     p(99.9900) =    162.791 ms/op
     p(99.9990) =    162.791 ms/op
     p(99.9999) =    162.791 ms/op
    p(100.0000) =    162.791 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readCrc
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 32.39% complete, ETA 01:40:00
# Fork: 1 of 3
# Warmup Iteration   1: n = 7, mean = 148 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 118, 141, 201, 201, 201, 201, 201, 201 ms/op
# Warmup Iteration   2: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 138, 183, 183, 183, 183, 183, 183 ms/op
# Warmup Iteration   3: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 141, 193, 193, 193, 193, 193, 193 ms/op
Iteration   1: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 126, 153, 153, 153, 153, 153, 153 ms/op
Iteration   2: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 141, 191, 191, 191, 191, 191, 191 ms/op
Iteration   3: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 122, 173, 173, 173, 173, 173, 173 ms/op

# Run progress: 32.58% complete, ETA 01:39:25
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 106, 123, 124, 124, 124, 124, 124 ms/op
# Warmup Iteration   2: n = 8, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 120, 121, 181, 181, 181, 181, 181, 181 ms/op
# Warmup Iteration   3: n = 7, mean = 143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 136, 192, 192, 192, 192, 192, 192 ms/op
Iteration   1: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 137, 190, 190, 190, 190, 190, 190 ms/op
Iteration   2: n = 8, mean = 140 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 137, 182, 182, 182, 182, 182, 182 ms/op
Iteration   3: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 137, 189, 189, 189, 189, 189, 189 ms/op

# Run progress: 32.77% complete, ETA 01:38:51
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 109, 123, 190, 190, 190, 190, 190, 190 ms/op
# Warmup Iteration   2: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 108, 108, 111, 111, 111, 111, 111, 111 ms/op
# Warmup Iteration   3: n = 8, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 139, 164, 164, 164, 164, 164, 164 ms/op
Iteration   1: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 109, 123, 182, 182, 182, 182, 182, 182 ms/op
Iteration   2: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 109, 122, 175, 175, 175, 175, 175, 175 ms/op
Iteration   3: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 107, 107, 107, 107, 107, 107, 107 ms/op


Result "readCrc":
  N = 71
  mean =    131.338 ±(99.9%) 8.390 ms/op

  Histogram, ms/op:
    [100.000, 110.000) = 13 
    [110.000, 120.000) = 0 
    [120.000, 130.000) = 29 
    [130.000, 140.000) = 16 
    [140.000, 150.000) = 5 
    [150.000, 160.000) = 1 
    [160.000, 170.000) = 0 
    [170.000, 180.000) = 2 
    [180.000, 190.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =    106.955 ms/op
     p(50.0000) =    126.091 ms/op
     p(90.0000) =    169.030 ms/op
     p(95.0000) =    184.916 ms/op
     p(99.0000) =    190.579 ms/op
     p(99.9000) =    190.579 ms/op
     p(99.9900) =    190.579 ms/op
     p(99.9990) =    190.579 ms/op
     p(99.9999) =    190.579 ms/op
    p(100.0000) =    190.579 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readCrc
# Parameters: (forceSafe = false, intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 32.95% complete, ETA 01:38:16
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 130, 138, 138, 138, 138, 138, 138 ms/op
# Warmup Iteration   2: n = 7, mean = 151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 145, 204, 204, 204, 204, 204, 204 ms/op
# Warmup Iteration   3: n = 7, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 145, 210, 210, 210, 210, 210, 210 ms/op
Iteration   1: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 129, 130, 130, 130, 130, 130, 130 ms/op
Iteration   2: n = 7, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 145, 211, 211, 211, 211, 211, 211 ms/op
Iteration   3: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 129, 133, 133, 133, 133, 133, 133 ms/op

# Run progress: 33.14% complete, ETA 01:37:44
# Fork: 2 of 3
# Warmup Iteration   1: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 127, 143, 143, 143, 143, 143, 143 ms/op
# Warmup Iteration   2: n = 6, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 145, 175, 213, 213, 213, 213, 213, 213 ms/op
# Warmup Iteration   3: n = 7, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 142, 208, 208, 208, 208, 208, 208 ms/op
Iteration   1: n = 8, mean = 145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 127, 201, 201, 201, 201, 201, 201 ms/op
Iteration   2: n = 8, mean = 140 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 142, 162, 162, 162, 162, 162, 162 ms/op
Iteration   3: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 127, 131, 131, 131, 131, 131, 131 ms/op

# Run progress: 33.33% complete, ETA 01:37:11
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 127, 142, 142, 142, 142, 142, 142 ms/op
# Warmup Iteration   2: n = 8, mean = 142 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 128, 198, 198, 198, 198, 198, 198 ms/op
# Warmup Iteration   3: n = 7, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 146, 208, 208, 208, 208, 208, 208 ms/op
Iteration   1: n = 6, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 148, 209, 209, 209, 209, 209, 209 ms/op
Iteration   2: n = 7, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 146, 211, 211, 211, 211, 211, 211 ms/op
Iteration   3: n = 8, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 131, 146, 146, 146, 146, 146, 146 ms/op


Result "readCrc":
  N = 68
  mean =    141.654 ±(99.9%) 9.269 ms/op

  Histogram, ms/op:
    [120.000, 130.000) = 29 
    [130.000, 140.000) = 10 
    [140.000, 150.000) = 20 
    [150.000, 160.000) = 1 
    [160.000, 170.000) = 1 
    [170.000, 180.000) = 0 
    [180.000, 190.000) = 2 
    [190.000, 200.000) = 0 
    [200.000, 210.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =    126.484 ms/op
     p(50.0000) =    131.072 ms/op
     p(90.0000) =    180.853 ms/op
     p(95.0000) =    209.335 ms/op
     p(99.0000) =    211.288 ms/op
     p(99.9000) =    211.288 ms/op
     p(99.9900) =    211.288 ms/op
     p(99.9990) =    211.288 ms/op
     p(99.9999) =    211.288 ms/op
    p(100.0000) =    211.288 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readCrc
# Parameters: (forceSafe = false, intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 33.52% complete, ETA 01:36:39
# Fork: 1 of 3
# Warmup Iteration   1: n = 7, mean = 148 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 147, 156, 156, 156, 156, 156, 156 ms/op
# Warmup Iteration   2: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 147, 147, 147, 147, 147, 147, 147 ms/op
# Warmup Iteration   3: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 146, 148, 148, 148, 148, 148, 148 ms/op
Iteration   1: n = 6, mean = 191 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 173, 175, 232, 232, 232, 232, 232, 232 ms/op
Iteration   2: n = 7, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 163, 167, 167, 167, 167, 167, 167 ms/op
Iteration   3: n = 6, mean = 185 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 181, 229, 229, 229, 229, 229, 229 ms/op

# Run progress: 33.71% complete, ETA 01:36:09
# Fork: 2 of 3
# Warmup Iteration   1: n = 7, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 148, 159, 159, 159, 159, 159, 159 ms/op
# Warmup Iteration   2: n = 7, mean = 149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 148, 151, 151, 151, 151, 151, 151 ms/op
# Warmup Iteration   3: n = 7, mean = 151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 150, 151, 151, 151, 151, 151, 151, 151 ms/op
Iteration   1: n = 5, mean = 203 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 182, 183, 239, 239, 239, 239, 239, 239 ms/op
Iteration   2: n = 6, mean = 196 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 182, 183, 225, 225, 225, 225, 225, 225 ms/op
Iteration   3: n = 6, mean = 194 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 171, 176, 239, 239, 239, 239, 239, 239 ms/op

# Run progress: 33.90% complete, ETA 01:35:39
# Fork: 3 of 3
# Warmup Iteration   1: n = 5, mean = 206 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 180, 185, 243, 243, 243, 243, 243, 243 ms/op
# Warmup Iteration   2: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 152, 172, 213, 213, 213, 213, 213, 213 ms/op
# Warmup Iteration   3: n = 7, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 158, 159, 159, 159, 159, 159, 159, 159 ms/op
Iteration   1: n = 6, mean = 188 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 163, 183, 240, 240, 240, 240, 240, 240 ms/op
Iteration   2: n = 6, mean = 180 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 154, 172, 239, 239, 239, 239, 239, 239 ms/op
Iteration   3: n = 7, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 157, 159, 160, 160, 160, 160, 160, 160 ms/op


Result "readCrc":
  N = 55
  mean =    182.619 ±(99.9%) 12.459 ms/op

  Histogram, ms/op:
    [140.000, 150.000) = 2 
    [150.000, 160.000) = 9 
    [160.000, 170.000) = 7 
    [170.000, 180.000) = 12 
    [180.000, 190.000) = 14 
    [190.000, 200.000) = 0 
    [200.000, 210.000) = 0 
    [210.000, 220.000) = 1 
    [220.000, 230.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =    146.276 ms/op
     p(50.0000) =    175.112 ms/op
     p(90.0000) =    231.054 ms/op
     p(95.0000) =    239.337 ms/op
     p(99.0000) =    239.862 ms/op
     p(99.9000) =    239.862 ms/op
     p(99.9900) =    239.862 ms/op
     p(99.9990) =    239.862 ms/op
     p(99.9999) =    239.862 ms/op
    p(100.0000) =    239.862 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readKey
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 34.09% complete, ETA 01:35:10
# Fork: 1 of 3
# Warmup Iteration   1: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 113, 192, 192, 192, 192, 192, 192 ms/op
# Warmup Iteration   2: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 101, 102, 102, 102, 102, 102, 102 ms/op
# Warmup Iteration   3: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 113, 164, 164, 164, 164, 164, 164 ms/op
Iteration   1: n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 112, 162, 162, 162, 162, 162, 162 ms/op
Iteration   2: n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 112, 163, 163, 163, 163, 163, 163 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 113, 164, 164, 164, 164, 164, 164 ms/op

# Run progress: 34.28% complete, ETA 01:34:37
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 101, 123, 124, 124, 124, 124, 124 ms/op
# Warmup Iteration   2: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 89, 90, 91, 91, 91, 91, 91 ms/op
# Warmup Iteration   3: n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 110, 161, 161, 161, 161, 161, 161 ms/op
Iteration   1: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 100, 154, 159, 159, 159, 159, 159 ms/op
Iteration   2: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 88, 160, 163, 163, 163, 163, 163 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 89, 93, 93, 93, 93, 93, 93 ms/op

# Run progress: 34.47% complete, ETA 01:34:04
# Fork: 3 of 3
# Warmup Iteration   1: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 104, 123, 124, 124, 124, 124, 124 ms/op
# Warmup Iteration   2: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 92, 93, 94, 94, 94, 94, 94 ms/op
# Warmup Iteration   3: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 116, 161, 161, 161, 161, 161, 161 ms/op
Iteration   1: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 103, 144, 145, 145, 145, 145, 145 ms/op
Iteration   2: n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 91, 92, 92, 92, 92, 92, 92 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 91, 92, 93, 93, 93, 93, 93 ms/op


Result "readKey":
  N = 91
  mean =    103.244 ±(99.9%) 6.459 ms/op

  Histogram, ms/op:
    [ 80.000,  85.000) = 0 
    [ 85.000,  90.000) = 15 
    [ 90.000,  95.000) = 29 
    [ 95.000, 100.000) = 3 
    [100.000, 105.000) = 14 
    [105.000, 110.000) = 4 
    [110.000, 115.000) = 16 
    [115.000, 120.000) = 2 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 2 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 1 
    [150.000, 155.000) = 0 
    [155.000, 160.000) = 1 
    [160.000, 165.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =     87.949 ms/op
     p(50.0000) =     99.877 ms/op
     p(90.0000) =    115.212 ms/op
     p(95.0000) =    160.327 ms/op
     p(99.0000) =    164.364 ms/op
     p(99.9000) =    164.364 ms/op
     p(99.9900) =    164.364 ms/op
     p(99.9990) =    164.364 ms/op
     p(99.9999) =    164.364 ms/op
    p(100.0000) =    164.364 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readKey
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 34.66% complete, ETA 01:33:30
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 675 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 627, 675, 724, 724, 724, 724, 724, 724 ms/op
# Warmup Iteration   2: n = 2, mean = 745 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 657, 745, 833, 833, 833, 833, 833, 833 ms/op
# Warmup Iteration   3: n = 2, mean = 690 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 622, 690, 758, 758, 758, 758, 758, 758 ms/op
Iteration   1: n = 2, mean = 852 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 787, 852, 918, 918, 918, 918, 918, 918 ms/op
Iteration   2: n = 2, mean = 694 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 631, 694, 756, 756, 756, 756, 756, 756 ms/op
Iteration   3: 
Bytes	172040192	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 599 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 599, 599, 599, 599, 599, 599, 599, 599 ms/op

# Run progress: 34.85% complete, ETA 01:33:04
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 816 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 670, 816, 962, 962, 962, 962, 962, 962 ms/op
# Warmup Iteration   2: n = 2, mean = 824 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 755, 824, 892, 892, 892, 892, 892, 892 ms/op
# Warmup Iteration   3: n = 2, mean = 696 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 653, 696, 738, 738, 738, 738, 738, 738 ms/op
Iteration   1: n = 2, mean = 834 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 770, 834, 898, 898, 898, 898, 898, 898 ms/op
Iteration   2: n = 2, mean = 823 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 774, 823, 872, 872, 872, 872, 872, 872 ms/op
Iteration   3: 
Bytes	171810816	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 783 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 764, 783, 802, 802, 802, 802, 802, 802 ms/op

# Run progress: 35.04% complete, ETA 01:32:39
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 604 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 590, 604, 618, 618, 618, 618, 618, 618 ms/op
# Warmup Iteration   2: n = 2, mean = 767 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 720, 767, 814, 814, 814, 814, 814, 814 ms/op
# Warmup Iteration   3: n = 2, mean = 625 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 589, 625, 662, 662, 662, 662, 662, 662 ms/op
Iteration   1: n = 2, mean = 684 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 626, 684, 742, 742, 742, 742, 742, 742 ms/op
Iteration   2: n = 2, mean = 630 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 605, 630, 654, 654, 654, 654, 654, 654 ms/op
Iteration   3: 
Bytes	172040192	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 594 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 591, 594, 597, 597, 597, 597, 597, 597 ms/op


Result "readKey":
  N = 18
  mean =    721.420 ±(99.9%) 103.773 ms/op

  Histogram, ms/op:
    [ 500.000,  550.000) = 0 
    [ 550.000,  600.000) = 4 
    [ 600.000,  650.000) = 3 
    [ 650.000,  700.000) = 1 
    [ 700.000,  750.000) = 1 
    [ 750.000,  800.000) = 5 
    [ 800.000,  850.000) = 1 
    [ 850.000,  900.000) = 2 
    [ 900.000,  950.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    591.397 ms/op
     p(50.0000) =    749.208 ms/op
     p(90.0000) =    899.573 ms/op
     p(95.0000) =    917.504 ms/op
     p(99.0000) =    917.504 ms/op
     p(99.9000) =    917.504 ms/op
     p(99.9900) =    917.504 ms/op
     p(99.9990) =    917.504 ms/op
     p(99.9999) =    917.504 ms/op
    p(100.0000) =    917.504 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readKey
# Parameters: (forceSafe = false, intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 35.23% complete, ETA 01:32:11
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1348 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348 ms/op
# Warmup Iteration   2: n = 1, mean = 1281 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281 ms/op
# Warmup Iteration   3: n = 1, mean = 1041 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041 ms/op
Iteration   1: n = 1, mean = 1363 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1363 ms/op
Iteration   2: n = 1, mean = 1009 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009 ms/op
Iteration   3: 
Bytes	128860160	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 1066 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066 ms/op

# Run progress: 35.42% complete, ETA 01:31:43
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1054 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054 ms/op
# Warmup Iteration   2: n = 1, mean = 1357 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1357, 1357, 1357, 1357, 1357, 1357, 1357, 1357 ms/op
# Warmup Iteration   3: n = 1, mean = 1130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130 ms/op
Iteration   1: n = 1, mean = 1267 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267 ms/op
Iteration   2: n = 1, mean = 1202 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202 ms/op
Iteration   3: 
Bytes	128860160	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 1052 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052 ms/op

# Run progress: 35.61% complete, ETA 01:31:15
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1065 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065 ms/op
# Warmup Iteration   2: n = 1, mean = 1128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128 ms/op
# Warmup Iteration   3: n = 1, mean = 1168 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1168, 1168, 1168, 1168, 1168, 1168, 1168, 1168 ms/op
Iteration   1: n = 1, mean = 1227 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1227, 1227, 1227, 1227, 1227, 1227, 1227, 1227 ms/op
Iteration   2: n = 1, mean = 1034 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034 ms/op
Iteration   3: 
Bytes	128860160	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 1086 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086 ms/op


Result "readKey":
  N = 9
  mean =   1145.045 ±(99.9%) 207.125 ms/op

  Histogram, ms/op:
    [1000.000, 1025.000) = 1 
    [1025.000, 1050.000) = 1 
    [1050.000, 1075.000) = 2 
    [1075.000, 1100.000) = 1 
    [1100.000, 1125.000) = 0 
    [1125.000, 1150.000) = 0 
    [1150.000, 1175.000) = 0 
    [1175.000, 1200.000) = 0 
    [1200.000, 1225.000) = 1 
    [1225.000, 1250.000) = 1 
    [1250.000, 1275.000) = 1 
    [1275.000, 1300.000) = 0 
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 0 
    [1350.000, 1375.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1008.730 ms/op
     p(50.0000) =   1086.325 ms/op
     p(90.0000) =   1363.149 ms/op
     p(95.0000) =   1363.149 ms/op
     p(99.0000) =   1363.149 ms/op
     p(99.9000) =   1363.149 ms/op
     p(99.9900) =   1363.149 ms/op
     p(99.9990) =   1363.149 ms/op
     p(99.9999) =   1363.149 ms/op
    p(100.0000) =   1363.149 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readKey
# Parameters: (forceSafe = false, intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 35.80% complete, ETA 01:30:46
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1961 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961 ms/op
# Warmup Iteration   2: n = 1, mean = 1913 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1913, 1913, 1913, 1913, 1913, 1913, 1913, 1913 ms/op
# Warmup Iteration   3: n = 1, mean = 1946 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946 ms/op
Iteration   1: n = 1, mean = 1994 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1994, 1994, 1994, 1994, 1994, 1994, 1994, 1994 ms/op
Iteration   2: n = 1, mean = 2278 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2278, 2278, 2278, 2278, 2278, 2278, 2278, 2278 ms/op
Iteration   3: 
Bytes	188956672	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 2020 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020 ms/op

# Run progress: 35.98% complete, ETA 01:30:29
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1724 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1724, 1724, 1724, 1724, 1724, 1724, 1724, 1724 ms/op
# Warmup Iteration   2: n = 1, mean = 1732 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732 ms/op
# Warmup Iteration   3: n = 1, mean = 1680 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1680, 1680, 1680, 1680, 1680, 1680, 1680, 1680 ms/op
Iteration   1: n = 1, mean = 1875 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1875, 1875, 1875, 1875, 1875, 1875, 1875, 1875 ms/op
Iteration   2: n = 1, mean = 2028 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2028, 2028, 2028, 2028, 2028, 2028, 2028, 2028 ms/op
Iteration   3: 
Bytes	188985344	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 1923 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923 ms/op

# Run progress: 36.17% complete, ETA 01:30:10
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 2210 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210 ms/op
# Warmup Iteration   2: n = 1, mean = 1929 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1929, 1929, 1929, 1929, 1929, 1929, 1929, 1929 ms/op
# Warmup Iteration   3: n = 1, mean = 1793 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1793, 1793, 1793, 1793, 1793, 1793, 1793, 1793 ms/op
Iteration   1: n = 1, mean = 2219 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2219, 2219, 2219, 2219, 2219, 2219, 2219, 2219 ms/op
Iteration   2: n = 1, mean = 1818 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1818, 1818, 1818, 1818, 1818, 1818, 1818, 1818 ms/op
Iteration   3: 
Bytes	189235200	org.lmdbjava.bench.LmdbJavaByteBuffer.readKey-SampleTime-forceSafe-false-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 1967 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1967, 1967, 1967, 1967, 1967, 1967, 1967, 1967 ms/op


Result "readKey":
  N = 9
  mean =   2013.499 ±(99.9%) 252.156 ms/op

  Histogram, ms/op:
    [1800.000, 1850.000) = 1 
    [1850.000, 1900.000) = 1 
    [1900.000, 1950.000) = 1 
    [1950.000, 2000.000) = 2 
    [2000.000, 2050.000) = 2 
    [2050.000, 2100.000) = 0 
    [2100.000, 2150.000) = 0 
    [2150.000, 2200.000) = 0 
    [2200.000, 2250.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1818.231 ms/op
     p(50.0000) =   1994.392 ms/op
     p(90.0000) =   2277.507 ms/op
     p(95.0000) =   2277.507 ms/op
     p(99.0000) =   2277.507 ms/op
     p(99.9000) =   2277.507 ms/op
     p(99.9900) =   2277.507 ms/op
     p(99.9990) =   2277.507 ms/op
     p(99.9999) =   2277.507 ms/op
    p(100.0000) =   2277.507 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readRev
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 36.36% complete, ETA 01:29:53
# Fork: 1 of 3
# Warmup Iteration   1: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 32, 36, 40, 44, 44, 44, 44 ms/op
# Warmup Iteration   2: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 32, 32, 32, 32, 32, 32, 32 ms/op
# Warmup Iteration   3: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 32, 32, 32, 33, 33, 33, 33 ms/op
Iteration   1: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 62, 73, 74, 74, 74, 74 ms/op
Iteration   2: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 32, 32, 35, 36, 36, 36, 36 ms/op
Iteration   3: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 32, 53, 65, 74, 74, 74, 74 ms/op

# Run progress: 36.55% complete, ETA 01:29:21
# Fork: 2 of 3
# Warmup Iteration   1: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 34, 35, 39, 43, 43, 43, 43 ms/op
# Warmup Iteration   2: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 34, 51, 61, 69, 69, 69, 69 ms/op
# Warmup Iteration   3: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 35, 45, 62, 69, 69, 69, 69 ms/op
Iteration   1: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 32, 32, 33, 33, 33, 33, 33 ms/op
Iteration   2: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 34, 44, 59, 64, 64, 64, 64 ms/op
Iteration   3: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 36, 54, 66, 70, 70, 70, 70 ms/op

# Run progress: 36.74% complete, ETA 01:28:50
# Fork: 3 of 3
# Warmup Iteration   1: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 34, 34, 39, 43, 43, 43, 43 ms/op
# Warmup Iteration   2: n = 34, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 30, 31, 31, 31, 31, 31 ms/op
# Warmup Iteration   3: n = 34, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 31, 31, 31, 31, 31, 31 ms/op
Iteration   1: n = 34, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 30, 30, 31, 31, 31, 31 ms/op
Iteration   2: n = 34, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 30, 30, 31, 31, 31, 31 ms/op
Iteration   3: n = 34, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 30, 31, 31, 31, 31, 31 ms/op


Result "readRev":
  N = 275
  mean =     33.428 ±(99.9%) 1.355 ms/op

  Histogram, ms/op:
    [20.000, 25.000) = 0 
    [25.000, 30.000) = 82 
    [30.000, 35.000) = 134 
    [35.000, 40.000) = 42 
    [40.000, 45.000) = 4 
    [45.000, 50.000) = 1 
    [50.000, 55.000) = 4 
    [55.000, 60.000) = 3 
    [60.000, 65.000) = 1 
    [65.000, 70.000) = 1 
    [70.000, 75.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =     29.688 ms/op
     p(50.0000) =     31.818 ms/op
     p(90.0000) =     36.045 ms/op
     p(95.0000) =     44.866 ms/op
     p(99.0000) =     72.236 ms/op
     p(99.9000) =     73.531 ms/op
     p(99.9900) =     73.531 ms/op
     p(99.9990) =     73.531 ms/op
     p(99.9999) =     73.531 ms/op
    p(100.0000) =     73.531 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readRev
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 36.93% complete, ETA 01:28:19
# Fork: 1 of 3
# Warmup Iteration   1: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 68, 69, 102, 117, 117, 117, 117, 117 ms/op
# Warmup Iteration   2: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 68, 79, 89, 89, 89, 89, 89 ms/op
# Warmup Iteration   3: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 76, 95, 105, 105, 105, 105, 105 ms/op
Iteration   1: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 68, 68, 76, 77, 77, 77, 77, 77 ms/op
Iteration   2: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 60, 72, 82, 82, 82, 82, 82 ms/op
Iteration   3: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 51, 52, 52, 52, 52, 52, 52 ms/op

# Run progress: 37.12% complete, ETA 01:27:50
# Fork: 2 of 3
# Warmup Iteration   1: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 55, 57, 67, 67, 67, 67, 67 ms/op
# Warmup Iteration   2: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 66, 83, 94, 94, 94, 94, 94 ms/op
# Warmup Iteration   3: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 59, 91, 97, 97, 97, 97, 97 ms/op
Iteration   1: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 68, 74, 87, 95, 95, 95, 95, 95 ms/op
Iteration   2: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 68, 69, 69, 69, 69, 69, 69, 69 ms/op
Iteration   3: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 58, 74, 80, 80, 80, 80, 80 ms/op

# Run progress: 37.31% complete, ETA 01:27:21
# Fork: 3 of 3
# Warmup Iteration   1: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 52, 55, 61, 61, 61, 61, 61 ms/op
# Warmup Iteration   2: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 51, 88, 97, 97, 97, 97, 97 ms/op
# Warmup Iteration   3: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 68, 74, 76, 76, 76, 76, 76, 76 ms/op
Iteration   1: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 60, 75, 88, 88, 88, 88, 88 ms/op
Iteration   2: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 50, 51, 51, 52, 52, 52, 52, 52 ms/op
Iteration   3: n = 16, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 70, 78, 86, 86, 86, 86, 86 ms/op


Result "readRev":
  N = 151
  mean =     61.818 ±(99.9%) 2.618 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 51 
    [ 55.000,  60.000) = 30 
    [ 60.000,  65.000) = 6 
    [ 65.000,  70.000) = 44 
    [ 70.000,  75.000) = 7 
    [ 75.000,  80.000) = 9 
    [ 80.000,  85.000) = 1 
    [ 85.000,  90.000) = 2 
    [ 90.000,  95.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     50.397 ms/op
     p(50.0000) =     59.572 ms/op
     p(90.0000) =     73.977 ms/op
     p(95.0000) =     76.389 ms/op
     p(99.0000) =     91.268 ms/op
     p(99.9000) =     95.289 ms/op
     p(99.9900) =     95.289 ms/op
     p(99.9990) =     95.289 ms/op
     p(99.9999) =     95.289 ms/op
    p(100.0000) =     95.289 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readRev
# Parameters: (forceSafe = false, intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 37.50% complete, ETA 01:26:52
# Fork: 1 of 3
# Warmup Iteration   1: n = 30, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 34, 38, 42, 42, 42, 42 ms/op
# Warmup Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 33, 33, 33, 33, 33, 33 ms/op
# Warmup Iteration   3: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 37, 46, 66, 73, 73, 73, 73 ms/op
Iteration   1: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 33, 33, 33, 33, 33, 33 ms/op
Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 33, 33, 34, 34, 34, 34 ms/op
Iteration   3: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 37, 47, 66, 74, 74, 74, 74 ms/op

# Run progress: 37.69% complete, ETA 01:26:23
# Fork: 2 of 3
# Warmup Iteration   1: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 33, 33, 38, 43, 43, 43, 43 ms/op
# Warmup Iteration   2: n = 23, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 39, 64, 74, 75, 75, 75, 75 ms/op
# Warmup Iteration   3: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 36, 37, 37, 37, 37, 37, 37 ms/op
Iteration   1: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 38, 63, 73, 74, 74, 74, 74 ms/op
Iteration   2: n = 30, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 32, 36, 37, 37, 37, 37, 37 ms/op
Iteration   3: n = 31, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 32, 33, 33, 33, 33, 33, 33 ms/op

# Run progress: 37.88% complete, ETA 01:25:55
# Fork: 3 of 3
# Warmup Iteration   1: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 31, 35, 41, 41, 41, 41 ms/op
# Warmup Iteration   2: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 37, 58, 67, 68, 68, 68, 68 ms/op
# Warmup Iteration   3: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 34, 34, 34, 34, 34, 34, 34 ms/op
Iteration   1: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 37, 59, 69, 70, 70, 70, 70 ms/op
Iteration   2: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 31, 34, 34, 34, 34, 34, 34 ms/op
Iteration   3: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 34, 52, 63, 70, 70, 70, 70 ms/op


Result "readRev":
  N = 257
  mean =     35.607 ±(99.9%) 1.415 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 175 
    [35.000, 40.000) = 60 
    [40.000, 45.000) = 7 
    [45.000, 50.000) = 2 
    [50.000, 55.000) = 6 
    [55.000, 60.000) = 1 
    [60.000, 65.000) = 1 
    [65.000, 70.000) = 2 
    [70.000, 75.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =     30.441 ms/op
     p(50.0000) =     33.063 ms/op
     p(90.0000) =     38.797 ms/op
     p(95.0000) =     51.846 ms/op
     p(99.0000) =     71.555 ms/op
     p(99.9000) =     74.056 ms/op
     p(99.9900) =     74.056 ms/op
     p(99.9990) =     74.056 ms/op
     p(99.9999) =     74.056 ms/op
    p(100.0000) =     74.056 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readRev
# Parameters: (forceSafe = false, intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 38.07% complete, ETA 01:25:28
# Fork: 1 of 3
# Warmup Iteration   1: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 58, 82, 87, 87, 87, 87, 87 ms/op
# Warmup Iteration   2: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 69, 95, 106, 106, 106, 106, 106 ms/op
# Warmup Iteration   3: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 64, 77, 94, 94, 94, 94, 94 ms/op
Iteration   1: n = 18, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 59, 82, 92, 92, 92, 92, 92 ms/op
Iteration   2: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 69, 76, 84, 84, 84, 84, 84 ms/op
Iteration   3: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 59, 86, 100, 100, 100, 100, 100 ms/op

# Run progress: 38.26% complete, ETA 01:25:02
# Fork: 2 of 3
# Warmup Iteration   1: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 72, 108, 119, 119, 119, 119, 119 ms/op
# Warmup Iteration   2: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 61, 76, 83, 83, 83, 83, 83 ms/op
# Warmup Iteration   3: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 78, 96, 100, 100, 100, 100, 100 ms/op
Iteration   1: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 79, 98, 104, 104, 104, 104, 104 ms/op
Iteration   2: n = 15, mean = 71 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 71, 71, 71, 71, 71, 71, 71 ms/op
Iteration   3: n = 15, mean = 71 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 71, 71, 71, 71, 71, 71, 71 ms/op

# Run progress: 38.45% complete, ETA 01:24:37
# Fork: 3 of 3
# Warmup Iteration   1: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 71, 109, 113, 113, 113, 113, 113 ms/op
# Warmup Iteration   2: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 62, 62, 63, 63, 63, 63, 63 ms/op
# Warmup Iteration   3: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 63, 64, 64, 64, 64, 64, 64 ms/op
Iteration   1: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 62, 63, 63, 63, 63, 63, 63 ms/op
Iteration   2: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 62, 62, 63, 63, 63, 63, 63 ms/op
Iteration   3: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 62, 63, 63, 63, 63, 63, 63 ms/op


Result "readRev":
  N = 142
  mean =     66.214 ±(99.9%) 2.339 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 5 
    [ 55.000,  60.000) = 25 
    [ 60.000,  65.000) = 52 
    [ 65.000,  70.000) = 10 
    [ 70.000,  75.000) = 34 
    [ 75.000,  80.000) = 10 
    [ 80.000,  85.000) = 2 
    [ 85.000,  90.000) = 1 
    [ 90.000,  95.000) = 1 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     54.133 ms/op
     p(50.0000) =     62.489 ms/op
     p(90.0000) =     78.512 ms/op
     p(95.0000) =     79.462 ms/op
     p(99.0000) =    102.155 ms/op
     p(99.9000) =    104.071 ms/op
     p(99.9900) =    104.071 ms/op
     p(99.9990) =    104.071 ms/op
     p(99.9999) =    104.071 ms/op
    p(100.0000) =    104.071 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readSeq
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 38.64% complete, ETA 01:24:12
# Fork: 1 of 3
# Warmup Iteration   1: n = 26, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 41, 41, 47, 50, 50, 50, 50 ms/op
# Warmup Iteration   2: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 36, 37, 38, 38, 38, 38 ms/op
# Warmup Iteration   3: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 36, 36, 36, 36, 36, 36 ms/op
Iteration   1: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 41, 60, 79, 83, 83, 83, 83 ms/op
Iteration   2: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 37, 38, 38, 38, 38, 38 ms/op
Iteration   3: n = 28, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 36, 48, 56, 56, 56, 56 ms/op

# Run progress: 38.83% complete, ETA 01:23:43
# Fork: 2 of 3
# Warmup Iteration   1: n = 25, mean = 40 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 41, 43, 48, 50, 50, 50, 50 ms/op
# Warmup Iteration   2: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 41, 70, 75, 75, 75, 75, 75 ms/op
# Warmup Iteration   3: n = 28, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 41, 41, 41, 41, 41, 41 ms/op
Iteration   1: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 45, 62, 71, 71, 71, 71 ms/op
Iteration   2: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 36, 36, 36, 36, 36, 36 ms/op
Iteration   3: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 60, 75, 80, 80, 80, 80 ms/op

# Run progress: 39.02% complete, ETA 01:23:14
# Fork: 3 of 3
# Warmup Iteration   1: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 40, 42, 47, 49, 49, 49, 49 ms/op
# Warmup Iteration   2: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 39, 51, 67, 72, 72, 72, 72 ms/op
# Warmup Iteration   3: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 36, 57, 71, 74, 74, 74, 74 ms/op
Iteration   1: n = 21, mean = 50 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 47, 59, 74, 76, 76, 76, 76 ms/op
Iteration   2: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 41, 46, 73, 79, 79, 79, 79, 79 ms/op
Iteration   3: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 40, 46, 70, 78, 78, 78, 78, 78 ms/op


Result "readSeq":
  N = 219
  mean =     41.846 ±(99.9%) 2.110 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 126 
    [40.000, 45.000) = 24 
    [45.000, 50.000) = 42 
    [50.000, 55.000) = 9 
    [55.000, 60.000) = 6 
    [60.000, 65.000) = 4 
    [65.000, 70.000) = 0 
    [70.000, 75.000) = 3 
    [75.000, 80.000) = 4 
    [80.000, 85.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     35.586 ms/op
     p(50.0000) =     36.241 ms/op
     p(90.0000) =     52.756 ms/op
     p(95.0000) =     61.014 ms/op
     p(99.0000) =     79.482 ms/op
     p(99.9000) =     82.838 ms/op
     p(99.9900) =     82.838 ms/op
     p(99.9990) =     82.838 ms/op
     p(99.9999) =     82.838 ms/op
    p(100.0000) =     82.838 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readSeq
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 39.20% complete, ETA 01:22:45
# Fork: 1 of 3
# Warmup Iteration   1: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 77, 104, 118, 118, 118, 118, 118 ms/op
# Warmup Iteration   2: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 85, 105, 110, 110, 110, 110, 110 ms/op
# Warmup Iteration   3: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 56, 65, 66, 66, 66, 66, 66 ms/op
Iteration   1: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 85, 104, 108, 108, 108, 108, 108 ms/op
Iteration   2: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 76, 86, 87, 87, 87, 87, 87 ms/op
Iteration   3: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 57, 66, 66, 66, 66, 66, 66 ms/op

# Run progress: 39.39% complete, ETA 01:22:18
# Fork: 2 of 3
# Warmup Iteration   1: n = 18, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 57, 62, 72, 72, 72, 72, 72 ms/op
# Warmup Iteration   2: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 71, 93, 102, 102, 102, 102, 102 ms/op
# Warmup Iteration   3: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 78, 93, 97, 97, 97, 97, 97 ms/op
Iteration   1: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 80, 108, 109, 109, 109, 109, 109 ms/op
Iteration   2: n = 13, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 72, 74, 97, 98, 98, 98, 98, 98 ms/op
Iteration   3: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 70, 86, 93, 93, 93, 93, 93 ms/op

# Run progress: 39.58% complete, ETA 01:21:52
# Fork: 3 of 3
# Warmup Iteration   1: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 66, 90, 106, 106, 106, 106, 106 ms/op
# Warmup Iteration   2: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 56, 58, 58, 58, 58, 58, 58 ms/op
# Warmup Iteration   3: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 56, 56, 56, 56, 56, 56, 56 ms/op
Iteration   1: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 65, 82, 91, 91, 91, 91, 91 ms/op
Iteration   2: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 65, 102, 107, 107, 107, 107, 107 ms/op
Iteration   3: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 65, 106, 114, 114, 114, 114, 114 ms/op


Result "readSeq":
  N = 126
  mean =     73.103 ±(99.9%) 3.877 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 17 
    [ 60.000,  65.000) = 27 
    [ 65.000,  70.000) = 18 
    [ 70.000,  75.000) = 16 
    [ 75.000,  80.000) = 10 
    [ 80.000,  85.000) = 19 
    [ 85.000,  90.000) = 5 
    [ 90.000,  95.000) = 6 
    [ 95.000, 100.000) = 3 
    [100.000, 105.000) = 0 
    [105.000, 110.000) = 4 
    [110.000, 115.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     55.771 ms/op
     p(50.0000) =     70.648 ms/op
     p(90.0000) =     92.602 ms/op
     p(95.0000) =     98.900 ms/op
     p(99.0000) =    112.401 ms/op
     p(99.9000) =    113.639 ms/op
     p(99.9900) =    113.639 ms/op
     p(99.9990) =    113.639 ms/op
     p(99.9999) =    113.639 ms/op
    p(100.0000) =    113.639 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readSeq
# Parameters: (forceSafe = false, intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 39.77% complete, ETA 01:21:25
# Fork: 1 of 3
# Warmup Iteration   1: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 47, 48, 71, 88, 88, 88, 88, 88 ms/op
# Warmup Iteration   2: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 47, 74, 83, 83, 83, 83, 83 ms/op
# Warmup Iteration   3: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 47, 69, 75, 75, 75, 75, 75 ms/op
Iteration   1: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 47, 48, 70, 80, 80, 80, 80, 80 ms/op
Iteration   2: n = 22, mean = 47 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 42, 68, 74, 74, 74, 74, 74 ms/op
Iteration   3: n = 21, mean = 50 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 48, 61, 79, 81, 81, 81, 81 ms/op

# Run progress: 39.96% complete, ETA 01:20:59
# Fork: 2 of 3
# Warmup Iteration   1: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 39, 41, 45, 47, 47, 47, 47 ms/op
# Warmup Iteration   2: n = 24, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 39, 58, 73, 77, 77, 77, 77 ms/op
# Warmup Iteration   3: n = 19, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 46, 51, 66, 85, 85, 85, 85, 85 ms/op
Iteration   1: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 45, 46, 46, 46, 46, 46, 46 ms/op
Iteration   2: n = 20, mean = 50 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 44, 44, 69, 82, 83, 83, 83, 83 ms/op
Iteration   3: n = 23, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 40, 68, 74, 74, 74, 74, 74 ms/op

# Run progress: 40.15% complete, ETA 01:20:34
# Fork: 3 of 3
# Warmup Iteration   1: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 38, 44, 51, 53, 53, 53, 53 ms/op
# Warmup Iteration   2: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 38, 62, 68, 68, 68, 68, 68 ms/op
# Warmup Iteration   3: n = 21, mean = 49 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 43, 70, 79, 80, 80, 80, 80 ms/op
Iteration   1: n = 21, mean = 50 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 43, 43, 74, 80, 80, 80, 80, 80 ms/op
Iteration   2: n = 22, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 43, 57, 78, 81, 81, 81, 81 ms/op
Iteration   3: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 38, 38, 38, 38, 38, 38, 38 ms/op


Result "readSeq":
  N = 199
  mean =     46.696 ±(99.9%) 2.237 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 0 
    [35.000, 40.000) = 41 
    [40.000, 45.000) = 69 
    [45.000, 50.000) = 57 
    [50.000, 55.000) = 5 
    [55.000, 60.000) = 6 
    [60.000, 65.000) = 7 
    [65.000, 70.000) = 3 
    [70.000, 75.000) = 5 
    [75.000, 80.000) = 1 
    [80.000, 85.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =     37.945 ms/op
     p(50.0000) =     43.778 ms/op
     p(90.0000) =     60.031 ms/op
     p(95.0000) =     71.565 ms/op
     p(99.0000) =     80.871 ms/op
     p(99.9000) =     82.706 ms/op
     p(99.9900) =     82.706 ms/op
     p(99.9990) =     82.706 ms/op
     p(99.9999) =     82.706 ms/op
    p(100.0000) =     82.706 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readSeq
# Parameters: (forceSafe = false, intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 40.34% complete, ETA 01:20:08
# Fork: 1 of 3
# Warmup Iteration   1: n = 12, mean = 88 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 83, 117, 117, 117, 117, 117, 117 ms/op
# Warmup Iteration   2: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 75, 97, 105, 105, 105, 105, 105 ms/op
# Warmup Iteration   3: n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 80, 103, 107, 107, 107, 107, 107 ms/op
Iteration   1: n = 13, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 80, 102, 109, 109, 109, 109, 109 ms/op
Iteration   2: n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 79, 111, 115, 115, 115, 115, 115 ms/op
Iteration   3: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 80, 98, 105, 105, 105, 105, 105 ms/op

# Run progress: 40.53% complete, ETA 01:19:45
# Fork: 2 of 3
# Warmup Iteration   1: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 60, 104, 120, 120, 120, 120, 120 ms/op
# Warmup Iteration   2: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 84, 108, 114, 114, 114, 114, 114 ms/op
# Warmup Iteration   3: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 73, 75, 76, 76, 76, 76, 76, 76 ms/op
Iteration   1: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 69, 90, 98, 98, 98, 98, 98 ms/op
Iteration   2: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 60, 60, 61, 61, 61, 61, 61 ms/op
Iteration   3: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 60, 86, 101, 101, 101, 101, 101 ms/op

# Run progress: 40.72% complete, ETA 01:19:21
# Fork: 3 of 3
# Warmup Iteration   1: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 78, 87, 112, 120, 120, 120, 120, 120 ms/op
# Warmup Iteration   2: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 78, 81, 108, 113, 113, 113, 113, 113 ms/op
# Warmup Iteration   3: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 73, 78, 88, 95, 95, 95, 95, 95 ms/op
Iteration   1: n = 13, mean = 83 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 72, 112, 114, 114, 114, 114, 114 ms/op
Iteration   2: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 78, 87, 92, 94, 94, 94, 94, 94 ms/op
Iteration   3: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 72, 89, 97, 97, 97, 97, 97 ms/op


Result "readSeq":
  N = 124
  mean =     75.114 ±(99.9%) 4.006 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 27 
    [ 60.000,  65.000) = 6 
    [ 65.000,  70.000) = 11 
    [ 70.000,  75.000) = 21 
    [ 75.000,  80.000) = 12 
    [ 80.000,  85.000) = 23 
    [ 85.000,  90.000) = 10 
    [ 90.000,  95.000) = 4 
    [ 95.000, 100.000) = 3 
    [100.000, 105.000) = 1 
    [105.000, 110.000) = 4 
    [110.000, 115.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     59.572 ms/op
     p(50.0000) =     72.090 ms/op
     p(90.0000) =     93.585 ms/op
     p(95.0000) =    104.202 ms/op
     p(99.0000) =    114.885 ms/op
     p(99.9000) =    115.343 ms/op
     p(99.9900) =    115.343 ms/op
     p(99.9990) =    115.343 ms/op
     p(99.9999) =    115.343 ms/op
    p(100.0000) =    115.343 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readXxh64
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 40.91% complete, ETA 01:18:58
# Fork: 1 of 3
# Warmup Iteration   1: n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 77, 137, 160, 160, 160, 160, 160 ms/op
# Warmup Iteration   2: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 70, 103, 124, 124, 124, 124, 124 ms/op
# Warmup Iteration   3: n = 14, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 71, 126, 128, 128, 128, 128, 128 ms/op
Iteration   1: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 73, 79, 132, 148, 148, 148, 148, 148 ms/op
Iteration   2: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 68, 69, 70, 71, 71, 71, 71, 71 ms/op
Iteration   3: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 71, 103, 123, 123, 123, 123, 123 ms/op

# Run progress: 41.10% complete, ETA 01:18:31
# Fork: 2 of 3
# Warmup Iteration   1: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 71, 127, 153, 153, 153, 153, 153 ms/op
# Warmup Iteration   2: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 72, 102, 122, 122, 122, 122, 122 ms/op
# Warmup Iteration   3: n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 81, 114, 125, 125, 125, 125, 125 ms/op
Iteration   1: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 69, 100, 105, 105, 105, 105, 105 ms/op
Iteration   2: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 63, 63, 64, 64, 64, 64, 64 ms/op
Iteration   3: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 68, 81, 122, 125, 125, 125, 125, 125 ms/op

# Run progress: 41.29% complete, ETA 01:18:05
# Fork: 3 of 3
# Warmup Iteration   1: n = 12, mean = 88 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 74, 81, 138, 158, 158, 158, 158, 158 ms/op
# Warmup Iteration   2: n = 11, mean = 92 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 83, 119, 120, 120, 120, 120, 120 ms/op
# Warmup Iteration   3: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 83, 121, 128, 128, 128, 128, 128 ms/op
Iteration   1: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 74, 82, 118, 130, 130, 130, 130, 130 ms/op
Iteration   2: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 73, 82, 116, 127, 127, 127, 127, 127 ms/op
Iteration   3: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 74, 74, 75, 75, 75, 75, 75, 75 ms/op


Result "readXxh64":
  N = 121
  mean =     76.724 ±(99.9%) 4.398 ms/op

  Histogram, ms/op:
    [ 60.000,  65.000) = 16 
    [ 65.000,  70.000) = 27 
    [ 70.000,  75.000) = 28 
    [ 75.000,  80.000) = 15 
    [ 80.000,  85.000) = 22 
    [ 85.000,  90.000) = 2 
    [ 90.000,  95.000) = 2 
    [ 95.000, 100.000) = 2 
    [100.000, 105.000) = 1 
    [105.000, 110.000) = 0 
    [110.000, 115.000) = 1 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 2 
    [125.000, 130.000) = 2 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     62.325 ms/op
     p(50.0000) =     73.925 ms/op
     p(90.0000) =     89.837 ms/op
     p(95.0000) =    113.207 ms/op
     p(99.0000) =    143.899 ms/op
     p(99.9000) =    147.849 ms/op
     p(99.9900) =    147.849 ms/op
     p(99.9990) =    147.849 ms/op
     p(99.9999) =    147.849 ms/op
    p(100.0000) =    147.849 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readXxh64
# Parameters: (forceSafe = false, intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 41.48% complete, ETA 01:17:38
# Fork: 1 of 3
# Warmup Iteration   1: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 84, 94, 166, 173, 173, 173, 173, 173 ms/op
# Warmup Iteration   2: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 82, 84, 84, 84, 84, 84, 84 ms/op
# Warmup Iteration   3: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 113, 128, 129, 129, 129, 129, 129 ms/op
Iteration   1: n = 11, mean = 97 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 94, 137, 147, 147, 147, 147, 147 ms/op
Iteration   2: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 82, 84, 85, 85, 85, 85, 85 ms/op
Iteration   3: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 113, 149, 149, 149, 149, 149, 149 ms/op

# Run progress: 41.67% complete, ETA 01:17:14
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 84, 94, 168, 175, 175, 175, 175, 175 ms/op
# Warmup Iteration   2: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 82, 82, 82, 82, 82, 82, 82 ms/op
# Warmup Iteration   3: n = 11, mean = 97 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 94, 133, 141, 141, 141, 141, 141 ms/op
Iteration   1: n = 11, mean = 93 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 93, 114, 119, 119, 119, 119, 119 ms/op
Iteration   2: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 81, 82, 82, 82, 82, 82, 82, 82 ms/op
Iteration   3: n = 11, mean = 96 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 88, 150, 161, 161, 161, 161, 161 ms/op

# Run progress: 41.86% complete, ETA 01:16:49
# Fork: 3 of 3
# Warmup Iteration   1: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 111, 182, 182, 182, 182, 182, 182 ms/op
# Warmup Iteration   2: n = 11, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 100, 100, 100, 100, 100, 100, 100 ms/op
# Warmup Iteration   3: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 102, 103, 104, 104, 104, 104, 104 ms/op
Iteration   1: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 94, 95, 152, 153, 153, 153, 153, 153 ms/op
Iteration   2: n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 111, 158, 158, 158, 158, 158, 158 ms/op
Iteration   3: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 106, 148, 148, 148, 148, 148, 148 ms/op


Result "readXxh64":
  N = 96
  mean =     98.417 ±(99.9%) 6.569 ms/op

  Histogram, ms/op:
    [ 80.000,  85.000) = 31 
    [ 85.000,  90.000) = 9 
    [ 90.000,  95.000) = 20 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 5 
    [105.000, 110.000) = 7 
    [110.000, 115.000) = 13 
    [115.000, 120.000) = 2 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 1 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 4 
    [150.000, 155.000) = 1 
    [155.000, 160.000) = 1 
    [160.000, 165.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     81.396 ms/op
     p(50.0000) =     93.782 ms/op
     p(90.0000) =    116.235 ms/op
     p(95.0000) =    147.967 ms/op
     p(99.0000) =    161.219 ms/op
     p(99.9000) =    161.219 ms/op
     p(99.9900) =    161.219 ms/op
     p(99.9990) =    161.219 ms/op
     p(99.9999) =    161.219 ms/op
    p(100.0000) =    161.219 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readXxh64
# Parameters: (forceSafe = false, intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 42.05% complete, ETA 01:16:24
# Fork: 1 of 3
# Warmup Iteration   1: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 67, 84, 97, 97, 97, 97, 97 ms/op
# Warmup Iteration   2: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 66, 67, 68, 68, 68, 68, 68 ms/op
# Warmup Iteration   3: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 74, 74, 124, 127, 127, 127, 127, 127 ms/op
Iteration   1: n = 13, mean = 77 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 74, 107, 123, 123, 123, 123, 123 ms/op
Iteration   2: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 75, 104, 119, 119, 119, 119, 119 ms/op
Iteration   3: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 66, 109, 129, 129, 129, 129, 129 ms/op

# Run progress: 42.23% complete, ETA 01:16:00
# Fork: 2 of 3
# Warmup Iteration   1: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 72, 150, 159, 159, 159, 159, 159 ms/op
# Warmup Iteration   2: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 63, 114, 115, 115, 115, 115, 115 ms/op
# Warmup Iteration   3: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 72, 75, 80, 80, 80, 80, 80 ms/op
Iteration   1: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 70, 104, 125, 125, 125, 125, 125 ms/op
Iteration   2: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 63, 102, 126, 126, 126, 126, 126 ms/op
Iteration   3: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 68, 76, 77, 77, 77, 77, 77, 77 ms/op

# Run progress: 42.42% complete, ETA 01:15:36
# Fork: 3 of 3
# Warmup Iteration   1: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 64, 82, 95, 95, 95, 95, 95 ms/op
# Warmup Iteration   2: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 64, 64, 111, 115, 115, 115, 115, 115 ms/op
# Warmup Iteration   3: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 72, 105, 128, 128, 128, 128, 128 ms/op
Iteration   1: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 75, 94, 109, 109, 109, 109, 109 ms/op
Iteration   2: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 67, 68, 68, 68, 68, 68, 68 ms/op
Iteration   3: n = 14, mean = 74 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 71, 99, 114, 114, 114, 114, 114 ms/op


Result "readXxh64":
  N = 126
  mean =     73.360 ±(99.9%) 3.829 ms/op

  Histogram, ms/op:
    [ 60.000,  65.000) = 13 
    [ 65.000,  70.000) = 50 
    [ 70.000,  75.000) = 35 
    [ 75.000,  80.000) = 15 
    [ 80.000,  85.000) = 4 
    [ 85.000,  90.000) = 2 
    [ 90.000,  95.000) = 0 
    [ 95.000, 100.000) = 0 
    [100.000, 105.000) = 0 
    [105.000, 110.000) = 1 
    [110.000, 115.000) = 1 
    [115.000, 120.000) = 1 
    [120.000, 125.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     63.177 ms/op
     p(50.0000) =     70.124 ms/op
     p(90.0000) =     81.959 ms/op
     p(95.0000) =    112.466 ms/op
     p(99.0000) =    128.040 ms/op
     p(99.9000) =    128.713 ms/op
     p(99.9900) =    128.713 ms/op
     p(99.9990) =    128.713 ms/op
     p(99.9999) =    128.713 ms/op
    p(100.0000) =    128.713 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.readXxh64
# Parameters: (forceSafe = false, intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 42.61% complete, ETA 01:15:13
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 126, 190, 190, 190, 190, 190, 190 ms/op
# Warmup Iteration   2: n = 10, mean = 110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 97, 101, 154, 155, 155, 155, 155, 155 ms/op
# Warmup Iteration   3: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 100, 155, 155, 155, 155, 155, 155 ms/op
Iteration   1: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 99, 147, 152, 152, 152, 152, 152 ms/op
Iteration   2: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 101, 150, 150, 150, 150, 150, 150 ms/op
Iteration   3: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 101, 150, 155, 155, 155, 155, 155 ms/op

# Run progress: 42.80% complete, ETA 01:14:51
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 84, 93, 145, 147, 147, 147, 147, 147 ms/op
# Warmup Iteration   2: n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 114, 154, 154, 154, 154, 154, 154 ms/op
# Warmup Iteration   3: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 102, 102, 102, 102, 102, 102, 102 ms/op
Iteration   1: n = 10, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 97, 105, 146, 147, 147, 147, 147, 147 ms/op
Iteration   2: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 97, 105, 145, 149, 149, 149, 149, 149 ms/op
Iteration   3: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 105, 152, 157, 157, 157, 157, 157 ms/op

# Run progress: 42.99% complete, ETA 01:14:29
# Fork: 3 of 3
# Warmup Iteration   1: n = 10, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 114, 146, 148, 148, 148, 148, 148 ms/op
# Warmup Iteration   2: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 115, 164, 164, 164, 164, 164, 164 ms/op
# Warmup Iteration   3: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 95, 159, 161, 161, 161, 161, 161 ms/op
Iteration   1: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 103, 150, 154, 154, 154, 154, 154 ms/op
Iteration   2: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 99, 141, 144, 144, 144, 144, 144 ms/op
Iteration   3: n = 11, mean = 94 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 93, 97, 97, 97, 97, 97, 97 ms/op


Result "readXxh64":
  N = 90
  mean =    106.232 ±(99.9%) 6.072 ms/op

  Histogram, ms/op:
    [ 80.000,  85.000) = 0 
    [ 85.000,  90.000) = 4 
    [ 90.000,  95.000) = 10 
    [ 95.000, 100.000) = 26 
    [100.000, 105.000) = 20 
    [105.000, 110.000) = 15 
    [110.000, 115.000) = 2 
    [115.000, 120.000) = 1 
    [120.000, 125.000) = 1 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 1 
    [135.000, 140.000) = 1 
    [140.000, 145.000) = 1 
    [145.000, 150.000) = 4 
    [150.000, 155.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =     87.294 ms/op
     p(50.0000) =    100.729 ms/op
     p(90.0000) =    143.786 ms/op
     p(95.0000) =    150.746 ms/op
     p(99.0000) =    156.762 ms/op
     p(99.9000) =    156.762 ms/op
     p(99.9900) =    156.762 ms/op
     p(99.9990) =    156.762 ms/op
     p(99.9999) =    156.762 ms/op
    p(100.0000) =    156.762 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 43.18% complete, ETA 01:14:07
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 152, 183, 183, 183, 183, 183, 183 ms/op
# Warmup Iteration   2: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 128, 130, 130, 130, 130, 130, 130 ms/op
# Warmup Iteration   3: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 128, 129, 129, 129, 129, 129, 129 ms/op
Iteration   1: n = 6, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 147, 204, 204, 204, 204, 204, 204 ms/op
Iteration   2: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 128, 129, 129, 129, 129, 129, 129 ms/op
Iteration   3: n = 6, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 146, 209, 209, 209, 209, 209, 209 ms/op

# Run progress: 43.37% complete, ETA 01:13:42
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 153, 221, 221, 221, 221, 221, 221 ms/op
# Warmup Iteration   2: n = 7, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 130, 147, 147, 147, 147, 147, 147 ms/op
# Warmup Iteration   3: n = 7, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 131, 132, 132, 132, 132, 132, 132 ms/op
Iteration   1: n = 6, mean = 171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 158, 210, 210, 210, 210, 210, 210 ms/op
Iteration   2: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 174, 205, 205, 205, 205, 205, 205 ms/op
Iteration   3: n = 5, mean = 184 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 197, 207, 207, 207, 207, 207, 207 ms/op

# Run progress: 43.56% complete, ETA 01:13:17
# Fork: 3 of 3
# Warmup Iteration   1: n = 5, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 150, 182, 182, 182, 182, 182, 182 ms/op
# Warmup Iteration   2: n = 7, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 132, 132, 132, 132, 132, 132, 132 ms/op
# Warmup Iteration   3: n = 6, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 159, 225, 225, 225, 225, 225, 225 ms/op
Iteration   1: n = 5, mean = 200 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 213, 217, 217, 217, 217, 217, 217 ms/op
Iteration   2: n = 7, mean = 143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 149, 150, 150, 150, 150, 150, 150 ms/op
Iteration   3: n = 7, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 131, 162, 162, 162, 162, 162, 162 ms/op


Result "write":
  N = 56
  mean =    157.747 ±(99.9%) 13.929 ms/op

  Histogram, ms/op:
    [120.000, 130.000) = 8 
    [130.000, 140.000) = 10 
    [140.000, 150.000) = 20 
    [150.000, 160.000) = 2 
    [160.000, 170.000) = 2 
    [170.000, 180.000) = 0 
    [180.000, 190.000) = 0 
    [190.000, 200.000) = 2 
    [200.000, 210.000) = 8 

  Percentiles, ms/op:
      p(0.0000) =    127.402 ms/op
     p(50.0000) =    147.849 ms/op
     p(90.0000) =    208.195 ms/op
     p(95.0000) =    212.874 ms/op
     p(99.0000) =    216.531 ms/op
     p(99.9000) =    216.531 ms/op
     p(99.9900) =    216.531 ms/op
     p(99.9990) =    216.531 ms/op
     p(99.9999) =    216.531 ms/op
    p(100.0000) =    216.531 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = false, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 43.75% complete, ETA 01:12:52
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 996 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 996, 996, 996, 996, 996, 996, 996, 996 ms/op
# Warmup Iteration   2: n = 1, mean = 1002 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002 ms/op
# Warmup Iteration   3: n = 1, mean = 912 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 912, 912, 912, 912, 912, 912, 912, 912 ms/op
Iteration   1: n = 1, mean = 953 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 953, 953, 953, 953, 953, 953, 953, 953 ms/op
Iteration   2: n = 1, mean = 908 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 908, 908, 908, 908, 908, 908, 908, 908 ms/op
Iteration   3: n = 1, mean = 911 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 911, 911, 911, 911, 911, 911, 911, 911 ms/op

# Run progress: 43.94% complete, ETA 01:12:28
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 897 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 897, 897, 897, 897, 897, 897, 897, 897 ms/op
# Warmup Iteration   2: n = 1, mean = 903 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 903, 903, 903, 903, 903, 903, 903, 903 ms/op
# Warmup Iteration   3: n = 2, mean = 750 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 746, 750, 755, 755, 755, 755, 755, 755 ms/op
Iteration   1: n = 2, mean = 831 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 758, 831, 904, 904, 904, 904, 904, 904 ms/op
Iteration   2: n = 2, mean = 752 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 750, 752, 755, 755, 755, 755, 755, 755 ms/op
Iteration   3: n = 2, mean = 758 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 744, 758, 771, 771, 771, 771, 771, 771 ms/op

# Run progress: 44.13% complete, ETA 01:12:06
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 871 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 871, 871, 871, 871, 871, 871, 871, 871 ms/op
# Warmup Iteration   2: n = 1, mean = 907 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 907, 907, 907, 907, 907, 907, 907, 907 ms/op
# Warmup Iteration   3: n = 1, mean = 1017 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017 ms/op
Iteration   1: n = 1, mean = 1013 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1013 ms/op
Iteration   2: n = 2, mean = 765 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 752, 765, 779, 779, 779, 779, 779, 779 ms/op
Iteration   3: n = 1, mean = 928 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 928, 928, 928, 928, 928, 928, 928, 928 ms/op


Result "write":
  N = 13
  mean =    840.474 ±(99.9%) 115.549 ms/op

  Histogram, ms/op:
    [ 700.000,  725.000) = 0 
    [ 725.000,  750.000) = 2 
    [ 750.000,  775.000) = 4 
    [ 775.000,  800.000) = 1 
    [ 800.000,  825.000) = 0 
    [ 825.000,  850.000) = 0 
    [ 850.000,  875.000) = 0 
    [ 875.000,  900.000) = 0 
    [ 900.000,  925.000) = 3 
    [ 925.000,  950.000) = 1 
    [ 950.000,  975.000) = 1 
    [ 975.000, 1000.000) = 0 
    [1000.000, 1025.000) = 1 
    [1025.000, 1050.000) = 0 
    [1050.000, 1075.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    744.489 ms/op
     p(50.0000) =    779.092 ms/op
     p(90.0000) =    989.017 ms/op
     p(95.0000) =   1012.924 ms/op
     p(99.0000) =   1012.924 ms/op
     p(99.9000) =   1012.924 ms/op
     p(99.9900) =   1012.924 ms/op
     p(99.9990) =   1012.924 ms/op
     p(99.9999) =   1012.924 ms/op
    p(100.0000) =   1012.924 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.write
# Parameters: (intKey = false, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 44.32% complete, ETA 01:11:43
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1424 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424 ms/op
# Warmup Iteration   2: n = 1, mean = 1225 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225 ms/op
# Warmup Iteration   3: n = 1, mean = 1514 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1514, 1514, 1514, 1514, 1514, 1514, 1514, 1514 ms/op
Iteration   1: n = 1, mean = 1294 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294 ms/op
Iteration   2: n = 1, mean = 1084 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084 ms/op
Iteration   3: n = 1, mean = 1225 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1225, 1225, 1225, 1225, 1225, 1225, 1225, 1225 ms/op

# Run progress: 44.51% complete, ETA 01:11:21
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1382 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382 ms/op
# Warmup Iteration   2: n = 1, mean = 1353 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353 ms/op
# Warmup Iteration   3: n = 1, mean = 1256 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256 ms/op
Iteration   1: n = 1, mean = 1252 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252 ms/op
Iteration   2: n = 1, mean = 1260 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260 ms/op
Iteration   3: n = 1, mean = 1029 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029 ms/op

# Run progress: 44.70% complete, ETA 01:10:59
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1470 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1470, 1470, 1470, 1470, 1470, 1470, 1470, 1470 ms/op
# Warmup Iteration   2: n = 1, mean = 1045 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045 ms/op
# Warmup Iteration   3: n = 1, mean = 1124 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124 ms/op
Iteration   1: n = 1, mean = 1053 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053 ms/op
Iteration   2: n = 1, mean = 1193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193 ms/op
Iteration   3: n = 1, mean = 1003 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1003, 1003, 1003, 1003, 1003, 1003, 1003, 1003 ms/op


Result "write":
  N = 9
  mean =   1154.832 ±(99.9%) 188.374 ms/op

  Histogram, ms/op:
    [1000.000, 1025.000) = 1 
    [1025.000, 1050.000) = 1 
    [1050.000, 1075.000) = 1 
    [1075.000, 1100.000) = 1 
    [1100.000, 1125.000) = 0 
    [1125.000, 1150.000) = 0 
    [1150.000, 1175.000) = 0 
    [1175.000, 1200.000) = 1 
    [1200.000, 1225.000) = 1 
    [1225.000, 1250.000) = 0 
    [1250.000, 1275.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =   1003.487 ms/op
     p(50.0000) =   1193.279 ms/op
     p(90.0000) =   1293.943 ms/op
     p(95.0000) =   1293.943 ms/op
     p(99.0000) =   1293.943 ms/op
     p(99.9000) =   1293.943 ms/op
     p(99.9900) =   1293.943 ms/op
     p(99.9990) =   1293.943 ms/op
     p(99.9999) =   1293.943 ms/op
    p(100.0000) =   1293.943 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJavaByteBuffer.write
# Parameters: (intKey = false, metaSync = false, num = 1000000, sequential = false, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 44.89% complete, ETA 01:10:36
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 2345 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2345, 2345, 2345, 2345, 2345, 2345, 2345, 2345 ms/op
# Warmup Iteration   2: n = 1, mean = 2307 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2307, 2307, 2307, 2307, 2307, 2307, 2307, 2307 ms/op
# Warmup Iteration   3: n = 1, mean = 2053 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2053, 2053, 2053, 2053, 2053, 2053, 2053, 2053 ms/op
Iteration   1: n = 1, mean = 2055 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2055, 2055, 2055, 2055, 2055, 2055, 2055, 2055 ms/op
Iteration   2: n = 1, mean = 1843 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843 ms/op
Iteration   3: n = 1, mean = 2135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2135, 2135, 2135, 2135, 2135, 2135, 2135, 2135 ms/op

# Run progress: 45.08% complete, ETA 01:10:20
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 2278 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2278, 2278, 2278, 2278, 2278, 2278, 2278, 2278 ms/op
# Warmup Iteration   2: n = 1, mean = 2133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2133, 2133, 2133, 2133, 2133, 2133, 2133, 2133 ms/op
# Warmup Iteration   3: n = 1, mean = 1915 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1915, 1915, 1915, 1915, 1915, 1915, 1915, 1915 ms/op
Iteration   1: n = 1, mean = 1866 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1866, 1866, 1866, 1866, 1866, 1866, 1866, 1866 ms/op
Iteration   2: n = 1, mean = 1869 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1869, 1869, 1869, 1869, 1869, 1869, 1869, 1869 ms/op
Iteration   3: n = 1, mean = 1957 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957 ms/op

# Run progress: 45.27% complete, ETA 01:10:04
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 2210 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2210, 2210, 2210, 2210, 2210, 2210, 2210, 2210 ms/op
# Warmup Iteration   2: n = 1, mean = 1854 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1854, 1854, 1854, 1854, 1854, 1854, 1854, 1854 ms/op
# Warmup Iteration   3: n = 1, mean = 1831 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1831, 1831, 1831, 1831, 1831, 1831, 1831, 1831 ms/op
Iteration   1: n = 1, mean = 1955 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1955, 1955, 1955, 1955, 1955, 1955, 1955, 1955 ms/op
Iteration   2: n = 1, mean = 1959 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1959, 1959, 1959, 1959, 1959, 1959, 1959, 1959 ms/op
Iteration   3: n = 1, mean = 2391 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2391, 2391, 2391, 2391, 2391, 2391, 2391, 2391 ms/op


Result "write":
  N = 9
  mean =   2003.246 ±(99.9%) 290.526 ms/op

  Histogram, ms/op:
    [1800.000, 1850.000) = 1 
    [1850.000, 1900.000) = 2 
    [1900.000, 1950.000) = 0 
    [1950.000, 2000.000) = 3 
    [2000.000, 2050.000) = 0 
    [2050.000, 2100.000) = 1 
    [2100.000, 2150.000) = 1 
    [2150.000, 2200.000) = 0 
    [2200.000, 2250.000) = 0 
    [2250.000, 2300.000) = 0 
    [2300.000, 2350.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1843.397 ms/op
     p(50.0000) =   1956.643 ms/op
     p(90.0000) =   2390.753 ms/op
     p(95.0000) =   2390.753 ms/op
     p(99.0000) =   2390.753 ms/op
     p(99.9000) =   2390.753 ms/op
     p(99.9900) =   2390.753 ms/op
     p(99.9990) =   2390.753 ms/op
     p(99.9999) =   2390.753 ms/op
    p(100.0000) =   2390.753 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 45.45% complete, ETA 01:09:48
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 134 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 135, 157, 157, 157, 157, 157, 157 ms/op
# Warmup Iteration   2: n = 8, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 124, 168, 168, 168, 168, 168, 168 ms/op
# Warmup Iteration   3: n = 7, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 141, 207, 207, 207, 207, 207, 207 ms/op
Iteration   1: n = 7, mean = 145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 138, 202, 202, 202, 202, 202, 202 ms/op
Iteration   2: n = 7, mean = 145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 138, 202, 202, 202, 202, 202, 202 ms/op
Iteration   3: n = 9, mean = 124 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 123, 127, 127, 127, 127, 127, 127 ms/op

# Run progress: 45.64% complete, ETA 01:09:25
# Fork: 2 of 3
# Warmup Iteration   1: n = 7, mean = 148 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 138, 217, 217, 217, 217, 217, 217 ms/op
# Warmup Iteration   2: n = 9, mean = 123 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 123, 124, 124, 124, 124, 124, 124 ms/op
# Warmup Iteration   3: n = 8, mean = 140 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 138, 185, 185, 185, 185, 185, 185 ms/op
Iteration   1: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 143, 184, 184, 184, 184, 184, 184 ms/op
Iteration   2: n = 7, mean = 145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 137, 204, 204, 204, 204, 204, 204 ms/op
Iteration   3: n = 9, mean = 123 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 123, 123, 123, 123, 123, 123, 123 ms/op

# Run progress: 45.83% complete, ETA 01:09:01
# Fork: 3 of 3
# Warmup Iteration   1: n = 7, mean = 149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 138, 220, 220, 220, 220, 220, 220 ms/op
# Warmup Iteration   2: n = 8, mean = 125 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 123, 131, 131, 131, 131, 131, 131 ms/op
# Warmup Iteration   3: n = 9, mean = 125 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 125, 128, 128, 128, 128, 128, 128 ms/op
Iteration   1: n = 9, mean = 123 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 123, 125, 125, 125, 125, 125, 125 ms/op
Iteration   2: n = 9, mean = 123 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 123, 123, 123, 123, 123, 123, 123 ms/op
Iteration   3: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 136, 202, 202, 202, 202, 202, 202 ms/op


Result "readCrc":
  N = 71
  mean =    134.098 ±(99.9%) 8.015 ms/op

  Histogram, ms/op:
    [120.000, 125.000) = 37 
    [125.000, 130.000) = 4 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 20 
    [140.000, 145.000) = 4 
    [145.000, 150.000) = 0 
    [150.000, 155.000) = 1 
    [155.000, 160.000) = 0 
    [160.000, 165.000) = 0 
    [165.000, 170.000) = 0 
    [170.000, 175.000) = 0 
    [175.000, 180.000) = 0 
    [180.000, 185.000) = 1 
    [185.000, 190.000) = 0 
    [190.000, 195.000) = 0 
    [195.000, 200.000) = 0 
    [200.000, 205.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =    122.159 ms/op
     p(50.0000) =    124.387 ms/op
     p(90.0000) =    143.393 ms/op
     p(95.0000) =    202.113 ms/op
     p(99.0000) =    204.210 ms/op
     p(99.9000) =    204.210 ms/op
     p(99.9900) =    204.210 ms/op
     p(99.9990) =    204.210 ms/op
     p(99.9999) =    204.210 ms/op
    p(100.0000) =    204.210 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 46.02% complete, ETA 01:08:38
# Fork: 1 of 3
# Warmup Iteration   1: n = 6, mean = 183 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 153, 162, 289, 289, 289, 289, 289, 289 ms/op
# Warmup Iteration   2: n = 6, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 161, 221, 221, 221, 221, 221, 221 ms/op
# Warmup Iteration   3: n = 7, mean = 164 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 143, 226, 226, 226, 226, 226, 226 ms/op
Iteration   1: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 161, 226, 226, 226, 226, 226, 226 ms/op
Iteration   2: n = 7, mean = 143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 143, 144, 144, 144, 144, 144, 144 ms/op
Iteration   3: n = 8, mean = 142 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 142, 143, 143, 143, 143, 143, 143 ms/op

# Run progress: 46.21% complete, ETA 01:08:16
# Fork: 2 of 3
# Warmup Iteration   1: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 143, 162, 162, 162, 162, 162, 162 ms/op
# Warmup Iteration   2: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 147, 149, 149, 149, 149, 149, 149 ms/op
# Warmup Iteration   3: n = 8, mean = 142 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 142, 143, 143, 143, 143, 143, 143 ms/op
Iteration   1: n = 8, mean = 143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 142, 144, 144, 144, 144, 144, 144 ms/op
Iteration   2: n = 7, mean = 143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 143, 144, 144, 144, 144, 144, 144 ms/op
Iteration   3: n = 8, mean = 143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 143, 143, 143, 143, 143, 143, 143 ms/op

# Run progress: 46.40% complete, ETA 01:07:54
# Fork: 3 of 3
# Warmup Iteration   1: n = 6, mean = 174 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 164, 240, 240, 240, 240, 240, 240 ms/op
# Warmup Iteration   2: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 163, 217, 217, 217, 217, 217, 217 ms/op
# Warmup Iteration   3: n = 6, mean = 190 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 163, 180, 226, 226, 226, 226, 226, 226 ms/op
Iteration   1: n = 6, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 152, 159, 217, 217, 217, 217, 217, 217 ms/op
Iteration   2: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 144, 144, 144, 144, 144, 144, 144 ms/op
Iteration   3: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 143, 144, 144, 144, 144, 144, 144, 144 ms/op


Result "readCrc":
  N = 64
  mean =    147.685 ±(99.9%) 6.304 ms/op

  Histogram, ms/op:
    [140.000, 145.000) = 52 
    [145.000, 150.000) = 1 
    [150.000, 155.000) = 1 
    [155.000, 160.000) = 4 
    [160.000, 165.000) = 4 
    [165.000, 170.000) = 0 
    [170.000, 175.000) = 0 
    [175.000, 180.000) = 0 
    [180.000, 185.000) = 0 
    [185.000, 190.000) = 0 
    [190.000, 195.000) = 0 
    [195.000, 200.000) = 0 
    [200.000, 205.000) = 0 
    [205.000, 210.000) = 0 
    [210.000, 215.000) = 0 
    [215.000, 220.000) = 1 
    [220.000, 225.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    141.558 ms/op
     p(50.0000) =    143.131 ms/op
     p(90.0000) =    159.777 ms/op
     p(95.0000) =    161.415 ms/op
     p(99.0000) =    226.492 ms/op
     p(99.9000) =    226.492 ms/op
     p(99.9900) =    226.492 ms/op
     p(99.9990) =    226.492 ms/op
     p(99.9999) =    226.492 ms/op
    p(100.0000) =    226.492 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 46.59% complete, ETA 01:07:32
# Fork: 1 of 3
# Warmup Iteration   1: n = 7, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 139, 215, 215, 215, 215, 215, 215 ms/op
# Warmup Iteration   2: n = 7, mean = 149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 138, 178, 178, 178, 178, 178, 178 ms/op
# Warmup Iteration   3: n = 7, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 137, 137, 202, 202, 202, 202, 202, 202 ms/op
Iteration   1: n = 7, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 156, 201, 201, 201, 201, 201, 201 ms/op
Iteration   2: n = 7, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 138, 202, 202, 202, 202, 202, 202 ms/op
Iteration   3: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 134, 138, 138, 138, 138, 138, 138 ms/op

# Run progress: 46.78% complete, ETA 01:07:11
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 151, 170, 252, 252, 252, 252, 252, 252 ms/op
# Warmup Iteration   2: n = 6, mean = 203 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 168, 201, 247, 247, 247, 247, 247, 247 ms/op
# Warmup Iteration   3: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 169, 206, 206, 206, 206, 206, 206 ms/op
Iteration   1: n = 7, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 150, 166, 169, 169, 169, 169, 169, 169 ms/op
Iteration   2: n = 7, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 150, 150, 150, 150, 150, 150, 150, 150 ms/op
Iteration   3: n = 7, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 150, 150, 235, 235, 235, 235, 235, 235 ms/op

# Run progress: 46.97% complete, ETA 01:06:51
# Fork: 3 of 3
# Warmup Iteration   1: n = 7, mean = 162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 139, 145, 220, 220, 220, 220, 220, 220 ms/op
# Warmup Iteration   2: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 129, 140, 140, 140, 140, 140, 140 ms/op
# Warmup Iteration   3: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 139, 206, 206, 206, 206, 206, 206 ms/op
Iteration   1: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 139, 206, 206, 206, 206, 206, 206 ms/op
Iteration   2: n = 8, mean = 138 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 139, 173, 173, 173, 173, 173, 173 ms/op
Iteration   3: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 140, 205, 205, 205, 205, 205, 205 ms/op


Result "readCrc":
  N = 65
  mean =    149.888 ±(99.9%) 9.584 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 5 
    [125.000, 137.500) = 12 
    [137.500, 150.000) = 21 
    [150.000, 162.500) = 13 
    [162.500, 175.000) = 7 
    [175.000, 187.500) = 2 
    [187.500, 200.000) = 0 
    [200.000, 212.500) = 4 
    [212.500, 225.000) = 0 
    [225.000, 237.500) = 1 
    [237.500, 250.000) = 0 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    122.290 ms/op
     p(50.0000) =    140.247 ms/op
     p(90.0000) =    178.468 ms/op
     p(95.0000) =    203.869 ms/op
     p(99.0000) =    234.619 ms/op
     p(99.9000) =    234.619 ms/op
     p(99.9900) =    234.619 ms/op
     p(99.9990) =    234.619 ms/op
     p(99.9999) =    234.619 ms/op
    p(100.0000) =    234.619 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 47.16% complete, ETA 01:06:30
# Fork: 1 of 3
# Warmup Iteration   1: n = 5, mean = 225 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 194, 215, 285, 285, 285, 285, 285, 285 ms/op
# Warmup Iteration   2: n = 5, mean = 231 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 211, 217, 269, 269, 269, 269, 269, 269 ms/op
# Warmup Iteration   3: n = 5, mean = 223 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 199, 217, 261, 261, 261, 261, 261, 261 ms/op
Iteration   1: n = 6, mean = 182 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 179, 199, 199, 199, 199, 199, 199 ms/op
Iteration   2: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 177, 184, 184, 184, 184, 184, 184 ms/op
Iteration   3: n = 6, mean = 196 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 176, 176, 259, 259, 259, 259, 259, 259 ms/op

# Run progress: 47.35% complete, ETA 01:06:10
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 195 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 175, 181, 255, 255, 255, 255, 255, 255 ms/op
# Warmup Iteration   2: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 160, 160, 238, 238, 238, 238, 238, 238 ms/op
# Warmup Iteration   3: n = 6, mean = 194 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 166, 166, 270, 270, 270, 270, 270, 270 ms/op
Iteration   1: n = 7, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 165, 184, 184, 184, 184, 184, 184 ms/op
Iteration   2: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 151, 166, 208, 208, 208, 208, 208, 208 ms/op
Iteration   3: n = 6, mean = 172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 166, 218, 218, 218, 218, 218, 218 ms/op

# Run progress: 47.54% complete, ETA 01:05:51
# Fork: 3 of 3
# Warmup Iteration   1: n = 6, mean = 190 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 153, 182, 259, 259, 259, 259, 259, 259 ms/op
# Warmup Iteration   2: n = 6, mean = 183 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 161, 177, 233, 233, 233, 233, 233, 233 ms/op
# Warmup Iteration   3: n = 6, mean = 181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 163, 166, 222, 222, 222, 222, 222, 222 ms/op
Iteration   1: n = 6, mean = 180 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 171, 240, 240, 240, 240, 240, 240 ms/op
Iteration   2: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 147, 149, 149, 149, 149, 149, 149 ms/op
Iteration   3: n = 6, mean = 182 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 158, 177, 232, 232, 232, 232, 232, 232 ms/op


Result "readCrc":
  N = 56
  mean =    173.970 ±(99.9%) 10.851 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 0 
    [137.500, 150.000) = 10 
    [150.000, 162.500) = 3 
    [162.500, 175.000) = 16 
    [175.000, 187.500) = 20 
    [187.500, 200.000) = 1 
    [200.000, 212.500) = 1 
    [212.500, 225.000) = 2 
    [225.000, 237.500) = 1 
    [237.500, 250.000) = 1 
    [250.000, 262.500) = 1 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    146.276 ms/op
     p(50.0000) =    173.539 ms/op
     p(90.0000) =    209.899 ms/op
     p(95.0000) =    232.954 ms/op
     p(99.0000) =    258.736 ms/op
     p(99.9000) =    258.736 ms/op
     p(99.9900) =    258.736 ms/op
     p(99.9990) =    258.736 ms/op
     p(99.9999) =    258.736 ms/op
    p(100.0000) =    258.736 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 47.73% complete, ETA 01:05:31
# Fork: 1 of 3
# Warmup Iteration   1: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 104, 187, 187, 187, 187, 187, 187 ms/op
# Warmup Iteration   2: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 92, 162, 162, 162, 162, 162, 162 ms/op
# Warmup Iteration   3: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 104, 106, 106, 106, 106, 106, 106 ms/op
Iteration   1: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 116, 136, 136, 136, 136, 136, 136 ms/op
Iteration   2: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 105, 117, 117, 117, 117, 117, 117 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 91, 104, 154, 159, 159, 159, 159, 159 ms/op

# Run progress: 47.92% complete, ETA 01:05:10
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 104, 130, 132, 132, 132, 132, 132 ms/op
# Warmup Iteration   2: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 118, 164, 164, 164, 164, 164, 164 ms/op
# Warmup Iteration   3: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 117, 171, 171, 171, 171, 171, 171 ms/op
Iteration   1: n = 9, mean = 123 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 117, 158, 158, 158, 158, 158, 158 ms/op
Iteration   2: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 108, 157, 157, 157, 157, 157, 157 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 117, 145, 145, 145, 145, 145, 145 ms/op

# Run progress: 48.11% complete, ETA 01:04:48
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 118, 187, 187, 187, 187, 187, 187 ms/op
# Warmup Iteration   2: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 106, 108, 108, 108, 108, 108, 108 ms/op
# Warmup Iteration   3: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 104, 108, 108, 108, 108, 108, 108 ms/op
Iteration   1: n = 9, mean = 120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 116, 165, 165, 165, 165, 165, 165 ms/op
Iteration   2: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 106, 108, 108, 108, 108, 108, 108 ms/op
Iteration   3: 
Bytes	117465088	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 107, 107, 107, 107, 107, 107, 107 ms/op


Result "readKey":
  N = 85
  mean =    112.316 ±(99.9%) 5.302 ms/op

  Histogram, ms/op:
    [ 90.000,  95.000) = 5 
    [ 95.000, 100.000) = 0 
    [100.000, 105.000) = 16 
    [105.000, 110.000) = 31 
    [110.000, 115.000) = 3 
    [115.000, 120.000) = 22 
    [120.000, 125.000) = 0 
    [125.000, 130.000) = 0 
    [130.000, 135.000) = 1 
    [135.000, 140.000) = 1 
    [140.000, 145.000) = 0 
    [145.000, 150.000) = 2 
    [150.000, 155.000) = 0 
    [155.000, 160.000) = 3 
    [160.000, 165.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     91.357 ms/op
     p(50.0000) =    106.955 ms/op
     p(90.0000) =    125.541 ms/op
     p(95.0000) =    154.508 ms/op
     p(99.0000) =    165.151 ms/op
     p(99.9000) =    165.151 ms/op
     p(99.9900) =    165.151 ms/op
     p(99.9990) =    165.151 ms/op
     p(99.9999) =    165.151 ms/op
    p(100.0000) =    165.151 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readKey
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 48.30% complete, ETA 01:04:27
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 743 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 685, 743, 802, 802, 802, 802, 802, 802 ms/op
# Warmup Iteration   2: n = 2, mean = 771 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 674, 771, 867, 867, 867, 867, 867, 867 ms/op
# Warmup Iteration   3: n = 2, mean = 839 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 789, 839, 889, 889, 889, 889, 889, 889 ms/op
Iteration   1: n = 2, mean = 779 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 776, 779, 781, 781, 781, 781, 781, 781 ms/op
Iteration   2: n = 2, mean = 805 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 703, 805, 908, 908, 908, 908, 908, 908 ms/op
Iteration   3: 
Bytes	171884544	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 632 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 595, 632, 670, 670, 670, 670, 670, 670 ms/op

# Run progress: 48.48% complete, ETA 01:04:09
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 605 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 600, 605, 609, 609, 609, 609, 609, 609 ms/op
# Warmup Iteration   2: n = 2, mean = 598 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 598, 598, 598, 598, 598, 598, 598, 598 ms/op
# Warmup Iteration   3: n = 2, mean = 598 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 597, 598, 600, 600, 600, 600, 600, 600 ms/op
Iteration   1: n = 2, mean = 595 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 593, 595, 597, 597, 597, 597, 597, 597 ms/op
Iteration   2: n = 2, mean = 596 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 596, 596, 596, 596, 596, 596, 596, 596 ms/op
Iteration   3: 
Bytes	171913216	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 596 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 595, 596, 598, 598, 598, 598, 598, 598 ms/op

# Run progress: 48.67% complete, ETA 01:03:50
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 857 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 779, 857, 934, 934, 934, 934, 934, 934 ms/op
# Warmup Iteration   2: n = 2, mean = 821 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 722, 821, 919, 919, 919, 919, 919, 919 ms/op
# Warmup Iteration   3: n = 2, mean = 601 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 597, 601, 606, 606, 606, 606, 606, 606 ms/op
Iteration   1: n = 2, mean = 839 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 778, 839, 901, 901, 901, 901, 901, 901 ms/op
Iteration   2: n = 2, mean = 679 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 632, 679, 727, 727, 727, 727, 727, 727 ms/op
Iteration   3: 
Bytes	171687936	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 2, mean = 673 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 598, 673, 749, 749, 749, 749, 749, 749 ms/op


Result "readKey":
  N = 18
  mean =    688.332 ±(99.9%) 100.136 ms/op

  Histogram, ms/op:
    [ 500.000,  550.000) = 0 
    [ 550.000,  600.000) = 8 
    [ 600.000,  650.000) = 1 
    [ 650.000,  700.000) = 1 
    [ 700.000,  750.000) = 3 
    [ 750.000,  800.000) = 3 
    [ 800.000,  850.000) = 0 
    [ 850.000,  900.000) = 0 
    [ 900.000,  950.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    593.494 ms/op
     p(50.0000) =    651.166 ms/op
     p(90.0000) =    901.461 ms/op
     p(95.0000) =    908.067 ms/op
     p(99.0000) =    908.067 ms/op
     p(99.9000) =    908.067 ms/op
     p(99.9900) =    908.067 ms/op
     p(99.9990) =    908.067 ms/op
     p(99.9999) =    908.067 ms/op
    p(100.0000) =    908.067 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readKey
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 48.86% complete, ETA 01:03:32
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156 ms/op
# Warmup Iteration   2: n = 1, mean = 1158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1158, 1158, 1158, 1158, 1158, 1158, 1158, 1158 ms/op
# Warmup Iteration   3: n = 1, mean = 1267 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267 ms/op
Iteration   1: n = 1, mean = 1061 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1061, 1061, 1061, 1061, 1061, 1061, 1061, 1061 ms/op
Iteration   2: n = 1, mean = 1304 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304 ms/op
Iteration   3: 
Bytes	128860160	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 1174 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174 ms/op

# Run progress: 49.05% complete, ETA 01:03:13
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221 ms/op
# Warmup Iteration   2: n = 1, mean = 1124 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124 ms/op
# Warmup Iteration   3: n = 1, mean = 1317 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1317, 1317, 1317, 1317, 1317, 1317, 1317, 1317 ms/op
Iteration   1: n = 1, mean = 1258 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1258, 1258, 1258, 1258, 1258, 1258, 1258, 1258 ms/op
Iteration   2: n = 1, mean = 1260 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260 ms/op
Iteration   3: 
Bytes	128860160	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 1334 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334 ms/op

# Run progress: 49.24% complete, ETA 01:02:55
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1074 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074 ms/op
# Warmup Iteration   2: n = 1, mean = 1072 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072 ms/op
# Warmup Iteration   3: n = 1, mean = 1231 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1231, 1231, 1231, 1231, 1231, 1231, 1231, 1231 ms/op
Iteration   1: n = 1, mean = 1248 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1248, 1248, 1248, 1248, 1248, 1248, 1248, 1248 ms/op
Iteration   2: n = 1, mean = 1281 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281 ms/op
Iteration   3: 
Bytes	128860160	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 1034 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034 ms/op


Result "readKey":
  N = 9
  mean =   1217.280 ±(99.9%) 177.830 ms/op

  Histogram, ms/op:
    [1000.000, 1025.000) = 0 
    [1025.000, 1050.000) = 1 
    [1050.000, 1075.000) = 1 
    [1075.000, 1100.000) = 0 
    [1100.000, 1125.000) = 0 
    [1125.000, 1150.000) = 0 
    [1150.000, 1175.000) = 1 
    [1175.000, 1200.000) = 0 
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 1 
    [1250.000, 1275.000) = 2 
    [1275.000, 1300.000) = 1 
    [1300.000, 1325.000) = 1 
    [1325.000, 1350.000) = 1 
    [1350.000, 1375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1033.896 ms/op
     p(50.0000) =   1258.291 ms/op
     p(90.0000) =   1333.789 ms/op
     p(95.0000) =   1333.789 ms/op
     p(99.0000) =   1333.789 ms/op
     p(99.9000) =   1333.789 ms/op
     p(99.9900) =   1333.789 ms/op
     p(99.9990) =   1333.789 ms/op
     p(99.9999) =   1333.789 ms/op
    p(100.0000) =   1333.789 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readKey
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 49.43% complete, ETA 01:02:36
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1999 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1999, 1999, 1999, 1999, 1999, 1999, 1999, 1999 ms/op
# Warmup Iteration   2: n = 1, mean = 2036 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2036, 2036, 2036, 2036, 2036, 2036, 2036, 2036 ms/op
# Warmup Iteration   3: n = 1, mean = 1883 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1883, 1883, 1883, 1883, 1883, 1883, 1883, 1883 ms/op
Iteration   1: n = 1, mean = 2022 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022 ms/op
Iteration   2: n = 1, mean = 2141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2141, 2141, 2141, 2141, 2141, 2141, 2141, 2141 ms/op
Iteration   3: 
Bytes	189091840	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 2001 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2001, 2001, 2001, 2001, 2001, 2001, 2001, 2001 ms/op

# Run progress: 49.62% complete, ETA 01:02:24
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 2282 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2282, 2282, 2282, 2282, 2282, 2282, 2282, 2282 ms/op
# Warmup Iteration   2: n = 1, mean = 1843 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1843, 1843, 1843, 1843, 1843, 1843, 1843, 1843 ms/op
# Warmup Iteration   3: n = 1, mean = 1772 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1772, 1772, 1772, 1772, 1772, 1772, 1772, 1772 ms/op
Iteration   1: n = 1, mean = 2045 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2045, 2045, 2045, 2045, 2045, 2045, 2045, 2045 ms/op
Iteration   2: n = 1, mean = 1728 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728 ms/op
Iteration   3: 
Bytes	189181952	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 2024 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024 ms/op

# Run progress: 49.81% complete, ETA 01:02:10
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1948 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1948, 1948, 1948, 1948, 1948, 1948, 1948, 1948 ms/op
# Warmup Iteration   2: n = 1, mean = 1732 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732 ms/op
# Warmup Iteration   3: n = 1, mean = 2030 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2030, 2030, 2030, 2030, 2030, 2030, 2030, 2030 ms/op
Iteration   1: n = 1, mean = 1950 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950 ms/op
Iteration   2: n = 1, mean = 1929 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1929, 1929, 1929, 1929, 1929, 1929, 1929, 1929 ms/op
Iteration   3: 
Bytes	189190144	org.lmdbjava.bench.LmdbJni.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100-writeMap-true
n = 1, mean = 2244 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2244, 2244, 2244, 2244, 2244, 2244, 2244, 2244 ms/op


Result "readKey":
  N = 9
  mean =   2009.305 ±(99.9%) 239.948 ms/op

  Histogram, ms/op:
    [1700.000, 1750.000) = 1 
    [1750.000, 1800.000) = 0 
    [1800.000, 1850.000) = 0 
    [1850.000, 1900.000) = 0 
    [1900.000, 1950.000) = 1 
    [1950.000, 2000.000) = 1 
    [2000.000, 2050.000) = 4 
    [2050.000, 2100.000) = 0 
    [2100.000, 2150.000) = 1 
    [2150.000, 2200.000) = 0 
    [2200.000, 2250.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1728.053 ms/op
     p(50.0000) =   2021.655 ms/op
     p(90.0000) =   2243.953 ms/op
     p(95.0000) =   2243.953 ms/op
     p(99.0000) =   2243.953 ms/op
     p(99.9000) =   2243.953 ms/op
     p(99.9900) =   2243.953 ms/op
     p(99.9990) =   2243.953 ms/op
     p(99.9999) =   2243.953 ms/op
    p(100.0000) =   2243.953 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readRev
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 50.00% complete, ETA 01:01:57
# Fork: 1 of 3
# Warmup Iteration   1: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 31, 32, 38, 43, 43, 43, 43 ms/op
# Warmup Iteration   2: n = 32, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 28, 41, 55, 63, 63, 63, 63 ms/op
# Warmup Iteration   3: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 33, 33, 33, 33, 33, 33, 33 ms/op
Iteration   1: n = 27, mean = 37 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 34, 50, 63, 64, 64, 64, 64 ms/op
Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 32, 38, 50, 55, 55, 55, 55 ms/op
Iteration   3: n = 36, mean = 28 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 28, 28, 28, 28, 28, 28, 28 ms/op

# Run progress: 50.19% complete, ETA 01:01:36
# Fork: 2 of 3
# Warmup Iteration   1: n = 35, mean = 29 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 29, 29, 34, 40, 40, 40, 40 ms/op
# Warmup Iteration   2: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 29, 37, 50, 61, 61, 61, 61 ms/op
# Warmup Iteration   3: n = 34, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 29, 34, 42, 47, 47, 47, 47 ms/op
Iteration   1: n = 38, mean = 26 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 26, 27, 27, 28, 28, 28, 28 ms/op
Iteration   2: n = 34, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 29, 33, 42, 49, 49, 49, 49 ms/op
Iteration   3: n = 39, mean = 26 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 26, 26, 27, 27, 27, 27, 27 ms/op

# Run progress: 50.38% complete, ETA 01:01:15
# Fork: 3 of 3
# Warmup Iteration   1: n = 35, mean = 29 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 29, 29, 34, 40, 40, 40, 40 ms/op
# Warmup Iteration   2: n = 34, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 29, 35, 47, 57, 57, 57, 57 ms/op
# Warmup Iteration   3: n = 33, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 29, 35, 48, 58, 58, 58, 58 ms/op
Iteration   1: n = 29, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 32, 50, 56, 61, 61, 61, 61 ms/op
Iteration   2: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 32, 46, 54, 58, 58, 58, 58 ms/op
Iteration   3: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 29, 36, 50, 60, 60, 60, 60 ms/op


Result "readRev":
  N = 297
  mean =     30.579 ±(99.9%) 1.220 ms/op

  Histogram, ms/op:
    [20.000, 25.000) = 0 
    [25.000, 30.000) = 189 
    [30.000, 35.000) = 77 
    [35.000, 40.000) = 9 
    [40.000, 45.000) = 5 
    [45.000, 50.000) = 9 
    [50.000, 55.000) = 2 
    [55.000, 60.000) = 3 
    [60.000, 65.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =     25.690 ms/op
     p(50.0000) =     28.967 ms/op
     p(90.0000) =     35.534 ms/op
     p(95.0000) =     45.620 ms/op
     p(99.0000) =     60.557 ms/op
     p(99.9000) =     63.898 ms/op
     p(99.9900) =     63.898 ms/op
     p(99.9990) =     63.898 ms/op
     p(99.9999) =     63.898 ms/op
    p(100.0000) =     63.898 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readRev
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 50.57% complete, ETA 01:00:54
# Fork: 1 of 3
# Warmup Iteration   1: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 62, 74, 102, 111, 111, 111, 111, 111 ms/op
# Warmup Iteration   2: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 57, 64, 74, 74, 74, 74, 74 ms/op
# Warmup Iteration   3: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 74, 90, 95, 95, 95, 95, 95 ms/op
Iteration   1: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 67, 73, 79, 79, 79, 79, 79 ms/op
Iteration   2: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 57, 88, 98, 98, 98, 98, 98 ms/op
Iteration   3: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 74, 93, 99, 99, 99, 99, 99 ms/op

# Run progress: 50.76% complete, ETA 01:00:34
# Fork: 2 of 3
# Warmup Iteration   1: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 50, 50, 51, 59, 59, 59, 59, 59 ms/op
# Warmup Iteration   2: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 50, 77, 86, 89, 89, 89, 89, 89 ms/op
# Warmup Iteration   3: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 69, 70, 70, 70, 70, 70, 70 ms/op
Iteration   1: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 69, 70, 70, 70, 70, 70, 70 ms/op
Iteration   2: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 57, 74, 83, 83, 83, 83, 83 ms/op
Iteration   3: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 59, 72, 83, 83, 83, 83, 83 ms/op

# Run progress: 50.95% complete, ETA 01:00:14
# Fork: 3 of 3
# Warmup Iteration   1: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 50, 50, 51, 59, 59, 59, 59, 59 ms/op
# Warmup Iteration   2: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 76, 91, 95, 95, 95, 95, 95 ms/op
# Warmup Iteration   3: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 67, 91, 101, 101, 101, 101, 101 ms/op
Iteration   1: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 75, 88, 88, 88, 88, 88, 88 ms/op
Iteration   2: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 50, 58, 59, 62, 62, 62, 62, 62 ms/op
Iteration   3: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 50, 59, 73, 82, 82, 82, 82, 82 ms/op


Result "readRev":
  N = 145
  mean =     64.062 ±(99.9%) 2.758 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 20 
    [ 55.000,  60.000) = 58 
    [ 60.000,  65.000) = 7 
    [ 65.000,  70.000) = 29 
    [ 70.000,  75.000) = 14 
    [ 75.000,  80.000) = 6 
    [ 80.000,  85.000) = 6 
    [ 85.000,  90.000) = 3 
    [ 90.000,  95.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     50.135 ms/op
     p(50.0000) =     59.113 ms/op
     p(90.0000) =     78.014 ms/op
     p(95.0000) =     83.454 ms/op
     p(99.0000) =     98.356 ms/op
     p(99.9000) =     98.959 ms/op
     p(99.9900) =     98.959 ms/op
     p(99.9990) =     98.959 ms/op
     p(99.9999) =     98.959 ms/op
    p(100.0000) =     98.959 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readRev
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 51.14% complete, ETA 00:59:54
# Fork: 1 of 3
# Warmup Iteration   1: n = 33, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 31, 33, 48, 60, 60, 60, 60 ms/op
# Warmup Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 31, 40, 55, 64, 64, 64, 64 ms/op
# Warmup Iteration   3: n = 34, mean = 30 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 28, 28, 33, 42, 52, 52, 52, 52 ms/op
Iteration   1: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 32, 48, 56, 62, 62, 62, 62 ms/op
Iteration   2: n = 35, mean = 29 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 29, 30, 30, 30, 30, 30, 30 ms/op
Iteration   3: n = 32, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 31, 44, 56, 61, 61, 61, 61 ms/op

# Run progress: 51.33% complete, ETA 00:59:35
# Fork: 2 of 3
# Warmup Iteration   1: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 52, 68, 78, 78, 78, 78 ms/op
# Warmup Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 31, 40, 53, 61, 61, 61, 61 ms/op
# Warmup Iteration   3: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 33, 42, 56, 64, 64, 64, 64 ms/op
Iteration   1: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 30, 30, 38, 52, 61, 61, 61, 61 ms/op
Iteration   2: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 29, 30, 49, 55, 62, 62, 62, 62 ms/op
Iteration   3: n = 38, mean = 27 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 27, 27, 30, 30, 30, 30, 30 ms/op

# Run progress: 51.52% complete, ETA 00:59:15
# Fork: 3 of 3
# Warmup Iteration   1: n = 37, mean = 27 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 27, 27, 31, 37, 37, 37, 37 ms/op
# Warmup Iteration   2: n = 32, mean = 31 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 27, 30, 37, 49, 57, 57, 57, 57 ms/op
# Warmup Iteration   3: n = 38, mean = 26 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 26, 27, 27, 27, 27, 27, 27 ms/op
Iteration   1: n = 38, mean = 26 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 26, 27, 27, 27, 27, 27, 27 ms/op
Iteration   2: n = 38, mean = 27 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 26, 27, 27, 27, 27, 27, 27 ms/op
Iteration   3: n = 32, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 26, 30, 38, 51, 60, 60, 60, 60 ms/op


Result "readRev":
  N = 305
  mean =     30.070 ±(99.9%) 1.100 ms/op

  Histogram, ms/op:
    [20.000, 25.000) = 0 
    [25.000, 30.000) = 198 
    [30.000, 35.000) = 87 
    [35.000, 40.000) = 5 
    [40.000, 45.000) = 2 
    [45.000, 50.000) = 5 
    [50.000, 55.000) = 3 
    [55.000, 60.000) = 0 
    [60.000, 65.000) = 5 

  Percentiles, ms/op:
      p(0.0000) =     26.182 ms/op
     p(50.0000) =     29.590 ms/op
     p(90.0000) =     32.290 ms/op
     p(95.0000) =     40.737 ms/op
     p(99.0000) =     61.145 ms/op
     p(99.9000) =     62.456 ms/op
     p(99.9900) =     62.456 ms/op
     p(99.9990) =     62.456 ms/op
     p(99.9999) =     62.456 ms/op
    p(100.0000) =     62.456 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readRev
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 51.70% complete, ETA 00:58:56
# Fork: 1 of 3
# Warmup Iteration   1: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 63, 104, 113, 113, 113, 113, 113 ms/op
# Warmup Iteration   2: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 55, 56, 56, 56, 56, 56, 56 ms/op
# Warmup Iteration   3: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 63, 79, 85, 85, 85, 85, 85 ms/op
Iteration   1: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 55, 55, 55, 55, 55, 55, 55 ms/op
Iteration   2: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 78, 94, 98, 98, 98, 98, 98 ms/op
Iteration   3: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 63, 69, 71, 71, 71, 71, 71 ms/op

# Run progress: 51.89% complete, ETA 00:58:38
# Fork: 2 of 3
# Warmup Iteration   1: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 70, 78, 105, 115, 115, 115, 115, 115 ms/op
# Warmup Iteration   2: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 78, 78, 89, 93, 93, 93, 93, 93 ms/op
# Warmup Iteration   3: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 61, 97, 110, 110, 110, 110, 110 ms/op
Iteration   1: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 69, 79, 90, 93, 93, 93, 93, 93 ms/op
Iteration   2: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 60, 61, 61, 61, 61, 61, 61 ms/op
Iteration   3: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 79, 93, 96, 96, 96, 96, 96 ms/op

# Run progress: 52.08% complete, ETA 00:58:20
# Fork: 3 of 3
# Warmup Iteration   1: n = 18, mean = 56 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 54, 67, 73, 73, 73, 73, 73 ms/op
# Warmup Iteration   2: n = 20, mean = 53 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 52, 54, 54, 54, 54, 54, 54 ms/op
# Warmup Iteration   3: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 64, 79, 87, 87, 87, 87, 87 ms/op
Iteration   1: n = 13, mean = 80 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 77, 92, 95, 95, 95, 95, 95 ms/op
Iteration   2: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 51, 60, 75, 89, 89, 89, 89, 89 ms/op
Iteration   3: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 52, 52, 52, 52, 52, 52, 52, 52 ms/op


Result "readRev":
  N = 143
  mean =     65.163 ±(99.9%) 3.503 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 41 
    [ 55.000,  60.000) = 20 
    [ 60.000,  65.000) = 26 
    [ 65.000,  70.000) = 2 
    [ 70.000,  75.000) = 9 
    [ 75.000,  80.000) = 33 
    [ 80.000,  85.000) = 2 
    [ 85.000,  90.000) = 6 
    [ 90.000,  95.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     50.921 ms/op
     p(50.0000) =     60.490 ms/op
     p(90.0000) =     79.377 ms/op
     p(95.0000) =     88.395 ms/op
     p(99.0000) =     97.103 ms/op
     p(99.9000) =     97.911 ms/op
     p(99.9900) =     97.911 ms/op
     p(99.9990) =     97.911 ms/op
     p(99.9999) =     97.911 ms/op
    p(100.0000) =     97.911 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 52.27% complete, ETA 00:58:02
# Fork: 1 of 3
# Warmup Iteration   1: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 39, 52, 77, 84, 84, 84, 84 ms/op
# Warmup Iteration   2: n = 30, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 34, 35, 35, 35, 35, 35 ms/op
# Warmup Iteration   3: n = 30, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 34, 34, 34, 34, 34, 34 ms/op
Iteration   1: n = 22, mean = 46 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 39, 39, 64, 71, 71, 71, 71, 71 ms/op
Iteration   2: n = 29, mean = 35 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 39, 39, 39, 39, 39, 39 ms/op
Iteration   3: n = 30, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 33, 33, 34, 34, 34, 34, 34, 34 ms/op

# Run progress: 52.46% complete, ETA 00:57:41
# Fork: 2 of 3
# Warmup Iteration   1: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 44, 49, 57, 86, 87, 87, 87, 87 ms/op
# Warmup Iteration   2: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 45, 46, 46, 46, 46, 46, 46 ms/op
# Warmup Iteration   3: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 45, 45, 45, 45, 45, 45, 45 ms/op
Iteration   1: n = 20, mean = 51 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 50, 58, 71, 71, 71, 71, 71 ms/op
Iteration   2: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 45, 45, 45, 45, 45, 45, 45 ms/op
Iteration   3: n = 20, mean = 52 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 45, 50, 58, 71, 72, 72, 72, 72 ms/op

# Run progress: 52.65% complete, ETA 00:57:21
# Fork: 3 of 3
# Warmup Iteration   1: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 41, 53, 81, 87, 87, 87, 87 ms/op
# Warmup Iteration   2: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 41, 51, 65, 69, 69, 69, 69 ms/op
# Warmup Iteration   3: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 39, 48, 63, 68, 68, 68, 68 ms/op
Iteration   1: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 41, 49, 65, 69, 69, 69, 69 ms/op
Iteration   2: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 41, 49, 64, 68, 68, 68, 68 ms/op
Iteration   3: n = 24, mean = 43 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 41, 51, 65, 69, 69, 69, 69 ms/op


Result "readSeq":
  N = 216
  mean =     42.434 ±(99.9%) 1.835 ms/op

  Histogram, ms/op:
    [30.000, 35.000) = 52 
    [35.000, 40.000) = 28 
    [40.000, 45.000) = 78 
    [45.000, 50.000) = 22 
    [50.000, 55.000) = 22 
    [55.000, 60.000) = 7 
    [60.000, 65.000) = 0 
    [65.000, 70.000) = 4 
    [70.000, 75.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =     33.227 ms/op
     p(50.0000) =     40.894 ms/op
     p(90.0000) =     50.502 ms/op
     p(95.0000) =     58.281 ms/op
     p(99.0000) =     71.434 ms/op
     p(99.9000) =     71.696 ms/op
     p(99.9900) =     71.696 ms/op
     p(99.9990) =     71.696 ms/op
     p(99.9999) =     71.696 ms/op
    p(100.0000) =     71.696 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 52.84% complete, ETA 00:57:01
# Fork: 1 of 3
# Warmup Iteration   1: n = 12, mean = 87 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 83, 111, 118, 118, 118, 118, 118 ms/op
# Warmup Iteration   2: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 79, 84, 100, 104, 104, 104, 104, 104 ms/op
# Warmup Iteration   3: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 65, 92, 105, 105, 105, 105, 105 ms/op
Iteration   1: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 84, 93, 95, 95, 95, 95, 95 ms/op
Iteration   2: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 63, 63, 63, 63, 63, 63, 63 ms/op
Iteration   3: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 55, 55, 55, 55, 55, 55, 55 ms/op

# Run progress: 53.03% complete, ETA 00:56:43
# Fork: 2 of 3
# Warmup Iteration   1: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 65, 92, 109, 109, 109, 109, 109 ms/op
# Warmup Iteration   2: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 71, 80, 96, 101, 101, 101, 101, 101 ms/op
# Warmup Iteration   3: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 64, 81, 88, 88, 88, 88, 88 ms/op
Iteration   1: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 63, 72, 85, 85, 85, 85, 85 ms/op
Iteration   2: n = 13, mean = 83 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 75, 81, 99, 103, 103, 103, 103, 103 ms/op
Iteration   3: n = 16, mean = 65 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 64, 80, 88, 88, 88, 88, 88 ms/op

# Run progress: 53.22% complete, ETA 00:56:24
# Fork: 3 of 3
# Warmup Iteration   1: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 63, 90, 109, 109, 109, 109, 109 ms/op
# Warmup Iteration   2: n = 16, mean = 64 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 64, 71, 80, 80, 80, 80, 80 ms/op
# Warmup Iteration   3: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 83, 99, 103, 103, 103, 103, 103 ms/op
Iteration   1: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 63, 91, 105, 105, 105, 105, 105 ms/op
Iteration   2: n = 13, mean = 79 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 63, 83, 99, 103, 103, 103, 103, 103 ms/op
Iteration   3: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 84, 106, 112, 112, 112, 112, 112 ms/op


Result "readSeq":
  N = 134
  mean =     69.295 ±(99.9%) 3.924 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 14 
    [ 55.000,  60.000) = 21 
    [ 60.000,  65.000) = 46 
    [ 65.000,  70.000) = 5 
    [ 70.000,  75.000) = 0 
    [ 75.000,  80.000) = 7 
    [ 80.000,  85.000) = 28 
    [ 85.000,  90.000) = 3 
    [ 90.000,  95.000) = 5 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 3 
    [105.000, 110.000) = 0 
    [110.000, 115.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     53.805 ms/op
     p(50.0000) =     63.537 ms/op
     p(90.0000) =     85.328 ms/op
     p(95.0000) =     93.192 ms/op
     p(99.0000) =    109.242 ms/op
     p(99.9000) =    111.673 ms/op
     p(99.9900) =    111.673 ms/op
     p(99.9990) =    111.673 ms/op
     p(99.9999) =    111.673 ms/op
    p(100.0000) =    111.673 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 53.41% complete, ETA 00:56:05
# Fork: 1 of 3
# Warmup Iteration   1: n = 31, mean = 32 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 32, 33, 40, 43, 43, 43, 43 ms/op
# Warmup Iteration   2: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 43, 51, 62, 64, 64, 64, 64 ms/op
# Warmup Iteration   3: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 37, 38, 39, 39, 39, 39, 39, 39 ms/op
Iteration   1: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 38, 48, 56, 59, 59, 59, 59 ms/op
Iteration   2: n = 30, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 32, 36, 36, 36, 36, 36, 36 ms/op
Iteration   3: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 34, 36, 60, 68, 70, 70, 70, 70 ms/op

# Run progress: 53.60% complete, ETA 00:55:46
# Fork: 2 of 3
# Warmup Iteration   1: n = 23, mean = 45 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 42, 61, 81, 86, 86, 86, 86 ms/op
# Warmup Iteration   2: n = 24, mean = 42 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 40, 56, 65, 67, 67, 67, 67 ms/op
# Warmup Iteration   3: n = 23, mean = 44 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 42, 57, 73, 76, 76, 76, 76 ms/op
Iteration   1: n = 26, mean = 39 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 37, 48, 59, 63, 63, 63, 63 ms/op
Iteration   2: n = 30, mean = 34 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 32, 36, 36, 36, 37, 37, 37, 37 ms/op
Iteration   3: n = 31, mean = 33 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 31, 32, 33, 49, 66, 66, 66, 66 ms/op

# Run progress: 53.79% complete, ETA 00:55:28
# Fork: 3 of 3
# Warmup Iteration   1: n = 18, mean = 58 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 50, 56, 68, 88, 88, 88, 88, 88 ms/op
# Warmup Iteration   2: n = 25, mean = 41 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 38, 38, 50, 59, 62, 62, 62, 62 ms/op
# Warmup Iteration   3: n = 28, mean = 36 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 36, 36, 37, 37, 37, 37, 37, 37 ms/op
Iteration   1: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 56, 64, 66, 66, 66, 66, 66 ms/op
Iteration   2: n = 21, mean = 48 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 42, 50, 55, 63, 64, 64, 64, 64 ms/op
Iteration   3: n = 27, mean = 38 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 35, 36, 42, 42, 42, 42, 42, 42 ms/op


Result "readSeq":
  N = 235
  mean =     39.072 ±(99.9%) 1.801 ms/op

  Histogram, ms/op:
    [30.000, 32.500) = 56 
    [32.500, 35.000) = 8 
    [35.000, 37.500) = 93 
    [37.500, 40.000) = 16 
    [40.000, 42.500) = 18 
    [42.500, 45.000) = 3 
    [45.000, 47.500) = 4 
    [47.500, 50.000) = 7 
    [50.000, 52.500) = 4 
    [52.500, 55.000) = 2 
    [55.000, 57.500) = 14 
    [57.500, 60.000) = 3 
    [60.000, 62.500) = 1 
    [62.500, 65.000) = 3 
    [65.000, 67.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =     31.392 ms/op
     p(50.0000) =     36.372 ms/op
     p(90.0000) =     55.601 ms/op
     p(95.0000) =     55.863 ms/op
     p(99.0000) =     66.105 ms/op
     p(99.9000) =     69.992 ms/op
     p(99.9900) =     69.992 ms/op
     p(99.9990) =     69.992 ms/op
     p(99.9999) =     69.992 ms/op
    p(100.0000) =     69.992 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 53.98% complete, ETA 00:55:09
# Fork: 1 of 3
# Warmup Iteration   1: n = 12, mean = 89 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 78, 87, 114, 122, 122, 122, 122, 122 ms/op
# Warmup Iteration   2: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 73, 80, 91, 96, 96, 96, 96, 96 ms/op
# Warmup Iteration   3: n = 14, mean = 75 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 78, 89, 92, 92, 92, 92, 92 ms/op
Iteration   1: n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 78, 85, 92, 93, 93, 93, 93, 93 ms/op
Iteration   2: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 66, 82, 89, 89, 89, 89, 89 ms/op
Iteration   3: n = 15, mean = 68 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 66, 84, 91, 91, 91, 91, 91 ms/op

# Run progress: 54.17% complete, ETA 00:54:52
# Fork: 2 of 3
# Warmup Iteration   1: n = 18, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 58, 62, 71, 71, 71, 71, 71 ms/op
# Warmup Iteration   2: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 55, 96, 102, 102, 102, 102, 102 ms/op
# Warmup Iteration   3: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 55, 94, 101, 101, 101, 101, 101 ms/op
Iteration   1: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 55, 58, 58, 58, 58, 58, 58, 58 ms/op
Iteration   2: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 67, 95, 108, 108, 108, 108, 108 ms/op
Iteration   3: n = 12, mean = 84 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 84, 101, 104, 104, 104, 104, 104 ms/op

# Run progress: 54.36% complete, ETA 00:54:35
# Fork: 3 of 3
# Warmup Iteration   1: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 57, 66, 93, 113, 113, 113, 113, 113 ms/op
# Warmup Iteration   2: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 56, 57, 57, 57, 57, 57, 57 ms/op
# Warmup Iteration   3: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 59, 96, 105, 105, 105, 105, 105 ms/op
Iteration   1: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 61, 91, 100, 100, 100, 100, 100 ms/op
Iteration   2: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 79, 94, 100, 100, 100, 100, 100 ms/op
Iteration   3: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 78, 78, 79, 79, 79, 79, 79, 79 ms/op


Result "readSeq":
  N = 128
  mean =     72.306 ±(99.9%) 3.481 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 28 
    [ 60.000,  65.000) = 5 
    [ 65.000,  70.000) = 33 
    [ 70.000,  75.000) = 2 
    [ 75.000,  80.000) = 32 
    [ 80.000,  85.000) = 12 
    [ 85.000,  90.000) = 9 
    [ 90.000,  95.000) = 3 
    [ 95.000, 100.000) = 2 
    [100.000, 105.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     55.050 ms/op
     p(50.0000) =     68.092 ms/op
     p(90.0000) =     86.521 ms/op
     p(95.0000) =     92.275 ms/op
     p(99.0000) =    106.749 ms/op
     p(99.9000) =    108.003 ms/op
     p(99.9900) =    108.003 ms/op
     p(99.9990) =    108.003 ms/op
     p(99.9999) =    108.003 ms/op
    p(100.0000) =    108.003 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 54.55% complete, ETA 00:54:17
# Fork: 1 of 3
# Warmup Iteration   1: n = 13, mean = 78 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 65, 131, 157, 157, 157, 157, 157 ms/op
# Warmup Iteration   2: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 66, 86, 102, 102, 102, 102, 102 ms/op
# Warmup Iteration   3: n = 18, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 59, 59, 60, 60, 60, 60, 60 ms/op
Iteration   1: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 61, 79, 83, 83, 83, 83, 83 ms/op
Iteration   2: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 61, 105, 112, 112, 112, 112, 112 ms/op
Iteration   3: n = 19, mean = 55 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 54, 60, 61, 61, 61, 61, 61 ms/op

# Run progress: 54.73% complete, ETA 00:53:58
# Fork: 2 of 3
# Warmup Iteration   1: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 66, 114, 148, 148, 148, 148, 148 ms/op
# Warmup Iteration   2: n = 17, mean = 59 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 59, 60, 60, 60, 60, 60, 60 ms/op
# Warmup Iteration   3: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 60, 61, 61, 61, 61, 61, 61 ms/op
Iteration   1: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 62, 89, 103, 103, 103, 103, 103 ms/op
Iteration   2: n = 14, mean = 71 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 68, 98, 115, 115, 115, 115, 115 ms/op
Iteration   3: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 60, 61, 61, 61, 61, 61, 61 ms/op

# Run progress: 54.92% complete, ETA 00:53:39
# Fork: 3 of 3
# Warmup Iteration   1: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 61, 104, 143, 143, 143, 143, 143 ms/op
# Warmup Iteration   2: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 61, 82, 104, 104, 104, 104, 104 ms/op
# Warmup Iteration   3: n = 19, mean = 54 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 53, 54, 56, 56, 56, 56, 56, 56 ms/op
Iteration   1: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 56, 66, 89, 91, 91, 91, 91, 91 ms/op
Iteration   2: n = 16, mean = 66 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 62, 85, 109, 109, 109, 109, 109 ms/op
Iteration   3: n = 18, mean = 57 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 54, 54, 61, 61, 61, 61, 61, 61 ms/op


Result "readXxh64":
  N = 147
  mean =     63.240 ±(99.9%) 2.962 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 26 
    [ 55.000,  60.000) = 15 
    [ 60.000,  65.000) = 66 
    [ 65.000,  70.000) = 25 
    [ 70.000,  75.000) = 3 
    [ 75.000,  80.000) = 2 
    [ 80.000,  85.000) = 3 
    [ 85.000,  90.000) = 1 
    [ 90.000,  95.000) = 1 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 1 
    [105.000, 110.000) = 1 
    [110.000, 115.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     53.477 ms/op
     p(50.0000) =     60.752 ms/op
     p(90.0000) =     70.989 ms/op
     p(95.0000) =     86.088 ms/op
     p(99.0000) =    113.697 ms/op
     p(99.9000) =    115.081 ms/op
     p(99.9900) =    115.081 ms/op
     p(99.9990) =    115.081 ms/op
     p(99.9999) =    115.081 ms/op
    p(100.0000) =    115.081 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 55.11% complete, ETA 00:53:20
# Fork: 1 of 3
# Warmup Iteration   1: n = 9, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 106, 149, 149, 149, 149, 149, 149 ms/op
# Warmup Iteration   2: n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 106, 154, 154, 154, 154, 154, 154 ms/op
# Warmup Iteration   3: n = 11, mean = 99 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 95, 125, 130, 130, 130, 130, 130 ms/op
Iteration   1: n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 78, 88, 124, 130, 130, 130, 130, 130 ms/op
Iteration   2: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 76, 77, 77, 77, 77, 77, 77 ms/op
Iteration   3: n = 11, mean = 95 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 106, 123, 124, 124, 124, 124, 124 ms/op

# Run progress: 55.30% complete, ETA 00:53:02
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 99, 167, 173, 173, 173, 173, 173 ms/op
# Warmup Iteration   2: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 105, 137, 140, 140, 140, 140, 140 ms/op
# Warmup Iteration   3: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 82, 100, 132, 132, 132, 132, 132, 132 ms/op
Iteration   1: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 83, 106, 114, 114, 114, 114, 114 ms/op
Iteration   2: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 102, 137, 138, 138, 138, 138, 138 ms/op
Iteration   3: n = 10, mean = 110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 105, 137, 138, 138, 138, 138, 138 ms/op

# Run progress: 55.49% complete, ETA 00:52:44
# Fork: 3 of 3
# Warmup Iteration   1: n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 79, 82, 153, 166, 166, 166, 166, 166 ms/op
# Warmup Iteration   2: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 82, 112, 120, 120, 120, 120, 120 ms/op
# Warmup Iteration   3: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 76, 88, 117, 127, 127, 127, 127, 127 ms/op
Iteration   1: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 105, 143, 143, 143, 143, 143, 143 ms/op
Iteration   2: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 77, 82, 87, 87, 87, 87, 87, 87 ms/op
Iteration   3: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 97, 142, 144, 144, 144, 144, 144 ms/op


Result "readXxh64":
  N = 100
  mean =     94.271 ±(99.9%) 6.030 ms/op

  Histogram, ms/op:
    [ 70.000,  75.000) = 0 
    [ 75.000,  80.000) = 27 
    [ 80.000,  85.000) = 8 
    [ 85.000,  90.000) = 24 
    [ 90.000,  95.000) = 2 
    [ 95.000, 100.000) = 4 
    [100.000, 105.000) = 5 
    [105.000, 110.000) = 13 
    [110.000, 115.000) = 4 
    [115.000, 120.000) = 2 
    [120.000, 125.000) = 2 
    [125.000, 130.000) = 4 
    [130.000, 135.000) = 1 
    [135.000, 140.000) = 2 
    [140.000, 145.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =     75.891 ms/op
     p(50.0000) =     87.818 ms/op
     p(90.0000) =    123.889 ms/op
     p(95.0000) =    130.305 ms/op
     p(99.0000) =    143.644 ms/op
     p(99.9000) =    143.655 ms/op
     p(99.9900) =    143.655 ms/op
     p(99.9990) =    143.655 ms/op
     p(99.9999) =    143.655 ms/op
    p(100.0000) =    143.655 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 55.68% complete, ETA 00:52:26
# Fork: 1 of 3
# Warmup Iteration   1: n = 16, mean = 63 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 60, 74, 90, 90, 90, 90, 90 ms/op
# Warmup Iteration   2: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 60, 61, 61, 61, 61, 61, 61 ms/op
# Warmup Iteration   3: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 68, 99, 119, 119, 119, 119, 119 ms/op
Iteration   1: n = 17, mean = 61 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 61, 61, 62, 62, 62, 62, 62 ms/op
Iteration   2: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 60, 61, 61, 61, 61, 61, 61 ms/op
Iteration   3: n = 14, mean = 72 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 61, 69, 100, 120, 120, 120, 120, 120 ms/op

# Run progress: 55.87% complete, ETA 00:52:09
# Fork: 2 of 3
# Warmup Iteration   1: n = 17, mean = 62 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 60, 72, 91, 91, 91, 91, 91 ms/op
# Warmup Iteration   2: n = 14, mean = 71 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 60, 68, 97, 116, 116, 116, 116, 116 ms/op
# Warmup Iteration   3: n = 15, mean = 71 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 68, 94, 116, 116, 116, 116, 116 ms/op
Iteration   1: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 60, 60, 61, 61, 61, 61, 61 ms/op
Iteration   2: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 60, 60, 60, 60, 60, 60, 60 ms/op
Iteration   3: n = 17, mean = 60 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 60, 60, 60, 60, 60, 60, 60 ms/op

# Run progress: 56.06% complete, ETA 00:51:51
# Fork: 3 of 3
# Warmup Iteration   1: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 67, 72, 128, 157, 157, 157, 157, 157 ms/op
# Warmup Iteration   2: n = 15, mean = 70 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 67, 94, 118, 118, 118, 118, 118 ms/op
# Warmup Iteration   3: n = 14, mean = 76 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 66, 74, 95, 99, 99, 99, 99, 99 ms/op
Iteration   1: n = 14, mean = 73 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 65, 67, 107, 116, 116, 116, 116, 116 ms/op
Iteration   2: n = 15, mean = 67 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 58, 66, 79, 91, 91, 91, 91, 91 ms/op
Iteration   3: n = 15, mean = 69 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 59, 66, 92, 115, 115, 115, 115, 115 ms/op


Result "readXxh64":
  N = 143
  mean =     64.262 ±(99.9%) 2.675 ms/op

  Histogram, ms/op:
    [ 50.000,  55.000) = 0 
    [ 55.000,  60.000) = 44 
    [ 60.000,  65.000) = 50 
    [ 65.000,  70.000) = 40 
    [ 70.000,  75.000) = 1 
    [ 75.000,  80.000) = 3 
    [ 80.000,  85.000) = 0 
    [ 85.000,  90.000) = 0 
    [ 90.000,  95.000) = 1 
    [ 95.000, 100.000) = 1 
    [100.000, 105.000) = 0 
    [105.000, 110.000) = 0 
    [110.000, 115.000) = 0 
    [115.000, 120.000) = 2 
    [120.000, 125.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     58.130 ms/op
     p(50.0000) =     60.424 ms/op
     p(90.0000) =     68.551 ms/op
     p(95.0000) =     78.381 ms/op
     p(99.0000) =    118.216 ms/op
     p(99.9000) =    120.062 ms/op
     p(99.9900) =    120.062 ms/op
     p(99.9990) =    120.062 ms/op
     p(99.9999) =    120.062 ms/op
    p(100.0000) =    120.062 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 56.25% complete, ETA 00:51:34
# Fork: 1 of 3
# Warmup Iteration   1: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 89, 93, 185, 190, 190, 190, 190, 190 ms/op
# Warmup Iteration   2: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 110, 156, 156, 156, 156, 156, 156 ms/op
# Warmup Iteration   3: n = 11, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 94, 140, 141, 141, 141, 141, 141 ms/op
Iteration   1: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 85, 99, 142, 146, 146, 146, 146, 146 ms/op
Iteration   2: n = 11, mean = 91 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 83, 85, 129, 133, 133, 133, 133, 133 ms/op
Iteration   3: n = 12, mean = 88 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 81, 86, 112, 120, 120, 120, 120, 120 ms/op

# Run progress: 56.44% complete, ETA 00:51:17
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 88, 92, 174, 182, 182, 182, 182, 182 ms/op
# Warmup Iteration   2: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 81, 103, 139, 142, 142, 142, 142, 142 ms/op
# Warmup Iteration   3: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 111, 144, 144, 144, 144, 144, 144 ms/op
Iteration   1: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 111, 127, 127, 127, 127, 127, 127 ms/op
Iteration   2: n = 11, mean = 96 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 81, 93, 129, 137, 137, 137, 137, 137 ms/op
Iteration   3: n = 13, mean = 81 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 80, 81, 81, 81, 81, 81, 81, 81 ms/op

# Run progress: 56.63% complete, ETA 00:51:00
# Fork: 3 of 3
# Warmup Iteration   1: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 110, 202, 202, 202, 202, 202, 202 ms/op
# Warmup Iteration   2: n = 9, mean = 117 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 110, 145, 145, 145, 145, 145, 145 ms/op
# Warmup Iteration   3: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 96, 149, 151, 151, 151, 151, 151 ms/op
Iteration   1: n = 12, mean = 85 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 81, 83, 95, 95, 95, 95, 95, 95 ms/op
Iteration   2: n = 13, mean = 83 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 81, 83, 83, 83, 83, 83, 83, 83 ms/op
Iteration   3: n = 13, mean = 82 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 80, 82, 83, 83, 83, 83, 83, 83 ms/op


Result "readXxh64":
  N = 105
  mean =     89.796 ±(99.9%) 4.325 ms/op

  Histogram, ms/op:
    [ 80.000,  85.000) = 58 
    [ 85.000,  90.000) = 12 
    [ 90.000,  95.000) = 14 
    [ 95.000, 100.000) = 8 
    [100.000, 105.000) = 1 
    [105.000, 110.000) = 1 
    [110.000, 115.000) = 5 
    [115.000, 120.000) = 0 
    [120.000, 125.000) = 2 
    [125.000, 130.000) = 1 
    [130.000, 135.000) = 1 
    [135.000, 140.000) = 1 
    [140.000, 145.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     80.347 ms/op
     p(50.0000) =     83.362 ms/op
     p(90.0000) =    110.572 ms/op
     p(95.0000) =    122.565 ms/op
     p(99.0000) =    145.233 ms/op
     p(99.9000) =    145.752 ms/op
     p(99.9900) =    145.752 ms/op
     p(99.9990) =    145.752 ms/op
     p(99.9999) =    145.752 ms/op
    p(100.0000) =    145.752 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 56.82% complete, ETA 00:50:44
# Fork: 1 of 3
# Warmup Iteration   1: n = 6, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 148, 238, 238, 238, 238, 238, 238 ms/op
# Warmup Iteration   2: n = 5, mean = 190 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 206, 228, 228, 228, 228, 228, 228 ms/op
# Warmup Iteration   3: n = 6, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 147, 212, 212, 212, 212, 212, 212 ms/op
Iteration   1: n = 6, mean = 155 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 147, 207, 207, 207, 207, 207, 207 ms/op
Iteration   2: n = 7, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 130, 130, 130, 130, 130, 130, 130 ms/op
Iteration   3: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 129, 131, 131, 131, 131, 131, 131 ms/op

# Run progress: 57.01% complete, ETA 00:50:26
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 150, 193, 193, 193, 193, 193, 193 ms/op
# Warmup Iteration   2: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 150, 151, 212, 212, 212, 212, 212, 212 ms/op
# Warmup Iteration   3: n = 6, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 146, 158, 207, 207, 207, 207, 207, 207 ms/op
Iteration   1: n = 6, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 148, 211, 211, 211, 211, 211, 211 ms/op
Iteration   2: n = 7, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 134, 137, 137, 137, 137, 137, 137 ms/op
Iteration   3: n = 7, mean = 134 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 134, 134, 134, 134, 134, 134, 134 ms/op

# Run progress: 57.20% complete, ETA 00:50:08
# Fork: 3 of 3
# Warmup Iteration   1: n = 6, mean = 164 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 148, 241, 241, 241, 241, 241, 241 ms/op
# Warmup Iteration   2: n = 7, mean = 142 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 131, 200, 200, 200, 200, 200, 200 ms/op
# Warmup Iteration   3: n = 6, mean = 174 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 171, 208, 208, 208, 208, 208, 208 ms/op
Iteration   1: n = 6, mean = 172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 168, 202, 202, 202, 202, 202, 202 ms/op
Iteration   2: n = 7, mean = 134 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 130, 148, 148, 148, 148, 148, 148 ms/op
Iteration   3: n = 6, mean = 171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 148, 268, 268, 268, 268, 268, 268 ms/op


Result "write":
  N = 60
  mean =    144.808 ±(99.9%) 11.470 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 35 
    [137.500, 150.000) = 18 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 2 
    [187.500, 200.000) = 1 
    [200.000, 212.500) = 3 
    [212.500, 225.000) = 0 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 0 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 1 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    128.582 ms/op
     p(50.0000) =    134.152 ms/op
     p(90.0000) =    186.542 ms/op
     p(95.0000) =    206.360 ms/op
     p(99.0000) =    267.649 ms/op
     p(99.9000) =    267.649 ms/op
     p(99.9900) =    267.649 ms/op
     p(99.9990) =    267.649 ms/op
     p(99.9999) =    267.649 ms/op
    p(100.0000) =    267.649 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.write
# Parameters: (intKey = true, metaSync = false, num = 1000000, sequential = false, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 57.39% complete, ETA 00:49:50
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 963 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 963, 963, 963, 963, 963, 963, 963, 963 ms/op
# Warmup Iteration   2: n = 2, mean = 753 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 749, 753, 758, 758, 758, 758, 758, 758 ms/op
# Warmup Iteration   3: n = 1, mean = 951 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 951, 951, 951, 951, 951, 951, 951, 951 ms/op
Iteration   1: n = 1, mean = 974 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 974, 974, 974, 974, 974, 974, 974, 974 ms/op
Iteration   2: n = 2, mean = 888 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 880, 888, 895, 895, 895, 895, 895, 895 ms/op
Iteration   3: n = 2, mean = 751 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 750, 751, 753, 753, 753, 753, 753, 753 ms/op

# Run progress: 57.58% complete, ETA 00:49:33
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 883 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 883, 883, 883, 883, 883, 883, 883, 883 ms/op
# Warmup Iteration   2: n = 1, mean = 910 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 910, 910, 910, 910, 910, 910, 910, 910 ms/op
# Warmup Iteration   3: n = 1, mean = 929 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 929, 929, 929, 929, 929, 929, 929, 929 ms/op
Iteration   1: n = 1, mean = 1005 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005 ms/op
Iteration   2: n = 1, mean = 1033 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033 ms/op
Iteration   3: n = 1, mean = 911 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 911, 911, 911, 911, 911, 911, 911, 911 ms/op

# Run progress: 57.77% complete, ETA 00:49:15
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 953 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 953, 953, 953, 953, 953, 953, 953, 953 ms/op
# Warmup Iteration   2: n = 2, mean = 759 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 757, 759, 760, 760, 760, 760, 760, 760 ms/op
# Warmup Iteration   3: n = 1, mean = 1040 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040 ms/op
Iteration   1: n = 1, mean = 976 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 976, 976, 976, 976, 976, 976, 976, 976 ms/op
Iteration   2: n = 1, mean = 1027 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027 ms/op
Iteration   3: n = 2, mean = 809 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 753, 809, 865, 865, 865, 865, 865, 865 ms/op


Result "write":
  N = 12
  mean =    901.775 ±(99.9%) 135.720 ms/op

  Histogram, ms/op:
    [ 700.000,  725.000) = 0 
    [ 725.000,  750.000) = 1 
    [ 750.000,  775.000) = 2 
    [ 775.000,  800.000) = 0 
    [ 800.000,  825.000) = 0 
    [ 825.000,  850.000) = 0 
    [ 850.000,  875.000) = 1 
    [ 875.000,  900.000) = 2 
    [ 900.000,  925.000) = 1 
    [ 925.000,  950.000) = 0 
    [ 950.000,  975.000) = 1 
    [ 975.000, 1000.000) = 1 
    [1000.000, 1025.000) = 1 
    [1025.000, 1050.000) = 2 
    [1050.000, 1075.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    749.732 ms/op
     p(50.0000) =    903.348 ms/op
     p(90.0000) =   1030.960 ms/op
     p(95.0000) =   1032.847 ms/op
     p(99.0000) =   1032.847 ms/op
     p(99.9000) =   1032.847 ms/op
     p(99.9900) =   1032.847 ms/op
     p(99.9990) =   1032.847 ms/op
     p(99.9999) =   1032.847 ms/op
    p(100.0000) =   1032.847 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.write
# Parameters: (intKey = false, metaSync = false, num = 1000000, sequential = true, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 57.95% complete, ETA 00:48:58
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1411 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411 ms/op
# Warmup Iteration   2: n = 1, mean = 1302 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302 ms/op
# Warmup Iteration   3: n = 1, mean = 1187 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1187, 1187, 1187, 1187, 1187, 1187, 1187, 1187 ms/op
Iteration   1: n = 1, mean = 1179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179 ms/op
Iteration   2: n = 1, mean = 1011 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1011 ms/op
Iteration   3: n = 1, mean = 1009 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1009, 1009, 1009, 1009, 1009, 1009, 1009, 1009 ms/op

# Run progress: 58.14% complete, ETA 00:48:41
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1493 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493 ms/op
# Warmup Iteration   2: n = 1, mean = 1208 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1208, 1208, 1208, 1208, 1208, 1208, 1208, 1208 ms/op
# Warmup Iteration   3: n = 1, mean = 1195 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1195, 1195, 1195, 1195, 1195, 1195, 1195, 1195 ms/op
Iteration   1: n = 1, mean = 1233 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233 ms/op
Iteration   2: n = 1, mean = 1053 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053 ms/op
Iteration   3: n = 1, mean = 1206 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206 ms/op

# Run progress: 58.33% complete, ETA 00:48:24
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1634 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1634, 1634, 1634, 1634, 1634, 1634, 1634, 1634 ms/op
# Warmup Iteration   2: n = 1, mean = 1300 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300 ms/op
# Warmup Iteration   3: n = 1, mean = 1239 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1239, 1239, 1239, 1239, 1239, 1239, 1239, 1239 ms/op
Iteration   1: n = 1, mean = 1105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105 ms/op
Iteration   2: n = 1, mean = 1116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116 ms/op
Iteration   3: n = 1, mean = 1156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1156, 1156, 1156, 1156, 1156, 1156, 1156, 1156 ms/op


Result "write":
  N = 9
  mean =   1118.481 ±(99.9%) 137.937 ms/op

  Histogram, ms/op:
    [1000.000, 1025.000) = 2 
    [1025.000, 1050.000) = 0 
    [1050.000, 1075.000) = 1 
    [1075.000, 1100.000) = 0 
    [1100.000, 1125.000) = 2 
    [1125.000, 1150.000) = 0 
    [1150.000, 1175.000) = 1 
    [1175.000, 1200.000) = 1 
    [1200.000, 1225.000) = 1 
    [1225.000, 1250.000) = 1 
    [1250.000, 1275.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1008.730 ms/op
     p(50.0000) =   1115.685 ms/op
     p(90.0000) =   1233.125 ms/op
     p(95.0000) =   1233.125 ms/op
     p(99.0000) =   1233.125 ms/op
     p(99.9000) =   1233.125 ms/op
     p(99.9900) =   1233.125 ms/op
     p(99.9990) =   1233.125 ms/op
     p(99.9999) =   1233.125 ms/op
    p(100.0000) =   1233.125 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.LmdbJni.write
# Parameters: (intKey = false, metaSync = false, num = 1000000, sequential = false, sync = false, valRandom = false, valSize = 100, writeMap = true)

# Run progress: 58.52% complete, ETA 00:48:07
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 2278 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2278, 2278, 2278, 2278, 2278, 2278, 2278, 2278 ms/op
# Warmup Iteration   2: n = 1, mean = 2133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2133, 2133, 2133, 2133, 2133, 2133, 2133, 2133 ms/op
# Warmup Iteration   3: n = 1, mean = 2108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108 ms/op
Iteration   1: n = 1, mean = 1925 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925 ms/op
Iteration   2: n = 1, mean = 2022 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022 ms/op
Iteration   3: n = 1, mean = 2085 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2085, 2085, 2085, 2085, 2085, 2085, 2085, 2085 ms/op

# Run progress: 58.71% complete, ETA 00:47:54
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 2617 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2617, 2617, 2617, 2617, 2617, 2617, 2617, 2617 ms/op
# Warmup Iteration   2: n = 1, mean = 2022 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022 ms/op
# Warmup Iteration   3: n = 1, mean = 2223 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2223, 2223, 2223, 2223, 2223, 2223, 2223, 2223 ms/op
Iteration   1: n = 1, mean = 2441 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2441, 2441, 2441, 2441, 2441, 2441, 2441, 2441 ms/op
Iteration   2: n = 1, mean = 1936 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1936, 1936, 1936, 1936, 1936, 1936, 1936, 1936 ms/op
Iteration   3: n = 1, mean = 2091 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2091, 2091, 2091, 2091, 2091, 2091, 2091, 2091 ms/op

# Run progress: 58.90% complete, ETA 00:47:42
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 2470 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2470, 2470, 2470, 2470, 2470, 2470, 2470, 2470 ms/op
# Warmup Iteration   2: n = 1, mean = 1873 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1873, 1873, 1873, 1873, 1873, 1873, 1873, 1873 ms/op
# Warmup Iteration   3: n = 1, mean = 2227 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2227, 2227, 2227, 2227, 2227, 2227, 2227, 2227 ms/op
Iteration   1: n = 1, mean = 1856 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1856, 1856, 1856, 1856, 1856, 1856, 1856, 1856 ms/op
Iteration   2: n = 1, mean = 2252 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2252, 2252, 2252, 2252, 2252, 2252, 2252, 2252 ms/op
Iteration   3: n = 1, mean = 2215 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2215, 2215, 2215, 2215, 2215, 2215, 2215, 2215 ms/op


Result "write":
  N = 9
  mean =   2091.327 ±(99.9%) 311.884 ms/op

  Histogram, ms/op:
    [1800.000, 1850.000) = 0 
    [1850.000, 1900.000) = 1 
    [1900.000, 1950.000) = 2 
    [1950.000, 2000.000) = 0 
    [2000.000, 2050.000) = 1 
    [2050.000, 2100.000) = 2 
    [2100.000, 2150.000) = 0 
    [2150.000, 2200.000) = 0 
    [2200.000, 2250.000) = 1 
    [2250.000, 2300.000) = 1 
    [2300.000, 2350.000) = 0 
    [2350.000, 2400.000) = 0 
    [2400.000, 2450.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1855.980 ms/op
     p(50.0000) =   2084.569 ms/op
     p(90.0000) =   2441.085 ms/op
     p(95.0000) =   2441.085 ms/op
     p(99.0000) =   2441.085 ms/op
     p(99.9000) =   2441.085 ms/op
     p(99.9900) =   2441.085 ms/op
     p(99.9990) =   2441.085 ms/op
     p(99.9999) =   2441.085 ms/op
    p(100.0000) =   2441.085 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 59.09% complete, ETA 00:47:29
# Fork: 1 of 3
# Warmup Iteration   1: n = 5, mean = 230 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 187, 248, 276, 276, 276, 276, 276, 276 ms/op
# Warmup Iteration   2: n = 6, mean = 193 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 168, 187, 249, 249, 249, 249, 249, 249 ms/op
# Warmup Iteration   3: n = 5, mean = 219 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 190, 211, 269, 269, 269, 269, 269, 269 ms/op
Iteration   1: n = 5, mean = 202 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 179, 189, 263, 263, 263, 263, 263, 263 ms/op
Iteration   2: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 170, 172, 172, 172, 172, 172, 172 ms/op
Iteration   3: n = 6, mean = 174 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 173, 184, 184, 184, 184, 184, 184 ms/op

# Run progress: 59.28% complete, ETA 00:47:19
# Fork: 2 of 3
# Warmup Iteration   1: n = 5, mean = 208 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 175, 181, 277, 277, 277, 277, 277, 277 ms/op
# Warmup Iteration   2: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 170, 170, 172, 172, 172, 172, 172, 172 ms/op
# Warmup Iteration   3: n = 6, mean = 189 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 172, 177, 255, 255, 255, 255, 255, 255 ms/op
Iteration   1: n = 5, mean = 211 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 186, 200, 267, 267, 267, 267, 267, 267 ms/op
Iteration   2: n = 6, mean = 180 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 175, 178, 194, 194, 194, 194, 194, 194 ms/op
Iteration   3: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 177, 179, 182, 182, 182, 182, 182, 182 ms/op

# Run progress: 59.47% complete, ETA 00:47:09
# Fork: 3 of 3
# Warmup Iteration   1: n = 6, mean = 172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 167, 169, 185, 185, 185, 185, 185, 185 ms/op
# Warmup Iteration   2: n = 6, mean = 167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 167, 167, 167, 167, 167, 167, 167, 167 ms/op
# Warmup Iteration   3: n = 5, mean = 222 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 189, 219, 268, 268, 268, 268, 268, 268 ms/op
Iteration   1: n = 6, mean = 176 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 175, 192, 192, 192, 192, 192, 192 ms/op
Iteration   2: n = 6, mean = 171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 167, 169, 181, 181, 181, 181, 181, 181 ms/op
Iteration   3: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 168, 168, 176, 176, 176, 176, 176, 176 ms/op


Result "readCrc":
  N = 52
  mean =    180.592 ±(99.9%) 9.347 ms/op

  Histogram, ms/op:
    [160.000, 170.000) = 15 
    [170.000, 180.000) = 23 
    [180.000, 190.000) = 7 
    [190.000, 200.000) = 3 
    [200.000, 210.000) = 2 
    [210.000, 220.000) = 0 
    [220.000, 230.000) = 0 
    [230.000, 240.000) = 0 
    [240.000, 250.000) = 0 
    [250.000, 260.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    167.248 ms/op
     p(50.0000) =    176.554 ms/op
     p(90.0000) =    197.473 ms/op
     p(95.0000) =    223.242 ms/op
     p(99.0000) =    267.125 ms/op
     p(99.9000) =    267.125 ms/op
     p(99.9900) =    267.125 ms/op
     p(99.9990) =    267.125 ms/op
     p(99.9999) =    267.125 ms/op
    p(100.0000) =    267.125 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 59.66% complete, ETA 00:46:59
# Fork: 1 of 3
# Warmup Iteration   1: n = 6, mean = 183 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 172, 179, 212, 212, 212, 212, 212, 212 ms/op
# Warmup Iteration   2: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 172, 175, 180, 180, 180, 180, 180, 180 ms/op
# Warmup Iteration   3: n = 5, mean = 207 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 183, 197, 259, 259, 259, 259, 259, 259 ms/op
Iteration   1: n = 5, mean = 221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 194, 199, 260, 260, 260, 260, 260, 260 ms/op
Iteration   2: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 173, 174, 196, 196, 196, 196, 196, 196 ms/op
Iteration   3: n = 5, mean = 212 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 195, 195, 258, 258, 258, 258, 258, 258 ms/op

# Run progress: 59.85% complete, ETA 00:46:49
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 186 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 163, 175, 251, 251, 251, 251, 251, 251 ms/op
# Warmup Iteration   2: n = 6, mean = 177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 157, 177, 212, 212, 212, 212, 212, 212 ms/op
# Warmup Iteration   3: n = 7, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 157, 158, 164, 164, 164, 164, 164, 164 ms/op
Iteration   1: n = 7, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 158, 158, 165, 165, 165, 165, 165, 165 ms/op
Iteration   2: n = 7, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 157, 157, 162, 162, 162, 162, 162, 162 ms/op
Iteration   3: n = 7, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 157, 158, 159, 159, 159, 159, 159, 159 ms/op

# Run progress: 60.04% complete, ETA 00:46:38
# Fork: 3 of 3
# Warmup Iteration   1: n = 5, mean = 220 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 190, 191, 275, 275, 275, 275, 275, 275 ms/op
# Warmup Iteration   2: n = 5, mean = 207 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 187, 188, 278, 278, 278, 278, 278, 278 ms/op
# Warmup Iteration   3: n = 5, mean = 221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 198, 214, 261, 261, 261, 261, 261, 261 ms/op
Iteration   1: n = 5, mean = 202 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 179, 191, 255, 255, 255, 255, 255, 255 ms/op
Iteration   2: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 169, 170, 171, 171, 171, 171, 171, 171 ms/op
Iteration   3: n = 6, mean = 198 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 170, 182, 291, 291, 291, 291, 291, 291 ms/op


Result "readCrc":
  N = 54
  mean =    180.981 ±(99.9%) 14.664 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 0 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 19 
    [162.500, 175.000) = 15 
    [175.000, 187.500) = 2 
    [187.500, 200.000) = 12 
    [200.000, 212.500) = 0 
    [212.500, 225.000) = 1 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 0 
    [250.000, 262.500) = 4 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    157.286 ms/op
     p(50.0000) =    169.869 ms/op
     p(90.0000) =    236.585 ms/op
     p(95.0000) =    258.146 ms/op
     p(99.0000) =    290.980 ms/op
     p(99.9000) =    290.980 ms/op
     p(99.9900) =    290.980 ms/op
     p(99.9990) =    290.980 ms/op
     p(99.9999) =    290.980 ms/op
    p(100.0000) =    290.980 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 60.23% complete, ETA 00:46:28
# Fork: 1 of 3
# Warmup Iteration   1: n = 4, mean = 260 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 223, 226, 364, 364, 364, 364, 364, 364 ms/op
# Warmup Iteration   2: n = 5, mean = 249 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 221, 227, 293, 293, 293, 293, 293, 293 ms/op
# Warmup Iteration   3: n = 5, mean = 214 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 192, 224, 231, 231, 231, 231, 231, 231 ms/op
Iteration   1: n = 5, mean = 202 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 199, 201, 206, 206, 206, 206, 206, 206 ms/op
Iteration   2: n = 5, mean = 203 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 198, 205, 207, 207, 207, 207, 207, 207 ms/op
Iteration   3: n = 5, mean = 201 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 199, 200, 207, 207, 207, 207, 207, 207 ms/op

# Run progress: 60.42% complete, ETA 00:46:19
# Fork: 2 of 3
# Warmup Iteration   1: n = 5, mean = 203 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 193, 202, 216, 216, 216, 216, 216, 216 ms/op
# Warmup Iteration   2: n = 5, mean = 226 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 204, 217, 277, 277, 277, 277, 277, 277 ms/op
# Warmup Iteration   3: n = 5, mean = 225 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 201, 212, 280, 280, 280, 280, 280, 280 ms/op
Iteration   1: n = 5, mean = 225 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 187, 217, 278, 278, 278, 278, 278, 278 ms/op
Iteration   2: n = 6, mean = 192 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 187, 192, 199, 199, 199, 199, 199, 199 ms/op
Iteration   3: n = 6, mean = 196 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 187, 197, 201, 201, 201, 201, 201, 201 ms/op

# Run progress: 60.61% complete, ETA 00:46:10
# Fork: 3 of 3
# Warmup Iteration   1: n = 4, mean = 259 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 223, 256, 302, 302, 302, 302, 302, 302 ms/op
# Warmup Iteration   2: n = 5, mean = 234 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 216, 219, 288, 288, 288, 288, 288, 288 ms/op
# Warmup Iteration   3: n = 5, mean = 234 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 198, 227, 292, 292, 292, 292, 292, 292 ms/op
Iteration   1: n = 5, mean = 202 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 199, 202, 208, 208, 208, 208, 208, 208 ms/op
Iteration   2: n = 4, mean = 252 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 208, 230, 338, 338, 338, 338, 338, 338 ms/op
Iteration   3: n = 5, mean = 211 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 198, 201, 255, 255, 255, 255, 255, 255 ms/op


Result "readCrc":
  N = 46
  mean =    207.857 ±(99.9%) 13.394 ms/op

  Histogram, ms/op:
    [100.000, 125.000) = 0 
    [125.000, 150.000) = 0 
    [150.000, 175.000) = 0 
    [175.000, 200.000) = 21 
    [200.000, 225.000) = 20 
    [225.000, 250.000) = 2 
    [250.000, 275.000) = 1 
    [275.000, 300.000) = 1 
    [300.000, 325.000) = 0 
    [325.000, 350.000) = 1 
    [350.000, 375.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    186.647 ms/op
     p(50.0000) =    200.933 ms/op
     p(90.0000) =    232.417 ms/op
     p(95.0000) =    270.139 ms/op
     p(99.0000) =    338.166 ms/op
     p(99.9000) =    338.166 ms/op
     p(99.9900) =    338.166 ms/op
     p(99.9990) =    338.166 ms/op
     p(99.9999) =    338.166 ms/op
    p(100.0000) =    338.166 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 60.80% complete, ETA 00:46:02
# Fork: 1 of 3
# Warmup Iteration   1: n = 5, mean = 256 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 213, 218, 336, 336, 336, 336, 336, 336 ms/op
# Warmup Iteration   2: n = 5, mean = 218 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 193, 225, 235, 235, 235, 235, 235, 235 ms/op
# Warmup Iteration   3: n = 5, mean = 228 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 191, 235, 286, 286, 286, 286, 286, 286 ms/op
Iteration   1: n = 5, mean = 233 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 208, 232, 275, 275, 275, 275, 275, 275 ms/op
Iteration   2: n = 4, mean = 256 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 218, 256, 293, 293, 293, 293, 293, 293 ms/op
Iteration   3: n = 5, mean = 215 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 207, 214, 227, 227, 227, 227, 227, 227 ms/op

# Run progress: 60.98% complete, ETA 00:45:53
# Fork: 2 of 3
# Warmup Iteration   1: n = 4, mean = 274 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 215, 285, 312, 312, 312, 312, 312, 312 ms/op
# Warmup Iteration   2: n = 5, mean = 234 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 210, 215, 269, 269, 269, 269, 269, 269 ms/op
# Warmup Iteration   3: n = 5, mean = 253 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 225, 235, 288, 288, 288, 288, 288, 288 ms/op
Iteration   1: n = 5, mean = 207 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 191, 212, 228, 228, 228, 228, 228, 228 ms/op
Iteration   2: n = 6, mean = 194 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 192, 194, 197, 197, 197, 197, 197, 197 ms/op
Iteration   3: n = 6, mean = 197 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 190, 192, 212, 212, 212, 212, 212, 212 ms/op

# Run progress: 61.17% complete, ETA 00:45:44
# Fork: 3 of 3
# Warmup Iteration   1: n = 5, mean = 248 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 215, 218, 298, 298, 298, 298, 298, 298 ms/op
# Warmup Iteration   2: n = 5, mean = 240 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 208, 235, 296, 296, 296, 296, 296, 296 ms/op
# Warmup Iteration   3: n = 5, mean = 250 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 209, 263, 286, 286, 286, 286, 286, 286 ms/op
Iteration   1: n = 5, mean = 213 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 195, 218, 234, 234, 234, 234, 234, 234 ms/op
Iteration   2: n = 5, mean = 205 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 191, 195, 245, 245, 245, 245, 245, 245 ms/op
Iteration   3: n = 5, mean = 227 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 197, 218, 285, 285, 285, 285, 285, 285 ms/op


Result "readCrc":
  N = 46
  mean =    214.576 ±(99.9%) 13.557 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 0 
    [125.000, 137.500) = 0 
    [137.500, 150.000) = 0 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 0 
    [187.500, 200.000) = 18 
    [200.000, 212.500) = 8 
    [212.500, 225.000) = 9 
    [225.000, 237.500) = 5 
    [237.500, 250.000) = 2 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 1 
    [275.000, 287.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =    190.317 ms/op
     p(50.0000) =    208.798 ms/op
     p(90.0000) =    254.175 ms/op
     p(95.0000) =    283.928 ms/op
     p(99.0000) =    292.553 ms/op
     p(99.9000) =    292.553 ms/op
     p(99.9900) =    292.553 ms/op
     p(99.9990) =    292.553 ms/op
     p(99.9999) =    292.553 ms/op
    p(100.0000) =    292.553 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 61.36% complete, ETA 00:45:35
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 9831 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9831, 9831, 9831, 9831, 9831, 9831, 9831, 9831 ms/op
# Warmup Iteration   2: n = 1, mean = 9446 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9446, 9446, 9446, 9446, 9446, 9446, 9446, 9446 ms/op
# Warmup Iteration   3: n = 1, mean = 9647 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9647, 9647, 9647, 9647, 9647, 9647, 9647, 9647 ms/op
Iteration   1: n = 1, mean = 10100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10100, 10100, 10100, 10100, 10100, 10100, 10100, 10100 ms/op
Iteration   2: n = 1, mean = 10050 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10050, 10050, 10050, 10050, 10050, 10050, 10050, 10050 ms/op
Iteration   3: 
Bytes	330301440	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 10368 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368 ms/op

# Run progress: 61.55% complete, ETA 00:45:58
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 8171 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8171, 8171, 8171, 8171, 8171, 8171, 8171, 8171 ms/op
# Warmup Iteration   2: n = 1, mean = 7466 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7466, 7466, 7466, 7466, 7466, 7466, 7466, 7466 ms/op
# Warmup Iteration   3: n = 1, mean = 7684 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7684, 7684, 7684, 7684, 7684, 7684, 7684, 7684 ms/op
Iteration   1: n = 1, mean = 7994 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7994, 7994, 7994, 7994, 7994, 7994, 7994, 7994 ms/op
Iteration   2: n = 1, mean = 7650 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7650, 7650, 7650, 7650, 7650, 7650, 7650, 7650 ms/op
Iteration   3: 
Bytes	330301440	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 8162 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8162, 8162, 8162, 8162, 8162, 8162, 8162, 8162 ms/op

# Run progress: 61.74% complete, ETA 00:46:12
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 10033 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10033, 10033, 10033, 10033, 10033, 10033, 10033, 10033 ms/op
# Warmup Iteration   2: n = 1, mean = 9546 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9546, 9546, 9546, 9546, 9546, 9546, 9546, 9546 ms/op
# Warmup Iteration   3: n = 1, mean = 9932 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9932, 9932, 9932, 9932, 9932, 9932, 9932, 9932 ms/op
Iteration   1: n = 1, mean = 10905 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10905, 10905, 10905, 10905, 10905, 10905, 10905, 10905 ms/op
Iteration   2: n = 1, mean = 10100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10100, 10100, 10100, 10100, 10100, 10100, 10100, 10100 ms/op
Iteration   3: 
Bytes	330301440	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 10050 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10050, 10050, 10050, 10050, 10050, 10050, 10050, 10050 ms/op


Result "readKey":
  N = 9
  mean =   9486.584 ±(99.9%) 2017.272 ms/op

  Histogram, ms/op:
    [ 7000.000,  7250.000) = 0 
    [ 7250.000,  7500.000) = 0 
    [ 7500.000,  7750.000) = 1 
    [ 7750.000,  8000.000) = 1 
    [ 8000.000,  8250.000) = 1 
    [ 8250.000,  8500.000) = 0 
    [ 8500.000,  8750.000) = 0 
    [ 8750.000,  9000.000) = 0 
    [ 9000.000,  9250.000) = 0 
    [ 9250.000,  9500.000) = 0 
    [ 9500.000,  9750.000) = 0 
    [ 9750.000, 10000.000) = 0 
    [10000.000, 10250.000) = 4 
    [10250.000, 10500.000) = 1 
    [10500.000, 10750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   7650.410 ms/op
     p(50.0000) =  10049.552 ms/op
     p(90.0000) =  10905.190 ms/op
     p(95.0000) =  10905.190 ms/op
     p(99.0000) =  10905.190 ms/op
     p(99.9000) =  10905.190 ms/op
     p(99.9900) =  10905.190 ms/op
     p(99.9990) =  10905.190 ms/op
     p(99.9999) =  10905.190 ms/op
    p(100.0000) =  10905.190 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readKey
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 61.93% complete, ETA 00:46:35
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 10050 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10050, 10050, 10050, 10050, 10050, 10050, 10050, 10050 ms/op
# Warmup Iteration   2: n = 1, mean = 9982 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9982, 9982, 9982, 9982, 9982, 9982, 9982, 9982 ms/op
# Warmup Iteration   3: n = 1, mean = 10737 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10737, 10737, 10737, 10737, 10737, 10737, 10737, 10737 ms/op
Iteration   1: n = 1, mean = 9915 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9915, 9915, 9915, 9915, 9915, 9915, 9915, 9915 ms/op
Iteration   2: n = 1, mean = 9848 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9848, 9848, 9848, 9848, 9848, 9848, 9848, 9848 ms/op
Iteration   3: 
Bytes	118489088	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 10654 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10654, 10654, 10654, 10654, 10654, 10654, 10654, 10654 ms/op

# Run progress: 62.12% complete, ETA 00:46:58
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 10083 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10083, 10083, 10083, 10083, 10083, 10083, 10083, 10083 ms/op
# Warmup Iteration   2: n = 1, mean = 10167 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10167, 10167, 10167, 10167, 10167, 10167, 10167, 10167 ms/op
# Warmup Iteration   3: n = 1, mean = 11123 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11123, 11123, 11123, 11123, 11123, 11123, 11123, 11123 ms/op
Iteration   1: n = 1, mean = 11039 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11039, 11039, 11039, 11039, 11039, 11039, 11039, 11039 ms/op
Iteration   2: n = 1, mean = 10184 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10184, 10184, 10184, 10184, 10184, 10184, 10184, 10184 ms/op
Iteration   3: 
Bytes	118489088	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 10251 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10251, 10251, 10251, 10251, 10251, 10251, 10251, 10251 ms/op

# Run progress: 62.31% complete, ETA 00:47:21
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 10486 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10486, 10486, 10486, 10486, 10486, 10486, 10486, 10486 ms/op
# Warmup Iteration   2: n = 1, mean = 10050 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10050, 10050, 10050, 10050, 10050, 10050, 10050, 10050 ms/op
# Warmup Iteration   3: n = 1, mean = 10402 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10402, 10402, 10402, 10402, 10402, 10402, 10402, 10402 ms/op
Iteration   1: n = 1, mean = 10754 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10754, 10754, 10754, 10754, 10754, 10754, 10754, 10754 ms/op
Iteration   2: n = 1, mean = 10435 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10435, 10435, 10435, 10435, 10435, 10435, 10435, 10435 ms/op
Iteration   3: 
Bytes	118489088	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 10201 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10201, 10201, 10201, 10201, 10201, 10201, 10201, 10201 ms/op


Result "readKey":
  N = 9
  mean =  10364.591 ±(99.9%) 660.701 ms/op

  Histogram, ms/op:
    [ 9000.000,  9250.000) = 0 
    [ 9250.000,  9500.000) = 0 
    [ 9500.000,  9750.000) = 0 
    [ 9750.000, 10000.000) = 2 
    [10000.000, 10250.000) = 2 
    [10250.000, 10500.000) = 2 
    [10500.000, 10750.000) = 1 
    [10750.000, 11000.000) = 1 
    [11000.000, 11250.000) = 1 
    [11250.000, 11500.000) = 0 
    [11500.000, 11750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   9848.226 ms/op
     p(50.0000) =  10250.879 ms/op
     p(90.0000) =  11039.408 ms/op
     p(95.0000) =  11039.408 ms/op
     p(99.0000) =  11039.408 ms/op
     p(99.9000) =  11039.408 ms/op
     p(99.9900) =  11039.408 ms/op
     p(99.9990) =  11039.408 ms/op
     p(99.9999) =  11039.408 ms/op
    p(100.0000) =  11039.408 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readKey
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 62.50% complete, ETA 00:47:43
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 8372 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8372, 8372, 8372, 8372, 8372, 8372, 8372, 8372 ms/op
# Warmup Iteration   2: n = 1, mean = 8825 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8825, 8825, 8825, 8825, 8825, 8825, 8825, 8825 ms/op
# Warmup Iteration   3: n = 1, mean = 8808 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8808, 8808, 8808, 8808, 8808, 8808, 8808, 8808 ms/op
Iteration   1: n = 1, mean = 8791 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8791, 8791, 8791, 8791, 8791, 8791, 8791, 8791 ms/op
Iteration   2: n = 1, mean = 9060 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9060, 9060, 9060, 9060, 9060, 9060, 9060, 9060 ms/op
Iteration   3: 
Bytes	288358400	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 9076 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9076, 9076, 9076, 9076, 9076, 9076, 9076, 9076 ms/op

# Run progress: 62.69% complete, ETA 00:48:00
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 8447 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8447, 8447, 8447, 8447, 8447, 8447, 8447, 8447 ms/op
# Warmup Iteration   2: n = 1, mean = 8447 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8447, 8447, 8447, 8447, 8447, 8447, 8447, 8447 ms/op
# Warmup Iteration   3: n = 1, mean = 9177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9177, 9177, 9177, 9177, 9177, 9177, 9177, 9177 ms/op
Iteration   1: n = 1, mean = 9714 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9714, 9714, 9714, 9714, 9714, 9714, 9714, 9714 ms/op
Iteration   2: n = 1, mean = 9110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9110, 9110, 9110, 9110, 9110, 9110, 9110, 9110 ms/op
Iteration   3: 
Bytes	288358400	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 8623 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8623, 8623, 8623, 8623, 8623, 8623, 8623, 8623 ms/op

# Run progress: 62.88% complete, ETA 00:48:16
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 8573 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8573, 8573, 8573, 8573, 8573, 8573, 8573, 8573 ms/op
# Warmup Iteration   2: n = 1, mean = 7801 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7801, 7801, 7801, 7801, 7801, 7801, 7801, 7801 ms/op
# Warmup Iteration   3: n = 1, mean = 8707 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8707, 8707, 8707, 8707, 8707, 8707, 8707, 8707 ms/op
Iteration   1: n = 1, mean = 8808 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8808, 8808, 8808, 8808, 8808, 8808, 8808, 8808 ms/op
Iteration   2: n = 1, mean = 8221 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8221, 8221, 8221, 8221, 8221, 8221, 8221, 8221 ms/op
Iteration   3: 
Bytes	288358400	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 8422 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8422, 8422, 8422, 8422, 8422, 8422, 8422, 8422 ms/op


Result "readKey":
  N = 9
  mean =   8869.555 ±(99.9%) 737.613 ms/op

  Histogram, ms/op:
    [ 8000.000,  8125.000) = 0 
    [ 8125.000,  8250.000) = 1 
    [ 8250.000,  8375.000) = 0 
    [ 8375.000,  8500.000) = 1 
    [ 8500.000,  8625.000) = 1 
    [ 8625.000,  8750.000) = 0 
    [ 8750.000,  8875.000) = 2 
    [ 8875.000,  9000.000) = 0 
    [ 9000.000,  9125.000) = 3 
    [ 9125.000,  9250.000) = 0 
    [ 9250.000,  9375.000) = 0 
    [ 9375.000,  9500.000) = 0 
    [ 9500.000,  9625.000) = 0 
    [ 9625.000,  9750.000) = 1 
    [ 9750.000,  9875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   8220.836 ms/op
     p(50.0000) =   8808.038 ms/op
     p(90.0000) =   9714.008 ms/op
     p(95.0000) =   9714.008 ms/op
     p(99.0000) =   9714.008 ms/op
     p(99.9000) =   9714.008 ms/op
     p(99.9900) =   9714.008 ms/op
     p(99.9990) =   9714.008 ms/op
     p(99.9999) =   9714.008 ms/op
    p(100.0000) =   9714.008 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readKey
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 63.07% complete, ETA 00:48:31
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 10805 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10805, 10805, 10805, 10805, 10805, 10805, 10805, 10805 ms/op
# Warmup Iteration   2: n = 1, mean = 10570 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10570, 10570, 10570, 10570, 10570, 10570, 10570, 10570 ms/op
# Warmup Iteration   3: n = 1, mean = 11207 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11207, 11207, 11207, 11207, 11207, 11207, 11207, 11207 ms/op
Iteration   1: n = 1, mean = 12751 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12751, 12751, 12751, 12751, 12751, 12751, 12751, 12751 ms/op
Iteration   2: n = 1, mean = 12348 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12348, 12348, 12348, 12348, 12348, 12348, 12348, 12348 ms/op
Iteration   3: 
Bytes	133169152	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 11627 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11627, 11627, 11627, 11627, 11627, 11627, 11627, 11627 ms/op

# Run progress: 63.26% complete, ETA 00:48:55
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 12046 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12046, 12046, 12046, 12046, 12046, 12046, 12046, 12046 ms/op
# Warmup Iteration   2: n = 1, mean = 12348 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12348, 12348, 12348, 12348, 12348, 12348, 12348, 12348 ms/op
# Warmup Iteration   3: n = 1, mean = 12549 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12549, 12549, 12549, 12549, 12549, 12549, 12549, 12549 ms/op
Iteration   1: n = 1, mean = 12533 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12533, 12533, 12533, 12533, 12533, 12533, 12533, 12533 ms/op
Iteration   2: n = 1, mean = 12046 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12046, 12046, 12046, 12046, 12046, 12046, 12046, 12046 ms/op
Iteration   3: 
Bytes	133169152	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 12465 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12465, 12465, 12465, 12465, 12465, 12465, 12465, 12465 ms/op

# Run progress: 63.45% complete, ETA 00:49:22
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 12063 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12063, 12063, 12063, 12063, 12063, 12063, 12063, 12063 ms/op
# Warmup Iteration   2: n = 1, mean = 11794 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11794, 11794, 11794, 11794, 11794, 11794, 11794, 11794 ms/op
# Warmup Iteration   3: n = 1, mean = 11610 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11610, 11610, 11610, 11610, 11610, 11610, 11610, 11610 ms/op
Iteration   1: n = 1, mean = 12667 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12667, 12667, 12667, 12667, 12667, 12667, 12667, 12667 ms/op
Iteration   2: n = 1, mean = 11560 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11560, 11560, 11560, 11560, 11560, 11560, 11560, 11560 ms/op
Iteration   3: 
Bytes	133169152	org.lmdbjava.bench.MapDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 12398 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12398, 12398, 12398, 12398, 12398, 12398, 12398, 12398 ms/op


Result "readKey":
  N = 9
  mean =  12266.009 ±(99.9%) 724.490 ms/op

  Histogram, ms/op:
    [11000.000, 11125.000) = 0 
    [11125.000, 11250.000) = 0 
    [11250.000, 11375.000) = 0 
    [11375.000, 11500.000) = 0 
    [11500.000, 11625.000) = 1 
    [11625.000, 11750.000) = 1 
    [11750.000, 11875.000) = 0 
    [11875.000, 12000.000) = 0 
    [12000.000, 12125.000) = 1 
    [12125.000, 12250.000) = 0 
    [12250.000, 12375.000) = 1 
    [12375.000, 12500.000) = 2 
    [12500.000, 12625.000) = 1 
    [12625.000, 12750.000) = 1 
    [12750.000, 12875.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  11559.502 ms/op
     p(50.0000) =  12398.363 ms/op
     p(90.0000) =  12750.684 ms/op
     p(95.0000) =  12750.684 ms/op
     p(99.0000) =  12750.684 ms/op
     p(99.9000) =  12750.684 ms/op
     p(99.9900) =  12750.684 ms/op
     p(99.9990) =  12750.684 ms/op
     p(99.9999) =  12750.684 ms/op
    p(100.0000) =  12750.684 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readRev
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 63.64% complete, ETA 00:49:47
# Fork: 1 of 3
# Warmup Iteration   1: n = 9, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 109, 131, 131, 131, 131, 131, 131 ms/op
# Warmup Iteration   2: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 109, 113, 113, 113, 113, 113, 113 ms/op
# Warmup Iteration   3: n = 8, mean = 138 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 116, 121, 189, 189, 189, 189, 189, 189 ms/op
Iteration   1: n = 8, mean = 141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 123, 214, 214, 214, 214, 214, 214 ms/op
Iteration   2: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 117, 120, 202, 202, 202, 202, 202, 202 ms/op
Iteration   3: n = 8, mean = 138 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 118, 120, 185, 185, 185, 185, 185, 185 ms/op

# Run progress: 63.83% complete, ETA 00:49:33
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 97, 175, 183, 183, 183, 183, 183 ms/op
# Warmup Iteration   2: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 97, 102, 150, 150, 150, 150, 150, 150 ms/op
# Warmup Iteration   3: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 99, 142, 145, 145, 145, 145, 145 ms/op
Iteration   1: n = 12, mean = 90 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 87, 97, 98, 98, 98, 98, 98 ms/op
Iteration   2: n = 9, mean = 120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 98, 159, 159, 159, 159, 159, 159 ms/op
Iteration   3: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 98, 156, 160, 160, 160, 160, 160 ms/op

# Run progress: 64.02% complete, ETA 00:49:18
# Fork: 3 of 3
# Warmup Iteration   1: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 106, 129, 131, 131, 131, 131, 131 ms/op
# Warmup Iteration   2: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 106, 110, 111, 111, 111, 111, 111 ms/op
# Warmup Iteration   3: n = 8, mean = 134 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 119, 121, 185, 185, 185, 185, 185, 185 ms/op
Iteration   1: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 108, 166, 166, 166, 166, 166, 166 ms/op
Iteration   2: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 106, 109, 109, 109, 109, 109, 109 ms/op
Iteration   3: n = 8, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 119, 134, 172, 172, 172, 172, 172, 172 ms/op


Result "readRev":
  N = 82
  mean =    118.836 ±(99.9%) 10.071 ms/op

  Histogram, ms/op:
    [  0.000,  25.000) = 0 
    [ 25.000,  50.000) = 0 
    [ 50.000,  75.000) = 0 
    [ 75.000, 100.000) = 25 
    [100.000, 125.000) = 36 
    [125.000, 150.000) = 10 
    [150.000, 175.000) = 8 
    [175.000, 200.000) = 1 
    [200.000, 225.000) = 2 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     86.508 ms/op
     p(50.0000) =    113.115 ms/op
     p(90.0000) =    157.522 ms/op
     p(95.0000) =    174.234 ms/op
     p(99.0000) =    213.647 ms/op
     p(99.9000) =    213.647 ms/op
     p(99.9900) =    213.647 ms/op
     p(99.9990) =    213.647 ms/op
     p(99.9999) =    213.647 ms/op
    p(100.0000) =    213.647 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readRev
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 64.20% complete, ETA 00:49:04
# Fork: 1 of 3
# Warmup Iteration   1: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 107, 148, 148, 148, 148, 148, 148 ms/op
# Warmup Iteration   2: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 106, 108, 108, 108, 108, 108, 108 ms/op
# Warmup Iteration   3: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 106, 113, 114, 114, 114, 114, 114 ms/op
Iteration   1: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 110, 156, 156, 156, 156, 156, 156 ms/op
Iteration   2: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 108, 112, 112, 112, 112, 112, 112 ms/op
Iteration   3: n = 9, mean = 124 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 118, 188, 188, 188, 188, 188, 188 ms/op

# Run progress: 64.39% complete, ETA 00:48:49
# Fork: 2 of 3
# Warmup Iteration   1: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 119, 122, 198, 198, 198, 198, 198, 198 ms/op
# Warmup Iteration   2: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 111, 119, 119, 119, 119, 119, 119 ms/op
# Warmup Iteration   3: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 111, 123, 179, 179, 179, 179, 179, 179 ms/op
Iteration   1: n = 8, mean = 125 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 120, 149, 149, 149, 149, 149, 149 ms/op
Iteration   2: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 107, 120, 120, 120, 120, 120, 120 ms/op
Iteration   3: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 107, 111, 111, 111, 111, 111, 111 ms/op

# Run progress: 64.58% complete, ETA 00:48:35
# Fork: 3 of 3
# Warmup Iteration   1: n = 7, mean = 151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 143, 216, 216, 216, 216, 216, 216 ms/op
# Warmup Iteration   2: n = 9, mean = 123 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 111, 188, 188, 188, 188, 188, 188 ms/op
# Warmup Iteration   3: n = 7, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 121, 163, 193, 193, 193, 193, 193, 193 ms/op
Iteration   1: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 115, 119, 195, 195, 195, 195, 195, 195 ms/op
Iteration   2: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 109, 117, 149, 149, 149, 149, 149, 149 ms/op
Iteration   3: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 109, 112, 112, 112, 112, 112, 112 ms/op


Result "readRev":
  N = 83
  mean =    115.819 ±(99.9%) 5.900 ms/op

  Histogram, ms/op:
    [100.000, 110.000) = 43 
    [110.000, 120.000) = 26 
    [120.000, 130.000) = 7 
    [130.000, 140.000) = 0 
    [140.000, 150.000) = 4 
    [150.000, 160.000) = 1 
    [160.000, 170.000) = 0 
    [170.000, 180.000) = 0 
    [180.000, 190.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    103.940 ms/op
     p(50.0000) =    109.838 ms/op
     p(90.0000) =    124.125 ms/op
     p(95.0000) =    149.108 ms/op
     p(99.0000) =    194.773 ms/op
     p(99.9000) =    194.773 ms/op
     p(99.9900) =    194.773 ms/op
     p(99.9990) =    194.773 ms/op
     p(99.9999) =    194.773 ms/op
    p(100.0000) =    194.773 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readRev
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 64.77% complete, ETA 00:48:21
# Fork: 1 of 3
# Warmup Iteration   1: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 116, 155, 155, 155, 155, 155, 155 ms/op
# Warmup Iteration   2: n = 9, mean = 123 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 111, 158, 158, 158, 158, 158, 158 ms/op
# Warmup Iteration   3: n = 7, mean = 151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 128, 234, 234, 234, 234, 234, 234 ms/op
Iteration   1: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 120, 134, 134, 134, 134, 134, 134 ms/op
Iteration   2: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 112, 113, 113, 113, 113, 113, 113 ms/op
Iteration   3: n = 8, mean = 134 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 114, 128, 181, 181, 181, 181, 181, 181 ms/op

# Run progress: 64.96% complete, ETA 00:48:08
# Fork: 2 of 3
# Warmup Iteration   1: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 111, 122, 176, 176, 176, 176, 176, 176 ms/op
# Warmup Iteration   2: n = 7, mean = 145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 116, 136, 179, 179, 179, 179, 179, 179 ms/op
# Warmup Iteration   3: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 125, 128, 184, 184, 184, 184, 184, 184 ms/op
Iteration   1: n = 8, mean = 125 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 115, 174, 174, 174, 174, 174, 174 ms/op
Iteration   2: n = 7, mean = 145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 133, 180, 180, 180, 180, 180, 180 ms/op
Iteration   3: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 105, 113, 113, 113, 113, 113, 113 ms/op

# Run progress: 65.15% complete, ETA 00:47:55
# Fork: 3 of 3
# Warmup Iteration   1: n = 7, mean = 148 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 119, 138, 207, 207, 207, 207, 207, 207 ms/op
# Warmup Iteration   2: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 116, 175, 175, 175, 175, 175, 175 ms/op
# Warmup Iteration   3: n = 9, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 106, 187, 187, 187, 187, 187, 187 ms/op
Iteration   1: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 118, 122, 169, 169, 169, 169, 169, 169 ms/op
Iteration   2: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 105, 128, 130, 130, 130, 130, 130 ms/op
Iteration   3: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 103, 104, 104, 104, 104, 104, 104 ms/op


Result "readRev":
  N = 80
  mean =    118.845 ±(99.9%) 7.077 ms/op

  Histogram, ms/op:
    [100.000, 105.000) = 20 
    [105.000, 110.000) = 8 
    [110.000, 115.000) = 17 
    [115.000, 120.000) = 6 
    [120.000, 125.000) = 7 
    [125.000, 130.000) = 11 
    [130.000, 135.000) = 2 
    [135.000, 140.000) = 2 
    [140.000, 145.000) = 1 
    [145.000, 150.000) = 0 
    [150.000, 155.000) = 0 
    [155.000, 160.000) = 1 
    [160.000, 165.000) = 0 
    [165.000, 170.000) = 1 
    [170.000, 175.000) = 2 
    [175.000, 180.000) = 0 
    [180.000, 185.000) = 2 

  Percentiles, ms/op:
      p(0.0000) =    101.319 ms/op
     p(50.0000) =    113.115 ms/op
     p(90.0000) =    136.236 ms/op
     p(95.0000) =    171.822 ms/op
     p(99.0000) =    180.617 ms/op
     p(99.9000) =    180.617 ms/op
     p(99.9900) =    180.617 ms/op
     p(99.9990) =    180.617 ms/op
     p(99.9999) =    180.617 ms/op
    p(100.0000) =    180.617 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readRev
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 65.34% complete, ETA 00:47:42
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 138 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 137, 176, 176, 176, 176, 176, 176 ms/op
# Warmup Iteration   2: n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 108, 114, 122, 122, 122, 122, 122, 122 ms/op
# Warmup Iteration   3: n = 7, mean = 149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 136, 180, 180, 180, 180, 180, 180 ms/op
Iteration   1: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 108, 122, 138, 138, 138, 138, 138, 138 ms/op
Iteration   2: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 108, 191, 191, 191, 191, 191, 191 ms/op
Iteration   3: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 108, 172, 172, 172, 172, 172, 172 ms/op

# Run progress: 65.53% complete, ETA 00:47:29
# Fork: 2 of 3
# Warmup Iteration   1: n = 8, mean = 137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 114, 124, 207, 207, 207, 207, 207, 207 ms/op
# Warmup Iteration   2: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 115, 122, 177, 177, 177, 177, 177, 177 ms/op
# Warmup Iteration   3: n = 7, mean = 145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 136, 191, 191, 191, 191, 191, 191 ms/op
Iteration   1: n = 8, mean = 139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 123, 209, 209, 209, 209, 209, 209 ms/op
Iteration   2: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 108, 110, 177, 177, 177, 177, 177, 177 ms/op
Iteration   3: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 112, 118, 185, 185, 185, 185, 185, 185 ms/op

# Run progress: 65.72% complete, ETA 00:47:15
# Fork: 3 of 3
# Warmup Iteration   1: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 117, 122, 224, 224, 224, 224, 224, 224 ms/op
# Warmup Iteration   2: n = 9, mean = 123 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 117, 181, 181, 181, 181, 181, 181 ms/op
# Warmup Iteration   3: n = 10, mean = 114 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 104, 186, 195, 195, 195, 195, 195 ms/op
Iteration   1: n = 8, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 118, 121, 179, 179, 179, 179, 179, 179 ms/op
Iteration   2: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 117, 118, 176, 176, 176, 176, 176, 176 ms/op
Iteration   3: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 119, 120, 178, 178, 178, 178, 178, 178 ms/op


Result "readRev":
  N = 76
  mean =    126.126 ±(99.9%) 9.092 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 22 
    [112.500, 125.000) = 36 
    [125.000, 137.500) = 4 
    [137.500, 150.000) = 4 
    [150.000, 162.500) = 0 
    [162.500, 175.000) = 3 
    [175.000, 187.500) = 5 
    [187.500, 200.000) = 1 
    [200.000, 212.500) = 1 
    [212.500, 225.000) = 0 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 0 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    106.562 ms/op
     p(50.0000) =    120.193 ms/op
     p(90.0000) =    173.434 ms/op
     p(95.0000) =    180.172 ms/op
     p(99.0000) =    209.191 ms/op
     p(99.9000) =    209.191 ms/op
     p(99.9900) =    209.191 ms/op
     p(99.9990) =    209.191 ms/op
     p(99.9999) =    209.191 ms/op
    p(100.0000) =    209.191 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 65.91% complete, ETA 00:47:01
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 107, 116, 194, 194, 194, 194, 194, 194 ms/op
# Warmup Iteration   2: n = 9, mean = 120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 115, 170, 170, 170, 170, 170, 170 ms/op
# Warmup Iteration   3: n = 10, mean = 110 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 101, 165, 168, 168, 168, 168, 168 ms/op
Iteration   1: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 117, 181, 181, 181, 181, 181, 181 ms/op
Iteration   2: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 102, 120, 121, 121, 121, 121, 121 ms/op
Iteration   3: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 102, 104, 104, 104, 104, 104, 104 ms/op

# Run progress: 66.10% complete, ETA 00:46:47
# Fork: 2 of 3
# Warmup Iteration   1: n = 6, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 164, 223, 223, 223, 223, 223, 223 ms/op
# Warmup Iteration   2: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 108, 133, 133, 133, 133, 133, 133 ms/op
# Warmup Iteration   3: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 103, 106, 106, 106, 106, 106, 106 ms/op
Iteration   1: n = 8, mean = 137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 126, 185, 185, 185, 185, 185, 185 ms/op
Iteration   2: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 104, 118, 118, 118, 118, 118, 118 ms/op
Iteration   3: n = 10, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 100, 171, 171, 171, 171, 171, 171 ms/op

# Run progress: 66.29% complete, ETA 00:46:33
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 108, 114, 200, 200, 200, 200, 200, 200 ms/op
# Warmup Iteration   2: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 110, 174, 174, 174, 174, 174, 174 ms/op
# Warmup Iteration   3: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 97, 100, 162, 165, 165, 165, 165, 165 ms/op
Iteration   1: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 162, 177, 177, 177, 177, 177, 177 ms/op
Iteration   2: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 114, 177, 177, 177, 177, 177, 177 ms/op
Iteration   3: n = 10, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 99, 104, 105, 105, 105, 105, 105 ms/op


Result "readSeq":
  N = 82
  mean =    115.735 ±(99.9%) 8.995 ms/op

  Histogram, ms/op:
    [ 90.000, 100.000) = 15 
    [100.000, 110.000) = 33 
    [110.000, 120.000) = 15 
    [120.000, 130.000) = 7 
    [130.000, 140.000) = 1 
    [140.000, 150.000) = 0 
    [150.000, 160.000) = 1 
    [160.000, 170.000) = 4 
    [170.000, 180.000) = 4 

  Percentiles, ms/op:
      p(0.0000) =     95.683 ms/op
     p(50.0000) =    104.333 ms/op
     p(90.0000) =    168.087 ms/op
     p(95.0000) =    177.131 ms/op
     p(99.0000) =    184.549 ms/op
     p(99.9000) =    184.549 ms/op
     p(99.9900) =    184.549 ms/op
     p(99.9990) =    184.549 ms/op
     p(99.9999) =    184.549 ms/op
    p(100.0000) =    184.549 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 66.48% complete, ETA 00:46:19
# Fork: 1 of 3
# Warmup Iteration   1: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 105, 167, 167, 167, 167, 167, 167 ms/op
# Warmup Iteration   2: n = 11, mean = 97 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 81, 91, 139, 150, 150, 150, 150, 150 ms/op
# Warmup Iteration   3: n = 9, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 92, 92, 154, 154, 154, 154, 154, 154 ms/op
Iteration   1: n = 11, mean = 99 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 87, 92, 145, 156, 156, 156, 156, 156 ms/op
Iteration   2: n = 12, mean = 86 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 84, 85, 93, 95, 95, 95, 95, 95 ms/op
Iteration   3: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 93, 106, 150, 155, 155, 155, 155, 155 ms/op

# Run progress: 66.67% complete, ETA 00:46:03
# Fork: 2 of 3
# Warmup Iteration   1: n = 10, mean = 106 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 101, 122, 123, 123, 123, 123, 123 ms/op
# Warmup Iteration   2: n = 8, mean = 139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 117, 131, 171, 171, 171, 171, 171, 171 ms/op
# Warmup Iteration   3: n = 8, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 114, 119, 178, 178, 178, 178, 178, 178 ms/op
Iteration   1: n = 9, mean = 121 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 114, 178, 178, 178, 178, 178, 178 ms/op
Iteration   2: n = 10, mean = 102 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 101, 107, 107, 107, 107, 107, 107 ms/op
Iteration   3: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 103, 118, 173, 173, 173, 173, 173, 173 ms/op

# Run progress: 66.86% complete, ETA 00:45:49
# Fork: 3 of 3
# Warmup Iteration   1: n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 96, 197, 197, 197, 197, 197, 197 ms/op
# Warmup Iteration   2: n = 10, mean = 103 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 104, 110, 111, 111, 111, 111, 111 ms/op
# Warmup Iteration   3: n = 8, mean = 137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 118, 134, 180, 180, 180, 180, 180, 180 ms/op
Iteration   1: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 118, 119, 159, 159, 159, 159, 159, 159 ms/op
Iteration   2: n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 108, 136, 136, 136, 136, 136, 136 ms/op
Iteration   3: n = 10, mean = 105 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 97, 107, 109, 110, 110, 110, 110, 110 ms/op


Result "readSeq":
  N = 88
  mean =    108.023 ±(99.9%) 6.812 ms/op

  Histogram, ms/op:
    [ 80.000,  90.000) = 12 
    [ 90.000, 100.000) = 12 
    [100.000, 110.000) = 35 
    [110.000, 120.000) = 18 
    [120.000, 130.000) = 3 
    [130.000, 140.000) = 2 
    [140.000, 150.000) = 1 
    [150.000, 160.000) = 3 
    [160.000, 170.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =     84.148 ms/op
     p(50.0000) =    105.644 ms/op
     p(90.0000) =    127.376 ms/op
     p(95.0000) =    155.504 ms/op
     p(99.0000) =    178.258 ms/op
     p(99.9000) =    178.258 ms/op
     p(99.9900) =    178.258 ms/op
     p(99.9990) =    178.258 ms/op
     p(99.9999) =    178.258 ms/op
    p(100.0000) =    178.258 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 67.05% complete, ETA 00:45:35
# Fork: 1 of 3
# Warmup Iteration   1: n = 8, mean = 145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 132, 200, 200, 200, 200, 200, 200 ms/op
# Warmup Iteration   2: n = 10, mean = 109 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 111, 117, 117, 117, 117, 117, 117 ms/op
# Warmup Iteration   3: n = 11, mean = 100 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 98, 99, 104, 105, 105, 105, 105, 105 ms/op
Iteration   1: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 101, 114, 172, 172, 172, 172, 172, 172 ms/op
Iteration   2: n = 9, mean = 118 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 112, 169, 169, 169, 169, 169, 169 ms/op
Iteration   3: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 100, 165, 165, 165, 165, 165, 165 ms/op

# Run progress: 67.23% complete, ETA 00:45:21
# Fork: 2 of 3
# Warmup Iteration   1: n = 8, mean = 138 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 133, 158, 158, 158, 158, 158, 158 ms/op
# Warmup Iteration   2: n = 10, mean = 108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 102, 108, 115, 115, 115, 115, 115, 115 ms/op
# Warmup Iteration   3: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 117, 175, 175, 175, 175, 175, 175 ms/op
Iteration   1: n = 9, mean = 123 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 113, 168, 168, 168, 168, 168, 168 ms/op
Iteration   2: n = 8, mean = 126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 116, 122, 168, 168, 168, 168, 168, 168 ms/op
Iteration   3: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 105, 110, 125, 125, 125, 125, 125, 125 ms/op

# Run progress: 67.42% complete, ETA 00:45:08
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 140 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 114, 135, 195, 195, 195, 195, 195, 195 ms/op
# Warmup Iteration   2: n = 9, mean = 122 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 104, 119, 162, 162, 162, 162, 162, 162 ms/op
# Warmup Iteration   3: n = 8, mean = 130 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 112, 125, 174, 174, 174, 174, 174, 174 ms/op
Iteration   1: n = 8, mean = 136 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 118, 125, 179, 179, 179, 179, 179, 179 ms/op
Iteration   2: n = 9, mean = 112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 106, 109, 120, 120, 120, 120, 120, 120 ms/op
Iteration   3: n = 10, mean = 107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 106, 115, 115, 115, 115, 115, 115 ms/op


Result "readSeq":
  N = 80
  mean =    117.873 ±(99.9%) 7.077 ms/op

  Histogram, ms/op:
    [ 90.000,  95.000) = 0 
    [ 95.000, 100.000) = 5 
    [100.000, 105.000) = 7 
    [105.000, 110.000) = 17 
    [110.000, 115.000) = 17 
    [115.000, 120.000) = 11 
    [120.000, 125.000) = 10 
    [125.000, 130.000) = 5 
    [130.000, 135.000) = 0 
    [135.000, 140.000) = 0 
    [140.000, 145.000) = 1 
    [145.000, 150.000) = 0 
    [150.000, 155.000) = 0 
    [155.000, 160.000) = 0 
    [160.000, 165.000) = 1 
    [165.000, 170.000) = 3 
    [170.000, 175.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     99.090 ms/op
     p(50.0000) =    113.181 ms/op
     p(90.0000) =    141.872 ms/op
     p(95.0000) =    169.279 ms/op
     p(99.0000) =    179.044 ms/op
     p(99.9000) =    179.044 ms/op
     p(99.9900) =    179.044 ms/op
     p(99.9990) =    179.044 ms/op
     p(99.9999) =    179.044 ms/op
    p(100.0000) =    179.044 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 67.61% complete, ETA 00:44:54
# Fork: 1 of 3
# Warmup Iteration   1: n = 10, mean = 104 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 100, 123, 125, 125, 125, 125, 125 ms/op
# Warmup Iteration   2: n = 9, mean = 119 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 112, 170, 170, 170, 170, 170, 170 ms/op
# Warmup Iteration   3: n = 9, mean = 116 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 99, 104, 173, 173, 173, 173, 173, 173 ms/op
Iteration   1: n = 9, mean = 111 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 100, 175, 175, 175, 175, 175, 175 ms/op
Iteration   2: n = 8, mean = 125 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 113, 113, 202, 202, 202, 202, 202, 202 ms/op
Iteration   3: n = 9, mean = 115 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 100, 113, 163, 163, 163, 163, 163, 163 ms/op

# Run progress: 67.80% complete, ETA 00:44:40
# Fork: 2 of 3
# Warmup Iteration   1: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 109, 160, 160, 160, 160, 160, 160 ms/op
# Warmup Iteration   2: n = 9, mean = 125 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 108, 109, 168, 168, 168, 168, 168, 168 ms/op
# Warmup Iteration   3: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 110, 129, 171, 171, 171, 171, 171, 171 ms/op
Iteration   1: n = 10, mean = 101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 96, 111, 111, 111, 111, 111, 111 ms/op
Iteration   2: n = 11, mean = 99 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 96, 98, 109, 111, 111, 111, 111, 111 ms/op
Iteration   3: n = 11, mean = 97 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 95, 98, 98, 98, 98, 98, 98, 98 ms/op

# Run progress: 67.99% complete, ETA 00:44:26
# Fork: 3 of 3
# Warmup Iteration   1: n = 9, mean = 113 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 109, 109, 135, 135, 135, 135, 135, 135 ms/op
# Warmup Iteration   2: n = 8, mean = 140 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 125, 187, 187, 187, 187, 187, 187 ms/op
# Warmup Iteration   3: n = 7, mean = 143 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 131, 185, 185, 185, 185, 185, 185 ms/op
Iteration   1: n = 8, mean = 138 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 126, 184, 184, 184, 184, 184, 184 ms/op
Iteration   2: n = 7, mean = 155 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 141, 262, 262, 262, 262, 262, 262 ms/op
Iteration   3: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 109, 124, 176, 176, 176, 176, 176, 176 ms/op


Result "readSeq":
  N = 81
  mean =    116.623 ±(99.9%) 10.670 ms/op

  Histogram, ms/op:
    [  0.000,  25.000) = 0 
    [ 25.000,  50.000) = 0 
    [ 50.000,  75.000) = 0 
    [ 75.000, 100.000) = 28 
    [100.000, 125.000) = 39 
    [125.000, 150.000) = 5 
    [150.000, 175.000) = 4 
    [175.000, 200.000) = 3 
    [200.000, 225.000) = 1 
    [225.000, 250.000) = 0 
    [250.000, 275.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =     94.896 ms/op
     p(50.0000) =    110.363 ms/op
     p(90.0000) =    152.515 ms/op
     p(95.0000) =    175.846 ms/op
     p(99.0000) =    262.406 ms/op
     p(99.9000) =    262.406 ms/op
     p(99.9900) =    262.406 ms/op
     p(99.9990) =    262.406 ms/op
     p(99.9999) =    262.406 ms/op
    p(100.0000) =    262.406 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 68.18% complete, ETA 00:44:12
# Fork: 1 of 3
# Warmup Iteration   1: n = 6, mean = 184 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 160, 162, 244, 244, 244, 244, 244, 244 ms/op
# Warmup Iteration   2: n = 7, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 142, 153, 217, 217, 217, 217, 217, 217 ms/op
# Warmup Iteration   3: n = 7, mean = 166 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 149, 153, 222, 222, 222, 222, 222, 222 ms/op
Iteration   1: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 136, 138, 177, 177, 177, 177, 177, 177 ms/op
Iteration   2: n = 7, mean = 159 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 153, 212, 212, 212, 212, 212, 212 ms/op
Iteration   3: n = 8, mean = 138 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 135, 138, 142, 142, 142, 142, 142, 142 ms/op

# Run progress: 68.37% complete, ETA 00:43:58
# Fork: 2 of 3
# Warmup Iteration   1: n = 8, mean = 140 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 129, 207, 207, 207, 207, 207, 207 ms/op
# Warmup Iteration   2: n = 8, mean = 131 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 133, 135, 135, 135, 135, 135, 135 ms/op
# Warmup Iteration   3: n = 7, mean = 164 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 147, 158, 206, 206, 206, 206, 206, 206 ms/op
Iteration   1: n = 7, mean = 172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 152, 157, 215, 215, 215, 215, 215, 215 ms/op
Iteration   2: n = 7, mean = 149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 152, 160, 160, 160, 160, 160, 160 ms/op
Iteration   3: n = 7, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 139, 238, 238, 238, 238, 238, 238 ms/op

# Run progress: 68.56% complete, ETA 00:43:44
# Fork: 3 of 3
# Warmup Iteration   1: n = 7, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 134, 256, 256, 256, 256, 256, 256 ms/op
# Warmup Iteration   2: n = 9, mean = 123 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 122, 123, 124, 124, 124, 124, 124, 124 ms/op
# Warmup Iteration   3: n = 7, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 149, 210, 210, 210, 210, 210, 210 ms/op
Iteration   1: n = 8, mean = 125 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 123, 133, 133, 133, 133, 133, 133 ms/op
Iteration   2: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 129, 134, 134, 134, 134, 134, 134 ms/op
Iteration   3: n = 8, mean = 133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 133, 139, 139, 139, 139, 139, 139 ms/op


Result "readXxh64":
  N = 67
  mean =    144.479 ±(99.9%) 9.868 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 9 
    [125.000, 137.500) = 23 
    [137.500, 150.000) = 15 
    [150.000, 162.500) = 14 
    [162.500, 175.000) = 0 
    [175.000, 187.500) = 1 
    [187.500, 200.000) = 1 
    [200.000, 212.500) = 1 
    [212.500, 225.000) = 2 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 1 
    [250.000, 262.500) = 0 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    122.946 ms/op
     p(50.0000) =    137.626 ms/op
     p(90.0000) =    163.683 ms/op
     p(95.0000) =    212.756 ms/op
     p(99.0000) =    238.289 ms/op
     p(99.9000) =    238.289 ms/op
     p(99.9900) =    238.289 ms/op
     p(99.9990) =    238.289 ms/op
     p(99.9999) =    238.289 ms/op
    p(100.0000) =    238.289 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 68.75% complete, ETA 00:43:29
# Fork: 1 of 3
# Warmup Iteration   1: n = 7, mean = 145 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 129, 212, 212, 212, 212, 212, 212 ms/op
# Warmup Iteration   2: n = 7, mean = 152 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 149, 204, 204, 204, 204, 204, 204 ms/op
# Warmup Iteration   3: n = 6, mean = 173 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 164, 217, 217, 217, 217, 217, 217 ms/op
Iteration   1: n = 6, mean = 170 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 154, 220, 220, 220, 220, 220, 220 ms/op
Iteration   2: n = 7, mean = 163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 140, 150, 240, 240, 240, 240, 240, 240 ms/op
Iteration   3: n = 8, mean = 125 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 124, 125, 127, 127, 127, 127, 127, 127 ms/op

# Run progress: 68.94% complete, ETA 00:43:14
# Fork: 2 of 3
# Warmup Iteration   1: n = 7, mean = 148 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 136, 192, 192, 192, 192, 192, 192 ms/op
# Warmup Iteration   2: n = 8, mean = 139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 139, 178, 178, 178, 178, 178, 178 ms/op
# Warmup Iteration   3: n = 7, mean = 149 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 141, 199, 199, 199, 199, 199, 199 ms/op
Iteration   1: n = 8, mean = 127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 126, 127, 129, 129, 129, 129, 129, 129 ms/op
Iteration   2: n = 8, mean = 126 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 127, 127, 127, 127, 127, 127, 127 ms/op
Iteration   3: n = 7, mean = 151 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 123, 141, 252, 252, 252, 252, 252, 252 ms/op

# Run progress: 69.13% complete, ETA 00:42:59
# Fork: 3 of 3
# Warmup Iteration   1: n = 8, mean = 140 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 129, 198, 198, 198, 198, 198, 198 ms/op
# Warmup Iteration   2: n = 8, mean = 129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 128, 135, 135, 135, 135, 135, 135 ms/op
# Warmup Iteration   3: n = 6, mean = 182 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 144, 178, 233, 233, 233, 233, 233, 233 ms/op
Iteration   1: n = 7, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 129, 144, 153, 153, 153, 153, 153, 153 ms/op
Iteration   2: n = 8, mean = 134 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 128, 133, 152, 152, 152, 152, 152, 152 ms/op
Iteration   3: n = 8, mean = 128 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 127, 128, 129, 129, 129, 129, 129, 129 ms/op


Result "readXxh64":
  N = 67
  mean =    139.353 ±(99.9%) 10.811 ms/op

  Histogram, ms/op:
    [100.000, 112.500) = 0 
    [112.500, 125.000) = 10 
    [125.000, 137.500) = 33 
    [137.500, 150.000) = 14 
    [150.000, 162.500) = 5 
    [162.500, 175.000) = 1 
    [175.000, 187.500) = 0 
    [187.500, 200.000) = 0 
    [200.000, 212.500) = 1 
    [212.500, 225.000) = 1 
    [225.000, 237.500) = 0 
    [237.500, 250.000) = 1 
    [250.000, 262.500) = 1 
    [262.500, 275.000) = 0 
    [275.000, 287.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    123.339 ms/op
     p(50.0000) =    127.664 ms/op
     p(90.0000) =    161.533 ms/op
     p(95.0000) =    215.797 ms/op
     p(99.0000) =    252.183 ms/op
     p(99.9000) =    252.183 ms/op
     p(99.9900) =    252.183 ms/op
     p(99.9990) =    252.183 ms/op
     p(99.9999) =    252.183 ms/op
    p(100.0000) =    252.183 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 69.32% complete, ETA 00:42:45
# Fork: 1 of 3
# Warmup Iteration   1: n = 7, mean = 160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 148, 245, 245, 245, 245, 245, 245 ms/op
# Warmup Iteration   2: n = 8, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 131, 133, 133, 133, 133, 133, 133 ms/op
# Warmup Iteration   3: n = 6, mean = 178 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 159, 165, 212, 212, 212, 212, 212, 212 ms/op
Iteration   1: n = 7, mean = 146 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 148, 159, 159, 159, 159, 159, 159 ms/op
Iteration   2: n = 8, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 132, 136, 136, 136, 136, 136, 136 ms/op
Iteration   3: n = 8, mean = 144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 131, 202, 202, 202, 202, 202, 202 ms/op

# Run progress: 69.51% complete, ETA 00:42:30
# Fork: 2 of 3
# Warmup Iteration   1: n = 7, mean = 147 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 142, 176, 176, 176, 176, 176, 176 ms/op
# Warmup Iteration   2: n = 8, mean = 142 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 140, 141, 153, 153, 153, 153, 153, 153 ms/op
# Warmup Iteration   3: n = 6, mean = 181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 158, 163, 222, 222, 222, 222, 222, 222 ms/op
Iteration   1: n = 6, mean = 177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 157, 168, 204, 204, 204, 204, 204, 204 ms/op
Iteration   2: n = 6, mean = 179 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 158, 164, 220, 220, 220, 220, 220, 220 ms/op
Iteration   3: n = 7, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 144, 206, 206, 206, 206, 206, 206 ms/op

# Run progress: 69.70% complete, ETA 00:42:17
# Fork: 3 of 3
# Warmup Iteration   1: n = 6, mean = 182 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 155, 161, 250, 250, 250, 250, 250, 250 ms/op
# Warmup Iteration   2: n = 6, mean = 181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 156, 162, 230, 230, 230, 230, 230, 230 ms/op
# Warmup Iteration   3: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 160, 166, 213, 213, 213, 213, 213, 213 ms/op
Iteration   1: n = 6, mean = 169 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 152, 158, 215, 215, 215, 215, 215, 215 ms/op
Iteration   2: n = 7, mean = 165 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 139, 166, 203, 203, 203, 203, 203, 203 ms/op
Iteration   3: n = 7, mean = 150 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 149, 157, 157, 157, 157, 157, 157 ms/op


Result "readXxh64":
  N = 62
  mean =    156.052 ±(99.9%) 10.546 ms/op

  Histogram, ms/op:
    [130.000, 135.000) = 14 
    [135.000, 140.000) = 3 
    [140.000, 145.000) = 7 
    [145.000, 150.000) = 7 
    [150.000, 155.000) = 2 
    [155.000, 160.000) = 10 
    [160.000, 165.000) = 5 
    [165.000, 170.000) = 2 
    [170.000, 175.000) = 2 
    [175.000, 180.000) = 1 
    [180.000, 185.000) = 1 
    [185.000, 190.000) = 0 
    [190.000, 195.000) = 0 
    [195.000, 200.000) = 0 
    [200.000, 205.000) = 4 
    [205.000, 210.000) = 2 
    [210.000, 215.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    130.810 ms/op
     p(50.0000) =    150.602 ms/op
     p(90.0000) =    203.004 ms/op
     p(95.0000) =    208.496 ms/op
     p(99.0000) =    219.677 ms/op
     p(99.9000) =    219.677 ms/op
     p(99.9900) =    219.677 ms/op
     p(99.9990) =    219.677 ms/op
     p(99.9999) =    219.677 ms/op
    p(100.0000) =    219.677 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 69.89% complete, ETA 00:42:03
# Fork: 1 of 3
# Warmup Iteration   1: n = 7, mean = 172 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 141, 149, 248, 248, 248, 248, 248, 248 ms/op
# Warmup Iteration   2: n = 7, mean = 155 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 148, 214, 214, 214, 214, 214, 214 ms/op
# Warmup Iteration   3: n = 7, mean = 157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 139, 149, 212, 212, 212, 212, 212, 212 ms/op
Iteration   1: n = 7, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 138, 145, 209, 209, 209, 209, 209, 209 ms/op
Iteration   2: n = 7, mean = 158 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 150, 189, 189, 189, 189, 189, 189 ms/op
Iteration   3: n = 8, mean = 135 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 133, 143, 143, 143, 143, 143, 143 ms/op

# Run progress: 70.08% complete, ETA 00:41:48
# Fork: 2 of 3
# Warmup Iteration   1: n = 8, mean = 141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 137, 168, 168, 168, 168, 168, 168 ms/op
# Warmup Iteration   2: n = 8, mean = 139 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 130, 132, 190, 190, 190, 190, 190, 190 ms/op
# Warmup Iteration   3: n = 6, mean = 175 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 148, 157, 225, 225, 225, 225, 225, 225 ms/op
Iteration   1: n = 8, mean = 140 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 138, 149, 149, 149, 149, 149, 149 ms/op
Iteration   2: n = 7, mean = 154 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 149, 208, 208, 208, 208, 208, 208 ms/op
Iteration   3: n = 8, mean = 132 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 131, 132, 134, 134, 134, 134, 134, 134 ms/op

# Run progress: 70.27% complete, ETA 00:41:34
# Fork: 3 of 3
# Warmup Iteration   1: n = 7, mean = 161 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 149, 246, 246, 246, 246, 246, 246 ms/op
# Warmup Iteration   2: n = 7, mean = 156 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 133, 148, 215, 215, 215, 215, 215, 215 ms/op
# Warmup Iteration   3: n = 7, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 137, 207, 207, 207, 207, 207, 207 ms/op
Iteration   1: n = 8, mean = 141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 139, 151, 151, 151, 151, 151, 151 ms/op
Iteration   2: n = 7, mean = 153 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 132, 153, 211, 211, 211, 211, 211, 211 ms/op
Iteration   3: n = 8, mean = 141 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 134, 137, 153, 153, 153, 153, 153, 153 ms/op


Result "readXxh64":
  N = 68
  mean =    144.694 ±(99.9%) 7.422 ms/op

  Histogram, ms/op:
    [130.000, 135.000) = 26 
    [135.000, 140.000) = 10 
    [140.000, 145.000) = 4 
    [145.000, 150.000) = 17 
    [150.000, 155.000) = 5 
    [155.000, 160.000) = 1 
    [160.000, 165.000) = 0 
    [165.000, 170.000) = 0 
    [170.000, 175.000) = 0 
    [175.000, 180.000) = 0 
    [180.000, 185.000) = 0 
    [185.000, 190.000) = 2 
    [190.000, 195.000) = 0 
    [195.000, 200.000) = 0 
    [200.000, 205.000) = 0 
    [205.000, 210.000) = 2 
    [210.000, 215.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    131.203 ms/op
     p(50.0000) =    139.067 ms/op
     p(90.0000) =    153.354 ms/op
     p(95.0000) =    199.387 ms/op
     p(99.0000) =    211.026 ms/op
     p(99.9000) =    211.026 ms/op
     p(99.9900) =    211.026 ms/op
     p(99.9990) =    211.026 ms/op
     p(99.9999) =    211.026 ms/op
    p(100.0000) =    211.026 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.write
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 70.45% complete, ETA 00:41:20
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 11157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11157, 11157, 11157, 11157, 11157, 11157, 11157, 11157 ms/op
# Warmup Iteration   2: n = 1, mean = 9680 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9680, 9680, 9680, 9680, 9680, 9680, 9680, 9680 ms/op
# Warmup Iteration   3: n = 1, mean = 8212 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8212, 8212, 8212, 8212, 8212, 8212, 8212, 8212 ms/op
Iteration   1: n = 1, mean = 8137 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8137, 8137, 8137, 8137, 8137, 8137, 8137, 8137 ms/op
Iteration   2: n = 1, mean = 9026 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9026, 9026, 9026, 9026, 9026, 9026, 9026, 9026 ms/op
Iteration   3: n = 1, mean = 9764 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9764, 9764, 9764, 9764, 9764, 9764, 9764, 9764 ms/op

# Run progress: 70.64% complete, ETA 00:41:21
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 11593 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11593, 11593, 11593, 11593, 11593, 11593, 11593, 11593 ms/op
# Warmup Iteration   2: n = 1, mean = 10217 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10217, 10217, 10217, 10217, 10217, 10217, 10217, 10217 ms/op
# Warmup Iteration   3: n = 1, mean = 8120 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8120, 8120, 8120, 8120, 8120, 8120, 8120, 8120 ms/op
Iteration   1: n = 1, mean = 8691 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8691, 8691, 8691, 8691, 8691, 8691, 8691, 8691 ms/op
Iteration   2: n = 1, mean = 8976 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8976, 8976, 8976, 8976, 8976, 8976, 8976, 8976 ms/op
Iteration   3: n = 1, mean = 9647 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9647, 9647, 9647, 9647, 9647, 9647, 9647, 9647 ms/op

# Run progress: 70.83% complete, ETA 00:41:23
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 10737 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10737, 10737, 10737, 10737, 10737, 10737, 10737, 10737 ms/op
# Warmup Iteration   2: n = 1, mean = 10133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10133, 10133, 10133, 10133, 10133, 10133, 10133, 10133 ms/op
# Warmup Iteration   3: n = 1, mean = 8389 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8389, 8389, 8389, 8389, 8389, 8389, 8389, 8389 ms/op
Iteration   1: n = 1, mean = 9043 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9043, 9043, 9043, 9043, 9043, 9043, 9043, 9043 ms/op
Iteration   2: n = 1, mean = 8288 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8288, 8288, 8288, 8288, 8288, 8288, 8288, 8288 ms/op
Iteration   3: n = 1, mean = 9060 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9060, 9060, 9060, 9060, 9060, 9060, 9060, 9060 ms/op


Result "write":
  N = 9
  mean =   8959.033 ±(99.9%) 909.198 ms/op

  Histogram, ms/op:
    [ 8000.000,  8125.000) = 0 
    [ 8125.000,  8250.000) = 1 
    [ 8250.000,  8375.000) = 1 
    [ 8375.000,  8500.000) = 0 
    [ 8500.000,  8625.000) = 0 
    [ 8625.000,  8750.000) = 1 
    [ 8750.000,  8875.000) = 0 
    [ 8875.000,  9000.000) = 1 
    [ 9000.000,  9125.000) = 3 
    [ 9125.000,  9250.000) = 0 
    [ 9250.000,  9375.000) = 0 
    [ 9375.000,  9500.000) = 0 
    [ 9500.000,  9625.000) = 0 
    [ 9625.000,  9750.000) = 1 
    [ 9750.000,  9875.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   8136.950 ms/op
     p(50.0000) =   9026.142 ms/op
     p(90.0000) =   9764.340 ms/op
     p(95.0000) =   9764.340 ms/op
     p(99.0000) =   9764.340 ms/op
     p(99.9000) =   9764.340 ms/op
     p(99.9900) =   9764.340 ms/op
     p(99.9990) =   9764.340 ms/op
     p(99.9999) =   9764.340 ms/op
    p(100.0000) =   9764.340 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.write
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 71.02% complete, ETA 00:41:24
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 11023 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11023, 11023, 11023, 11023, 11023, 11023, 11023, 11023 ms/op
# Warmup Iteration   2: n = 1, mean = 10335 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10335, 10335, 10335, 10335, 10335, 10335, 10335, 10335 ms/op
# Warmup Iteration   3: n = 1, mean = 8556 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8556, 8556, 8556, 8556, 8556, 8556, 8556, 8556 ms/op
Iteration   1: n = 1, mean = 8431 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8431, 8431, 8431, 8431, 8431, 8431, 8431, 8431 ms/op
Iteration   2: n = 1, mean = 9429 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9429, 9429, 9429, 9429, 9429, 9429, 9429, 9429 ms/op
Iteration   3: n = 1, mean = 8087 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8087, 8087, 8087, 8087, 8087, 8087, 8087, 8087 ms/op

# Run progress: 71.21% complete, ETA 00:41:24
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 10687 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10687, 10687, 10687, 10687, 10687, 10687, 10687, 10687 ms/op
# Warmup Iteration   2: n = 1, mean = 10284 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10284, 10284, 10284, 10284, 10284, 10284, 10284, 10284 ms/op
# Warmup Iteration   3: n = 1, mean = 8498 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8498, 8498, 8498, 8498, 8498, 8498, 8498, 8498 ms/op
Iteration   1: n = 1, mean = 8321 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8321, 8321, 8321, 8321, 8321, 8321, 8321, 8321 ms/op
Iteration   2: n = 1, mean = 8741 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8741, 8741, 8741, 8741, 8741, 8741, 8741, 8741 ms/op
Iteration   3: n = 1, mean = 9848 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9848, 9848, 9848, 9848, 9848, 9848, 9848, 9848 ms/op

# Run progress: 71.40% complete, ETA 00:41:25
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 10905 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10905, 10905, 10905, 10905, 10905, 10905, 10905, 10905 ms/op
# Warmup Iteration   2: n = 1, mean = 10553 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10553, 10553, 10553, 10553, 10553, 10553, 10553, 10553 ms/op
# Warmup Iteration   3: n = 1, mean = 8707 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8707, 8707, 8707, 8707, 8707, 8707, 8707, 8707 ms/op
Iteration   1: n = 1, mean = 8254 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8254, 8254, 8254, 8254, 8254, 8254, 8254, 8254 ms/op
Iteration   2: n = 1, mean = 9211 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9211, 9211, 9211, 9211, 9211, 9211, 9211, 9211 ms/op
Iteration   3: n = 1, mean = 9127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9127, 9127, 9127, 9127, 9127, 9127, 9127, 9127 ms/op


Result "write":
  N = 9
  mean =   8827.612 ±(99.9%) 1018.418 ms/op

  Histogram, ms/op:
    [ 8000.000,  8125.000) = 1 
    [ 8125.000,  8250.000) = 0 
    [ 8250.000,  8375.000) = 2 
    [ 8375.000,  8500.000) = 1 
    [ 8500.000,  8625.000) = 0 
    [ 8625.000,  8750.000) = 1 
    [ 8750.000,  8875.000) = 0 
    [ 8875.000,  9000.000) = 0 
    [ 9000.000,  9125.000) = 0 
    [ 9125.000,  9250.000) = 2 
    [ 9250.000,  9375.000) = 0 
    [ 9375.000,  9500.000) = 1 
    [ 9500.000,  9625.000) = 0 
    [ 9625.000,  9750.000) = 0 
    [ 9750.000,  9875.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   8086.618 ms/op
     p(50.0000) =   8740.930 ms/op
     p(90.0000) =   9848.226 ms/op
     p(95.0000) =   9848.226 ms/op
     p(99.0000) =   9848.226 ms/op
     p(99.9000) =   9848.226 ms/op
     p(99.9900) =   9848.226 ms/op
     p(99.9990) =   9848.226 ms/op
     p(99.9999) =   9848.226 ms/op
    p(100.0000) =   9848.226 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.write
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 71.59% complete, ETA 00:41:25
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 12818 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12818, 12818, 12818, 12818, 12818, 12818, 12818, 12818 ms/op
# Warmup Iteration   2: n = 1, mean = 12012 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12012, 12012, 12012, 12012, 12012, 12012, 12012, 12012 ms/op
# Warmup Iteration   3: n = 1, mean = 11543 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11543, 11543, 11543, 11543, 11543, 11543, 11543, 11543 ms/op
Iteration   1: n = 1, mean = 12012 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12012, 12012, 12012, 12012, 12012, 12012, 12012, 12012 ms/op
Iteration   2: n = 1, mean = 11492 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11492, 11492, 11492, 11492, 11492, 11492, 11492, 11492 ms/op
Iteration   3: n = 1, mean = 12616 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12616, 12616, 12616, 12616, 12616, 12616, 12616, 12616 ms/op

# Run progress: 71.78% complete, ETA 00:41:31
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 12918 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12918, 12918, 12918, 12918, 12918, 12918, 12918, 12918 ms/op
# Warmup Iteration   2: n = 1, mean = 11459 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11459, 11459, 11459, 11459, 11459, 11459, 11459, 11459 ms/op
# Warmup Iteration   3: n = 1, mean = 10888 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10888, 10888, 10888, 10888, 10888, 10888, 10888, 10888 ms/op
Iteration   1: n = 1, mean = 10570 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10570, 10570, 10570, 10570, 10570, 10570, 10570, 10570 ms/op
Iteration   2: n = 1, mean = 11140 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11140, 11140, 11140, 11140, 11140, 11140, 11140, 11140 ms/op
Iteration   3: n = 1, mean = 11895 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11895, 11895, 11895, 11895, 11895, 11895, 11895, 11895 ms/op

# Run progress: 71.97% complete, ETA 00:41:35
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 13304 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 13304, 13304, 13304, 13304, 13304, 13304, 13304, 13304 ms/op
# Warmup Iteration   2: n = 1, mean = 11878 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11878, 11878, 11878, 11878, 11878, 11878, 11878, 11878 ms/op
# Warmup Iteration   3: n = 1, mean = 12868 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12868, 12868, 12868, 12868, 12868, 12868, 12868, 12868 ms/op
Iteration   1: n = 1, mean = 13975 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 13975, 13975, 13975, 13975, 13975, 13975, 13975, 13975 ms/op
Iteration   2: n = 1, mean = 13774 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 13774, 13774, 13774, 13774, 13774, 13774, 13774, 13774 ms/op
Iteration   3: n = 1, mean = 12851 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12851, 12851, 12851, 12851, 12851, 12851, 12851, 12851 ms/op


Result "write":
  N = 9
  mean =  12258.552 ±(99.9%) 1934.974 ms/op

  Histogram, ms/op:
    [10000.000, 10250.000) = 0 
    [10250.000, 10500.000) = 0 
    [10500.000, 10750.000) = 1 
    [10750.000, 11000.000) = 0 
    [11000.000, 11250.000) = 1 
    [11250.000, 11500.000) = 1 
    [11500.000, 11750.000) = 0 
    [11750.000, 12000.000) = 1 
    [12000.000, 12250.000) = 1 
    [12250.000, 12500.000) = 0 
    [12500.000, 12750.000) = 1 
    [12750.000, 13000.000) = 1 
    [13000.000, 13250.000) = 0 
    [13250.000, 13500.000) = 0 
    [13500.000, 13750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  10569.646 ms/op
     p(50.0000) =  12012.487 ms/op
     p(90.0000) =  13975.421 ms/op
     p(95.0000) =  13975.421 ms/op
     p(99.0000) =  13975.421 ms/op
     p(99.9000) =  13975.421 ms/op
     p(99.9900) =  13975.421 ms/op
     p(99.9990) =  13975.421 ms/op
     p(99.9999) =  13975.421 ms/op
    p(100.0000) =  13975.421 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MapDb.write
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 72.16% complete, ETA 00:41:43
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 12163 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12163, 12163, 12163, 12163, 12163, 12163, 12163, 12163 ms/op
# Warmup Iteration   2: n = 1, mean = 11929 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11929, 11929, 11929, 11929, 11929, 11929, 11929, 11929 ms/op
# Warmup Iteration   3: n = 1, mean = 11442 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11442, 11442, 11442, 11442, 11442, 11442, 11442, 11442 ms/op
Iteration   1: n = 1, mean = 12918 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12918, 12918, 12918, 12918, 12918, 12918, 12918, 12918 ms/op
Iteration   2: n = 1, mean = 12415 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12415, 12415, 12415, 12415, 12415, 12415, 12415, 12415 ms/op
Iteration   3: n = 1, mean = 11962 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11962, 11962, 11962, 11962, 11962, 11962, 11962, 11962 ms/op

# Run progress: 72.35% complete, ETA 00:41:48
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 12751 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12751, 12751, 12751, 12751, 12751, 12751, 12751, 12751 ms/op
# Warmup Iteration   2: n = 1, mean = 12247 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12247, 12247, 12247, 12247, 12247, 12247, 12247, 12247 ms/op
# Warmup Iteration   3: n = 1, mean = 12080 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12080, 12080, 12080, 12080, 12080, 12080, 12080, 12080 ms/op
Iteration   1: n = 1, mean = 11157 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11157, 11157, 11157, 11157, 11157, 11157, 11157, 11157 ms/op
Iteration   2: n = 1, mean = 11845 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11845, 11845, 11845, 11845, 11845, 11845, 11845, 11845 ms/op
Iteration   3: n = 1, mean = 12516 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12516, 12516, 12516, 12516, 12516, 12516, 12516, 12516 ms/op

# Run progress: 72.54% complete, ETA 00:41:52
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 12365 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12365, 12365, 12365, 12365, 12365, 12365, 12365, 12365 ms/op
# Warmup Iteration   2: n = 1, mean = 11878 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11878, 11878, 11878, 11878, 11878, 11878, 11878, 11878 ms/op
# Warmup Iteration   3: n = 1, mean = 11861 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11861, 11861, 11861, 11861, 11861, 11861, 11861, 11861 ms/op
Iteration   1: n = 1, mean = 10989 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10989, 10989, 10989, 10989, 10989, 10989, 10989, 10989 ms/op
Iteration   2: n = 1, mean = 12482 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 12482, 12482, 12482, 12482, 12482, 12482, 12482, 12482 ms/op
Iteration   3: n = 1, mean = 13271 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 13271, 13271, 13271, 13271, 13271, 13271, 13271, 13271 ms/op


Result "write":
  N = 9
  mean =  12172.802 ±(99.9%) 1276.891 ms/op

  Histogram, ms/op:
    [10000.000, 10250.000) = 0 
    [10250.000, 10500.000) = 0 
    [10500.000, 10750.000) = 0 
    [10750.000, 11000.000) = 1 
    [11000.000, 11250.000) = 1 
    [11250.000, 11500.000) = 0 
    [11500.000, 11750.000) = 0 
    [11750.000, 12000.000) = 2 
    [12000.000, 12250.000) = 0 
    [12250.000, 12500.000) = 2 
    [12500.000, 12750.000) = 1 
    [12750.000, 13000.000) = 1 
    [13000.000, 13250.000) = 0 
    [13250.000, 13500.000) = 1 
    [13500.000, 13750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  10989.076 ms/op
     p(50.0000) =  12415.140 ms/op
     p(90.0000) =  13270.778 ms/op
     p(95.0000) =  13270.778 ms/op
     p(99.0000) =  13270.778 ms/op
     p(99.9000) =  13270.778 ms/op
     p(99.9900) =  13270.778 ms/op
     p(99.9990) =  13270.778 ms/op
     p(99.9999) =  13270.778 ms/op
    p(100.0000) =  13270.778 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 72.73% complete, ETA 00:41:56
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 700 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 584, 700, 816, 816, 816, 816, 816, 816 ms/op
# Warmup Iteration   2: n = 2, mean = 611 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 573, 611, 649, 649, 649, 649, 649, 649 ms/op
# Warmup Iteration   3: n = 2, mean = 547 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 527, 547, 567, 567, 567, 567, 567, 567 ms/op
Iteration   1: n = 2, mean = 667 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 601, 667, 734, 734, 734, 734, 734, 734 ms/op
Iteration   2: n = 2, mean = 536 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 515, 536, 556, 556, 556, 556, 556, 556 ms/op
Iteration   3: n = 2, mean = 560 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 537, 560, 583, 583, 583, 583, 583, 583 ms/op

# Run progress: 72.92% complete, ETA 00:41:36
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 663 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 563, 663, 762, 762, 762, 762, 762, 762 ms/op
# Warmup Iteration   2: n = 2, mean = 533 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 526, 533, 540, 540, 540, 540, 540, 540 ms/op
# Warmup Iteration   3: n = 2, mean = 660 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 590, 660, 730, 730, 730, 730, 730, 730 ms/op
Iteration   1: n = 2, mean = 574 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 565, 574, 583, 583, 583, 583, 583, 583 ms/op
Iteration   2: n = 2, mean = 573 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 541, 573, 604, 604, 604, 604, 604, 604 ms/op
Iteration   3: n = 2, mean = 588 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 521, 588, 655, 655, 655, 655, 655, 655 ms/op

# Run progress: 73.11% complete, ETA 00:41:15
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 590 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 514, 590, 666, 666, 666, 666, 666, 666 ms/op
# Warmup Iteration   2: n = 2, mean = 613 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 551, 613, 676, 676, 676, 676, 676, 676 ms/op
# Warmup Iteration   3: n = 2, mean = 511 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 510, 511, 511, 511, 511, 511, 511, 511 ms/op
Iteration   1: n = 2, mean = 551 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 549, 551, 553, 553, 553, 553, 553, 553 ms/op
Iteration   2: n = 2, mean = 530 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 511, 530, 548, 548, 548, 548, 548, 548 ms/op
Iteration   3: n = 2, mean = 516 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 511, 516, 522, 522, 522, 522, 522, 522 ms/op


Result "readCrc":
  N = 18
  mean =    566.085 ±(99.9%) 52.859 ms/op

  Histogram, ms/op:
    [500.000, 525.000) = 5 
    [525.000, 550.000) = 4 
    [550.000, 575.000) = 3 
    [575.000, 600.000) = 2 
    [600.000, 625.000) = 2 
    [625.000, 650.000) = 0 
    [650.000, 675.000) = 1 
    [675.000, 700.000) = 0 
    [700.000, 725.000) = 0 
    [725.000, 750.000) = 1 
    [750.000, 775.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    511.181 ms/op
     p(50.0000) =    551.027 ms/op
     p(90.0000) =    663.224 ms/op
     p(95.0000) =    734.003 ms/op
     p(99.0000) =    734.003 ms/op
     p(99.9000) =    734.003 ms/op
     p(99.9900) =    734.003 ms/op
     p(99.9990) =    734.003 ms/op
     p(99.9999) =    734.003 ms/op
    p(100.0000) =    734.003 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 73.30% complete, ETA 00:40:55
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 726 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 698, 726, 753, 753, 753, 753, 753, 753 ms/op
# Warmup Iteration   2: n = 2, mean = 543 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 521, 543, 565, 565, 565, 565, 565, 565 ms/op
# Warmup Iteration   3: n = 2, mean = 519 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 519, 519, 519, 519, 519, 519, 519, 519 ms/op
Iteration   1: n = 2, mean = 554 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 549, 554, 559, 559, 559, 559, 559, 559 ms/op
Iteration   2: n = 2, mean = 539 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 519, 539, 560, 560, 560, 560, 560, 560 ms/op
Iteration   3: n = 2, mean = 519 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 515, 519, 523, 523, 523, 523, 523, 523 ms/op

# Run progress: 73.48% complete, ETA 00:40:34
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 715 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 593, 715, 837, 837, 837, 837, 837, 837 ms/op
# Warmup Iteration   2: n = 2, mean = 592 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 564, 592, 620, 620, 620, 620, 620, 620 ms/op
# Warmup Iteration   3: n = 2, mean = 572 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 557, 572, 587, 587, 587, 587, 587, 587 ms/op
Iteration   1: n = 2, mean = 593 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 588, 593, 599, 599, 599, 599, 599, 599 ms/op
Iteration   2: n = 2, mean = 554 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 537, 554, 570, 570, 570, 570, 570, 570 ms/op
Iteration   3: n = 2, mean = 553 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 552, 553, 554, 554, 554, 554, 554, 554 ms/op

# Run progress: 73.67% complete, ETA 00:40:14
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 643 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 560, 643, 727, 727, 727, 727, 727, 727 ms/op
# Warmup Iteration   2: n = 2, mean = 614 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 529, 614, 699, 699, 699, 699, 699, 699 ms/op
# Warmup Iteration   3: n = 2, mean = 621 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 524, 621, 717, 717, 717, 717, 717, 717 ms/op
Iteration   1: n = 2, mean = 610 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 581, 610, 640, 640, 640, 640, 640, 640 ms/op
Iteration   2: n = 2, mean = 539 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 527, 539, 552, 552, 552, 552, 552, 552 ms/op
Iteration   3: n = 2, mean = 629 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 606, 629, 651, 651, 651, 651, 651, 651 ms/op


Result "readCrc":
  N = 18
  mean =    565.619 ±(99.9%) 36.587 ms/op

  Histogram, ms/op:
    [500.000, 512.500) = 0 
    [512.500, 525.000) = 3 
    [525.000, 537.500) = 2 
    [537.500, 550.000) = 1 
    [550.000, 562.500) = 5 
    [562.500, 575.000) = 1 
    [575.000, 587.500) = 1 
    [587.500, 600.000) = 2 
    [600.000, 612.500) = 1 
    [612.500, 625.000) = 0 
    [625.000, 637.500) = 0 
    [637.500, 650.000) = 1 
    [650.000, 662.500) = 1 
    [662.500, 675.000) = 0 
    [675.000, 687.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    514.851 ms/op
     p(50.0000) =    556.270 ms/op
     p(90.0000) =    640.785 ms/op
     p(95.0000) =    651.166 ms/op
     p(99.0000) =    651.166 ms/op
     p(99.9000) =    651.166 ms/op
     p(99.9900) =    651.166 ms/op
     p(99.9990) =    651.166 ms/op
     p(99.9999) =    651.166 ms/op
    p(100.0000) =    651.166 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 73.86% complete, ETA 00:39:54
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 816 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 717, 816, 914, 914, 914, 914, 914, 914 ms/op
# Warmup Iteration   2: n = 2, mean = 836 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 713, 836, 959, 959, 959, 959, 959, 959 ms/op
# Warmup Iteration   3: n = 2, mean = 771 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 686, 771, 857, 857, 857, 857, 857, 857 ms/op
Iteration   1: n = 2, mean = 793 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 722, 793, 863, 863, 863, 863, 863, 863 ms/op
Iteration   2: n = 2, mean = 715 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 682, 715, 749, 749, 749, 749, 749, 749 ms/op
Iteration   3: n = 2, mean = 696 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 678, 696, 713, 713, 713, 713, 713, 713 ms/op

# Run progress: 74.05% complete, ETA 00:39:35
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 764 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 695, 764, 834, 834, 834, 834, 834, 834 ms/op
# Warmup Iteration   2: n = 2, mean = 752 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 734, 752, 771, 771, 771, 771, 771, 771 ms/op
# Warmup Iteration   3: n = 2, mean = 734 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 693, 734, 775, 775, 775, 775, 775, 775 ms/op
Iteration   1: n = 2, mean = 695 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 695, 695, 695, 695, 695, 695, 695, 695 ms/op
Iteration   2: n = 2, mean = 700 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 682, 700, 718, 718, 718, 718, 718, 718 ms/op
Iteration   3: n = 2, mean = 761 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 687, 761, 836, 836, 836, 836, 836, 836 ms/op

# Run progress: 74.24% complete, ETA 00:39:16
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1039 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039 ms/op
# Warmup Iteration   2: n = 2, mean = 876 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 793, 876, 959, 959, 959, 959, 959, 959 ms/op
# Warmup Iteration   3: n = 2, mean = 885 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 771, 885, 999, 999, 999, 999, 999, 999 ms/op
Iteration   1: n = 2, mean = 918 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 907, 918, 929, 929, 929, 929, 929, 929 ms/op
Iteration   2: n = 2, mean = 700 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 697, 700, 703, 703, 703, 703, 703, 703 ms/op
Iteration   3: n = 2, mean = 688 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 681, 688, 696, 696, 696, 696, 696, 696 ms/op


Result "readCrc":
  N = 18
  mean =    740.702 ±(99.9%) 77.077 ms/op

  Histogram, ms/op:
    [ 600.000,  625.000) = 0 
    [ 625.000,  650.000) = 0 
    [ 650.000,  675.000) = 0 
    [ 675.000,  700.000) = 9 
    [ 700.000,  725.000) = 4 
    [ 725.000,  750.000) = 1 
    [ 750.000,  775.000) = 0 
    [ 775.000,  800.000) = 0 
    [ 800.000,  825.000) = 0 
    [ 825.000,  850.000) = 1 
    [ 850.000,  875.000) = 1 
    [ 875.000,  900.000) = 0 
    [ 900.000,  925.000) = 1 
    [ 925.000,  950.000) = 1 
    [ 950.000,  975.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    678.429 ms/op
     p(50.0000) =    699.924 ms/op
     p(90.0000) =    909.220 ms/op
     p(95.0000) =    929.038 ms/op
     p(99.0000) =    929.038 ms/op
     p(99.9000) =    929.038 ms/op
     p(99.9900) =    929.038 ms/op
     p(99.9990) =    929.038 ms/op
     p(99.9999) =    929.038 ms/op
    p(100.0000) =    929.038 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 74.43% complete, ETA 00:38:57
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 742 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 655, 742, 829, 829, 829, 829, 829, 829 ms/op
# Warmup Iteration   2: n = 2, mean = 677 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 675, 677, 678, 678, 678, 678, 678, 678 ms/op
# Warmup Iteration   3: n = 2, mean = 836 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 835, 836, 838, 838, 838, 838, 838, 838 ms/op
Iteration   1: n = 2, mean = 775 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 688, 775, 862, 862, 862, 862, 862, 862 ms/op
Iteration   2: n = 2, mean = 677 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 655, 677, 699, 699, 699, 699, 699, 699 ms/op
Iteration   3: n = 2, mean = 737 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 675, 737, 799, 799, 799, 799, 799, 799 ms/op

# Run progress: 74.62% complete, ETA 00:38:38
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 767 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 677, 767, 856, 856, 856, 856, 856, 856 ms/op
# Warmup Iteration   2: n = 2, mean = 774 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 707, 774, 841, 841, 841, 841, 841, 841 ms/op
# Warmup Iteration   3: n = 2, mean = 653 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 641, 653, 666, 666, 666, 666, 666, 666 ms/op
Iteration   1: n = 2, mean = 645 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 641, 645, 650, 650, 650, 650, 650, 650 ms/op
Iteration   2: n = 2, mean = 650 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 647, 650, 652, 652, 652, 652, 652, 652 ms/op
Iteration   3: n = 2, mean = 652 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 651, 652, 653, 653, 653, 653, 653, 653 ms/op

# Run progress: 74.81% complete, ETA 00:38:19
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 781 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 690, 781, 872, 872, 872, 872, 872, 872 ms/op
# Warmup Iteration   2: n = 2, mean = 860 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 749, 860, 971, 971, 971, 971, 971, 971 ms/op
# Warmup Iteration   3: n = 2, mean = 695 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 665, 695, 726, 726, 726, 726, 726, 726 ms/op
Iteration   1: n = 2, mean = 674 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 660, 674, 688, 688, 688, 688, 688, 688 ms/op
Iteration   2: n = 2, mean = 709 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 699, 709, 718, 718, 718, 718, 718, 718 ms/op
Iteration   3: n = 2, mean = 696 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 689, 696, 704, 704, 704, 704, 704, 704 ms/op


Result "readCrc":
  N = 18
  mean =    690.604 ±(99.9%) 53.213 ms/op

  Histogram, ms/op:
    [600.000, 625.000) = 0 
    [625.000, 650.000) = 2 
    [650.000, 675.000) = 6 
    [675.000, 700.000) = 6 
    [700.000, 725.000) = 2 
    [725.000, 750.000) = 0 
    [750.000, 775.000) = 0 
    [775.000, 800.000) = 1 
    [800.000, 825.000) = 0 
    [825.000, 850.000) = 0 
    [850.000, 875.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    640.680 ms/op
     p(50.0000) =    681.574 ms/op
     p(90.0000) =    805.306 ms/op
     p(95.0000) =    861.929 ms/op
     p(99.0000) =    861.929 ms/op
     p(99.9000) =    861.929 ms/op
     p(99.9900) =    861.929 ms/op
     p(99.9990) =    861.929 ms/op
     p(99.9999) =    861.929 ms/op
    p(100.0000) =    861.929 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 75.00% complete, ETA 00:38:00
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 8607 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8607, 8607, 8607, 8607, 8607, 8607, 8607, 8607 ms/op
# Warmup Iteration   2: n = 1, mean = 8791 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8791, 8791, 8791, 8791, 8791, 8791, 8791, 8791 ms/op
# Warmup Iteration   3: n = 1, mean = 7894 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7894, 7894, 7894, 7894, 7894, 7894, 7894, 7894 ms/op
Iteration   1: n = 1, mean = 7852 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7852, 7852, 7852, 7852, 7852, 7852, 7852, 7852 ms/op
Iteration   2: n = 1, mean = 7567 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567 ms/op
Iteration   3: 
Bytes	108859392	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 7927 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7927, 7927, 7927, 7927, 7927, 7927, 7927, 7927 ms/op

# Run progress: 75.19% complete, ETA 00:37:54
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 8607 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8607, 8607, 8607, 8607, 8607, 8607, 8607, 8607 ms/op
# Warmup Iteration   2: n = 1, mean = 8045 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8045, 8045, 8045, 8045, 8045, 8045, 8045, 8045 ms/op
# Warmup Iteration   3: n = 1, mean = 7860 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7860, 7860, 7860, 7860, 7860, 7860, 7860, 7860 ms/op
Iteration   1: n = 1, mean = 7810 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7810, 7810, 7810, 7810, 7810, 7810, 7810, 7810 ms/op
Iteration   2: n = 1, mean = 7583 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7583, 7583, 7583, 7583, 7583, 7583, 7583, 7583 ms/op
Iteration   3: 
Bytes	108859392	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 7575 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7575, 7575, 7575, 7575, 7575, 7575, 7575, 7575 ms/op

# Run progress: 75.38% complete, ETA 00:37:47
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 8657 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8657, 8657, 8657, 8657, 8657, 8657, 8657, 8657 ms/op
# Warmup Iteration   2: n = 1, mean = 8212 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8212, 8212, 8212, 8212, 8212, 8212, 8212, 8212 ms/op
# Warmup Iteration   3: n = 1, mean = 8087 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8087, 8087, 8087, 8087, 8087, 8087, 8087, 8087 ms/op
Iteration   1: n = 1, mean = 7776 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7776, 7776, 7776, 7776, 7776, 7776, 7776, 7776 ms/op
Iteration   2: n = 1, mean = 7835 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7835, 7835, 7835, 7835, 7835, 7835, 7835, 7835 ms/op
Iteration   3: 
Bytes	108859392	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 7952 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 7952, 7952, 7952, 7952, 7952, 7952, 7952, 7952 ms/op


Result "readKey":
  N = 9
  mean =   7764.123 ±(99.9%) 255.212 ms/op

  Histogram, ms/op:
    [7500.000, 7550.000) = 0 
    [7550.000, 7600.000) = 3 
    [7600.000, 7650.000) = 0 
    [7650.000, 7700.000) = 0 
    [7700.000, 7750.000) = 0 
    [7750.000, 7800.000) = 1 
    [7800.000, 7850.000) = 2 
    [7850.000, 7900.000) = 1 
    [7900.000, 7950.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   7566.524 ms/op
     p(50.0000) =   7809.794 ms/op
     p(90.0000) =   7952.400 ms/op
     p(95.0000) =   7952.400 ms/op
     p(99.0000) =   7952.400 ms/op
     p(99.9000) =   7952.400 ms/op
     p(99.9900) =   7952.400 ms/op
     p(99.9990) =   7952.400 ms/op
     p(99.9999) =   7952.400 ms/op
    p(100.0000) =   7952.400 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readKey
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 75.57% complete, ETA 00:37:41
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 9194 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9194, 9194, 9194, 9194, 9194, 9194, 9194, 9194 ms/op
# Warmup Iteration   2: n = 1, mean = 8909 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8909, 8909, 8909, 8909, 8909, 8909, 8909, 8909 ms/op
# Warmup Iteration   3: n = 1, mean = 8925 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8925, 8925, 8925, 8925, 8925, 8925, 8925, 8925 ms/op
Iteration   1: n = 1, mean = 8456 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8456, 8456, 8456, 8456, 8456, 8456, 8456, 8456 ms/op
Iteration   2: n = 1, mean = 8556 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8556, 8556, 8556, 8556, 8556, 8556, 8556, 8556 ms/op
Iteration   3: 
Bytes	108933120	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 8548 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8548, 8548, 8548, 8548, 8548, 8548, 8548, 8548 ms/op

# Run progress: 75.76% complete, ETA 00:37:35
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 9630 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9630, 9630, 9630, 9630, 9630, 9630, 9630, 9630 ms/op
# Warmup Iteration   2: n = 1, mean = 9177 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9177, 9177, 9177, 9177, 9177, 9177, 9177, 9177 ms/op
# Warmup Iteration   3: n = 1, mean = 8909 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8909, 8909, 8909, 8909, 8909, 8909, 8909, 8909 ms/op
Iteration   1: n = 1, mean = 8774 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8774, 8774, 8774, 8774, 8774, 8774, 8774, 8774 ms/op
Iteration   2: n = 1, mean = 8892 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8892, 8892, 8892, 8892, 8892, 8892, 8892, 8892 ms/op
Iteration   3: 
Bytes	108933120	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 8892 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8892, 8892, 8892, 8892, 8892, 8892, 8892, 8892 ms/op

# Run progress: 75.95% complete, ETA 00:37:30
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 9160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9160, 9160, 9160, 9160, 9160, 9160, 9160, 9160 ms/op
# Warmup Iteration   2: n = 1, mean = 8959 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8959, 8959, 8959, 8959, 8959, 8959, 8959, 8959 ms/op
# Warmup Iteration   3: n = 1, mean = 8959 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8959, 8959, 8959, 8959, 8959, 8959, 8959, 8959 ms/op
Iteration   1: n = 1, mean = 9597 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9597, 9597, 9597, 9597, 9597, 9597, 9597, 9597 ms/op
Iteration   2: n = 1, mean = 8531 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 8531, 8531, 8531, 8531, 8531, 8531, 8531, 8531 ms/op
Iteration   3: 
Bytes	108933120	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 9060 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 9060, 9060, 9060, 9060, 9060, 9060, 9060, 9060 ms/op


Result "readKey":
  N = 9
  mean =   8811.767 ±(99.9%) 603.526 ms/op

  Histogram, ms/op:
    [ 8000.000,  8125.000) = 0 
    [ 8125.000,  8250.000) = 0 
    [ 8250.000,  8375.000) = 0 
    [ 8375.000,  8500.000) = 1 
    [ 8500.000,  8625.000) = 3 
    [ 8625.000,  8750.000) = 0 
    [ 8750.000,  8875.000) = 1 
    [ 8875.000,  9000.000) = 2 
    [ 9000.000,  9125.000) = 1 
    [ 9125.000,  9250.000) = 0 
    [ 9250.000,  9375.000) = 0 
    [ 9375.000,  9500.000) = 0 
    [ 9500.000,  9625.000) = 1 
    [ 9625.000,  9750.000) = 0 
    [ 9750.000,  9875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   8455.717 ms/op
     p(50.0000) =   8774.484 ms/op
     p(90.0000) =   9596.568 ms/op
     p(95.0000) =   9596.568 ms/op
     p(99.0000) =   9596.568 ms/op
     p(99.9000) =   9596.568 ms/op
     p(99.9900) =   9596.568 ms/op
     p(99.9990) =   9596.568 ms/op
     p(99.9999) =   9596.568 ms/op
    p(100.0000) =   9596.568 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readKey
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 76.14% complete, ETA 00:37:25
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1950 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1950, 1950, 1950, 1950, 1950, 1950, 1950, 1950 ms/op
# Warmup Iteration   2: n = 1, mean = 1650 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650 ms/op
# Warmup Iteration   3: n = 1, mean = 1718 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718 ms/op
Iteration   1: n = 1, mean = 1787 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1787, 1787, 1787, 1787, 1787, 1787, 1787, 1787 ms/op
Iteration   2: n = 1, mean = 1699 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1699, 1699, 1699, 1699, 1699, 1699, 1699, 1699 ms/op
Iteration   3: 
Bytes	124211200	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 1799 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1799, 1799, 1799, 1799, 1799, 1799, 1799, 1799 ms/op

# Run progress: 76.33% complete, ETA 00:37:06
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 2076 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2076, 2076, 2076, 2076, 2076, 2076, 2076, 2076 ms/op
# Warmup Iteration   2: n = 1, mean = 1541 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541 ms/op
# Warmup Iteration   3: n = 1, mean = 1510 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1510, 1510, 1510, 1510, 1510, 1510, 1510, 1510 ms/op
Iteration   1: n = 1, mean = 2160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2160, 2160, 2160, 2160, 2160, 2160, 2160, 2160 ms/op
Iteration   2: n = 1, mean = 1642 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642 ms/op
Iteration   3: 
Bytes	124211200	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 1732 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732 ms/op

# Run progress: 76.52% complete, ETA 00:36:47
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 2051 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2051, 2051, 2051, 2051, 2051, 2051, 2051, 2051 ms/op
# Warmup Iteration   2: n = 1, mean = 1609 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609 ms/op
# Warmup Iteration   3: n = 1, mean = 1864 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1864, 1864, 1864, 1864, 1864, 1864, 1864, 1864 ms/op
Iteration   1: n = 1, mean = 1869 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1869, 1869, 1869, 1869, 1869, 1869, 1869, 1869 ms/op
Iteration   2: n = 1, mean = 1961 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1961, 1961, 1961, 1961, 1961, 1961, 1961, 1961 ms/op
Iteration   3: 
Bytes	124211200	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 1648 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648 ms/op


Result "readKey":
  N = 9
  mean =   1810.774 ±(99.9%) 280.019 ms/op

  Histogram, ms/op:
    [1600.000, 1650.000) = 2 
    [1650.000, 1700.000) = 1 
    [1700.000, 1750.000) = 1 
    [1750.000, 1800.000) = 2 
    [1800.000, 1850.000) = 0 
    [1850.000, 1900.000) = 1 
    [1900.000, 1950.000) = 0 
    [1950.000, 2000.000) = 1 
    [2000.000, 2050.000) = 0 
    [2050.000, 2100.000) = 0 
    [2100.000, 2150.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1642.070 ms/op
     p(50.0000) =   1786.774 ms/op
     p(90.0000) =   2160.067 ms/op
     p(95.0000) =   2160.067 ms/op
     p(99.0000) =   2160.067 ms/op
     p(99.9000) =   2160.067 ms/op
     p(99.9900) =   2160.067 ms/op
     p(99.9990) =   2160.067 ms/op
     p(99.9999) =   2160.067 ms/op
    p(100.0000) =   2160.067 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readKey
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 76.70% complete, ETA 00:36:28
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 11325 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11325, 11325, 11325, 11325, 11325, 11325, 11325, 11325 ms/op
# Warmup Iteration   2: n = 1, mean = 11291 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11291, 11291, 11291, 11291, 11291, 11291, 11291, 11291 ms/op
# Warmup Iteration   3: n = 1, mean = 10771 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10771, 10771, 10771, 10771, 10771, 10771, 10771, 10771 ms/op
Iteration   1: n = 1, mean = 10754 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10754, 10754, 10754, 10754, 10754, 10754, 10754, 10754 ms/op
Iteration   2: n = 1, mean = 11392 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11392, 11392, 11392, 11392, 11392, 11392, 11392, 11392 ms/op
Iteration   3: 
Bytes	123580416	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 10553 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10553, 10553, 10553, 10553, 10553, 10553, 10553, 10553 ms/op

# Run progress: 76.89% complete, ETA 00:36:26
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 11190 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11190, 11190, 11190, 11190, 11190, 11190, 11190, 11190 ms/op
# Warmup Iteration   2: n = 1, mean = 11476 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11476, 11476, 11476, 11476, 11476, 11476, 11476, 11476 ms/op
# Warmup Iteration   3: n = 1, mean = 10335 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10335, 10335, 10335, 10335, 10335, 10335, 10335, 10335 ms/op
Iteration   1: n = 1, mean = 10503 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10503, 10503, 10503, 10503, 10503, 10503, 10503, 10503 ms/op
Iteration   2: n = 1, mean = 10956 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10956, 10956, 10956, 10956, 10956, 10956, 10956, 10956 ms/op
Iteration   3: 
Bytes	123584512	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 10368 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10368, 10368, 10368, 10368, 10368, 10368, 10368, 10368 ms/op

# Run progress: 77.08% complete, ETA 00:36:24
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 11140 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11140, 11140, 11140, 11140, 11140, 11140, 11140, 11140 ms/op
# Warmup Iteration   2: n = 1, mean = 10956 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10956, 10956, 10956, 10956, 10956, 10956, 10956, 10956 ms/op
# Warmup Iteration   3: n = 1, mean = 10821 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10821, 10821, 10821, 10821, 10821, 10821, 10821, 10821 ms/op
Iteration   1: n = 1, mean = 10771 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10771, 10771, 10771, 10771, 10771, 10771, 10771, 10771 ms/op
Iteration   2: n = 1, mean = 10503 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10503, 10503, 10503, 10503, 10503, 10503, 10503, 10503 ms/op
Iteration   3: 
Bytes	123580416	org.lmdbjava.bench.MvStore.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 10536 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10536, 10536, 10536, 10536, 10536, 10536, 10536, 10536 ms/op


Result "readKey":
  N = 9
  mean =  10703.864 ±(99.9%) 527.443 ms/op

  Histogram, ms/op:
    [10000.000, 10125.000) = 0 
    [10125.000, 10250.000) = 0 
    [10250.000, 10375.000) = 1 
    [10375.000, 10500.000) = 0 
    [10500.000, 10625.000) = 4 
    [10625.000, 10750.000) = 0 
    [10750.000, 10875.000) = 2 
    [10875.000, 11000.000) = 1 
    [11000.000, 11125.000) = 0 
    [11125.000, 11250.000) = 0 
    [11250.000, 11375.000) = 0 
    [11375.000, 11500.000) = 1 
    [11500.000, 11625.000) = 0 
    [11625.000, 11750.000) = 0 
    [11750.000, 11875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  10368.319 ms/op
     p(50.0000) =  10552.869 ms/op
     p(90.0000) =  11391.730 ms/op
     p(95.0000) =  11391.730 ms/op
     p(99.0000) =  11391.730 ms/op
     p(99.9000) =  11391.730 ms/op
     p(99.9900) =  11391.730 ms/op
     p(99.9990) =  11391.730 ms/op
     p(99.9999) =  11391.730 ms/op
    p(100.0000) =  11391.730 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readRev
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 77.27% complete, ETA 00:36:21
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 681 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 560, 681, 801, 801, 801, 801, 801, 801 ms/op
# Warmup Iteration   2: n = 2, mean = 665 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 584, 665, 746, 746, 746, 746, 746, 746 ms/op
# Warmup Iteration   3: n = 2, mean = 612 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 562, 612, 663, 663, 663, 663, 663, 663 ms/op
Iteration   1: n = 2, mean = 560 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 555, 560, 566, 566, 566, 566, 566, 566 ms/op
Iteration   2: n = 2, mean = 542 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 525, 542, 558, 558, 558, 558, 558, 558 ms/op
Iteration   3: n = 2, mean = 610 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 558, 610, 663, 663, 663, 663, 663, 663 ms/op

# Run progress: 77.46% complete, ETA 00:36:00
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 699 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 593, 699, 804, 804, 804, 804, 804, 804 ms/op
# Warmup Iteration   2: n = 2, mean = 667 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 595, 667, 739, 739, 739, 739, 739, 739 ms/op
# Warmup Iteration   3: n = 2, mean = 541 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 537, 541, 545, 545, 545, 545, 545, 545 ms/op
Iteration   1: n = 2, mean = 573 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 571, 573, 575, 575, 575, 575, 575, 575 ms/op
Iteration   2: n = 2, mean = 579 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 561, 579, 597, 597, 597, 597, 597, 597 ms/op
Iteration   3: n = 2, mean = 547 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 536, 547, 558, 558, 558, 558, 558, 558 ms/op

# Run progress: 77.65% complete, ETA 00:35:39
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 776 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 672, 776, 880, 880, 880, 880, 880, 880 ms/op
# Warmup Iteration   2: n = 2, mean = 615 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 568, 615, 662, 662, 662, 662, 662, 662 ms/op
# Warmup Iteration   3: n = 2, mean = 671 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 623, 671, 718, 718, 718, 718, 718, 718 ms/op
Iteration   1: n = 2, mean = 612 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 600, 612, 624, 624, 624, 624, 624, 624 ms/op
Iteration   2: n = 2, mean = 588 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 562, 588, 613, 613, 613, 613, 613, 613 ms/op
Iteration   3: n = 2, mean = 675 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 672, 675, 678, 678, 678, 678, 678, 678 ms/op


Result "readRev":
  N = 18
  mean =    587.319 ±(99.9%) 42.884 ms/op

  Histogram, ms/op:
    [500.000, 512.500) = 0 
    [512.500, 525.000) = 0 
    [525.000, 537.500) = 2 
    [537.500, 550.000) = 0 
    [550.000, 562.500) = 6 
    [562.500, 575.000) = 3 
    [575.000, 587.500) = 0 
    [587.500, 600.000) = 2 
    [600.000, 612.500) = 0 
    [612.500, 625.000) = 2 
    [625.000, 637.500) = 0 
    [637.500, 650.000) = 0 
    [650.000, 662.500) = 0 
    [662.500, 675.000) = 2 
    [675.000, 687.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    525.337 ms/op
     p(50.0000) =    568.852 ms/op
     p(90.0000) =    672.766 ms/op
     p(95.0000) =    678.429 ms/op
     p(99.0000) =    678.429 ms/op
     p(99.9000) =    678.429 ms/op
     p(99.9900) =    678.429 ms/op
     p(99.9990) =    678.429 ms/op
     p(99.9999) =    678.429 ms/op
    p(100.0000) =    678.429 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readRev
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 77.84% complete, ETA 00:35:19
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 679 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 561, 679, 798, 798, 798, 798, 798, 798 ms/op
# Warmup Iteration   2: n = 2, mean = 651 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 585, 651, 717, 717, 717, 717, 717, 717 ms/op
# Warmup Iteration   3: n = 2, mean = 634 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 573, 634, 696, 696, 696, 696, 696, 696 ms/op
Iteration   1: n = 2, mean = 664 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 591, 664, 737, 737, 737, 737, 737, 737 ms/op
Iteration   2: n = 2, mean = 555 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 540, 555, 570, 570, 570, 570, 570, 570 ms/op
Iteration   3: n = 2, mean = 547 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 544, 547, 549, 549, 549, 549, 549, 549 ms/op

# Run progress: 78.03% complete, ETA 00:34:59
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 632 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 566, 632, 697, 697, 697, 697, 697, 697 ms/op
# Warmup Iteration   2: n = 2, mean = 603 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 548, 603, 657, 657, 657, 657, 657, 657 ms/op
# Warmup Iteration   3: n = 2, mean = 549 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 544, 549, 554, 554, 554, 554, 554, 554 ms/op
Iteration   1: n = 2, mean = 609 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 581, 609, 636, 636, 636, 636, 636, 636 ms/op
Iteration   2: n = 2, mean = 569 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 546, 569, 591, 591, 591, 591, 591, 591 ms/op
Iteration   3: n = 2, mean = 559 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 546, 559, 573, 573, 573, 573, 573, 573 ms/op

# Run progress: 78.22% complete, ETA 00:34:38
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 696 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 581, 696, 812, 812, 812, 812, 812, 812 ms/op
# Warmup Iteration   2: n = 2, mean = 674 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 636, 674, 712, 712, 712, 712, 712, 712 ms/op
# Warmup Iteration   3: n = 2, mean = 678 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 632, 678, 724, 724, 724, 724, 724, 724 ms/op
Iteration   1: n = 2, mean = 684 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 642, 684, 727, 727, 727, 727, 727, 727 ms/op
Iteration   2: n = 2, mean = 663 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 609, 663, 717, 717, 717, 717, 717, 717 ms/op
Iteration   3: n = 2, mean = 628 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 577, 628, 679, 679, 679, 679, 679, 679 ms/op


Result "readRev":
  N = 18
  mean =    608.757 ±(99.9%) 61.830 ms/op

  Histogram, ms/op:
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 5 
    [550.000, 575.000) = 2 
    [575.000, 600.000) = 4 
    [600.000, 625.000) = 1 
    [625.000, 650.000) = 2 
    [650.000, 675.000) = 0 
    [675.000, 700.000) = 1 
    [700.000, 725.000) = 1 
    [725.000, 750.000) = 2 
    [750.000, 775.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    540.017 ms/op
     p(50.0000) =    586.154 ms/op
     p(90.0000) =    727.712 ms/op
     p(95.0000) =    737.149 ms/op
     p(99.0000) =    737.149 ms/op
     p(99.9000) =    737.149 ms/op
     p(99.9900) =    737.149 ms/op
     p(99.9990) =    737.149 ms/op
     p(99.9999) =    737.149 ms/op
    p(100.0000) =    737.149 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readRev
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 78.41% complete, ETA 00:34:18
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1012 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012 ms/op
# Warmup Iteration   2: n = 2, mean = 786 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 722, 786, 850, 850, 850, 850, 850, 850 ms/op
# Warmup Iteration   3: n = 2, mean = 706 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 673, 706, 739, 739, 739, 739, 739, 739 ms/op
Iteration   1: n = 2, mean = 698 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 667, 698, 729, 729, 729, 729, 729, 729 ms/op
Iteration   2: n = 2, mean = 677 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 675, 677, 678, 678, 678, 678, 678, 678 ms/op
Iteration   3: n = 2, mean = 668 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 655, 668, 681, 681, 681, 681, 681, 681 ms/op

# Run progress: 78.60% complete, ETA 00:33:58
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 977 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 948, 977, 1006, 1006, 1006, 1006, 1006, 1006 ms/op
# Warmup Iteration   2: n = 2, mean = 852 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 758, 852, 946, 946, 946, 946, 946, 946 ms/op
# Warmup Iteration   3: n = 2, mean = 713 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 692, 713, 733, 733, 733, 733, 733, 733 ms/op
Iteration   1: n = 2, mean = 847 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 746, 847, 949, 949, 949, 949, 949, 949 ms/op
Iteration   2: n = 2, mean = 702 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 694, 702, 710, 710, 710, 710, 710, 710 ms/op
Iteration   3: n = 2, mean = 725 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 681, 725, 770, 770, 770, 770, 770, 770 ms/op

# Run progress: 78.79% complete, ETA 00:33:39
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 816 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 717, 816, 914, 914, 914, 914, 914, 914 ms/op
# Warmup Iteration   2: n = 2, mean = 757 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 690, 757, 823, 823, 823, 823, 823, 823 ms/op
# Warmup Iteration   3: n = 2, mean = 656 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 654, 656, 657, 657, 657, 657, 657, 657 ms/op
Iteration   1: n = 2, mean = 779 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 705, 779, 852, 852, 852, 852, 852, 852 ms/op
Iteration   2: n = 2, mean = 663 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 663, 663, 663, 663, 663, 663, 663, 663 ms/op
Iteration   3: n = 2, mean = 659 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 648, 659, 669, 669, 669, 669, 669, 669 ms/op


Result "readRev":
  N = 18
  mean =    712.973 ±(99.9%) 72.209 ms/op

  Histogram, ms/op:
    [ 600.000,  625.000) = 0 
    [ 625.000,  650.000) = 1 
    [ 650.000,  675.000) = 5 
    [ 675.000,  700.000) = 5 
    [ 700.000,  725.000) = 2 
    [ 725.000,  750.000) = 2 
    [ 750.000,  775.000) = 1 
    [ 775.000,  800.000) = 0 
    [ 800.000,  825.000) = 0 
    [ 825.000,  850.000) = 0 
    [ 850.000,  875.000) = 1 
    [ 875.000,  900.000) = 0 
    [ 900.000,  925.000) = 0 
    [ 925.000,  950.000) = 1 
    [ 950.000,  975.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    648.020 ms/op
     p(50.0000) =    680.526 ms/op
     p(90.0000) =    862.139 ms/op
     p(95.0000) =    948.961 ms/op
     p(99.0000) =    948.961 ms/op
     p(99.9000) =    948.961 ms/op
     p(99.9900) =    948.961 ms/op
     p(99.9990) =    948.961 ms/op
     p(99.9999) =    948.961 ms/op
    p(100.0000) =    948.961 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readRev
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 78.98% complete, ETA 00:33:19
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 824 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 782, 824, 866, 866, 866, 866, 866, 866 ms/op
# Warmup Iteration   2: n = 2, mean = 711 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 709, 711, 714, 714, 714, 714, 714, 714 ms/op
# Warmup Iteration   3: n = 2, mean = 673 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 665, 673, 681, 681, 681, 681, 681, 681 ms/op
Iteration   1: n = 2, mean = 639 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 639, 639, 639, 639, 639, 639, 639, 639 ms/op
Iteration   2: n = 2, mean = 721 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 684, 721, 758, 758, 758, 758, 758, 758 ms/op
Iteration   3: n = 2, mean = 643 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 628, 643, 657, 657, 657, 657, 657, 657 ms/op

# Run progress: 79.17% complete, ETA 00:32:59
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 785 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 696, 785, 875, 875, 875, 875, 875, 875 ms/op
# Warmup Iteration   2: n = 2, mean = 790 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 720, 790, 859, 859, 859, 859, 859, 859 ms/op
# Warmup Iteration   3: n = 2, mean = 769 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 712, 769, 826, 826, 826, 826, 826, 826 ms/op
Iteration   1: n = 2, mean = 754 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 686, 754, 823, 823, 823, 823, 823, 823 ms/op
Iteration   2: n = 2, mean = 680 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 673, 680, 687, 687, 687, 687, 687, 687 ms/op
Iteration   3: n = 2, mean = 698 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 675, 698, 721, 721, 721, 721, 721, 721 ms/op

# Run progress: 79.36% complete, ETA 00:32:40
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 785 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 781, 785, 790, 790, 790, 790, 790, 790 ms/op
# Warmup Iteration   2: n = 2, mean = 707 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 684, 707, 730, 730, 730, 730, 730, 730 ms/op
# Warmup Iteration   3: n = 2, mean = 773 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 665, 773, 881, 881, 881, 881, 881, 881 ms/op
Iteration   1: n = 2, mean = 638 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 638, 638, 639, 639, 639, 639, 639, 639 ms/op
Iteration   2: n = 2, mean = 788 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 747, 788, 829, 829, 829, 829, 829, 829 ms/op
Iteration   3: n = 2, mean = 720 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 649, 720, 792, 792, 792, 792, 792, 792 ms/op


Result "readRev":
  N = 18
  mean =    697.944 ±(99.9%) 61.248 ms/op

  Histogram, ms/op:
    [600.000, 625.000) = 0 
    [625.000, 650.000) = 6 
    [650.000, 675.000) = 2 
    [675.000, 700.000) = 4 
    [700.000, 725.000) = 1 
    [725.000, 750.000) = 1 
    [750.000, 775.000) = 1 
    [775.000, 800.000) = 1 
    [800.000, 825.000) = 1 
    [825.000, 850.000) = 1 
    [850.000, 875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    628.097 ms/op
     p(50.0000) =    679.477 ms/op
     p(90.0000) =    823.761 ms/op
     p(95.0000) =    829.424 ms/op
     p(99.0000) =    829.424 ms/op
     p(99.9000) =    829.424 ms/op
     p(99.9900) =    829.424 ms/op
     p(99.9990) =    829.424 ms/op
     p(99.9999) =    829.424 ms/op
    p(100.0000) =    829.424 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 79.55% complete, ETA 00:32:21
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 592 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 514, 592, 670, 670, 670, 670, 670, 670 ms/op
# Warmup Iteration   2: n = 2, mean = 548 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 512, 548, 584, 584, 584, 584, 584, 584 ms/op
# Warmup Iteration   3: n = 2, mean = 552 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 511, 552, 592, 592, 592, 592, 592, 592 ms/op
Iteration   1: n = 2, mean = 512 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 495, 512, 528, 528, 528, 528, 528, 528 ms/op
Iteration   2: n = 3, mean = 473 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 461, 466, 491, 491, 491, 491, 491, 491 ms/op
Iteration   3: n = 2, mean = 520 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 483, 520, 557, 557, 557, 557, 557, 557 ms/op

# Run progress: 79.73% complete, ETA 00:32:01
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 570 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 483, 570, 657, 657, 657, 657, 657, 657 ms/op
# Warmup Iteration   2: n = 2, mean = 533 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 508, 533, 558, 558, 558, 558, 558, 558 ms/op
# Warmup Iteration   3: n = 3, mean = 528 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 445, 535, 604, 604, 604, 604, 604, 604 ms/op
Iteration   1: n = 2, mean = 563 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 516, 563, 609, 609, 609, 609, 609, 609 ms/op
Iteration   2: n = 3, mean = 501 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 454, 508, 541, 541, 541, 541, 541, 541 ms/op
Iteration   3: n = 3, mean = 451 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 437, 448, 470, 470, 470, 470, 470, 470 ms/op

# Run progress: 79.92% complete, ETA 00:31:41
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 504 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 435, 521, 557, 557, 557, 557, 557, 557 ms/op
# Warmup Iteration   2: n = 2, mean = 506 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 484, 506, 527, 527, 527, 527, 527, 527 ms/op
# Warmup Iteration   3: n = 2, mean = 593 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 574, 593, 612, 612, 612, 612, 612, 612 ms/op
Iteration   1: n = 3, mean = 481 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 445, 474, 524, 524, 524, 524, 524, 524 ms/op
Iteration   2: n = 3, mean = 441 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 438, 439, 445, 445, 445, 445, 445, 445 ms/op
Iteration   3: n = 3, mean = 447 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 436, 449, 457, 457, 457, 457, 457, 457 ms/op


Result "readSeq":
  N = 24
  mean =    482.170 ±(99.9%) 34.596 ms/op

  Histogram, ms/op:
    [400.000, 425.000) = 0 
    [425.000, 450.000) = 8 
    [450.000, 475.000) = 6 
    [475.000, 500.000) = 3 
    [500.000, 525.000) = 3 
    [525.000, 550.000) = 2 
    [550.000, 575.000) = 1 
    [575.000, 600.000) = 0 
    [600.000, 625.000) = 1 
    [625.000, 650.000) = 0 
    [650.000, 675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    436.208 ms/op
     p(50.0000) =    467.927 ms/op
     p(90.0000) =    548.930 ms/op
     p(95.0000) =    596.115 ms/op
     p(99.0000) =    609.223 ms/op
     p(99.9000) =    609.223 ms/op
     p(99.9900) =    609.223 ms/op
     p(99.9990) =    609.223 ms/op
     p(99.9999) =    609.223 ms/op
    p(100.0000) =    609.223 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 80.11% complete, ETA 00:31:21
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 639 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 511, 639, 768, 768, 768, 768, 768, 768 ms/op
# Warmup Iteration   2: n = 2, mean = 530 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 462, 530, 597, 597, 597, 597, 597, 597 ms/op
# Warmup Iteration   3: n = 3, mean = 475 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 468, 469, 488, 488, 488, 488, 488, 488 ms/op
Iteration   1: n = 2, mean = 512 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 499, 512, 525, 525, 525, 525, 525, 525 ms/op
Iteration   2: n = 3, mean = 472 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 463, 472, 482, 482, 482, 482, 482, 482 ms/op
Iteration   3: n = 2, mean = 553 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 500, 553, 606, 606, 606, 606, 606, 606 ms/op

# Run progress: 80.30% complete, ETA 00:31:01
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 555 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 472, 555, 639, 639, 639, 639, 639, 639 ms/op
# Warmup Iteration   2: n = 2, mean = 527 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 494, 527, 561, 561, 561, 561, 561, 561 ms/op
# Warmup Iteration   3: n = 2, mean = 527 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 483, 527, 570, 570, 570, 570, 570, 570 ms/op
Iteration   1: n = 2, mean = 503 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 478, 503, 527, 527, 527, 527, 527, 527 ms/op
Iteration   2: n = 3, mean = 449 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 429, 457, 462, 462, 462, 462, 462, 462 ms/op
Iteration   3: n = 3, mean = 433 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 428, 434, 438, 438, 438, 438, 438, 438 ms/op

# Run progress: 80.49% complete, ETA 00:30:41
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 531 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 448, 540, 604, 604, 604, 604, 604, 604 ms/op
# Warmup Iteration   2: n = 3, mean = 477 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 454, 461, 517, 517, 517, 517, 517, 517 ms/op
# Warmup Iteration   3: n = 3, mean = 491 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 476, 489, 509, 509, 509, 509, 509, 509 ms/op
Iteration   1: n = 3, mean = 470 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 452, 460, 499, 499, 499, 499, 499, 499 ms/op
Iteration   2: n = 3, mean = 455 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 449, 456, 461, 461, 461, 461, 461, 461 ms/op
Iteration   3: n = 3, mean = 459 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 455, 459, 462, 462, 462, 462, 462, 462 ms/op


Result "readSeq":
  N = 24
  mean =    473.039 ±(99.9%) 29.963 ms/op

  Histogram, ms/op:
    [400.000, 425.000) = 0 
    [425.000, 450.000) = 5 
    [450.000, 475.000) = 11 
    [475.000, 500.000) = 4 
    [500.000, 525.000) = 2 
    [525.000, 550.000) = 1 
    [550.000, 575.000) = 0 
    [575.000, 600.000) = 0 
    [600.000, 625.000) = 1 
    [625.000, 650.000) = 0 
    [650.000, 675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    428.343 ms/op
     p(50.0000) =    461.636 ms/op
     p(90.0000) =    526.123 ms/op
     p(95.0000) =    586.416 ms/op
     p(99.0000) =    606.077 ms/op
     p(99.9000) =    606.077 ms/op
     p(99.9900) =    606.077 ms/op
     p(99.9990) =    606.077 ms/op
     p(99.9999) =    606.077 ms/op
    p(100.0000) =    606.077 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 80.68% complete, ETA 00:30:21
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 865 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 814, 865, 915, 915, 915, 915, 915, 915 ms/op
# Warmup Iteration   2: n = 2, mean = 697 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 653, 697, 741, 741, 741, 741, 741, 741 ms/op
# Warmup Iteration   3: n = 2, mean = 668 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 618, 668, 718, 718, 718, 718, 718, 718 ms/op
Iteration   1: n = 2, mean = 728 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 646, 728, 811, 811, 811, 811, 811, 811 ms/op
Iteration   2: n = 2, mean = 600 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 600, 600, 601, 601, 601, 601, 601, 601 ms/op
Iteration   3: n = 2, mean = 603 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 582, 603, 625, 625, 625, 625, 625, 625 ms/op

# Run progress: 80.87% complete, ETA 00:30:02
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 810 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 693, 810, 927, 927, 927, 927, 927, 927 ms/op
# Warmup Iteration   2: n = 2, mean = 648 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 634, 648, 662, 662, 662, 662, 662, 662 ms/op
# Warmup Iteration   3: n = 2, mean = 676 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 616, 676, 736, 736, 736, 736, 736, 736 ms/op
Iteration   1: n = 2, mean = 606 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 592, 606, 619, 619, 619, 619, 619, 619 ms/op
Iteration   2: n = 2, mean = 584 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 582, 584, 585, 585, 585, 585, 585, 585 ms/op
Iteration   3: n = 2, mean = 577 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 576, 577, 579, 579, 579, 579, 579, 579 ms/op

# Run progress: 81.06% complete, ETA 00:29:43
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1001 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001 ms/op
# Warmup Iteration   2: n = 2, mean = 719 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 642, 719, 797, 797, 797, 797, 797, 797 ms/op
# Warmup Iteration   3: n = 2, mean = 610 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 568, 610, 651, 651, 651, 651, 651, 651 ms/op
Iteration   1: n = 2, mean = 614 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 563, 614, 665, 665, 665, 665, 665, 665 ms/op
Iteration   2: n = 2, mean = 576 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 568, 576, 584, 584, 584, 584, 584, 584 ms/op
Iteration   3: n = 2, mean = 572 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 566, 572, 578, 578, 578, 578, 578, 578 ms/op


Result "readSeq":
  N = 18
  mean =    606.718 ±(99.9%) 54.128 ms/op

  Histogram, ms/op:
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 0 
    [550.000, 575.000) = 3 
    [575.000, 600.000) = 9 
    [600.000, 625.000) = 3 
    [625.000, 650.000) = 1 
    [650.000, 675.000) = 1 
    [675.000, 700.000) = 0 
    [700.000, 725.000) = 0 
    [725.000, 750.000) = 0 
    [750.000, 775.000) = 0 
    [775.000, 800.000) = 0 
    [800.000, 825.000) = 1 
    [825.000, 850.000) = 0 
    [850.000, 875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    563.085 ms/op
     p(50.0000) =    584.581 ms/op
     p(90.0000) =    679.372 ms/op
     p(95.0000) =    810.549 ms/op
     p(99.0000) =    810.549 ms/op
     p(99.9000) =    810.549 ms/op
     p(99.9900) =    810.549 ms/op
     p(99.9990) =    810.549 ms/op
     p(99.9999) =    810.549 ms/op
    p(100.0000) =    810.549 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 81.25% complete, ETA 00:29:23
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 588 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 553, 588, 624, 624, 624, 624, 624, 624 ms/op
# Warmup Iteration   2: n = 2, mean = 600 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 598, 600, 603, 603, 603, 603, 603, 603 ms/op
# Warmup Iteration   3: n = 2, mean = 568 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 551, 568, 585, 585, 585, 585, 585, 585 ms/op
Iteration   1: n = 2, mean = 548 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 543, 548, 554, 554, 554, 554, 554, 554 ms/op
Iteration   2: n = 2, mean = 559 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 557, 559, 562, 562, 562, 562, 562, 562 ms/op
Iteration   3: n = 2, mean = 562 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 557, 562, 566, 566, 566, 566, 566, 566 ms/op

# Run progress: 81.44% complete, ETA 00:29:04
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 765 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 630, 765, 900, 900, 900, 900, 900, 900 ms/op
# Warmup Iteration   2: n = 2, mean = 625 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 624, 625, 626, 626, 626, 626, 626, 626 ms/op
# Warmup Iteration   3: n = 2, mean = 597 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 587, 597, 607, 607, 607, 607, 607, 607 ms/op
Iteration   1: n = 2, mean = 737 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 687, 737, 786, 786, 786, 786, 786, 786 ms/op
Iteration   2: n = 2, mean = 685 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 641, 685, 730, 730, 730, 730, 730, 730 ms/op
Iteration   3: n = 2, mean = 673 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 601, 673, 744, 744, 744, 744, 744, 744 ms/op

# Run progress: 81.63% complete, ETA 00:28:45
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 644 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 603, 644, 686, 686, 686, 686, 686, 686 ms/op
# Warmup Iteration   2: n = 2, mean = 661 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 607, 661, 715, 715, 715, 715, 715, 715 ms/op
# Warmup Iteration   3: n = 2, mean = 670 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 575, 670, 764, 764, 764, 764, 764, 764 ms/op
Iteration   1: n = 2, mean = 555 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 554, 555, 556, 556, 556, 556, 556, 556 ms/op
Iteration   2: n = 2, mean = 555 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 548, 555, 561, 561, 561, 561, 561, 561 ms/op
Iteration   3: n = 2, mean = 585 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 551, 585, 620, 620, 620, 620, 620, 620 ms/op


Result "readSeq":
  N = 18
  mean =    606.485 ±(99.9%) 73.009 ms/op

  Histogram, ms/op:
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 2 
    [550.000, 575.000) = 9 
    [575.000, 600.000) = 0 
    [600.000, 625.000) = 2 
    [625.000, 650.000) = 1 
    [650.000, 675.000) = 0 
    [675.000, 700.000) = 1 
    [700.000, 725.000) = 0 
    [725.000, 750.000) = 2 
    [750.000, 775.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    543.162 ms/op
     p(50.0000) =    561.512 ms/op
     p(90.0000) =    748.683 ms/op
     p(95.0000) =    786.432 ms/op
     p(99.0000) =    786.432 ms/op
     p(99.9000) =    786.432 ms/op
     p(99.9900) =    786.432 ms/op
     p(99.9990) =    786.432 ms/op
     p(99.9999) =    786.432 ms/op
    p(100.0000) =    786.432 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 81.82% complete, ETA 00:28:25
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 624 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 610, 624, 638, 638, 638, 638, 638, 638 ms/op
# Warmup Iteration   2: n = 2, mean = 567 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 535, 567, 599, 599, 599, 599, 599, 599 ms/op
# Warmup Iteration   3: n = 2, mean = 567 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 512, 567, 622, 622, 622, 622, 622, 622 ms/op
Iteration   1: n = 2, mean = 557 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 534, 557, 580, 580, 580, 580, 580, 580 ms/op
Iteration   2: n = 3, mean = 486 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 474, 480, 503, 503, 503, 503, 503, 503 ms/op
Iteration   3: n = 2, mean = 520 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 480, 520, 561, 561, 561, 561, 561, 561 ms/op

# Run progress: 82.01% complete, ETA 00:28:06
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 598 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 509, 598, 688, 688, 688, 688, 688, 688 ms/op
# Warmup Iteration   2: n = 2, mean = 549 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 504, 549, 595, 595, 595, 595, 595, 595 ms/op
# Warmup Iteration   3: n = 2, mean = 549 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 507, 549, 591, 591, 591, 591, 591, 591 ms/op
Iteration   1: n = 2, mean = 581 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 537, 581, 625, 625, 625, 625, 625, 625 ms/op
Iteration   2: n = 2, mean = 565 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 525, 565, 606, 606, 606, 606, 606, 606 ms/op
Iteration   3: n = 2, mean = 560 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 487, 560, 633, 633, 633, 633, 633, 633 ms/op

# Run progress: 82.20% complete, ETA 00:27:46
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 658 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 564, 658, 752, 752, 752, 752, 752, 752 ms/op
# Warmup Iteration   2: n = 2, mean = 528 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 504, 528, 552, 552, 552, 552, 552, 552 ms/op
# Warmup Iteration   3: n = 2, mean = 587 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 532, 587, 642, 642, 642, 642, 642, 642 ms/op
Iteration   1: n = 2, mean = 571 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 539, 571, 603, 603, 603, 603, 603, 603 ms/op
Iteration   2: n = 3, mean = 494 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 484, 498, 500, 500, 500, 500, 500, 500 ms/op
Iteration   3: n = 3, mean = 486 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 473, 484, 500, 500, 500, 500, 500, 500 ms/op


Result "readXxh64":
  N = 21
  mean =    528.832 ±(99.9%) 44.218 ms/op

  Histogram, ms/op:
    [400.000, 425.000) = 0 
    [425.000, 450.000) = 0 
    [450.000, 475.000) = 2 
    [475.000, 500.000) = 7 
    [500.000, 525.000) = 3 
    [525.000, 550.000) = 3 
    [550.000, 575.000) = 1 
    [575.000, 600.000) = 1 
    [600.000, 625.000) = 3 
    [625.000, 650.000) = 1 
    [650.000, 675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    472.908 ms/op
     p(50.0000) =    503.316 ms/op
     p(90.0000) =    621.176 ms/op
     p(95.0000) =    632.501 ms/op
     p(99.0000) =    633.340 ms/op
     p(99.9000) =    633.340 ms/op
     p(99.9900) =    633.340 ms/op
     p(99.9990) =    633.340 ms/op
     p(99.9999) =    633.340 ms/op
    p(100.0000) =    633.340 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 82.39% complete, ETA 00:27:27
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 604 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 513, 604, 694, 694, 694, 694, 694, 694 ms/op
# Warmup Iteration   2: n = 2, mean = 589 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 536, 589, 643, 643, 643, 643, 643, 643 ms/op
# Warmup Iteration   3: n = 3, mean = 490 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 479, 481, 510, 510, 510, 510, 510, 510 ms/op
Iteration   1: n = 2, mean = 530 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 521, 530, 538, 538, 538, 538, 538, 538 ms/op
Iteration   2: n = 3, mean = 473 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 469, 469, 482, 482, 482, 482, 482, 482 ms/op
Iteration   3: n = 2, mean = 608 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 591, 608, 625, 625, 625, 625, 625, 625 ms/op

# Run progress: 82.58% complete, ETA 00:27:07
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 594 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 513, 594, 675, 675, 675, 675, 675, 675 ms/op
# Warmup Iteration   2: n = 3, mean = 492 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 480, 486, 509, 509, 509, 509, 509, 509 ms/op
# Warmup Iteration   3: n = 2, mean = 665 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 585, 665, 744, 744, 744, 744, 744, 744 ms/op
Iteration   1: n = 2, mean = 526 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 512, 526, 540, 540, 540, 540, 540, 540 ms/op
Iteration   2: n = 3, mean = 485 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 477, 487, 492, 492, 492, 492, 492, 492 ms/op
Iteration   3: n = 3, mean = 483 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 477, 484, 488, 488, 488, 488, 488, 488 ms/op

# Run progress: 82.77% complete, ETA 00:26:48
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 608 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 515, 608, 701, 701, 701, 701, 701, 701 ms/op
# Warmup Iteration   2: n = 2, mean = 570 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 557, 570, 583, 583, 583, 583, 583, 583 ms/op
# Warmup Iteration   3: n = 2, mean = 644 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 627, 644, 662, 662, 662, 662, 662, 662 ms/op
Iteration   1: n = 2, mean = 549 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 524, 549, 574, 574, 574, 574, 574, 574 ms/op
Iteration   2: n = 2, mean = 501 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 481, 501, 521, 521, 521, 521, 521, 521 ms/op
Iteration   3: n = 3, mean = 474 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 471, 472, 478, 478, 478, 478, 478, 478 ms/op


Result "readXxh64":
  N = 22
  mean =    507.892 ±(99.9%) 35.134 ms/op

  Histogram, ms/op:
    [400.000, 425.000) = 0 
    [425.000, 450.000) = 0 
    [450.000, 475.000) = 4 
    [475.000, 500.000) = 9 
    [500.000, 525.000) = 4 
    [525.000, 550.000) = 2 
    [550.000, 575.000) = 1 
    [575.000, 600.000) = 1 
    [600.000, 625.000) = 1 
    [625.000, 650.000) = 0 
    [650.000, 675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    468.713 ms/op
     p(50.0000) =    487.326 ms/op
     p(90.0000) =    586.049 ms/op
     p(95.0000) =    619.918 ms/op
     p(99.0000) =    624.951 ms/op
     p(99.9000) =    624.951 ms/op
     p(99.9900) =    624.951 ms/op
     p(99.9990) =    624.951 ms/op
     p(99.9999) =    624.951 ms/op
    p(100.0000) =    624.951 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 82.95% complete, ETA 00:26:29
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 784 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 671, 784, 897, 897, 897, 897, 897, 897 ms/op
# Warmup Iteration   2: n = 2, mean = 656 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 656, 656, 656, 656, 656, 656, 656, 656 ms/op
# Warmup Iteration   3: n = 2, mean = 770 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 737, 770, 803, 803, 803, 803, 803, 803 ms/op
Iteration   1: n = 2, mean = 622 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 612, 622, 632, 632, 632, 632, 632, 632 ms/op
Iteration   2: n = 2, mean = 711 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 653, 711, 770, 770, 770, 770, 770, 770 ms/op
Iteration   3: n = 2, mean = 696 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 631, 696, 761, 761, 761, 761, 761, 761 ms/op

# Run progress: 83.14% complete, ETA 00:26:10
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 687 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 617, 687, 757, 757, 757, 757, 757, 757 ms/op
# Warmup Iteration   2: n = 2, mean = 658 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 635, 658, 681, 681, 681, 681, 681, 681 ms/op
# Warmup Iteration   3: n = 2, mean = 683 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 623, 683, 743, 743, 743, 743, 743, 743 ms/op
Iteration   1: n = 2, mean = 598 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 597, 598, 599, 599, 599, 599, 599, 599 ms/op
Iteration   2: n = 2, mean = 598 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 596, 598, 601, 601, 601, 601, 601, 601 ms/op
Iteration   3: n = 2, mean = 592 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 591, 592, 592, 592, 592, 592, 592, 592 ms/op

# Run progress: 83.33% complete, ETA 00:25:51
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 852 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 778, 852, 927, 927, 927, 927, 927, 927 ms/op
# Warmup Iteration   2: n = 2, mean = 775 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 677, 775, 872, 872, 872, 872, 872, 872 ms/op
# Warmup Iteration   3: n = 2, mean = 617 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 608, 617, 625, 625, 625, 625, 625, 625 ms/op
Iteration   1: n = 2, mean = 616 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 606, 616, 625, 625, 625, 625, 625, 625 ms/op
Iteration   2: n = 2, mean = 740 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 719, 740, 761, 761, 761, 761, 761, 761 ms/op
Iteration   3: n = 2, mean = 667 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 647, 667, 687, 687, 687, 687, 687, 687 ms/op


Result "readXxh64":
  N = 18
  mean =    648.952 ±(99.9%) 58.881 ms/op

  Histogram, ms/op:
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 0 
    [550.000, 575.000) = 0 
    [575.000, 600.000) = 5 
    [600.000, 625.000) = 4 
    [625.000, 650.000) = 3 
    [650.000, 675.000) = 1 
    [675.000, 700.000) = 1 
    [700.000, 725.000) = 1 
    [725.000, 750.000) = 0 
    [750.000, 775.000) = 3 

  Percentiles, ms/op:
      p(0.0000) =    591.397 ms/op
     p(50.0000) =    628.097 ms/op
     p(90.0000) =    762.105 ms/op
     p(95.0000) =    769.655 ms/op
     p(99.0000) =    769.655 ms/op
     p(99.9000) =    769.655 ms/op
     p(99.9900) =    769.655 ms/op
     p(99.9990) =    769.655 ms/op
     p(99.9999) =    769.655 ms/op
    p(100.0000) =    769.655 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 83.52% complete, ETA 00:25:32
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 698 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 618, 698, 778, 778, 778, 778, 778, 778 ms/op
# Warmup Iteration   2: n = 2, mean = 619 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 618, 619, 620, 620, 620, 620, 620, 620 ms/op
# Warmup Iteration   3: n = 2, mean = 599 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 581, 599, 617, 617, 617, 617, 617, 617 ms/op
Iteration   1: n = 2, mean = 588 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 578, 588, 598, 598, 598, 598, 598, 598 ms/op
Iteration   2: n = 2, mean = 610 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 603, 610, 617, 617, 617, 617, 617, 617 ms/op
Iteration   3: n = 2, mean = 636 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 584, 636, 689, 689, 689, 689, 689, 689 ms/op

# Run progress: 83.71% complete, ETA 00:25:13
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 784 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 669, 784, 900, 900, 900, 900, 900, 900 ms/op
# Warmup Iteration   2: n = 2, mean = 643 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 639, 643, 647, 647, 647, 647, 647, 647 ms/op
# Warmup Iteration   3: n = 2, mean = 596 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 586, 596, 605, 605, 605, 605, 605, 605 ms/op
Iteration   1: n = 2, mean = 736 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 659, 736, 813, 813, 813, 813, 813, 813 ms/op
Iteration   2: n = 2, mean = 597 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 588, 597, 605, 605, 605, 605, 605, 605 ms/op
Iteration   3: n = 2, mean = 585 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 582, 585, 588, 588, 588, 588, 588, 588 ms/op

# Run progress: 83.90% complete, ETA 00:24:55
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 668 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 586, 668, 751, 751, 751, 751, 751, 751 ms/op
# Warmup Iteration   2: n = 2, mean = 614 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 614, 614, 614, 614, 614, 614, 614, 614 ms/op
# Warmup Iteration   3: n = 2, mean = 610 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 591, 610, 629, 629, 629, 629, 629, 629 ms/op
Iteration   1: n = 2, mean = 574 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 574, 574, 575, 575, 575, 575, 575, 575 ms/op
Iteration   2: n = 2, mean = 586 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 585, 586, 587, 587, 587, 587, 587, 587 ms/op
Iteration   3: n = 2, mean = 663 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 608, 663, 718, 718, 718, 718, 718, 718 ms/op


Result "readXxh64":
  N = 18
  mean =    619.417 ±(99.9%) 58.764 ms/op

  Histogram, ms/op:
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 0 
    [550.000, 575.000) = 2 
    [575.000, 600.000) = 8 
    [600.000, 625.000) = 4 
    [625.000, 650.000) = 0 
    [650.000, 675.000) = 1 
    [675.000, 700.000) = 1 
    [700.000, 725.000) = 1 
    [725.000, 750.000) = 0 
    [750.000, 775.000) = 0 
    [775.000, 800.000) = 0 
    [800.000, 825.000) = 1 
    [825.000, 850.000) = 0 
    [850.000, 875.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    573.571 ms/op
     p(50.0000) =    592.970 ms/op
     p(90.0000) =    727.712 ms/op
     p(95.0000) =    812.646 ms/op
     p(99.0000) =    812.646 ms/op
     p(99.9000) =    812.646 ms/op
     p(99.9900) =    812.646 ms/op
     p(99.9990) =    812.646 ms/op
     p(99.9999) =    812.646 ms/op
    p(100.0000) =    812.646 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.write
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 84.09% complete, ETA 00:24:36
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1495 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1495, 1495, 1495, 1495, 1495, 1495, 1495, 1495 ms/op
# Warmup Iteration   2: n = 1, mean = 1483 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483 ms/op
# Warmup Iteration   3: n = 1, mean = 1451 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451 ms/op
Iteration   1: n = 1, mean = 1271 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271 ms/op
Iteration   2: n = 1, mean = 1200 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200 ms/op
Iteration   3: n = 1, mean = 1269 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269 ms/op

# Run progress: 84.28% complete, ETA 00:24:17
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1627 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627 ms/op
# Warmup Iteration   2: n = 1, mean = 1460 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1460, 1460, 1460, 1460, 1460, 1460, 1460, 1460 ms/op
# Warmup Iteration   3: n = 1, mean = 1437 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437 ms/op
Iteration   1: n = 1, mean = 1279 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279 ms/op
Iteration   2: n = 1, mean = 1233 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1233, 1233, 1233, 1233, 1233, 1233, 1233, 1233 ms/op
Iteration   3: n = 1, mean = 1332 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332 ms/op

# Run progress: 84.47% complete, ETA 00:23:58
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1609 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1609, 1609, 1609, 1609, 1609, 1609, 1609, 1609 ms/op
# Warmup Iteration   2: n = 1, mean = 1544 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1544, 1544, 1544, 1544, 1544, 1544, 1544, 1544 ms/op
# Warmup Iteration   3: n = 1, mean = 1548 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548 ms/op
Iteration   1: n = 1, mean = 1283 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1283, 1283, 1283, 1283, 1283, 1283, 1283, 1283 ms/op
Iteration   2: n = 1, mean = 1181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181 ms/op
Iteration   3: n = 1, mean = 1420 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420 ms/op


Result "write":
  N = 9
  mean =   1274.136 ±(99.9%) 119.783 ms/op

  Histogram, ms/op:
    [1100.000, 1125.000) = 0 
    [1125.000, 1150.000) = 0 
    [1150.000, 1175.000) = 0 
    [1175.000, 1200.000) = 2 
    [1200.000, 1225.000) = 0 
    [1225.000, 1250.000) = 1 
    [1250.000, 1275.000) = 2 
    [1275.000, 1300.000) = 2 
    [1300.000, 1325.000) = 0 
    [1325.000, 1350.000) = 1 
    [1350.000, 1375.000) = 0 
    [1375.000, 1400.000) = 0 
    [1400.000, 1425.000) = 1 
    [1425.000, 1450.000) = 0 
    [1450.000, 1475.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1180.697 ms/op
     p(50.0000) =   1270.874 ms/op
     p(90.0000) =   1419.772 ms/op
     p(95.0000) =   1419.772 ms/op
     p(99.0000) =   1419.772 ms/op
     p(99.9000) =   1419.772 ms/op
     p(99.9900) =   1419.772 ms/op
     p(99.9990) =   1419.772 ms/op
     p(99.9999) =   1419.772 ms/op
    p(100.0000) =   1419.772 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.write
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 84.66% complete, ETA 00:23:38
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1992 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1992, 1992, 1992, 1992, 1992, 1992, 1992, 1992 ms/op
# Warmup Iteration   2: n = 1, mean = 1636 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636 ms/op
# Warmup Iteration   3: n = 1, mean = 2070 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2070, 2070, 2070, 2070, 2070, 2070, 2070, 2070 ms/op
Iteration   1: n = 1, mean = 1925 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925 ms/op
Iteration   2: n = 1, mean = 1663 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663 ms/op
Iteration   3: n = 1, mean = 2108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2108, 2108, 2108, 2108, 2108, 2108, 2108, 2108 ms/op

# Run progress: 84.85% complete, ETA 00:23:20
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1965 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965 ms/op
# Warmup Iteration   2: n = 1, mean = 1560 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1560, 1560, 1560, 1560, 1560, 1560, 1560, 1560 ms/op
# Warmup Iteration   3: n = 1, mean = 1745 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1745, 1745, 1745, 1745, 1745, 1745, 1745, 1745 ms/op
Iteration   1: n = 1, mean = 1646 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646 ms/op
Iteration   2: n = 1, mean = 1650 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1650, 1650, 1650, 1650, 1650, 1650, 1650, 1650 ms/op
Iteration   3: n = 1, mean = 1703 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703 ms/op

# Run progress: 85.04% complete, ETA 00:23:01
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1871 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1871, 1871, 1871, 1871, 1871, 1871, 1871, 1871 ms/op
# Warmup Iteration   2: n = 1, mean = 1728 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728 ms/op
# Warmup Iteration   3: n = 1, mean = 1845 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1845, 1845, 1845, 1845, 1845, 1845, 1845, 1845 ms/op
Iteration   1: n = 1, mean = 1707 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707 ms/op
Iteration   2: n = 1, mean = 1548 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548 ms/op
Iteration   3: n = 1, mean = 1770 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770 ms/op


Result "write":
  N = 9
  mean =   1746.695 ±(99.9%) 286.239 ms/op

  Histogram, ms/op:
    [1500.000, 1550.000) = 1 
    [1550.000, 1600.000) = 0 
    [1600.000, 1650.000) = 1 
    [1650.000, 1700.000) = 2 
    [1700.000, 1750.000) = 2 
    [1750.000, 1800.000) = 1 
    [1800.000, 1850.000) = 0 
    [1850.000, 1900.000) = 0 
    [1900.000, 1950.000) = 1 
    [1950.000, 2000.000) = 0 
    [2000.000, 2050.000) = 0 
    [2050.000, 2100.000) = 0 
    [2100.000, 2150.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1547.698 ms/op
     p(50.0000) =   1702.887 ms/op
     p(90.0000) =   2107.638 ms/op
     p(95.0000) =   2107.638 ms/op
     p(99.0000) =   2107.638 ms/op
     p(99.9000) =   2107.638 ms/op
     p(99.9900) =   2107.638 ms/op
     p(99.9990) =   2107.638 ms/op
     p(99.9999) =   2107.638 ms/op
    p(100.0000) =   2107.638 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.write
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 85.23% complete, ETA 00:22:43
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 2592 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592 ms/op
# Warmup Iteration   2: n = 1, mean = 2074 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2074, 2074, 2074, 2074, 2074, 2074, 2074, 2074 ms/op
# Warmup Iteration   3: n = 1, mean = 1615 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615 ms/op
Iteration   1: n = 1, mean = 1739 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1739, 1739, 1739, 1739, 1739, 1739, 1739, 1739 ms/op
Iteration   2: n = 1, mean = 1567 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567 ms/op
Iteration   3: n = 1, mean = 1554 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1554, 1554, 1554, 1554, 1554, 1554, 1554, 1554 ms/op

# Run progress: 85.42% complete, ETA 00:22:24
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 2366 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2366, 2366, 2366, 2366, 2366, 2366, 2366, 2366 ms/op
# Warmup Iteration   2: n = 1, mean = 2127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2127, 2127, 2127, 2127, 2127, 2127, 2127, 2127 ms/op
# Warmup Iteration   3: n = 1, mean = 1669 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1669, 1669, 1669, 1669, 1669, 1669, 1669, 1669 ms/op
Iteration   1: n = 1, mean = 1749 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1749, 1749, 1749, 1749, 1749, 1749, 1749, 1749 ms/op
Iteration   2: n = 1, mean = 1550 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1550, 1550, 1550, 1550, 1550, 1550, 1550, 1550 ms/op
Iteration   3: n = 1, mean = 1596 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596 ms/op

# Run progress: 85.61% complete, ETA 00:22:06
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 2584 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2584, 2584, 2584, 2584, 2584, 2584, 2584, 2584 ms/op
# Warmup Iteration   2: n = 1, mean = 2278 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2278, 2278, 2278, 2278, 2278, 2278, 2278, 2278 ms/op
# Warmup Iteration   3: n = 1, mean = 1684 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1684, 1684, 1684, 1684, 1684, 1684, 1684, 1684 ms/op
Iteration   1: n = 1, mean = 2124 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2124, 2124, 2124, 2124, 2124, 2124, 2124, 2124 ms/op
Iteration   2: n = 1, mean = 1971 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1971, 1971, 1971, 1971, 1971, 1971, 1971, 1971 ms/op
Iteration   3: n = 1, mean = 1615 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1615, 1615, 1615, 1615, 1615, 1615, 1615, 1615 ms/op


Result "write":
  N = 9
  mean =   1718.267 ±(99.9%) 343.566 ms/op

  Histogram, ms/op:
    [1500.000, 1550.000) = 1 
    [1550.000, 1600.000) = 3 
    [1600.000, 1650.000) = 1 
    [1650.000, 1700.000) = 0 
    [1700.000, 1750.000) = 2 
    [1750.000, 1800.000) = 0 
    [1800.000, 1850.000) = 0 
    [1850.000, 1900.000) = 0 
    [1900.000, 1950.000) = 0 
    [1950.000, 2000.000) = 1 
    [2000.000, 2050.000) = 0 
    [2050.000, 2100.000) = 0 
    [2100.000, 2150.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1549.795 ms/op
     p(50.0000) =   1614.807 ms/op
     p(90.0000) =   2124.415 ms/op
     p(95.0000) =   2124.415 ms/op
     p(99.0000) =   2124.415 ms/op
     p(99.9000) =   2124.415 ms/op
     p(99.9900) =   2124.415 ms/op
     p(99.9990) =   2124.415 ms/op
     p(99.9999) =   2124.415 ms/op
    p(100.0000) =   2124.415 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.MvStore.write
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 85.80% complete, ETA 00:21:48
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 3402 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3402, 3402, 3402, 3402, 3402, 3402, 3402, 3402 ms/op
# Warmup Iteration   2: n = 1, mean = 3016 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3016, 3016, 3016, 3016, 3016, 3016, 3016, 3016 ms/op
# Warmup Iteration   3: n = 1, mean = 2999 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2999, 2999, 2999, 2999, 2999, 2999, 2999, 2999 ms/op
Iteration   1: n = 1, mean = 2957 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2957, 2957, 2957, 2957, 2957, 2957, 2957, 2957 ms/op
Iteration   2: n = 1, mean = 2575 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2575, 2575, 2575, 2575, 2575, 2575, 2575, 2575 ms/op
Iteration   3: n = 1, mean = 2869 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2869, 2869, 2869, 2869, 2869, 2869, 2869, 2869 ms/op

# Run progress: 85.98% complete, ETA 00:21:30
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 3326 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3326, 3326, 3326, 3326, 3326, 3326, 3326, 3326 ms/op
# Warmup Iteration   2: n = 1, mean = 3003 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3003, 3003, 3003, 3003, 3003, 3003, 3003, 3003 ms/op
# Warmup Iteration   3: n = 1, mean = 3053 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053 ms/op
Iteration   1: n = 1, mean = 3003 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3003, 3003, 3003, 3003, 3003, 3003, 3003, 3003 ms/op
Iteration   2: n = 1, mean = 2617 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2617, 2617, 2617, 2617, 2617, 2617, 2617, 2617 ms/op
Iteration   3: n = 1, mean = 2684 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2684, 2684, 2684, 2684, 2684, 2684, 2684, 2684 ms/op

# Run progress: 86.17% complete, ETA 00:21:13
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 3397 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3397, 3397, 3397, 3397, 3397, 3397, 3397, 3397 ms/op
# Warmup Iteration   2: n = 1, mean = 3133 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3133, 3133, 3133, 3133, 3133, 3133, 3133, 3133 ms/op
# Warmup Iteration   3: n = 1, mean = 2898 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2898, 2898, 2898, 2898, 2898, 2898, 2898, 2898 ms/op
Iteration   1: n = 1, mean = 3523 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3523, 3523, 3523, 3523, 3523, 3523, 3523, 3523 ms/op
Iteration   2: n = 1, mean = 2659 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2659, 2659, 2659, 2659, 2659, 2659, 2659, 2659 ms/op
Iteration   3: n = 1, mean = 2810 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2810, 2810, 2810, 2810, 2810, 2810, 2810, 2810 ms/op


Result "write":
  N = 9
  mean =   2855.389 ±(99.9%) 491.104 ms/op

  Histogram, ms/op:
    [2500.000, 2600.000) = 1 
    [2600.000, 2700.000) = 3 
    [2700.000, 2800.000) = 0 
    [2800.000, 2900.000) = 2 
    [2900.000, 3000.000) = 1 
    [3000.000, 3100.000) = 1 
    [3100.000, 3200.000) = 0 
    [3200.000, 3300.000) = 0 
    [3300.000, 3400.000) = 0 
    [3400.000, 3500.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2575.303 ms/op
     p(50.0000) =   2810.184 ms/op
     p(90.0000) =   3523.215 ms/op
     p(95.0000) =   3523.215 ms/op
     p(99.0000) =   3523.215 ms/op
     p(99.9000) =   3523.215 ms/op
     p(99.9900) =   3523.215 ms/op
     p(99.9990) =   3523.215 ms/op
     p(99.9999) =   3523.215 ms/op
    p(100.0000) =   3523.215 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 86.36% complete, ETA 00:20:56
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 635 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 539, 635, 731, 731, 731, 731, 731, 731 ms/op
# Warmup Iteration   2: n = 2, mean = 613 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 601, 613, 625, 625, 625, 625, 625, 625 ms/op
# Warmup Iteration   3: n = 2, mean = 595 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 545, 595, 645, 645, 645, 645, 645, 645 ms/op
Iteration   1: n = 2, mean = 574 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 514, 574, 633, 633, 633, 633, 633, 633 ms/op
Iteration   2: n = 2, mean = 589 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 539, 589, 639, 639, 639, 639, 639, 639 ms/op
Iteration   3: n = 2, mean = 666 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 588, 666, 743, 743, 743, 743, 743, 743 ms/op

# Run progress: 86.55% complete, ETA 00:20:38
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 609 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 521, 609, 697, 697, 697, 697, 697, 697 ms/op
# Warmup Iteration   2: n = 2, mean = 607 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 543, 607, 670, 670, 670, 670, 670, 670 ms/op
# Warmup Iteration   3: n = 3, mean = 492 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 467, 472, 538, 538, 538, 538, 538, 538 ms/op
Iteration   1: n = 2, mean = 621 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 621, 621, 622, 622, 622, 622, 622, 622 ms/op
Iteration   2: n = 2, mean = 674 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 641, 674, 707, 707, 707, 707, 707, 707 ms/op
Iteration   3: n = 2, mean = 548 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 510, 548, 587, 587, 587, 587, 587, 587 ms/op

# Run progress: 86.74% complete, ETA 00:20:19
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 617 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 520, 617, 713, 713, 713, 713, 713, 713 ms/op
# Warmup Iteration   2: n = 2, mean = 606 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 573, 606, 639, 639, 639, 639, 639, 639 ms/op
# Warmup Iteration   3: n = 2, mean = 622 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 620, 622, 624, 624, 624, 624, 624, 624 ms/op
Iteration   1: n = 2, mean = 614 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 607, 614, 622, 622, 622, 622, 622, 622 ms/op
Iteration   2: n = 2, mean = 530 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 498, 530, 562, 562, 562, 562, 562, 562 ms/op
Iteration   3: n = 2, mean = 549 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 527, 549, 571, 571, 571, 571, 571, 571 ms/op


Result "readCrc":
  N = 18
  mean =    596.115 ±(99.9%) 62.120 ms/op

  Histogram, ms/op:
    [400.000, 425.000) = 0 
    [425.000, 450.000) = 0 
    [450.000, 475.000) = 0 
    [475.000, 500.000) = 1 
    [500.000, 525.000) = 2 
    [525.000, 550.000) = 2 
    [550.000, 575.000) = 2 
    [575.000, 600.000) = 2 
    [600.000, 625.000) = 4 
    [625.000, 650.000) = 3 
    [650.000, 675.000) = 0 
    [675.000, 700.000) = 0 
    [700.000, 725.000) = 1 
    [725.000, 750.000) = 1 
    [750.000, 775.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    497.549 ms/op
     p(50.0000) =    597.688 ms/op
     p(90.0000) =    710.410 ms/op
     p(95.0000) =    743.440 ms/op
     p(99.0000) =    743.440 ms/op
     p(99.9000) =    743.440 ms/op
     p(99.9900) =    743.440 ms/op
     p(99.9990) =    743.440 ms/op
     p(99.9999) =    743.440 ms/op
    p(100.0000) =    743.440 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readCrc
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 86.93% complete, ETA 00:20:00
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 555 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 513, 555, 597, 597, 597, 597, 597, 597 ms/op
# Warmup Iteration   2: n = 2, mean = 503 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 493, 503, 513, 513, 513, 513, 513, 513 ms/op
# Warmup Iteration   3: n = 2, mean = 620 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 616, 620, 625, 625, 625, 625, 625, 625 ms/op
Iteration   1: n = 2, mean = 606 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 595, 606, 617, 617, 617, 617, 617, 617 ms/op
Iteration   2: n = 2, mean = 524 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 502, 524, 546, 546, 546, 546, 546, 546 ms/op
Iteration   3: n = 2, mean = 517 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 495, 517, 539, 539, 539, 539, 539, 539 ms/op

# Run progress: 87.12% complete, ETA 00:19:42
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 514 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 490, 514, 538, 538, 538, 538, 538, 538 ms/op
# Warmup Iteration   2: n = 2, mean = 589 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 577, 589, 602, 602, 602, 602, 602, 602 ms/op
# Warmup Iteration   3: n = 2, mean = 560 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 522, 560, 598, 598, 598, 598, 598, 598 ms/op
Iteration   1: n = 2, mean = 567 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 505, 567, 628, 628, 628, 628, 628, 628 ms/op
Iteration   2: n = 3, mean = 486 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 478, 480, 501, 501, 501, 501, 501, 501 ms/op
Iteration   3: n = 3, mean = 492 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 489, 493, 494, 494, 494, 494, 494, 494 ms/op

# Run progress: 87.31% complete, ETA 00:19:23
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 623 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 517, 623, 730, 730, 730, 730, 730, 730 ms/op
# Warmup Iteration   2: n = 2, mean = 620 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 603, 620, 636, 636, 636, 636, 636, 636 ms/op
# Warmup Iteration   3: n = 2, mean = 624 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 622, 624, 626, 626, 626, 626, 626, 626 ms/op
Iteration   1: n = 2, mean = 619 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 549, 619, 689, 689, 689, 689, 689, 689 ms/op
Iteration   2: n = 2, mean = 508 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 508, 508, 508, 508, 508, 508, 508, 508 ms/op
Iteration   3: n = 2, mean = 635 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 559, 635, 711, 711, 711, 711, 711, 711 ms/op


Result "readCrc":
  N = 20
  mean =    544.290 ±(99.9%) 60.010 ms/op

  Histogram, ms/op:
    [400.000, 425.000) = 0 
    [425.000, 450.000) = 0 
    [450.000, 475.000) = 0 
    [475.000, 500.000) = 6 
    [500.000, 525.000) = 5 
    [525.000, 550.000) = 3 
    [550.000, 575.000) = 1 
    [575.000, 600.000) = 1 
    [600.000, 625.000) = 1 
    [625.000, 650.000) = 1 
    [650.000, 675.000) = 0 
    [675.000, 700.000) = 1 
    [700.000, 725.000) = 1 
    [725.000, 750.000) = 0 
    [750.000, 775.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    477.626 ms/op
     p(50.0000) =    507.773 ms/op
     p(90.0000) =    682.833 ms/op
     p(95.0000) =    709.834 ms/op
     p(99.0000) =    710.935 ms/op
     p(99.9000) =    710.935 ms/op
     p(99.9900) =    710.935 ms/op
     p(99.9990) =    710.935 ms/op
     p(99.9999) =    710.935 ms/op
    p(100.0000) =    710.935 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 87.50% complete, ETA 00:19:05
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 581 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 536, 581, 626, 626, 626, 626, 626, 626 ms/op
# Warmup Iteration   2: n = 2, mean = 575 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 531, 575, 620, 620, 620, 620, 620, 620 ms/op
# Warmup Iteration   3: n = 2, mean = 603 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 586, 603, 620, 620, 620, 620, 620, 620 ms/op
Iteration   1: n = 2, mean = 605 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 529, 605, 681, 681, 681, 681, 681, 681 ms/op
Iteration   2: n = 3, mean = 496 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 492, 492, 505, 505, 505, 505, 505, 505 ms/op
Iteration   3: n = 3, mean = 492 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 488, 491, 498, 498, 498, 498, 498, 498 ms/op

# Run progress: 87.69% complete, ETA 00:18:47
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 625 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 568, 625, 682, 682, 682, 682, 682, 682 ms/op
# Warmup Iteration   2: n = 2, mean = 621 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 616, 621, 627, 627, 627, 627, 627, 627 ms/op
# Warmup Iteration   3: n = 2, mean = 582 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 524, 582, 641, 641, 641, 641, 641, 641 ms/op
Iteration   1: n = 2, mean = 597 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 533, 597, 662, 662, 662, 662, 662, 662 ms/op
Iteration   2: n = 2, mean = 565 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 522, 565, 607, 607, 607, 607, 607, 607 ms/op
Iteration   3: n = 2, mean = 542 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 490, 542, 593, 593, 593, 593, 593, 593 ms/op

# Run progress: 87.88% complete, ETA 00:18:29
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 611 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 542, 611, 681, 681, 681, 681, 681, 681 ms/op
# Warmup Iteration   2: n = 2, mean = 582 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 530, 582, 633, 633, 633, 633, 633, 633 ms/op
# Warmup Iteration   3: n = 2, mean = 592 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 537, 592, 647, 647, 647, 647, 647, 647 ms/op
Iteration   1: n = 2, mean = 667 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 559, 667, 775, 775, 775, 775, 775, 775 ms/op
Iteration   2: n = 2, mean = 512 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 503, 512, 521, 521, 521, 521, 521, 521 ms/op
Iteration   3: n = 2, mean = 512 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 506, 512, 517, 517, 517, 517, 517, 517 ms/op


Result "readCrc":
  N = 20
  mean =    548.222 ±(99.9%) 67.601 ms/op

  Histogram, ms/op:
    [400.000, 425.000) = 0 
    [425.000, 450.000) = 0 
    [450.000, 475.000) = 0 
    [475.000, 500.000) = 6 
    [500.000, 525.000) = 6 
    [525.000, 550.000) = 2 
    [550.000, 575.000) = 1 
    [575.000, 600.000) = 1 
    [600.000, 625.000) = 1 
    [625.000, 650.000) = 0 
    [650.000, 675.000) = 1 
    [675.000, 700.000) = 1 
    [700.000, 725.000) = 0 
    [725.000, 750.000) = 0 
    [750.000, 775.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    487.588 ms/op
     p(50.0000) =    519.307 ms/op
     p(90.0000) =    678.638 ms/op
     p(95.0000) =    770.179 ms/op
     p(99.0000) =    774.898 ms/op
     p(99.9000) =    774.898 ms/op
     p(99.9900) =    774.898 ms/op
     p(99.9990) =    774.898 ms/op
     p(99.9999) =    774.898 ms/op
    p(100.0000) =    774.898 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readCrc
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 88.07% complete, ETA 00:18:10
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 610 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 535, 610, 685, 685, 685, 685, 685, 685 ms/op
# Warmup Iteration   2: n = 2, mean = 599 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 551, 599, 648, 648, 648, 648, 648, 648 ms/op
# Warmup Iteration   3: n = 2, mean = 600 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 547, 600, 652, 652, 652, 652, 652, 652 ms/op
Iteration   1: n = 2, mean = 607 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 558, 607, 655, 655, 655, 655, 655, 655 ms/op
Iteration   2: n = 2, mean = 526 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 524, 526, 528, 528, 528, 528, 528, 528 ms/op
Iteration   3: n = 2, mean = 667 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 662, 667, 673, 673, 673, 673, 673, 673 ms/op

# Run progress: 88.26% complete, ETA 00:17:52
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 560 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 552, 560, 569, 569, 569, 569, 569, 569 ms/op
# Warmup Iteration   2: n = 2, mean = 540 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 534, 540, 546, 546, 546, 546, 546, 546 ms/op
# Warmup Iteration   3: n = 2, mean = 551 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 546, 551, 555, 555, 555, 555, 555, 555 ms/op
Iteration   1: n = 2, mean = 555 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 554, 555, 556, 556, 556, 556, 556, 556 ms/op
Iteration   2: n = 2, mean = 548 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 543, 548, 554, 554, 554, 554, 554, 554 ms/op
Iteration   3: n = 2, mean = 600 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 546, 600, 653, 653, 653, 653, 653, 653 ms/op

# Run progress: 88.45% complete, ETA 00:17:34
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 675 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 566, 675, 783, 783, 783, 783, 783, 783 ms/op
# Warmup Iteration   2: n = 2, mean = 591 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 541, 591, 641, 641, 641, 641, 641, 641 ms/op
# Warmup Iteration   3: n = 2, mean = 533 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 511, 533, 556, 556, 556, 556, 556, 556 ms/op
Iteration   1: n = 2, mean = 601 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 576, 601, 626, 626, 626, 626, 626, 626 ms/op
Iteration   2: n = 2, mean = 597 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 547, 597, 647, 647, 647, 647, 647, 647 ms/op
Iteration   3: n = 2, mean = 523 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 521, 523, 525, 525, 525, 525, 525, 525 ms/op


Result "readCrc":
  N = 18
  mean =    580.445 ±(99.9%) 51.371 ms/op

  Histogram, ms/op:
    [500.000, 512.500) = 0 
    [512.500, 525.000) = 2 
    [525.000, 537.500) = 2 
    [537.500, 550.000) = 3 
    [550.000, 562.500) = 4 
    [562.500, 575.000) = 0 
    [575.000, 587.500) = 1 
    [587.500, 600.000) = 0 
    [600.000, 612.500) = 0 
    [612.500, 625.000) = 0 
    [625.000, 637.500) = 1 
    [637.500, 650.000) = 1 
    [650.000, 662.500) = 3 
    [662.500, 675.000) = 1 
    [675.000, 687.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    521.142 ms/op
     p(50.0000) =    554.697 ms/op
     p(90.0000) =    662.805 ms/op
     p(95.0000) =    673.186 ms/op
     p(99.0000) =    673.186 ms/op
     p(99.9000) =    673.186 ms/op
     p(99.9900) =    673.186 ms/op
     p(99.9990) =    673.186 ms/op
     p(99.9999) =    673.186 ms/op
    p(100.0000) =    673.186 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readKey
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 88.64% complete, ETA 00:17:16
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 4790 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4790, 4790, 4790, 4790, 4790, 4790, 4790, 4790 ms/op
# Warmup Iteration   2: n = 1, mean = 4438 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4438, 4438, 4438, 4438, 4438, 4438, 4438, 4438 ms/op
# Warmup Iteration   3: n = 1, mean = 4362 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4362, 4362, 4362, 4362, 4362, 4362, 4362, 4362 ms/op
Iteration   1: n = 1, mean = 4631 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4631, 4631, 4631, 4631, 4631, 4631, 4631, 4631 ms/op
Iteration   2: n = 1, mean = 4438 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4438, 4438, 4438, 4438, 4438, 4438, 4438, 4438 ms/op
Iteration   3: 
Bytes	115105792	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 4412 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4412, 4412, 4412, 4412, 4412, 4412, 4412, 4412 ms/op

# Run progress: 88.83% complete, ETA 00:17:01
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 6719 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6719, 6719, 6719, 6719, 6719, 6719, 6719, 6719 ms/op
# Warmup Iteration   2: n = 1, mean = 6661 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6661, 6661, 6661, 6661, 6661, 6661, 6661, 6661 ms/op
# Warmup Iteration   3: n = 1, mean = 6820 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6820, 6820, 6820, 6820, 6820, 6820, 6820, 6820 ms/op
Iteration   1: n = 1, mean = 6795 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6795, 6795, 6795, 6795, 6795, 6795, 6795, 6795 ms/op
Iteration   2: n = 1, mean = 6484 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6484, 6484, 6484, 6484, 6484, 6484, 6484, 6484 ms/op
Iteration   3: 
Bytes	115052544	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 6577 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 6577, 6577, 6577, 6577, 6577, 6577, 6577, 6577 ms/op

# Run progress: 89.02% complete, ETA 00:16:47
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 4807 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4807, 4807, 4807, 4807, 4807, 4807, 4807, 4807 ms/op
# Warmup Iteration   2: n = 1, mean = 4547 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4547, 4547, 4547, 4547, 4547, 4547, 4547, 4547 ms/op
# Warmup Iteration   3: n = 1, mean = 4605 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4605, 4605, 4605, 4605, 4605, 4605, 4605, 4605 ms/op
Iteration   1: n = 1, mean = 4454 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4454, 4454, 4454, 4454, 4454, 4454, 4454, 4454 ms/op
Iteration   2: n = 1, mean = 4446 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446 ms/op
Iteration   3: 
Bytes	115093504	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-true-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 4513 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4513, 4513, 4513, 4513, 4513, 4513, 4513, 4513 ms/op


Result "readKey":
  N = 9
  mean =   5194.412 ±(99.9%) 1803.070 ms/op

  Histogram, ms/op:
    [4000.000, 4250.000) = 0 
    [4250.000, 4500.000) = 4 
    [4500.000, 4750.000) = 2 
    [4750.000, 5000.000) = 0 
    [5000.000, 5250.000) = 0 
    [5250.000, 5500.000) = 0 
    [5500.000, 5750.000) = 0 
    [5750.000, 6000.000) = 0 
    [6000.000, 6250.000) = 0 
    [6250.000, 6500.000) = 1 
    [6500.000, 6750.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   4412.408 ms/op
     p(50.0000) =   4513.071 ms/op
     p(90.0000) =   6794.772 ms/op
     p(95.0000) =   6794.772 ms/op
     p(99.0000) =   6794.772 ms/op
     p(99.9000) =   6794.772 ms/op
     p(99.9900) =   6794.772 ms/op
     p(99.9990) =   6794.772 ms/op
     p(99.9999) =   6794.772 ms/op
    p(100.0000) =   6794.772 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readKey
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 89.20% complete, ETA 00:16:31
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 14194 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 14194, 14194, 14194, 14194, 14194, 14194, 14194, 14194 ms/op
# Warmup Iteration   2: n = 1, mean = 13959 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 13959, 13959, 13959, 13959, 13959, 13959, 13959, 13959 ms/op
# Warmup Iteration   3: n = 1, mean = 13908 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 13908, 13908, 13908, 13908, 13908, 13908, 13908, 13908 ms/op
Iteration   1: n = 1, mean = 13975 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 13975, 13975, 13975, 13975, 13975, 13975, 13975, 13975 ms/op
Iteration   2: n = 1, mean = 13841 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 13841, 13841, 13841, 13841, 13841, 13841, 13841, 13841 ms/op
Iteration   3: 
Bytes	115032064	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 13455 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 13455, 13455, 13455, 13455, 13455, 13455, 13455, 13455 ms/op

# Run progress: 89.39% complete, ETA 00:16:22
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 10536 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10536, 10536, 10536, 10536, 10536, 10536, 10536, 10536 ms/op
# Warmup Iteration   2: n = 1, mean = 10586 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10586, 10586, 10586, 10586, 10586, 10586, 10586, 10586 ms/op
# Warmup Iteration   3: n = 1, mean = 10268 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10268, 10268, 10268, 10268, 10268, 10268, 10268, 10268 ms/op
Iteration   1: n = 1, mean = 10486 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10486, 10486, 10486, 10486, 10486, 10486, 10486, 10486 ms/op
Iteration   2: n = 1, mean = 10301 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10301, 10301, 10301, 10301, 10301, 10301, 10301, 10301 ms/op
Iteration   3: 
Bytes	115003392	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 10268 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10268, 10268, 10268, 10268, 10268, 10268, 10268, 10268 ms/op

# Run progress: 89.58% complete, ETA 00:16:10
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 11056 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11056, 11056, 11056, 11056, 11056, 11056, 11056, 11056 ms/op
# Warmup Iteration   2: n = 1, mean = 11073 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11073, 11073, 11073, 11073, 11073, 11073, 11073, 11073 ms/op
# Warmup Iteration   3: n = 1, mean = 10989 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10989, 10989, 10989, 10989, 10989, 10989, 10989, 10989 ms/op
Iteration   1: n = 1, mean = 10872 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10872, 10872, 10872, 10872, 10872, 10872, 10872, 10872 ms/op
Iteration   2: n = 1, mean = 10754 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10754, 10754, 10754, 10754, 10754, 10754, 10754, 10754 ms/op
Iteration   3: 
Bytes	115007488	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-true-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 10469 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10469, 10469, 10469, 10469, 10469, 10469, 10469, 10469 ms/op


Result "readKey":
  N = 9
  mean =  11602.377 ±(99.9%) 2744.338 ms/op

  Histogram, ms/op:
    [10000.000, 10250.000) = 0 
    [10250.000, 10500.000) = 4 
    [10500.000, 10750.000) = 0 
    [10750.000, 11000.000) = 2 
    [11000.000, 11250.000) = 0 
    [11250.000, 11500.000) = 0 
    [11500.000, 11750.000) = 0 
    [11750.000, 12000.000) = 0 
    [12000.000, 12250.000) = 0 
    [12250.000, 12500.000) = 0 
    [12500.000, 12750.000) = 0 
    [12750.000, 13000.000) = 0 
    [13000.000, 13250.000) = 0 
    [13250.000, 13500.000) = 1 
    [13500.000, 13750.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =  10267.656 ms/op
     p(50.0000) =  10754.195 ms/op
     p(90.0000) =  13975.421 ms/op
     p(95.0000) =  13975.421 ms/op
     p(99.0000) =  13975.421 ms/op
     p(99.9000) =  13975.421 ms/op
     p(99.9900) =  13975.421 ms/op
     p(99.9990) =  13975.421 ms/op
     p(99.9999) =  13975.421 ms/op
    p(100.0000) =  13975.421 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readKey
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 89.77% complete, ETA 00:15:58
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 2785 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2785, 2785, 2785, 2785, 2785, 2785, 2785, 2785 ms/op
# Warmup Iteration   2: n = 1, mean = 2735 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2735, 2735, 2735, 2735, 2735, 2735, 2735, 2735 ms/op
# Warmup Iteration   3: n = 1, mean = 3196 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3196, 3196, 3196, 3196, 3196, 3196, 3196, 3196 ms/op
Iteration   1: n = 1, mean = 3087 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3087, 3087, 3087, 3087, 3087, 3087, 3087, 3087 ms/op
Iteration   2: n = 1, mean = 2953 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2953, 2953, 2953, 2953, 2953, 2953, 2953, 2953 ms/op
Iteration   3: 
Bytes	115347456	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 3276 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3276, 3276, 3276, 3276, 3276, 3276, 3276, 3276 ms/op

# Run progress: 89.96% complete, ETA 00:15:41
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 3066 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3066, 3066, 3066, 3066, 3066, 3066, 3066, 3066 ms/op
# Warmup Iteration   2: n = 1, mean = 3129 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3129, 3129, 3129, 3129, 3129, 3129, 3129, 3129 ms/op
# Warmup Iteration   3: n = 1, mean = 3091 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3091, 3091, 3091, 3091, 3091, 3091, 3091, 3091 ms/op
Iteration   1: n = 1, mean = 3347 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3347, 3347, 3347, 3347, 3347, 3347, 3347, 3347 ms/op
Iteration   2: n = 1, mean = 3062 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3062, 3062, 3062, 3062, 3062, 3062, 3062, 3062 ms/op
Iteration   3: 
Bytes	115351552	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 3062 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3062, 3062, 3062, 3062, 3062, 3062, 3062, 3062 ms/op

# Run progress: 90.15% complete, ETA 00:15:23
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 3007 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3007, 3007, 3007, 3007, 3007, 3007, 3007, 3007 ms/op
# Warmup Iteration   2: n = 1, mean = 2739 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2739, 2739, 2739, 2739, 2739, 2739, 2739, 2739 ms/op
# Warmup Iteration   3: n = 1, mean = 2932 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2932, 2932, 2932, 2932, 2932, 2932, 2932, 2932 ms/op
Iteration   1: n = 1, mean = 2550 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2550, 2550, 2550, 2550, 2550, 2550, 2550, 2550 ms/op
Iteration   2: n = 1, mean = 2697 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2697, 2697, 2697, 2697, 2697, 2697, 2697, 2697 ms/op
Iteration   3: 
Bytes	115347456	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-false-num-1000000-sequential-true-valRandom-false-valSize-100
n = 1, mean = 2655 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2655, 2655, 2655, 2655, 2655, 2655, 2655, 2655 ms/op


Result "readKey":
  N = 9
  mean =   2965.373 ±(99.9%) 466.451 ms/op

  Histogram, ms/op:
    [2500.000, 2550.000) = 0 
    [2550.000, 2600.000) = 1 
    [2600.000, 2650.000) = 0 
    [2650.000, 2700.000) = 2 
    [2700.000, 2750.000) = 0 
    [2750.000, 2800.000) = 0 
    [2800.000, 2850.000) = 0 
    [2850.000, 2900.000) = 0 
    [2900.000, 2950.000) = 0 
    [2950.000, 3000.000) = 1 
    [3000.000, 3050.000) = 0 
    [3050.000, 3100.000) = 3 
    [3100.000, 3150.000) = 0 
    [3150.000, 3200.000) = 0 
    [3200.000, 3250.000) = 0 
    [3250.000, 3300.000) = 1 
    [3300.000, 3350.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   2550.137 ms/op
     p(50.0000) =   3061.842 ms/op
     p(90.0000) =   3347.055 ms/op
     p(95.0000) =   3347.055 ms/op
     p(99.0000) =   3347.055 ms/op
     p(99.9000) =   3347.055 ms/op
     p(99.9900) =   3347.055 ms/op
     p(99.9990) =   3347.055 ms/op
     p(99.9999) =   3347.055 ms/op
    p(100.0000) =   3347.055 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readKey
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 90.34% complete, ETA 00:15:06
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 10838 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10838, 10838, 10838, 10838, 10838, 10838, 10838, 10838 ms/op
# Warmup Iteration   2: n = 1, mean = 10637 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10637, 10637, 10637, 10637, 10637, 10637, 10637, 10637 ms/op
# Warmup Iteration   3: n = 1, mean = 11476 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11476, 11476, 11476, 11476, 11476, 11476, 11476, 11476 ms/op
Iteration   1: n = 1, mean = 11023 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11023, 11023, 11023, 11023, 11023, 11023, 11023, 11023 ms/op
Iteration   2: n = 1, mean = 11107 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 11107, 11107, 11107, 11107, 11107, 11107, 11107, 11107 ms/op
Iteration   3: 
Bytes	118353920	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 10687 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 10687, 10687, 10687, 10687, 10687, 10687, 10687, 10687 ms/op

# Run progress: 90.53% complete, ETA 00:14:54
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 17549 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 17549, 17549, 17549, 17549, 17549, 17549, 17549, 17549 ms/op
# Warmup Iteration   2: n = 1, mean = 17750 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 17750, 17750, 17750, 17750, 17750, 17750, 17750, 17750 ms/op
# Warmup Iteration   3: n = 1, mean = 17683 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 17683, 17683, 17683, 17683, 17683, 17683, 17683, 17683 ms/op
Iteration   1: n = 1, mean = 17415 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 17415, 17415, 17415, 17415, 17415, 17415, 17415, 17415 ms/op
Iteration   2: n = 1, mean = 17750 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 17750, 17750, 17750, 17750, 17750, 17750, 17750, 17750 ms/op
Iteration   3: 
Bytes	118407168	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 17885 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 17885, 17885, 17885, 17885, 17885, 17885, 17885, 17885 ms/op

# Run progress: 90.72% complete, ETA 00:14:45
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 17046 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 17046, 17046, 17046, 17046, 17046, 17046, 17046, 17046 ms/op
# Warmup Iteration   2: n = 1, mean = 16693 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 16693, 16693, 16693, 16693, 16693, 16693, 16693, 16693 ms/op
# Warmup Iteration   3: n = 1, mean = 16727 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 16727, 16727, 16727, 16727, 16727, 16727, 16727, 16727 ms/op
Iteration   1: n = 1, mean = 16475 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 16475, 16475, 16475, 16475, 16475, 16475, 16475, 16475 ms/op
Iteration   2: n = 1, mean = 16693 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 16693, 16693, 16693, 16693, 16693, 16693, 16693, 16693 ms/op
Iteration   3: 
Bytes	118403072	org.lmdbjava.bench.RocksDb.readKey-SampleTime-intKey-false-num-1000000-sequential-false-valRandom-false-valSize-100
n = 1, mean = 16526 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 16526, 16526, 16526, 16526, 16526, 16526, 16526, 16526 ms/op


Result "readKey":
  N = 9
  mean =  15062.212 ±(99.9%) 5268.358 ms/op

  Histogram, ms/op:
    [10000.000, 10500.000) = 0 
    [10500.000, 11000.000) = 1 
    [11000.000, 11500.000) = 2 
    [11500.000, 12000.000) = 0 
    [12000.000, 12500.000) = 0 
    [12500.000, 13000.000) = 0 
    [13000.000, 13500.000) = 0 
    [13500.000, 14000.000) = 0 
    [14000.000, 14500.000) = 0 
    [14500.000, 15000.000) = 0 
    [15000.000, 15500.000) = 0 
    [15500.000, 16000.000) = 0 
    [16000.000, 16500.000) = 1 
    [16500.000, 17000.000) = 2 
    [17000.000, 17500.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =  10687.087 ms/op
     p(50.0000) =  16525.558 ms/op
     p(90.0000) =  17884.512 ms/op
     p(95.0000) =  17884.512 ms/op
     p(99.0000) =  17884.512 ms/op
     p(99.9000) =  17884.512 ms/op
     p(99.9900) =  17884.512 ms/op
     p(99.9990) =  17884.512 ms/op
     p(99.9999) =  17884.512 ms/op
    p(100.0000) =  17884.512 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readRev
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 90.91% complete, ETA 00:14:36
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 614 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 580, 614, 649, 649, 649, 649, 649, 649 ms/op
# Warmup Iteration   2: n = 2, mean = 565 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 563, 565, 566, 566, 566, 566, 566, 566 ms/op
# Warmup Iteration   3: n = 2, mean = 554 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 553, 554, 556, 556, 556, 556, 556, 556 ms/op
Iteration   1: n = 2, mean = 632 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 586, 632, 678, 678, 678, 678, 678, 678 ms/op
Iteration   2: n = 2, mean = 562 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 562, 562, 562, 562, 562, 562, 562, 562 ms/op
Iteration   3: n = 2, mean = 556 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 555, 556, 558, 558, 558, 558, 558, 558 ms/op

# Run progress: 91.10% complete, ETA 00:14:17
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 666 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 622, 666, 710, 710, 710, 710, 710, 710 ms/op
# Warmup Iteration   2: n = 2, mean = 667 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 619, 667, 715, 715, 715, 715, 715, 715 ms/op
# Warmup Iteration   3: n = 2, mean = 717 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 715, 717, 719, 719, 719, 719, 719, 719 ms/op
Iteration   1: n = 2, mean = 590 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 585, 590, 595, 595, 595, 595, 595, 595 ms/op
Iteration   2: n = 2, mean = 619 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 596, 619, 642, 642, 642, 642, 642, 642 ms/op
Iteration   3: n = 2, mean = 655 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 610, 655, 699, 699, 699, 699, 699, 699 ms/op

# Run progress: 91.29% complete, ETA 00:13:58
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 684 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 597, 684, 772, 772, 772, 772, 772, 772 ms/op
# Warmup Iteration   2: n = 2, mean = 601 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 582, 601, 620, 620, 620, 620, 620, 620 ms/op
# Warmup Iteration   3: n = 2, mean = 606 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 551, 606, 662, 662, 662, 662, 662, 662 ms/op
Iteration   1: n = 2, mean = 669 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 592, 669, 746, 746, 746, 746, 746, 746 ms/op
Iteration   2: n = 2, mean = 660 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 595, 660, 725, 725, 725, 725, 725, 725 ms/op
Iteration   3: n = 2, mean = 553 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 547, 553, 558, 558, 558, 558, 558, 558 ms/op


Result "readRev":
  N = 18
  mean =    610.563 ±(99.9%) 57.513 ms/op

  Histogram, ms/op:
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 1 
    [550.000, 575.000) = 5 
    [575.000, 600.000) = 6 
    [600.000, 625.000) = 1 
    [625.000, 650.000) = 1 
    [650.000, 675.000) = 0 
    [675.000, 700.000) = 2 
    [700.000, 725.000) = 1 
    [725.000, 750.000) = 1 
    [750.000, 775.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    547.357 ms/op
     p(50.0000) =    593.494 ms/op
     p(90.0000) =    726.663 ms/op
     p(95.0000) =    745.538 ms/op
     p(99.0000) =    745.538 ms/op
     p(99.9000) =    745.538 ms/op
     p(99.9900) =    745.538 ms/op
     p(99.9990) =    745.538 ms/op
     p(99.9999) =    745.538 ms/op
    p(100.0000) =    745.538 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readRev
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 91.48% complete, ETA 00:13:39
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 621 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 590, 621, 652, 652, 652, 652, 652, 652 ms/op
# Warmup Iteration   2: n = 2, mean = 582 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 582, 582, 583, 583, 583, 583, 583, 583 ms/op
# Warmup Iteration   3: n = 2, mean = 569 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 569, 569, 569, 569, 569, 569, 569, 569 ms/op
Iteration   1: n = 2, mean = 647 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 596, 647, 698, 698, 698, 698, 698, 698 ms/op
Iteration   2: n = 2, mean = 653 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 617, 653, 689, 689, 689, 689, 689, 689 ms/op
Iteration   3: n = 2, mean = 571 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 568, 571, 575, 575, 575, 575, 575, 575 ms/op

# Run progress: 91.67% complete, ETA 00:13:20
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 635 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 590, 635, 681, 681, 681, 681, 681, 681 ms/op
# Warmup Iteration   2: n = 2, mean = 591 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 575, 591, 608, 608, 608, 608, 608, 608 ms/op
# Warmup Iteration   3: n = 2, mean = 574 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 573, 574, 576, 576, 576, 576, 576, 576 ms/op
Iteration   1: n = 2, mean = 570 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 568, 570, 573, 573, 573, 573, 573, 573 ms/op
Iteration   2: n = 2, mean = 585 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 581, 585, 589, 589, 589, 589, 589, 589 ms/op
Iteration   3: n = 2, mean = 580 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 573, 580, 587, 587, 587, 587, 587, 587 ms/op

# Run progress: 91.86% complete, ETA 00:13:01
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 634 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 586, 634, 683, 683, 683, 683, 683, 683 ms/op
# Warmup Iteration   2: n = 2, mean = 579 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 578, 579, 580, 580, 580, 580, 580, 580 ms/op
# Warmup Iteration   3: n = 2, mean = 579 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 575, 579, 583, 583, 583, 583, 583, 583 ms/op
Iteration   1: n = 2, mean = 568 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 567, 568, 568, 568, 568, 568, 568, 568 ms/op
Iteration   2: n = 2, mean = 577 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 571, 577, 583, 583, 583, 583, 583, 583 ms/op
Iteration   3: n = 2, mean = 571 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 571, 571, 571, 571, 571, 571, 571, 571 ms/op


Result "readRev":
  N = 18
  mean =    591.455 ±(99.9%) 36.665 ms/op

  Histogram, ms/op:
    [500.000, 512.500) = 0 
    [512.500, 525.000) = 0 
    [525.000, 537.500) = 0 
    [537.500, 550.000) = 0 
    [550.000, 562.500) = 0 
    [562.500, 575.000) = 10 
    [575.000, 587.500) = 3 
    [587.500, 600.000) = 2 
    [600.000, 612.500) = 0 
    [612.500, 625.000) = 1 
    [625.000, 637.500) = 0 
    [637.500, 650.000) = 0 
    [650.000, 662.500) = 0 
    [662.500, 675.000) = 0 
    [675.000, 687.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    567.280 ms/op
     p(50.0000) =    573.571 ms/op
     p(90.0000) =    689.858 ms/op
     p(95.0000) =    698.352 ms/op
     p(99.0000) =    698.352 ms/op
     p(99.9000) =    698.352 ms/op
     p(99.9900) =    698.352 ms/op
     p(99.9990) =    698.352 ms/op
     p(99.9999) =    698.352 ms/op
    p(100.0000) =    698.352 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readRev
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 92.05% complete, ETA 00:12:42
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 584 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 548, 584, 620, 620, 620, 620, 620, 620 ms/op
# Warmup Iteration   2: n = 2, mean = 601 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 548, 601, 653, 653, 653, 653, 653, 653 ms/op
# Warmup Iteration   3: n = 2, mean = 651 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 577, 651, 725, 725, 725, 725, 725, 725 ms/op
Iteration   1: n = 2, mean = 564 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 543, 564, 585, 585, 585, 585, 585, 585 ms/op
Iteration   2: n = 2, mean = 541 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 540, 541, 542, 542, 542, 542, 542, 542 ms/op
Iteration   3: n = 2, mean = 567 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 537, 567, 598, 598, 598, 598, 598, 598 ms/op

# Run progress: 92.23% complete, ETA 00:12:23
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 596 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 573, 596, 619, 619, 619, 619, 619, 619 ms/op
# Warmup Iteration   2: n = 2, mean = 632 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 579, 632, 685, 685, 685, 685, 685, 685 ms/op
# Warmup Iteration   3: n = 2, mean = 554 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 552, 554, 556, 556, 556, 556, 556, 556 ms/op
Iteration   1: n = 2, mean = 551 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 549, 551, 553, 553, 553, 553, 553, 553 ms/op
Iteration   2: n = 2, mean = 629 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 581, 629, 677, 677, 677, 677, 677, 677 ms/op
Iteration   3: n = 2, mean = 551 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 549, 551, 553, 553, 553, 553, 553, 553 ms/op

# Run progress: 92.42% complete, ETA 00:12:04
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 571 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 563, 571, 579, 579, 579, 579, 579, 579 ms/op
# Warmup Iteration   2: n = 2, mean = 552 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 546, 552, 558, 558, 558, 558, 558, 558 ms/op
# Warmup Iteration   3: n = 2, mean = 551 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 549, 551, 552, 552, 552, 552, 552, 552 ms/op
Iteration   1: n = 2, mean = 621 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 570, 621, 672, 672, 672, 672, 672, 672 ms/op
Iteration   2: n = 2, mean = 566 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 559, 566, 573, 573, 573, 573, 573, 573 ms/op
Iteration   3: n = 2, mean = 553 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 547, 553, 559, 559, 559, 559, 559, 559 ms/op


Result "readRev":
  N = 18
  mean =    571.532 ±(99.9%) 38.430 ms/op

  Histogram, ms/op:
    [500.000, 512.500) = 0 
    [512.500, 525.000) = 0 
    [525.000, 537.500) = 1 
    [537.500, 550.000) = 6 
    [550.000, 562.500) = 4 
    [562.500, 575.000) = 2 
    [575.000, 587.500) = 2 
    [587.500, 600.000) = 1 
    [600.000, 612.500) = 0 
    [612.500, 625.000) = 0 
    [625.000, 637.500) = 0 
    [637.500, 650.000) = 0 
    [650.000, 662.500) = 0 
    [662.500, 675.000) = 1 
    [675.000, 687.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    536.871 ms/op
     p(50.0000) =    555.745 ms/op
     p(90.0000) =    672.662 ms/op
     p(95.0000) =    677.380 ms/op
     p(99.0000) =    677.380 ms/op
     p(99.9000) =    677.380 ms/op
     p(99.9900) =    677.380 ms/op
     p(99.9990) =    677.380 ms/op
     p(99.9999) =    677.380 ms/op
    p(100.0000) =    677.380 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readRev
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 92.61% complete, ETA 00:11:46
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 728 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 633, 728, 823, 823, 823, 823, 823, 823 ms/op
# Warmup Iteration   2: n = 2, mean = 634 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 610, 634, 657, 657, 657, 657, 657, 657 ms/op
# Warmup Iteration   3: n = 2, mean = 623 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 623, 623, 624, 624, 624, 624, 624, 624 ms/op
Iteration   1: n = 2, mean = 622 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 616, 622, 628, 628, 628, 628, 628, 628 ms/op
Iteration   2: n = 2, mean = 631 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 631, 631, 631, 631, 631, 631, 631, 631 ms/op
Iteration   3: n = 2, mean = 611 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 608, 611, 614, 614, 614, 614, 614, 614 ms/op

# Run progress: 92.80% complete, ETA 00:11:27
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 633 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 599, 633, 667, 667, 667, 667, 667, 667 ms/op
# Warmup Iteration   2: n = 2, mean = 596 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 596, 596, 596, 596, 596, 596, 596, 596 ms/op
# Warmup Iteration   3: n = 2, mean = 644 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 590, 644, 697, 697, 697, 697, 697, 697 ms/op
Iteration   1: n = 2, mean = 684 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 618, 684, 750, 750, 750, 750, 750, 750 ms/op
Iteration   2: n = 2, mean = 592 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 588, 592, 596, 596, 596, 596, 596, 596 ms/op
Iteration   3: n = 2, mean = 592 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 587, 592, 598, 598, 598, 598, 598, 598 ms/op

# Run progress: 92.99% complete, ETA 00:11:09
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 726 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 700, 726, 752, 752, 752, 752, 752, 752 ms/op
# Warmup Iteration   2: n = 2, mean = 698 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 642, 698, 755, 755, 755, 755, 755, 755 ms/op
# Warmup Iteration   3: n = 2, mean = 724 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 699, 724, 748, 748, 748, 748, 748, 748 ms/op
Iteration   1: n = 2, mean = 687 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 621, 687, 753, 753, 753, 753, 753, 753 ms/op
Iteration   2: n = 2, mean = 608 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 603, 608, 612, 612, 612, 612, 612, 612 ms/op
Iteration   3: n = 2, mean = 724 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 649, 724, 798, 798, 798, 798, 798, 798 ms/op


Result "readRev":
  N = 18
  mean =    638.932 ±(99.9%) 57.609 ms/op

  Histogram, ms/op:
    [500.000, 525.000) = 0 
    [525.000, 550.000) = 0 
    [550.000, 575.000) = 0 
    [575.000, 600.000) = 4 
    [600.000, 625.000) = 7 
    [625.000, 650.000) = 4 
    [650.000, 675.000) = 0 
    [675.000, 700.000) = 0 
    [700.000, 725.000) = 0 
    [725.000, 750.000) = 1 
    [750.000, 775.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    587.203 ms/op
     p(50.0000) =    616.563 ms/op
     p(90.0000) =    757.386 ms/op
     p(95.0000) =    797.966 ms/op
     p(99.0000) =    797.966 ms/op
     p(99.9000) =    797.966 ms/op
     p(99.9900) =    797.966 ms/op
     p(99.9990) =    797.966 ms/op
     p(99.9999) =    797.966 ms/op
    p(100.0000) =    797.966 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 93.18% complete, ETA 00:10:50
# Fork: 1 of 3
# Warmup Iteration   1: n = 3, mean = 444 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 381, 419, 531, 531, 531, 531, 531, 531 ms/op
# Warmup Iteration   2: n = 3, mean = 437 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 389, 407, 515, 515, 515, 515, 515, 515 ms/op
# Warmup Iteration   3: n = 3, mean = 445 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 388, 418, 528, 528, 528, 528, 528, 528 ms/op
Iteration   1: n = 3, mean = 427 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 395, 412, 473, 473, 473, 473, 473, 473 ms/op
Iteration   2: n = 3, mean = 368 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 362, 363, 379, 379, 379, 379, 379, 379 ms/op
Iteration   3: n = 3, mean = 402 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 361, 364, 481, 481, 481, 481, 481, 481 ms/op

# Run progress: 93.37% complete, ETA 00:10:31
# Fork: 2 of 3
# Warmup Iteration   1: n = 3, mean = 397 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 367, 374, 450, 450, 450, 450, 450, 450 ms/op
# Warmup Iteration   2: n = 3, mean = 439 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 375, 401, 541, 541, 541, 541, 541, 541 ms/op
# Warmup Iteration   3: n = 3, mean = 455 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 443, 456, 466, 466, 466, 466, 466, 466 ms/op
Iteration   1: n = 3, mean = 434 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 407, 408, 485, 485, 485, 485, 485, 485 ms/op
Iteration   2: n = 3, mean = 367 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 351, 358, 392, 392, 392, 392, 392, 392 ms/op
Iteration   3: n = 3, mean = 400 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 344, 387, 467, 467, 467, 467, 467, 467 ms/op

# Run progress: 93.56% complete, ETA 00:10:13
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 432 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 359, 402, 536, 536, 536, 536, 536, 536 ms/op
# Warmup Iteration   2: n = 3, mean = 399 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 351, 386, 460, 460, 460, 460, 460, 460 ms/op
# Warmup Iteration   3: n = 3, mean = 346 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 343, 344, 350, 350, 350, 350, 350, 350 ms/op
Iteration   1: n = 3, mean = 393 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 351, 384, 446, 446, 446, 446, 446, 446 ms/op
Iteration   2: n = 3, mean = 346 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 343, 345, 349, 349, 349, 349, 349, 349 ms/op
Iteration   3: n = 3, mean = 379 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 344, 345, 447, 447, 447, 447, 447, 447 ms/op


Result "readSeq":
  N = 27
  mean =    390.497 ±(99.9%) 33.450 ms/op

  Histogram, ms/op:
    [300.000, 312.500) = 0 
    [312.500, 325.000) = 0 
    [325.000, 337.500) = 0 
    [337.500, 350.000) = 6 
    [350.000, 362.500) = 5 
    [362.500, 375.000) = 2 
    [375.000, 387.500) = 3 
    [387.500, 400.000) = 2 
    [400.000, 412.500) = 3 
    [412.500, 425.000) = 0 
    [425.000, 437.500) = 0 
    [437.500, 450.000) = 2 
    [450.000, 462.500) = 0 
    [462.500, 475.000) = 2 
    [475.000, 487.500) = 2 

  Percentiles, ms/op:
      p(0.0000) =    342.884 ms/op
     p(50.0000) =    379.060 ms/op
     p(90.0000) =    474.900 ms/op
     p(95.0000) =    483.603 ms/op
     p(99.0000) =    485.491 ms/op
     p(99.9000) =    485.491 ms/op
     p(99.9900) =    485.491 ms/op
     p(99.9990) =    485.491 ms/op
     p(99.9999) =    485.491 ms/op
    p(100.0000) =    485.491 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readSeq
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 93.75% complete, ETA 00:09:54
# Fork: 1 of 3
# Warmup Iteration   1: n = 3, mean = 390 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 362, 374, 435, 435, 435, 435, 435, 435 ms/op
# Warmup Iteration   2: n = 3, mean = 409 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 396, 415, 417, 417, 417, 417, 417, 417 ms/op
# Warmup Iteration   3: n = 3, mean = 359 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 354, 357, 368, 368, 368, 368, 368, 368 ms/op
Iteration   1: n = 3, mean = 355 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 354, 355, 357, 357, 357, 357, 357, 357 ms/op
Iteration   2: n = 3, mean = 406 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 362, 394, 462, 462, 462, 462, 462, 462 ms/op
Iteration   3: n = 3, mean = 359 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 355, 355, 368, 368, 368, 368, 368, 368 ms/op

# Run progress: 93.94% complete, ETA 00:09:36
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 512 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 423, 512, 602, 602, 602, 602, 602, 602 ms/op
# Warmup Iteration   2: n = 3, mean = 434 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 383, 417, 503, 503, 503, 503, 503, 503 ms/op
# Warmup Iteration   3: n = 3, mean = 400 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 362, 379, 460, 460, 460, 460, 460, 460 ms/op
Iteration   1: n = 3, mean = 417 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 374, 404, 473, 473, 473, 473, 473, 473 ms/op
Iteration   2: n = 3, mean = 383 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 363, 367, 418, 418, 418, 418, 418, 418 ms/op
Iteration   3: n = 3, mean = 364 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 363, 364, 365, 365, 365, 365, 365, 365 ms/op

# Run progress: 94.13% complete, ETA 00:09:17
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 391 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 363, 377, 432, 432, 432, 432, 432, 432 ms/op
# Warmup Iteration   2: n = 3, mean = 408 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 396, 412, 417, 417, 417, 417, 417, 417 ms/op
# Warmup Iteration   3: n = 3, mean = 406 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 364, 395, 458, 458, 458, 458, 458, 458 ms/op
Iteration   1: n = 3, mean = 400 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 358, 396, 446, 446, 446, 446, 446, 446 ms/op
Iteration   2: n = 3, mean = 419 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 398, 401, 459, 459, 459, 459, 459, 459 ms/op
Iteration   3: n = 3, mean = 420 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 387, 418, 455, 455, 455, 455, 455, 455 ms/op


Result "readSeq":
  N = 27
  mean =    391.604 ±(99.9%) 27.279 ms/op

  Histogram, ms/op:
    [300.000, 312.500) = 0 
    [312.500, 325.000) = 0 
    [325.000, 337.500) = 0 
    [337.500, 350.000) = 0 
    [350.000, 362.500) = 7 
    [362.500, 375.000) = 7 
    [375.000, 387.500) = 1 
    [387.500, 400.000) = 3 
    [400.000, 412.500) = 2 
    [412.500, 425.000) = 2 
    [425.000, 437.500) = 0 
    [437.500, 450.000) = 1 
    [450.000, 462.500) = 3 
    [462.500, 475.000) = 1 
    [475.000, 487.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    354.419 ms/op
     p(50.0000) =    374.342 ms/op
     p(90.0000) =    459.381 ms/op
     p(95.0000) =    468.818 ms/op
     p(99.0000) =    473.432 ms/op
     p(99.9000) =    473.432 ms/op
     p(99.9900) =    473.432 ms/op
     p(99.9990) =    473.432 ms/op
     p(99.9999) =    473.432 ms/op
    p(100.0000) =    473.432 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 94.32% complete, ETA 00:08:59
# Fork: 1 of 3
# Warmup Iteration   1: n = 3, mean = 393 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 340, 349, 488, 488, 488, 488, 488, 488 ms/op
# Warmup Iteration   2: n = 3, mean = 410 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 361, 380, 490, 490, 490, 490, 490, 490 ms/op
# Warmup Iteration   3: n = 3, mean = 388 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 339, 407, 420, 420, 420, 420, 420, 420 ms/op
Iteration   1: n = 3, mean = 381 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 339, 381, 423, 423, 423, 423, 423, 423 ms/op
Iteration   2: n = 3, mean = 373 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 339, 341, 439, 439, 439, 439, 439, 439 ms/op
Iteration   3: n = 3, mean = 353 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 339, 340, 380, 380, 380, 380, 380, 380 ms/op

# Run progress: 94.51% complete, ETA 00:08:40
# Fork: 2 of 3
# Warmup Iteration   1: n = 3, mean = 373 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 341, 358, 420, 420, 420, 420, 420, 420 ms/op
# Warmup Iteration   2: n = 3, mean = 393 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 354, 382, 442, 442, 442, 442, 442, 442 ms/op
# Warmup Iteration   3: n = 3, mean = 391 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 350, 380, 442, 442, 442, 442, 442, 442 ms/op
Iteration   1: n = 3, mean = 397 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 347, 394, 451, 451, 451, 451, 451, 451 ms/op
Iteration   2: n = 3, mean = 343 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 341, 341, 346, 346, 346, 346, 346, 346 ms/op
Iteration   3: n = 3, mean = 341 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 340, 341, 342, 342, 342, 342, 342, 342 ms/op

# Run progress: 94.70% complete, ETA 00:08:22
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 395 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 341, 386, 458, 458, 458, 458, 458, 458 ms/op
# Warmup Iteration   2: n = 3, mean = 365 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 340, 347, 408, 408, 408, 408, 408, 408 ms/op
# Warmup Iteration   3: n = 3, mean = 368 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 339, 339, 425, 425, 425, 425, 425, 425 ms/op
Iteration   1: n = 3, mean = 357 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 339, 349, 383, 383, 383, 383, 383, 383 ms/op
Iteration   2: n = 3, mean = 369 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 338, 341, 428, 428, 428, 428, 428, 428 ms/op
Iteration   3: n = 3, mean = 343 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 338, 339, 351, 351, 351, 351, 351, 351 ms/op


Result "readSeq":
  N = 27
  mean =    361.895 ±(99.9%) 25.092 ms/op

  Histogram, ms/op:
    [300.000, 312.500) = 0 
    [312.500, 325.000) = 0 
    [325.000, 337.500) = 0 
    [337.500, 350.000) = 18 
    [350.000, 362.500) = 1 
    [362.500, 375.000) = 0 
    [375.000, 387.500) = 3 
    [387.500, 400.000) = 1 
    [400.000, 412.500) = 0 
    [412.500, 425.000) = 1 
    [425.000, 437.500) = 1 
    [437.500, 450.000) = 1 
    [450.000, 462.500) = 1 
    [462.500, 475.000) = 0 
    [475.000, 487.500) = 0 

  Percentiles, ms/op:
      p(0.0000) =    338.166 ms/op
     p(50.0000) =    341.311 ms/op
     p(90.0000) =    430.440 ms/op
     p(95.0000) =    446.064 ms/op
     p(99.0000) =    450.888 ms/op
     p(99.9000) =    450.888 ms/op
     p(99.9900) =    450.888 ms/op
     p(99.9990) =    450.888 ms/op
     p(99.9999) =    450.888 ms/op
    p(100.0000) =    450.888 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readSeq
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 94.89% complete, ETA 00:08:04
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 519 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 427, 519, 610, 610, 610, 610, 610, 610 ms/op
# Warmup Iteration   2: n = 3, mean = 364 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 361, 364, 368, 368, 368, 368, 368, 368 ms/op
# Warmup Iteration   3: n = 3, mean = 414 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 388, 404, 450, 450, 450, 450, 450, 450 ms/op
Iteration   1: n = 3, mean = 365 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 362, 365, 366, 366, 366, 366, 366, 366 ms/op
Iteration   2: n = 3, mean = 413 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 362, 402, 473, 473, 473, 473, 473, 473 ms/op
Iteration   3: n = 3, mean = 364 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 360, 360, 372, 372, 372, 372, 372, 372 ms/op

# Run progress: 95.08% complete, ETA 00:07:45
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 522 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 519, 522, 526, 526, 526, 526, 526, 526 ms/op
# Warmup Iteration   2: n = 3, mean = 384 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 363, 382, 407, 407, 407, 407, 407, 407 ms/op
# Warmup Iteration   3: n = 3, mean = 416 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 394, 408, 447, 447, 447, 447, 447, 447 ms/op
Iteration   1: n = 3, mean = 398 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 363, 363, 469, 469, 469, 469, 469, 469 ms/op
Iteration   2: n = 3, mean = 423 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 369, 406, 495, 495, 495, 495, 495, 495 ms/op
Iteration   3: n = 3, mean = 434 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 394, 430, 478, 478, 478, 478, 478, 478 ms/op

# Run progress: 95.27% complete, ETA 00:07:27
# Fork: 3 of 3
# Warmup Iteration   1: n = 3, mean = 421 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 384, 407, 473, 473, 473, 473, 473, 473 ms/op
# Warmup Iteration   2: n = 3, mean = 441 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 388, 464, 470, 470, 470, 470, 470, 470 ms/op
# Warmup Iteration   3: n = 3, mean = 445 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 386, 422, 525, 525, 525, 525, 525, 525 ms/op
Iteration   1: n = 3, mean = 387 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 384, 385, 391, 391, 391, 391, 391, 391 ms/op
Iteration   2: n = 3, mean = 415 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 384, 386, 474, 474, 474, 474, 474, 474 ms/op
Iteration   3: n = 3, mean = 384 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 383, 384, 386, 386, 386, 386, 386, 386 ms/op


Result "readSeq":
  N = 27
  mean =    398.051 ±(99.9%) 30.105 ms/op

  Histogram, ms/op:
    [300.000, 312.500) = 0 
    [312.500, 325.000) = 0 
    [325.000, 337.500) = 0 
    [337.500, 350.000) = 0 
    [350.000, 362.500) = 4 
    [362.500, 375.000) = 6 
    [375.000, 387.500) = 7 
    [387.500, 400.000) = 2 
    [400.000, 412.500) = 2 
    [412.500, 425.000) = 0 
    [425.000, 437.500) = 1 
    [437.500, 450.000) = 0 
    [450.000, 462.500) = 0 
    [462.500, 475.000) = 3 
    [475.000, 487.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    359.662 ms/op
     p(50.0000) =    384.303 ms/op
     p(90.0000) =    474.690 ms/op
     p(95.0000) =    488.322 ms/op
     p(99.0000) =    495.452 ms/op
     p(99.9000) =    495.452 ms/op
     p(99.9900) =    495.452 ms/op
     p(99.9990) =    495.452 ms/op
     p(99.9999) =    495.452 ms/op
    p(100.0000) =    495.452 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 95.45% complete, ETA 00:07:09
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 564 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 490, 564, 639, 639, 639, 639, 639, 639 ms/op
# Warmup Iteration   2: n = 2, mean = 541 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 488, 541, 593, 593, 593, 593, 593, 593 ms/op
# Warmup Iteration   3: n = 2, mean = 502 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 455, 502, 549, 549, 549, 549, 549, 549 ms/op
Iteration   1: n = 3, mean = 485 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 451, 455, 549, 549, 549, 549, 549, 549 ms/op
Iteration   2: n = 3, mean = 448 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 445, 448, 450, 450, 450, 450, 450, 450 ms/op
Iteration   3: n = 3, mean = 449 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 445, 448, 456, 456, 456, 456, 456, 456 ms/op

# Run progress: 95.64% complete, ETA 00:06:51
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 579 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 535, 579, 623, 623, 623, 623, 623, 623 ms/op
# Warmup Iteration   2: n = 2, mean = 553 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 544, 553, 562, 562, 562, 562, 562, 562 ms/op
# Warmup Iteration   3: n = 2, mean = 562 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 558, 562, 565, 565, 565, 565, 565, 565 ms/op
Iteration   1: n = 2, mean = 523 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 484, 523, 562, 562, 562, 562, 562, 562 ms/op
Iteration   2: n = 2, mean = 560 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 514, 560, 606, 606, 606, 606, 606, 606 ms/op
Iteration   3: n = 2, mean = 529 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 492, 529, 566, 566, 566, 566, 566, 566 ms/op

# Run progress: 95.83% complete, ETA 00:06:32
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 610 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 580, 610, 640, 640, 640, 640, 640, 640 ms/op
# Warmup Iteration   2: n = 2, mean = 554 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 515, 554, 593, 593, 593, 593, 593, 593 ms/op
# Warmup Iteration   3: n = 2, mean = 519 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 465, 519, 573, 573, 573, 573, 573, 573 ms/op
Iteration   1: n = 2, mean = 579 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 527, 579, 630, 630, 630, 630, 630, 630 ms/op
Iteration   2: n = 2, mean = 534 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 491, 534, 578, 578, 578, 578, 578, 578 ms/op
Iteration   3: n = 3, mean = 474 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 451, 467, 505, 505, 505, 505, 505, 505 ms/op


Result "readXxh64":
  N = 22
  mean =    500.957 ±(99.9%) 47.053 ms/op

  Histogram, ms/op:
    [400.000, 425.000) = 0 
    [425.000, 450.000) = 5 
    [450.000, 475.000) = 5 
    [475.000, 500.000) = 3 
    [500.000, 525.000) = 2 
    [525.000, 550.000) = 2 
    [550.000, 575.000) = 2 
    [575.000, 600.000) = 1 
    [600.000, 625.000) = 1 
    [625.000, 650.000) = 1 
    [650.000, 675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    444.596 ms/op
     p(50.0000) =    487.326 ms/op
     p(90.0000) =    597.583 ms/op
     p(95.0000) =    626.577 ms/op
     p(99.0000) =    630.194 ms/op
     p(99.9000) =    630.194 ms/op
     p(99.9900) =    630.194 ms/op
     p(99.9990) =    630.194 ms/op
     p(99.9999) =    630.194 ms/op
    p(100.0000) =    630.194 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readXxh64
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 96.02% complete, ETA 00:06:14
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 536 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 471, 536, 602, 602, 602, 602, 602, 602 ms/op
# Warmup Iteration   2: n = 3, mean = 456 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 447, 460, 461, 461, 461, 461, 461, 461 ms/op
# Warmup Iteration   3: n = 2, mean = 591 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 570, 591, 611, 611, 611, 611, 611, 611 ms/op
Iteration   1: n = 2, mean = 530 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 489, 530, 570, 570, 570, 570, 570, 570 ms/op
Iteration   2: n = 3, mean = 460 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 451, 451, 478, 478, 478, 478, 478, 478 ms/op
Iteration   3: n = 3, mean = 455 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 447, 451, 467, 467, 467, 467, 467, 467 ms/op

# Run progress: 96.21% complete, ETA 00:05:56
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 655 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 595, 655, 716, 716, 716, 716, 716, 716 ms/op
# Warmup Iteration   2: n = 2, mean = 597 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 545, 597, 649, 649, 649, 649, 649, 649 ms/op
# Warmup Iteration   3: n = 2, mean = 532 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 497, 532, 567, 567, 567, 567, 567, 567 ms/op
Iteration   1: n = 2, mean = 538 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 488, 538, 587, 587, 587, 587, 587, 587 ms/op
Iteration   2: n = 2, mean = 536 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 527, 536, 544, 544, 544, 544, 544, 544 ms/op
Iteration   3: n = 2, mean = 514 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 476, 514, 552, 552, 552, 552, 552, 552 ms/op

# Run progress: 96.40% complete, ETA 00:05:38
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 528 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 489, 528, 567, 567, 567, 567, 567, 567 ms/op
# Warmup Iteration   2: n = 2, mean = 539 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 488, 539, 589, 589, 589, 589, 589, 589 ms/op
# Warmup Iteration   3: n = 2, mean = 558 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 522, 558, 595, 595, 595, 595, 595, 595 ms/op
Iteration   1: n = 3, mean = 484 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 469, 471, 511, 511, 511, 511, 511, 511 ms/op
Iteration   2: n = 3, mean = 484 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 473, 484, 495, 495, 495, 495, 495, 495 ms/op
Iteration   3: n = 3, mean = 482 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 471, 487, 488, 488, 488, 488, 488, 488 ms/op


Result "readXxh64":
  N = 23
  mean =    492.489 ±(99.9%) 30.652 ms/op

  Histogram, ms/op:
    [400.000, 412.500) = 0 
    [412.500, 425.000) = 0 
    [425.000, 437.500) = 0 
    [437.500, 450.000) = 1 
    [450.000, 462.500) = 3 
    [462.500, 475.000) = 5 
    [475.000, 487.500) = 4 
    [487.500, 500.000) = 4 
    [500.000, 512.500) = 1 
    [512.500, 525.000) = 0 
    [525.000, 537.500) = 1 
    [537.500, 550.000) = 1 
    [550.000, 562.500) = 1 
    [562.500, 575.000) = 1 
    [575.000, 587.500) = 1 

  Percentiles, ms/op:
      p(0.0000) =    447.218 ms/op
     p(50.0000) =    483.918 ms/op
     p(90.0000) =    562.876 ms/op
     p(95.0000) =    583.847 ms/op
     p(99.0000) =    587.203 ms/op
     p(99.9000) =    587.203 ms/op
     p(99.9900) =    587.203 ms/op
     p(99.9990) =    587.203 ms/op
     p(99.9999) =    587.203 ms/op
    p(100.0000) =    587.203 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 96.59% complete, ETA 00:05:20
# Fork: 1 of 3
# Warmup Iteration   1: n = 3, mean = 462 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 447, 456, 482, 482, 482, 482, 482, 482 ms/op
# Warmup Iteration   2: n = 3, mean = 445 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 434, 449, 451, 451, 451, 451, 451, 451 ms/op
# Warmup Iteration   3: n = 3, mean = 438 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 435, 437, 441, 441, 441, 441, 441, 441 ms/op
Iteration   1: n = 3, mean = 439 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 436, 439, 442, 442, 442, 442, 442, 442 ms/op
Iteration   2: n = 3, mean = 437 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 434, 439, 439, 439, 439, 439, 439, 439 ms/op
Iteration   3: n = 3, mean = 436 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 435, 436, 437, 437, 437, 437, 437, 437 ms/op

# Run progress: 96.78% complete, ETA 00:05:02
# Fork: 2 of 3
# Warmup Iteration   1: n = 3, mean = 444 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 432, 444, 456, 456, 456, 456, 456, 456 ms/op
# Warmup Iteration   2: n = 3, mean = 438 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 434, 438, 442, 442, 442, 442, 442, 442 ms/op
# Warmup Iteration   3: n = 2, mean = 519 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 479, 519, 559, 559, 559, 559, 559, 559 ms/op
Iteration   1: n = 2, mean = 555 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 488, 555, 623, 623, 623, 623, 623, 623 ms/op
Iteration   2: n = 3, mean = 448 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 440, 450, 454, 454, 454, 454, 454, 454 ms/op
Iteration   3: n = 3, mean = 463 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 438, 446, 504, 504, 504, 504, 504, 504 ms/op

# Run progress: 96.97% complete, ETA 00:04:44
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 545 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 493, 545, 598, 598, 598, 598, 598, 598 ms/op
# Warmup Iteration   2: n = 2, mean = 530 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 493, 530, 567, 567, 567, 567, 567, 567 ms/op
# Warmup Iteration   3: n = 2, mean = 576 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 575, 576, 577, 577, 577, 577, 577, 577 ms/op
Iteration   1: n = 3, mean = 476 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 448, 467, 511, 511, 511, 511, 511, 511 ms/op
Iteration   2: n = 3, mean = 451 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 445, 449, 457, 457, 457, 457, 457, 457 ms/op
Iteration   3: n = 2, mean = 607 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 570, 607, 644, 644, 644, 644, 644, 644 ms/op


Result "readXxh64":
  N = 25
  mean =    470.874 ±(99.9%) 43.577 ms/op

  Histogram, ms/op:
    [400.000, 425.000) = 0 
    [425.000, 450.000) = 16 
    [450.000, 475.000) = 3 
    [475.000, 500.000) = 1 
    [500.000, 525.000) = 2 
    [525.000, 550.000) = 0 
    [550.000, 575.000) = 1 
    [575.000, 600.000) = 0 
    [600.000, 625.000) = 1 
    [625.000, 650.000) = 1 
    [650.000, 675.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =    434.110 ms/op
     p(50.0000) =    446.169 ms/op
     p(90.0000) =    591.397 ms/op
     p(95.0000) =    637.534 ms/op
     p(99.0000) =    643.826 ms/op
     p(99.9000) =    643.826 ms/op
     p(99.9900) =    643.826 ms/op
     p(99.9990) =    643.826 ms/op
     p(99.9999) =    643.826 ms/op
    p(100.0000) =    643.826 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.readXxh64
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 97.16% complete, ETA 00:04:26
# Fork: 1 of 3
# Warmup Iteration   1: n = 2, mean = 571 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 481, 571, 661, 661, 661, 661, 661, 661 ms/op
# Warmup Iteration   2: n = 2, mean = 550 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 507, 550, 592, 592, 592, 592, 592, 592 ms/op
# Warmup Iteration   3: n = 3, mean = 484 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 467, 467, 517, 517, 517, 517, 517, 517 ms/op
Iteration   1: n = 2, mean = 568 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 522, 568, 613, 613, 613, 613, 613, 613 ms/op
Iteration   2: n = 2, mean = 558 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 505, 558, 610, 610, 610, 610, 610, 610 ms/op
Iteration   3: n = 3, mean = 469 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 466, 467, 474, 474, 474, 474, 474, 474 ms/op

# Run progress: 97.35% complete, ETA 00:04:08
# Fork: 2 of 3
# Warmup Iteration   1: n = 2, mean = 652 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 535, 652, 769, 769, 769, 769, 769, 769 ms/op
# Warmup Iteration   2: n = 2, mean = 545 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 503, 545, 587, 587, 587, 587, 587, 587 ms/op
# Warmup Iteration   3: n = 2, mean = 582 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 569, 582, 596, 596, 596, 596, 596, 596 ms/op
Iteration   1: n = 3, mean = 489 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 474, 481, 512, 512, 512, 512, 512, 512 ms/op
Iteration   2: n = 3, mean = 480 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 479, 480, 480, 480, 480, 480, 480, 480 ms/op
Iteration   3: n = 2, mean = 597 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 588, 597, 605, 605, 605, 605, 605, 605 ms/op

# Run progress: 97.54% complete, ETA 00:03:50
# Fork: 3 of 3
# Warmup Iteration   1: n = 2, mean = 636 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 537, 636, 736, 736, 736, 736, 736, 736 ms/op
# Warmup Iteration   2: n = 2, mean = 578 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 542, 578, 614, 614, 614, 614, 614, 614 ms/op
# Warmup Iteration   3: n = 2, mean = 641 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 565, 641, 716, 716, 716, 716, 716, 716 ms/op
Iteration   1: n = 2, mean = 603 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 542, 603, 665, 665, 665, 665, 665, 665 ms/op
Iteration   2: n = 2, mean = 562 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 523, 562, 601, 601, 601, 601, 601, 601 ms/op
Iteration   3: n = 3, mean = 496 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 490, 497, 501, 501, 501, 501, 501, 501 ms/op


Result "readXxh64":
  N = 22
  mean =    526.195 ±(99.9%) 48.445 ms/op

  Histogram, ms/op:
    [400.000, 425.000) = 0 
    [425.000, 450.000) = 0 
    [450.000, 475.000) = 4 
    [475.000, 500.000) = 6 
    [500.000, 525.000) = 5 
    [525.000, 550.000) = 1 
    [550.000, 575.000) = 0 
    [575.000, 600.000) = 1 
    [600.000, 625.000) = 4 
    [625.000, 650.000) = 0 
    [650.000, 675.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =    466.092 ms/op
     p(50.0000) =    502.792 ms/op
     p(90.0000) =    612.473 ms/op
     p(95.0000) =    657.090 ms/op
     p(99.0000) =    664.797 ms/op
     p(99.9000) =    664.797 ms/op
     p(99.9900) =    664.797 ms/op
     p(99.9990) =    664.797 ms/op
     p(99.9999) =    664.797 ms/op
    p(100.0000) =    664.797 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.write
# Parameters: (intKey = true, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 97.73% complete, ETA 00:03:32
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 2236 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2236, 2236, 2236, 2236, 2236, 2236, 2236, 2236 ms/op
# Warmup Iteration   2: n = 1, mean = 1770 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1770, 1770, 1770, 1770, 1770, 1770, 1770, 1770 ms/op
# Warmup Iteration   3: n = 1, mean = 1783 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1783, 1783, 1783, 1783, 1783, 1783, 1783, 1783 ms/op
Iteration   1: n = 1, mean = 1762 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762 ms/op
Iteration   2: n = 1, mean = 1850 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1850, 1850, 1850, 1850, 1850, 1850, 1850, 1850 ms/op
Iteration   3: n = 1, mean = 1764 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764 ms/op

# Run progress: 97.92% complete, ETA 00:03:14
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 2357 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2357, 2357, 2357, 2357, 2357, 2357, 2357, 2357 ms/op
# Warmup Iteration   2: n = 1, mean = 2034 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2034, 2034, 2034, 2034, 2034, 2034, 2034, 2034 ms/op
# Warmup Iteration   3: n = 1, mean = 1892 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1892, 1892, 1892, 1892, 1892, 1892, 1892, 1892 ms/op
Iteration   1: n = 1, mean = 1764 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1764, 1764, 1764, 1764, 1764, 1764, 1764, 1764 ms/op
Iteration   2: n = 1, mean = 2057 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2057, 2057, 2057, 2057, 2057, 2057, 2057, 2057 ms/op
Iteration   3: n = 1, mean = 2127 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2127, 2127, 2127, 2127, 2127, 2127, 2127, 2127 ms/op

# Run progress: 98.11% complete, ETA 00:02:57
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1923 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1923, 1923, 1923, 1923, 1923, 1923, 1923, 1923 ms/op
# Warmup Iteration   2: n = 1, mean = 2101 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2101, 2101, 2101, 2101, 2101, 2101, 2101, 2101 ms/op
# Warmup Iteration   3: n = 1, mean = 2181 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2181, 2181, 2181, 2181, 2181, 2181, 2181, 2181 ms/op
Iteration   1: n = 1, mean = 1965 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1965, 1965, 1965, 1965, 1965, 1965, 1965, 1965 ms/op
Iteration   2: n = 1, mean = 1722 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722 ms/op
Iteration   3: n = 1, mean = 1967 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1967, 1967, 1967, 1967, 1967, 1967, 1967, 1967 ms/op


Result "write":
  N = 9
  mean =   1886.272 ±(99.9%) 247.613 ms/op

  Histogram, ms/op:
    [1700.000, 1750.000) = 1 
    [1750.000, 1800.000) = 3 
    [1800.000, 1850.000) = 1 
    [1850.000, 1900.000) = 0 
    [1900.000, 1950.000) = 0 
    [1950.000, 2000.000) = 2 
    [2000.000, 2050.000) = 0 
    [2050.000, 2100.000) = 1 
    [2100.000, 2150.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   1721.762 ms/op
     p(50.0000) =   1849.688 ms/op
     p(90.0000) =   2126.512 ms/op
     p(95.0000) =   2126.512 ms/op
     p(99.0000) =   2126.512 ms/op
     p(99.9000) =   2126.512 ms/op
     p(99.9900) =   2126.512 ms/op
     p(99.9990) =   2126.512 ms/op
     p(99.9999) =   2126.512 ms/op
    p(100.0000) =   2126.512 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.write
# Parameters: (intKey = true, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 98.30% complete, ETA 00:02:39
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 1946 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1946, 1946, 1946, 1946, 1946, 1946, 1946, 1946 ms/op
# Warmup Iteration   2: n = 1, mean = 1948 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1948, 1948, 1948, 1948, 1948, 1948, 1948, 1948 ms/op
# Warmup Iteration   3: n = 1, mean = 2173 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173 ms/op
Iteration   1: n = 1, mean = 1835 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1835, 1835, 1835, 1835, 1835, 1835, 1835, 1835 ms/op
Iteration   2: n = 1, mean = 1967 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1967, 1967, 1967, 1967, 1967, 1967, 1967, 1967 ms/op
Iteration   3: n = 1, mean = 2198 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2198, 2198, 2198, 2198, 2198, 2198, 2198, 2198 ms/op

# Run progress: 98.48% complete, ETA 00:02:21
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 1969 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1969, 1969, 1969, 1969, 1969, 1969, 1969, 1969 ms/op
# Warmup Iteration   2: n = 1, mean = 1869 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1869, 1869, 1869, 1869, 1869, 1869, 1869, 1869 ms/op
# Warmup Iteration   3: n = 1, mean = 1982 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1982, 1982, 1982, 1982, 1982, 1982, 1982, 1982 ms/op
Iteration   1: n = 1, mean = 1755 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1755, 1755, 1755, 1755, 1755, 1755, 1755, 1755 ms/op
Iteration   2: n = 1, mean = 2057 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2057, 2057, 2057, 2057, 2057, 2057, 2057, 2057 ms/op
Iteration   3: n = 1, mean = 2097 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2097, 2097, 2097, 2097, 2097, 2097, 2097, 2097 ms/op

# Run progress: 98.67% complete, ETA 00:02:03
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 1988 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 1988, 1988, 1988, 1988, 1988, 1988, 1988, 1988 ms/op
# Warmup Iteration   2: n = 1, mean = 2160 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2160, 2160, 2160, 2160, 2160, 2160, 2160, 2160 ms/op
# Warmup Iteration   3: n = 1, mean = 2382 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2382, 2382, 2382, 2382, 2382, 2382, 2382, 2382 ms/op
Iteration   1: n = 1, mean = 2399 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2399, 2399, 2399, 2399, 2399, 2399, 2399, 2399 ms/op
Iteration   2: n = 1, mean = 2286 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2286, 2286, 2286, 2286, 2286, 2286, 2286, 2286 ms/op
Iteration   3: n = 1, mean = 2173 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2173, 2173, 2173, 2173, 2173, 2173, 2173, 2173 ms/op


Result "write":
  N = 9
  mean =   2085.268 ±(99.9%) 349.196 ms/op

  Histogram, ms/op:
    [1700.000, 1750.000) = 0 
    [1750.000, 1800.000) = 1 
    [1800.000, 1850.000) = 1 
    [1850.000, 1900.000) = 0 
    [1900.000, 1950.000) = 0 
    [1950.000, 2000.000) = 1 
    [2000.000, 2050.000) = 0 
    [2050.000, 2100.000) = 2 
    [2100.000, 2150.000) = 0 
    [2150.000, 2200.000) = 2 
    [2200.000, 2250.000) = 0 
    [2250.000, 2300.000) = 1 
    [2300.000, 2350.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   1755.316 ms/op
     p(50.0000) =   2097.152 ms/op
     p(90.0000) =   2399.142 ms/op
     p(95.0000) =   2399.142 ms/op
     p(99.0000) =   2399.142 ms/op
     p(99.9000) =   2399.142 ms/op
     p(99.9900) =   2399.142 ms/op
     p(99.9990) =   2399.142 ms/op
     p(99.9999) =   2399.142 ms/op
    p(100.0000) =   2399.142 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.write
# Parameters: (intKey = false, num = 1000000, sequential = true, valRandom = false, valSize = 100)

# Run progress: 98.86% complete, ETA 00:01:46
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 2852 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2852, 2852, 2852, 2852, 2852, 2852, 2852, 2852 ms/op
# Warmup Iteration   2: n = 1, mean = 2600 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2600, 2600, 2600, 2600, 2600, 2600, 2600, 2600 ms/op
# Warmup Iteration   3: n = 1, mean = 2403 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2403, 2403, 2403, 2403, 2403, 2403, 2403, 2403 ms/op
Iteration   1: n = 1, mean = 2764 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2764, 2764, 2764, 2764, 2764, 2764, 2764, 2764 ms/op
Iteration   2: n = 1, mean = 3108 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3108, 3108, 3108, 3108, 3108, 3108, 3108, 3108 ms/op
Iteration   3: n = 1, mean = 2835 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2835, 2835, 2835, 2835, 2835, 2835, 2835, 2835 ms/op

# Run progress: 99.05% complete, ETA 00:01:28
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 3091 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3091, 3091, 3091, 3091, 3091, 3091, 3091, 3091 ms/op
# Warmup Iteration   2: n = 1, mean = 2970 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2970, 2970, 2970, 2970, 2970, 2970, 2970, 2970 ms/op
# Warmup Iteration   3: n = 1, mean = 3431 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3431, 3431, 3431, 3431, 3431, 3431, 3431, 3431 ms/op
Iteration   1: n = 1, mean = 3460 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3460, 3460, 3460, 3460, 3460, 3460, 3460, 3460 ms/op
Iteration   2: n = 1, mean = 3284 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3284, 3284, 3284, 3284, 3284, 3284, 3284, 3284 ms/op
Iteration   3: n = 1, mean = 3330 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3330, 3330, 3330, 3330, 3330, 3330, 3330, 3330 ms/op

# Run progress: 99.24% complete, ETA 00:01:10
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 3112 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3112, 3112, 3112, 3112, 3112, 3112, 3112, 3112 ms/op
# Warmup Iteration   2: n = 1, mean = 2928 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2928, 2928, 2928, 2928, 2928, 2928, 2928, 2928 ms/op
# Warmup Iteration   3: n = 1, mean = 2751 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2751, 2751, 2751, 2751, 2751, 2751, 2751, 2751 ms/op
Iteration   1: n = 1, mean = 3628 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3628, 3628, 3628, 3628, 3628, 3628, 3628, 3628 ms/op
Iteration   2: n = 1, mean = 2819 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 2819, 2819, 2819, 2819, 2819, 2819, 2819, 2819 ms/op
Iteration   3: n = 1, mean = 3087 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3087, 3087, 3087, 3087, 3087, 3087, 3087, 3087 ms/op


Result "write":
  N = 9
  mean =   3146.194 ±(99.9%) 510.651 ms/op

  Histogram, ms/op:
    [2700.000, 2800.000) = 1 
    [2800.000, 2900.000) = 2 
    [2900.000, 3000.000) = 0 
    [3000.000, 3100.000) = 1 
    [3100.000, 3200.000) = 1 
    [3200.000, 3300.000) = 1 
    [3300.000, 3400.000) = 1 
    [3400.000, 3500.000) = 1 
    [3500.000, 3600.000) = 0 

  Percentiles, ms/op:
      p(0.0000) =   2764.046 ms/op
     p(50.0000) =   3107.979 ms/op
     p(90.0000) =   3628.073 ms/op
     p(95.0000) =   3628.073 ms/op
     p(99.0000) =   3628.073 ms/op
     p(99.9000) =   3628.073 ms/op
     p(99.9900) =   3628.073 ms/op
     p(99.9990) =   3628.073 ms/op
     p(99.9999) =   3628.073 ms/op
    p(100.0000) =   3628.073 ms/op


# JMH 1.12 (released 89 days ago)
# VM version: JDK 1.8.0_92, VM 25.92-b14
# VM invoker: /usr/lib/jvm/java-8-openjdk/jre/bin/java
# VM options: <none>
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Sampling time
# Benchmark: org.lmdbjava.bench.RocksDb.write
# Parameters: (intKey = false, num = 1000000, sequential = false, valRandom = false, valSize = 100)

# Run progress: 99.43% complete, ETA 00:00:53
# Fork: 1 of 3
# Warmup Iteration   1: n = 1, mean = 4228 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4228, 4228, 4228, 4228, 4228, 4228, 4228, 4228 ms/op
# Warmup Iteration   2: n = 1, mean = 3754 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3754, 3754, 3754, 3754, 3754, 3754, 3754, 3754 ms/op
# Warmup Iteration   3: n = 1, mean = 3649 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3649, 3649, 3649, 3649, 3649, 3649, 3649, 3649 ms/op
Iteration   1: n = 1, mean = 4194 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4194, 4194, 4194, 4194, 4194, 4194, 4194, 4194 ms/op
Iteration   2: n = 1, mean = 3985 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3985, 3985, 3985, 3985, 3985, 3985, 3985, 3985 ms/op
Iteration   3: n = 1, mean = 3548 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3548, 3548, 3548, 3548, 3548, 3548, 3548, 3548 ms/op

# Run progress: 99.62% complete, ETA 00:00:35
# Fork: 2 of 3
# Warmup Iteration   1: n = 1, mean = 4446 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4446, 4446, 4446, 4446, 4446, 4446, 4446, 4446 ms/op
# Warmup Iteration   2: n = 1, mean = 4345 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4345, 4345, 4345, 4345, 4345, 4345, 4345, 4345 ms/op
# Warmup Iteration   3: n = 1, mean = 4027 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4027, 4027, 4027, 4027, 4027, 4027, 4027, 4027 ms/op
Iteration   1: n = 1, mean = 4073 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4073, 4073, 4073, 4073, 4073, 4073, 4073, 4073 ms/op
Iteration   2: n = 1, mean = 3561 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3561 ms/op
Iteration   3: n = 1, mean = 3884 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3884, 3884, 3884, 3884, 3884, 3884, 3884, 3884 ms/op

# Run progress: 99.81% complete, ETA 00:00:17
# Fork: 3 of 3
# Warmup Iteration   1: n = 1, mean = 4454 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4454, 4454, 4454, 4454, 4454, 4454, 4454, 4454 ms/op
# Warmup Iteration   2: n = 1, mean = 3699 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3699, 3699, 3699, 3699, 3699, 3699, 3699, 3699 ms/op
# Warmup Iteration   3: n = 1, mean = 3439 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3439, 3439, 3439, 3439, 3439, 3439, 3439, 3439 ms/op
Iteration   1: n = 1, mean = 4144 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 4144, 4144, 4144, 4144, 4144, 4144, 4144, 4144 ms/op
Iteration   2: n = 1, mean = 3934 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3934, 3934, 3934, 3934, 3934, 3934, 3934, 3934 ms/op
Iteration   3: n = 1, mean = 3620 ms/op, p{0.00, 0.50, 0.90, 0.95, 0.99, 0.999, 0.9999, 1.00} = 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3620 ms/op


Result "write":
  N = 9
  mean =   3882.527 ±(99.9%) 419.667 ms/op

  Histogram, ms/op:
    [3500.000, 3550.000) = 1 
    [3550.000, 3600.000) = 1 
    [3600.000, 3650.000) = 1 
    [3650.000, 3700.000) = 0 
    [3700.000, 3750.000) = 0 
    [3750.000, 3800.000) = 0 
    [3800.000, 3850.000) = 0 
    [3850.000, 3900.000) = 1 
    [3900.000, 3950.000) = 1 
    [3950.000, 4000.000) = 1 
    [4000.000, 4050.000) = 0 
    [4050.000, 4100.000) = 1 
    [4100.000, 4150.000) = 1 

  Percentiles, ms/op:
      p(0.0000) =   3548.381 ms/op
     p(50.0000) =   3934.257 ms/op
     p(90.0000) =   4194.304 ms/op
     p(95.0000) =   4194.304 ms/op
     p(99.0000) =   4194.304 ms/op
     p(99.9000) =   4194.304 ms/op
     p(99.9900) =   4194.304 ms/op
     p(99.9990) =   4194.304 ms/op
     p(99.9999) =   4194.304 ms/op
    p(100.0000) =   4194.304 ms/op


# Run complete. Total time: 02:35:53

Benchmark                     (batchSize)  (forceSafe)  (intKey)  (metaSync)    (num)  (sequential)  (sync)  (valRandom)  (valSize)  (writeMap)    Mode  Cnt      Score      Error  Units
Chronicle.readKey                     N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample   18    640.855 ±   63.434  ms/op
Chronicle.readKey                     N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample   18    683.147 ±   65.433  ms/op
Chronicle.readKey                     N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    9   1823.124 ±  238.615  ms/op
Chronicle.readKey                     N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    9   1825.221 ±  200.960  ms/op
Chronicle.write                       N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample   15    907.018 ±   58.491  ms/op
Chronicle.write                       N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    9   1089.237 ±  129.364  ms/op
Chronicle.write                       N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    9   2018.858 ±  235.531  ms/op
Chronicle.write                       N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    9   1969.459 ±  226.577  ms/op
LevelDb.readCrc                       N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    9   1446.336 ±  117.716  ms/op
LevelDb.readCrc                       N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    9   1427.228 ±   89.208  ms/op
LevelDb.readCrc                       N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    9   1399.033 ±  144.430  ms/op
LevelDb.readCrc                       N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    9   1564.475 ±  206.342  ms/op
LevelDb.readKey                       N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    9   2971.431 ±  168.868  ms/op
LevelDb.readKey                       N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    9   3237.537 ±  207.069  ms/op
LevelDb.readKey                       N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    9   2944.401 ±  237.035  ms/op
LevelDb.readKey                       N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    9   4795.488 ±  517.795  ms/op
LevelDb.readRev                       N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    9  11708.633 ±  453.602  ms/op
LevelDb.readRev                       N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    9  12920.320 ± 3393.820  ms/op
LevelDb.readRev                       N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    9   9106.300 ±  149.035  ms/op
LevelDb.readRev                       N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    9  12267.873 ± 2696.740  ms/op
LevelDb.readSeq                       N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    9   1372.702 ±  194.771  ms/op
LevelDb.readSeq                       N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    9   1323.303 ±  188.483  ms/op
LevelDb.readSeq                       N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    9   1323.303 ±  171.953  ms/op
LevelDb.readSeq                       N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    9   1389.247 ±  198.388  ms/op
LevelDb.readXxh64                     N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    9   1431.423 ±  134.381  ms/op
LevelDb.readXxh64                     N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    9   1375.499 ±  130.909  ms/op
LevelDb.readXxh64                     N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    9   1335.653 ±  229.220  ms/op
LevelDb.readXxh64                     N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    9   1504.590 ±  218.475  ms/op
LevelDb.write                     1000000          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample   36    302.332 ±   24.882  ms/op
LevelDb.write                     1000000          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample   30    282.749 ±   21.681  ms/op
LevelDb.write                     1000000          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    9   1324.002 ±  259.431  ms/op
LevelDb.write                     1000000          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    9   1228.232 ±  200.999  ms/op
LmdbJavaAgrona.readCrc                N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample   65    149.237 ±   10.104  ms/op
LmdbJavaAgrona.readCrc                N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample   75    127.855 ±    7.277  ms/op
LmdbJavaAgrona.readCrc                N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample   55    176.494 ±   13.220  ms/op
LmdbJavaAgrona.readCrc                N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample   59    162.156 ±    8.819  ms/op
LmdbJavaAgrona.readKey                N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample   88    107.278 ±    5.864  ms/op
LmdbJavaAgrona.readKey                N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample   18    691.419 ±  106.969  ms/op
LmdbJavaAgrona.readKey                N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample    9   1200.387 ±  175.575  ms/op
LmdbJavaAgrona.readKey                N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample    9   1941.497 ±  252.773  ms/op
LmdbJavaAgrona.readRev                N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample  260     35.157 ±    1.436  ms/op
LmdbJavaAgrona.readRev                N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample  149     62.371 ±    3.218  ms/op
LmdbJavaAgrona.readRev                N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample  242     37.617 ±    1.644  ms/op
LmdbJavaAgrona.readRev                N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample  155     59.793 ±    2.741  ms/op
LmdbJavaAgrona.readSeq                N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample  207     44.375 ±    1.956  ms/op
LmdbJavaAgrona.readSeq                N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample  142     65.188 ±    3.902  ms/op
LmdbJavaAgrona.readSeq                N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample  200     45.714 ±    2.084  ms/op
LmdbJavaAgrona.readSeq                N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample  136     69.330 ±    3.684  ms/op
LmdbJavaAgrona.readXxh64              N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample  136     68.624 ±    3.368  ms/op
LmdbJavaAgrona.readXxh64              N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample  101     94.040 ±    5.184  ms/op
LmdbJavaAgrona.readXxh64              N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample  139     68.146 ±    3.158  ms/op
LmdbJavaAgrona.readXxh64              N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample   95     99.579 ±    5.500  ms/op
LmdbJavaAgrona.write                  N/A          N/A      true       false  1000000          true   false        false        100        true  sample   62    145.384 ±   12.206  ms/op
LmdbJavaAgrona.write                  N/A          N/A      true       false  1000000         false   false        false        100        true  sample   16    839.320 ±   99.935  ms/op
LmdbJavaAgrona.write                  N/A          N/A     false       false  1000000          true   false        false        100        true  sample    9   1184.308 ±  178.476  ms/op
LmdbJavaAgrona.write                  N/A          N/A     false       false  1000000         false   false        false        100        true  sample    9   2038.432 ±  218.773  ms/op
LmdbJavaByteBuffer.readCrc            N/A        false      true         N/A  1000000          true     N/A        false        100        true  sample  100     94.762 ±    4.813  ms/op
LmdbJavaByteBuffer.readCrc            N/A        false      true         N/A  1000000         false     N/A        false        100        true  sample   71    131.338 ±    8.390  ms/op
LmdbJavaByteBuffer.readCrc            N/A        false     false         N/A  1000000          true     N/A        false        100        true  sample   68    141.654 ±    9.269  ms/op
LmdbJavaByteBuffer.readCrc            N/A        false     false         N/A  1000000         false     N/A        false        100        true  sample   55    182.619 ±   12.459  ms/op
LmdbJavaByteBuffer.readKey            N/A        false      true         N/A  1000000          true     N/A        false        100        true  sample   91    103.244 ±    6.459  ms/op
LmdbJavaByteBuffer.readKey            N/A        false      true         N/A  1000000         false     N/A        false        100        true  sample   18    721.420 ±  103.773  ms/op
LmdbJavaByteBuffer.readKey            N/A        false     false         N/A  1000000          true     N/A        false        100        true  sample    9   1145.045 ±  207.125  ms/op
LmdbJavaByteBuffer.readKey            N/A        false     false         N/A  1000000         false     N/A        false        100        true  sample    9   2013.499 ±  252.156  ms/op
LmdbJavaByteBuffer.readRev            N/A        false      true         N/A  1000000          true     N/A        false        100        true  sample  275     33.428 ±    1.355  ms/op
LmdbJavaByteBuffer.readRev            N/A        false      true         N/A  1000000         false     N/A        false        100        true  sample  151     61.818 ±    2.618  ms/op
LmdbJavaByteBuffer.readRev            N/A        false     false         N/A  1000000          true     N/A        false        100        true  sample  257     35.607 ±    1.415  ms/op
LmdbJavaByteBuffer.readRev            N/A        false     false         N/A  1000000         false     N/A        false        100        true  sample  142     66.214 ±    2.339  ms/op
LmdbJavaByteBuffer.readSeq            N/A        false      true         N/A  1000000          true     N/A        false        100        true  sample  219     41.846 ±    2.110  ms/op
LmdbJavaByteBuffer.readSeq            N/A        false      true         N/A  1000000         false     N/A        false        100        true  sample  126     73.103 ±    3.877  ms/op
LmdbJavaByteBuffer.readSeq            N/A        false     false         N/A  1000000          true     N/A        false        100        true  sample  199     46.696 ±    2.237  ms/op
LmdbJavaByteBuffer.readSeq            N/A        false     false         N/A  1000000         false     N/A        false        100        true  sample  124     75.114 ±    4.006  ms/op
LmdbJavaByteBuffer.readXxh64          N/A        false      true         N/A  1000000          true     N/A        false        100        true  sample  121     76.724 ±    4.398  ms/op
LmdbJavaByteBuffer.readXxh64          N/A        false      true         N/A  1000000         false     N/A        false        100        true  sample   96     98.417 ±    6.569  ms/op
LmdbJavaByteBuffer.readXxh64          N/A        false     false         N/A  1000000          true     N/A        false        100        true  sample  126     73.360 ±    3.829  ms/op
LmdbJavaByteBuffer.readXxh64          N/A        false     false         N/A  1000000         false     N/A        false        100        true  sample   90    106.232 ±    6.072  ms/op
LmdbJavaByteBuffer.write              N/A          N/A      true       false  1000000          true   false        false        100        true  sample   56    157.747 ±   13.929  ms/op
LmdbJavaByteBuffer.write              N/A          N/A      true       false  1000000         false   false        false        100        true  sample   13    840.474 ±  115.549  ms/op
LmdbJavaByteBuffer.write              N/A          N/A     false       false  1000000          true   false        false        100        true  sample    9   1154.832 ±  188.374  ms/op
LmdbJavaByteBuffer.write              N/A          N/A     false       false  1000000         false   false        false        100        true  sample    9   2003.246 ±  290.526  ms/op
LmdbJni.readCrc                       N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample   71    134.098 ±    8.015  ms/op
LmdbJni.readCrc                       N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample   64    147.685 ±    6.304  ms/op
LmdbJni.readCrc                       N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample   65    149.888 ±    9.584  ms/op
LmdbJni.readCrc                       N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample   56    173.970 ±   10.851  ms/op
LmdbJni.readKey                       N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample   85    112.316 ±    5.302  ms/op
LmdbJni.readKey                       N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample   18    688.332 ±  100.136  ms/op
LmdbJni.readKey                       N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample    9   1217.280 ±  177.830  ms/op
LmdbJni.readKey                       N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample    9   2009.305 ±  239.948  ms/op
LmdbJni.readRev                       N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample  297     30.579 ±    1.220  ms/op
LmdbJni.readRev                       N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample  145     64.062 ±    2.758  ms/op
LmdbJni.readRev                       N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample  305     30.070 ±    1.100  ms/op
LmdbJni.readRev                       N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample  143     65.163 ±    3.503  ms/op
LmdbJni.readSeq                       N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample  216     42.434 ±    1.835  ms/op
LmdbJni.readSeq                       N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample  134     69.295 ±    3.924  ms/op
LmdbJni.readSeq                       N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample  235     39.072 ±    1.801  ms/op
LmdbJni.readSeq                       N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample  128     72.306 ±    3.481  ms/op
LmdbJni.readXxh64                     N/A          N/A      true         N/A  1000000          true     N/A        false        100        true  sample  147     63.240 ±    2.962  ms/op
LmdbJni.readXxh64                     N/A          N/A      true         N/A  1000000         false     N/A        false        100        true  sample  100     94.271 ±    6.030  ms/op
LmdbJni.readXxh64                     N/A          N/A     false         N/A  1000000          true     N/A        false        100        true  sample  143     64.262 ±    2.675  ms/op
LmdbJni.readXxh64                     N/A          N/A     false         N/A  1000000         false     N/A        false        100        true  sample  105     89.796 ±    4.325  ms/op
LmdbJni.write                         N/A          N/A      true       false  1000000          true   false        false        100        true  sample   60    144.808 ±   11.470  ms/op
LmdbJni.write                         N/A          N/A      true       false  1000000         false   false        false        100        true  sample   12    901.775 ±  135.720  ms/op
LmdbJni.write                         N/A          N/A     false       false  1000000          true   false        false        100        true  sample    9   1118.481 ±  137.937  ms/op
LmdbJni.write                         N/A          N/A     false       false  1000000         false   false        false        100        true  sample    9   2091.327 ±  311.884  ms/op
MapDb.readCrc                         N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample   52    180.592 ±    9.347  ms/op
MapDb.readCrc                         N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample   54    180.981 ±   14.664  ms/op
MapDb.readCrc                         N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample   46    207.857 ±   13.394  ms/op
MapDb.readCrc                         N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample   46    214.576 ±   13.557  ms/op
MapDb.readKey                         N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    9   9486.584 ± 2017.272  ms/op
MapDb.readKey                         N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    9  10364.591 ±  660.701  ms/op
MapDb.readKey                         N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    9   8869.555 ±  737.613  ms/op
MapDb.readKey                         N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    9  12266.009 ±  724.490  ms/op
MapDb.readRev                         N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample   82    118.836 ±   10.071  ms/op
MapDb.readRev                         N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample   83    115.819 ±    5.900  ms/op
MapDb.readRev                         N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample   80    118.845 ±    7.077  ms/op
MapDb.readRev                         N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample   76    126.126 ±    9.092  ms/op
MapDb.readSeq                         N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample   82    115.735 ±    8.995  ms/op
MapDb.readSeq                         N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample   88    108.023 ±    6.812  ms/op
MapDb.readSeq                         N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample   80    117.873 ±    7.077  ms/op
MapDb.readSeq                         N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample   81    116.623 ±   10.670  ms/op
MapDb.readXxh64                       N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample   67    144.479 ±    9.868  ms/op
MapDb.readXxh64                       N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample   67    139.353 ±   10.811  ms/op
MapDb.readXxh64                       N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample   62    156.052 ±   10.546  ms/op
MapDb.readXxh64                       N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample   68    144.694 ±    7.422  ms/op
MapDb.write                           N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    9   8959.033 ±  909.198  ms/op
MapDb.write                           N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    9   8827.612 ± 1018.418  ms/op
MapDb.write                           N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    9  12258.552 ± 1934.974  ms/op
MapDb.write                           N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    9  12172.802 ± 1276.891  ms/op
MvStore.readCrc                       N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample   18    566.085 ±   52.859  ms/op
MvStore.readCrc                       N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample   18    565.619 ±   36.587  ms/op
MvStore.readCrc                       N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample   18    740.702 ±   77.077  ms/op
MvStore.readCrc                       N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample   18    690.604 ±   53.213  ms/op
MvStore.readKey                       N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    9   7764.123 ±  255.212  ms/op
MvStore.readKey                       N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    9   8811.767 ±  603.526  ms/op
MvStore.readKey                       N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    9   1810.774 ±  280.019  ms/op
MvStore.readKey                       N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    9  10703.864 ±  527.443  ms/op
MvStore.readRev                       N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample   18    587.319 ±   42.884  ms/op
MvStore.readRev                       N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample   18    608.757 ±   61.830  ms/op
MvStore.readRev                       N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample   18    712.973 ±   72.209  ms/op
MvStore.readRev                       N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample   18    697.944 ±   61.248  ms/op
MvStore.readSeq                       N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample   24    482.170 ±   34.596  ms/op
MvStore.readSeq                       N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample   24    473.039 ±   29.963  ms/op
MvStore.readSeq                       N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample   18    606.718 ±   54.128  ms/op
MvStore.readSeq                       N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample   18    606.485 ±   73.009  ms/op
MvStore.readXxh64                     N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample   21    528.832 ±   44.218  ms/op
MvStore.readXxh64                     N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample   22    507.892 ±   35.134  ms/op
MvStore.readXxh64                     N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample   18    648.952 ±   58.881  ms/op
MvStore.readXxh64                     N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample   18    619.417 ±   58.764  ms/op
MvStore.write                         N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    9   1274.136 ±  119.783  ms/op
MvStore.write                         N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    9   1746.695 ±  286.239  ms/op
MvStore.write                         N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    9   1718.267 ±  343.566  ms/op
MvStore.write                         N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    9   2855.389 ±  491.104  ms/op
RocksDb.readCrc                       N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample   18    596.115 ±   62.120  ms/op
RocksDb.readCrc                       N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample   20    544.290 ±   60.010  ms/op
RocksDb.readCrc                       N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample   20    548.222 ±   67.601  ms/op
RocksDb.readCrc                       N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample   18    580.445 ±   51.371  ms/op
RocksDb.readKey                       N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    9   5194.412 ± 1803.070  ms/op
RocksDb.readKey                       N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    9  11602.377 ± 2744.338  ms/op
RocksDb.readKey                       N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    9   2965.373 ±  466.451  ms/op
RocksDb.readKey                       N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    9  15062.212 ± 5268.358  ms/op
RocksDb.readRev                       N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample   18    610.563 ±   57.513  ms/op
RocksDb.readRev                       N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample   18    591.455 ±   36.665  ms/op
RocksDb.readRev                       N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample   18    571.532 ±   38.430  ms/op
RocksDb.readRev                       N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample   18    638.932 ±   57.609  ms/op
RocksDb.readSeq                       N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample   27    390.497 ±   33.450  ms/op
RocksDb.readSeq                       N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample   27    391.604 ±   27.279  ms/op
RocksDb.readSeq                       N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample   27    361.895 ±   25.092  ms/op
RocksDb.readSeq                       N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample   27    398.051 ±   30.105  ms/op
RocksDb.readXxh64                     N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample   22    500.957 ±   47.053  ms/op
RocksDb.readXxh64                     N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample   23    492.489 ±   30.652  ms/op
RocksDb.readXxh64                     N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample   25    470.874 ±   43.577  ms/op
RocksDb.readXxh64                     N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample   22    526.195 ±   48.445  ms/op
RocksDb.write                         N/A          N/A      true         N/A  1000000          true     N/A        false        100         N/A  sample    9   1886.272 ±  247.613  ms/op
RocksDb.write                         N/A          N/A      true         N/A  1000000         false     N/A        false        100         N/A  sample    9   2085.268 ±  349.196  ms/op
RocksDb.write                         N/A          N/A     false         N/A  1000000          true     N/A        false        100         N/A  sample    9   3146.194 ±  510.651  ms/op
RocksDb.write                         N/A          N/A     false         N/A  1000000         false     N/A        false        100         N/A  sample    9   3882.527 ±  419.667  ms/op

Benchmark result is saved to out-4.csv
